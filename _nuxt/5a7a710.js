(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{1004:function(e,n,t){"use strict";(function(e){var r=this&&this.__createBinding||(Object.create?function(e,n,t,r){void 0===r&&(r=t),Object.defineProperty(e,r,{enumerable:!0,get:function(){return n[t]}})}:function(e,n,t,r){void 0===r&&(r=t),e[r]=n[t]}),d=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)"default"!==t&&Object.prototype.hasOwnProperty.call(e,t)&&r(n,e,t);return d(n,e),n},c=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.EthereumChainReader=void 0;const f=o(t(2891)),l=t(27),y=c(t(400)),m=t(50),h=t(199),v=t(486),T=t(1071),C=t(471);n.EthereumChainReader=class{constructor(e,n){this.chainProviders=e,this.log=n,this.transferRegistries=new Map}getChainProviders(){const e={};return Object.entries(this.chainProviders).forEach((([n,t])=>{e[parseInt(n)]=t.connection.url})),l.Result.ok(e)}getHydratedProviders(){return l.Result.ok(this.chainProviders)}async getSyncing(e){return await this.retryWrapper(e,(async e=>{try{const n=await e.send("eth_syncing",[]);return l.Result.ok(n)}catch(e){return l.Result.fail(e)}}))}async getChannelDispute(e,n){return await this.retryWrapper(n,(async t=>{try{const code=await this.getCode(e,n);if(code.isError)return l.Result.fail(code.getError());if("0x"===code.getValue())return l.Result.ok(void 0);const r=await new T.Contract(e,C.VectorChannel.abi,t).getChannelDispute();return r.channelStateHash===v.HashZero?l.Result.ok(void 0):l.Result.ok({channelStateHash:r.channelStateHash,nonce:r.nonce.toString(),merkleRoot:r.merkleRoot,consensusExpiry:r.consensusExpiry.toString(),defundExpiry:r.defundExpiry.toString(),defundNonce:r.defundNonce.toString()})}catch(e){return l.Result.fail(e)}}))}async getRegisteredTransferByDefinition(e,n,t,r){return await this.retryWrapper(t,(async d=>{let o=this.transferRegistries.get(t.toString());if(!this.transferRegistries.has(t.toString())){const e=await this.loadRegistry(n,t,r);if(e.isError)return l.Result.fail(e.getError());o=e.getValue()}const c=o.find((n=>n.definition===e));return c?l.Result.ok(c):l.Result.fail(new l.ChainError(l.ChainError.reasons.TransferNotRegistered,{definition:e,transferRegistry:n,chainId:t}))}))}async getRegisteredTransferByName(e,n,t,r){return await this.retryWrapper(t,(async d=>{let o=this.transferRegistries.get(t.toString());if(!o){const e=await this.loadRegistry(n,t,r);if(e.isError)return l.Result.fail(e.getError());o=e.getValue()}const c=o.find((n=>n.name===e));return c?l.Result.ok(c):l.Result.fail(new l.ChainError(l.ChainError.reasons.TransferNotRegistered,{name:e,transferRegistry:n,chainId:t}))}))}async getRegisteredTransfers(e,n,t){return await this.retryWrapper(n,(async()=>{let r=this.transferRegistries.get(n.toString());if(!r){const d=await this.loadRegistry(e,n,t);if(d.isError)return l.Result.fail(d.getError());r=d.getValue()}return l.Result.ok(r)}))}async getChannelFactoryBytecode(e,n){return await this.retryWrapper(n,(async n=>{try{const t=new T.Contract(e,C.ChannelFactory.abi,n),r=await t.getProxyCreationCode();return l.Result.ok(r)}catch(e){return l.Result.fail(e)}}))}async getChannelMastercopyAddress(e,n){return await this.retryWrapper(n,(async n=>{try{const t=new T.Contract(e,C.ChannelFactory.abi,n),r=await t.getMastercopy();return l.Result.ok(r)}catch(e){return l.Result.fail(e)}}))}async getTotalDepositedA(e,n,t){return await this.retryWrapper(n,(async r=>{const code=await this.getCode(e,n);if(code.isError)return l.Result.fail(code.getError());if("0x"===code.getValue())return l.Result.ok(h.BigNumber.from(0));const d=new T.Contract(e,C.ChannelMastercopy.abi,r);try{const e=await d.getTotalDepositsAlice(t);return l.Result.ok(e)}catch(e){return l.Result.fail(e)}}))}async getTotalDepositedB(e,n,t){return await this.retryWrapper(n,(async r=>{const code=await this.getCode(e,n);if(code.isError)return l.Result.fail(code.getError());if("0x"===code.getValue())return this.getOnchainBalance(t,e,n);const d=new T.Contract(e,C.ChannelMastercopy.abi,r);try{const e=await d.getTotalDepositsBob(t);return l.Result.ok(e)}catch(e){return l.Result.fail(e)}}))}async create(e,n,t,r,d,o){return await this.retryWrapper(d,(async c=>{const f=await this.getRegisteredTransferByDefinition(t,r,d,o);if(f.isError)return l.Result.fail(f.getError());let y,h;try{y=m.encodeTransferState(e,f.getValue().stateEncoding),h=m.encodeBalance(n)}catch(e){return l.Result.fail(e)}const v=new T.Contract(t,C.TransferDefinition.abi,c);if(o){const e=this.tryEvm(v.interface.encodeFunctionData("create",[h,y]),o);if(!e.isError){const n=v.interface.decodeFunctionResult("create",e.getValue())[0];return l.Result.ok(n)}}this.log.debug({transferDefinition:t},"Calling create onchain");try{const e=await v.create(h,y);return l.Result.ok(e)}catch(e){return l.Result.fail(e)}}))}async resolve(e,n,t){return await this.retryWrapper(n,(async n=>{let r,d,o;try{r=m.encodeTransferState(e.transferState,e.transferEncodings[0]),d=m.encodeTransferResolver(e.transferResolver,e.transferEncodings[1]),o=m.encodeBalance(e.balance)}catch(e){return l.Result.fail(e)}const c=new T.Contract(e.transferDefinition,C.TransferDefinition.abi,n);if(t){const e=this.tryEvm(c.interface.encodeFunctionData("resolve",[o,r,d]),t);if(!e.isError){const n=c.interface.decodeFunctionResult("resolve",e.getValue())[0];return l.Result.ok(n)}}this.log.debug({transferDefinition:e.transferDefinition,transferId:e.transferId},"Calling resolve onchain");try{const e=await c.resolve(o,r,d);return l.Result.ok({to:e.to,amount:e.amount.map((a=>a.toString()))})}catch(e){return l.Result.fail(e)}}))}async getChannelAddress(e,n,t,r){return await this.retryWrapper(r,(async r=>{const d=new T.Contract(t,C.ChannelFactory.abi,r);try{const t=await d.getChannelAddress(e,n);return l.Result.ok(t)}catch(e){return l.Result.fail(e)}}))}async getCode(address,e){return await this.retryWrapper(e,(async e=>{try{const code=await e.getCode(address);return l.Result.ok(code)}catch(e){return l.Result.fail(e)}}))}async getBlockNumber(e){return await this.retryWrapper(e,(async e=>{try{const n=await e.getBlockNumber();return l.Result.ok(n)}catch(e){return l.Result.fail(e)}}))}async getGasPrice(e){return await this.retryWrapper(e,(async n=>{let t;if(1===e)try{const e=await y.default.get("https://www.gasnow.org/api/v3/gas/price"),{rapid:n}=e.data;t=void 0!==n?h.BigNumber.from(n):void 0}catch(e){this.log.warn({error:e},"Gasnow failed, using provider")}if(!t)try{t=await n.getGasPrice()}catch(e){return l.Result.fail(e)}return l.Result.ok(t)}))}async estimateGas(e,n){return await this.retryWrapper(e,(async e=>{try{const t=await e.estimateGas(n);return l.Result.ok(t)}catch(e){return l.Result.fail(e)}}))}async getTokenAllowance(e,n,t,r){return await this.retryWrapper(r,(async r=>{const d=new T.Contract(e,l.ERC20Abi,r);try{const e=await d.allowance(n,t);return l.Result.ok(e)}catch(e){return l.Result.fail(e)}}))}async getOnchainBalance(e,n,t){return await this.retryWrapper(t,(async t=>{try{const r=e===v.AddressZero?await t.getBalance(n):await new T.Contract(e,l.ERC20Abi,t).balanceOf(n);return l.Result.ok(r)}catch(e){return l.Result.fail(e)}}))}async getDecimals(e,n){return await this.retryWrapper(n,(async n=>{try{const t=e===v.AddressZero?18:await new T.Contract(e,l.ERC20Abi,n).decimals();return l.Result.ok(t)}catch(e){return l.Result.fail(e)}}))}async getWithdrawalTransactionRecord(e,n,t){return await this.retryWrapper(t,(async r=>{const code=await this.getCode(n,t);if(code.isError)return l.Result.fail(code.getError());if("0x"===code.getValue())return l.Result.ok(!1);const d=new T.Contract(n,C.VectorChannel.abi,r);try{const t=await d.getWithdrawalTransactionRecord({channelAddress:n,assetId:e.assetId,recipient:e.recipient,amount:e.amount,nonce:e.nonce,callTo:e.callTo,callData:e.callData});return l.Result.ok(t)}catch(e){return l.Result.fail(e)}}))}tryEvm(n,t){try{const output=((n,t)=>f.exec(Uint8Array.from(e.from(n.replace(/^0x/,""),"hex")),Uint8Array.from(e.from(t.replace(/^0x/,""),"hex"))))(t,n);return l.Result.ok(output)}catch(e){return this.log.debug({error:e.message},"Pure-evm failed"),l.Result.fail(e)}}async loadRegistry(e,n,t){return await this.retryWrapper(n,(async r=>{const d=new T.Contract(e,C.TransferRegistry.abi,r);let o;if(t){const e=this.tryEvm(d.interface.encodeFunctionData("getTransferDefinitions"),t);if(!e.isError)try{o=d.interface.decodeFunctionResult("getTransferDefinitions",e.getValue())[0]}catch(e){}}if(!o)try{o=await d.getTransferDefinitions()}catch(t){return l.Result.fail(new l.ChainError(t.message,{chainId:n,transferRegistry:e}))}const c=o.map((e=>({name:e.name,definition:e.definition,stateEncoding:l.tidy(e.stateEncoding),resolverEncoding:l.tidy(e.resolverEncoding),encodedCancel:e.encodedCancel})));return this.transferRegistries.set(n.toString(),c),l.Result.ok(c)}))}async retryWrapper(e,n){var t,r;const d=this.chainProviders[e];if(!d)return l.Result.fail(new l.ChainError(l.ChainError.reasons.ProviderNotFound));let o,c=await n(d);const f={};if(!c.isError)return c;for(f[0]=null===(t=c.getError())||void 0===t?void 0:t.message,o=1;o<l.ETH_READER_MAX_RETRIES&&(c=await n(d),c.isError);o++)f[o]=null===(r=c.getError())||void 0===r?void 0:r.message;return c.isError?l.Result.fail(new l.ChainError("Could not execute rpc method",{chainId:e,errors:f})):c}}}).call(this,t(9).Buffer)},2790:function(e,n,t){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,n,t,r){void 0===r&&(r=t),Object.defineProperty(e,r,{enumerable:!0,get:function(){return n[t]}})}:function(e,n,t,r){void 0===r&&(r=t),e[r]=n[t]}),d=this&&this.__exportStar||function(e,n){for(var p in e)"default"===p||Object.prototype.hasOwnProperty.call(n,p)||r(n,e,p)};Object.defineProperty(n,"__esModule",{value:!0}),d(t(2791),n)},2791:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.WithdrawCommitment=void 0;const r=t(27),d=t(50),o=t(486),c=t(640),f=t(2792),l=t(471);class y{constructor(e,n,t,r,d,c,f,l=o.AddressZero,y="0x",m){this.channelAddress=e,this.alice=n,this.bob=t,this.recipient=r,this.assetId=d,this.amount=c,this.nonce=f,this.callTo=l,this.callData=y,this.transactionHash=m}get signatures(){const e=[];return this.aliceSignature&&e.push(this.aliceSignature),this.bobSignature&&e.push(this.bobSignature),e}toJson(){return{aliceSignature:this.aliceSignature,bobSignature:this.bobSignature,channelAddress:this.channelAddress,alice:this.alice,bob:this.bob,recipient:this.recipient,assetId:this.assetId,amount:this.amount,nonce:this.nonce,callTo:this.callTo,callData:this.callData,transactionHash:this.transactionHash}}addTransaction(e){this.transactionHash=e}static async fromJson(e){const n=new y(e.channelAddress,e.alice,e.bob,e.recipient,e.assetId,e.amount,e.nonce,e.callTo,e.callData,e.transactionHash);return(e.aliceSignature||e.bobSignature)&&await n.addSignatures(e.aliceSignature,e.bobSignature),n}getCallData(){return{to:this.callTo,data:this.callData}}getWithdrawData(){return[this.channelAddress,this.assetId,this.recipient,this.amount,this.nonce,this.callTo,this.callData]}hashToSign(){const e=c.defaultAbiCoder.encode([r.WithdrawDataEncoding],[this.getWithdrawData()]),n=f.keccak256(["bytes"],[e]),t=c.defaultAbiCoder.encode(["uint8","bytes32"],[r.ChannelCommitmentTypes.WithdrawData,n]);return f.keccak256(["bytes"],[t])}getSignedTransaction(){if(!this.signatures||0===this.signatures.length)throw new Error("No signatures detected");const data=new c.Interface(l.ChannelMastercopy.abi).encodeFunctionData("withdraw",[this.getWithdrawData(),this.aliceSignature,this.bobSignature]);return{to:this.channelAddress,value:0,data:data}}async addSignatures(e,n){const t=this.hashToSign();for(const r of[e,n]){if(!r)continue;let e;try{e=await d.recoverAddressFromChannelMessage(t,r)}catch(n){e=n.message}if(e!==this.alice&&e!==this.bob)throw new Error(`Invalid signer detected. Got ${e}, expected one of: ${this.alice} / ${this.bob}`);this.aliceSignature=e===this.alice?r:this.aliceSignature,this.bobSignature=e===this.bob?r:this.bobSignature}}}n.WithdrawCommitment=y},2793:function(e,n,t){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,n,t,r){void 0===r&&(r=t),Object.defineProperty(e,r,{enumerable:!0,get:function(){return n[t]}})}:function(e,n,t,r){void 0===r&&(r=t),e[r]=n[t]}),d=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)"default"!==t&&Object.prototype.hasOwnProperty.call(e,t)&&r(n,e,t);return d(n,e),n};Object.defineProperty(n,"__esModule",{value:!0}),n.deployments=void 0,n.deployments={};const c={ChannelFactory:o(t(2794)),ChannelMastercopy:o(t(2795)),HashlockTransfer:o(t(2796)),TestToken:o(t(2797)),TransferRegistry:o(t(2798)),Withdraw:o(t(2799))};n.deployments.mainnet=c,n.deployments[1]=c;const f={ChannelFactory:o(t(2800)),ChannelMastercopy:o(t(2801)),HashlockTransfer:o(t(2802)),TestToken:o(t(2803)),TransferRegistry:o(t(2804)),Withdraw:o(t(2805))};n.deployments.rinkeby=f,n.deployments[4]=f;const l={ChannelFactory:o(t(2806)),ChannelMastercopy:o(t(2807)),HashlockTransfer:o(t(2808)),TestToken:o(t(2809)),TransferRegistry:o(t(2810)),Withdraw:o(t(2811))};n.deployments.goerli=l,n.deployments[5]=l;const y={ChannelFactory:o(t(2812)),ChannelMastercopy:o(t(2813)),HashlockTransfer:o(t(2814)),TestToken:o(t(2815)),TransferRegistry:o(t(2816)),Withdraw:o(t(2817))};n.deployments.kovan=y,n.deployments[42]=y;const m={ChannelFactory:o(t(2818)),ChannelMastercopy:o(t(2819)),HashlockTransfer:o(t(2820)),TestToken:o(t(2821)),TransferRegistry:o(t(2822)),Withdraw:o(t(2823))};n.deployments.matic=m,n.deployments[137]=m;const h={ChannelFactory:o(t(2824)),ChannelMastercopy:o(t(2825)),HashlockTransfer:o(t(2826)),TestToken:o(t(2827)),TransferRegistry:o(t(2828)),Withdraw:o(t(2829))};n.deployments.mumbai=h,n.deployments[80001]=h;const v={ChannelFactory:o(t(2830)),ChannelMastercopy:o(t(2831)),HashlockTransfer:o(t(2832)),TestToken:o(t(2833)),TransferRegistry:o(t(2834)),Withdraw:o(t(2835))};n.deployments.arbitrumtest=v,n.deployments[79377087078960]=v;const T={ChannelFactory:o(t(2836)),ChannelMastercopy:o(t(2837)),HashlockTransfer:o(t(2838)),TestToken:o(t(2839)),TransferRegistry:o(t(2840)),Withdraw:o(t(2841))};n.deployments.xdai=T,n.deployments[100]=T;const C={ChannelFactory:o(t(2842)),ChannelMastercopy:o(t(2843)),HashlockTransfer:o(t(2844)),TestToken:o(t(2845)),TransferRegistry:o(t(2846)),Withdraw:o(t(2847))};n.deployments.bsctestnet=C,n.deployments[97]=C;const w={ChannelFactory:o(t(2848)),ChannelMastercopy:o(t(2849)),HashlockTransfer:o(t(2850)),TestToken:o(t(2851)),TransferRegistry:o(t(2852)),Withdraw:o(t(2853))};n.deployments.bsc=w,n.deployments[56]=w;const I={ChannelFactory:o(t(2854)),ChannelMastercopy:o(t(2855)),HashlockTransfer:o(t(2856)),TestToken:o(t(2857)),TransferRegistry:o(t(2858)),Withdraw:o(t(2859))};n.deployments.hecotestnet=I,n.deployments[256]=I;const E={ChannelFactory:o(t(2860)),ChannelMastercopy:o(t(2861)),HashlockTransfer:o(t(2862)),TestToken:o(t(2863)),TransferRegistry:o(t(2864)),Withdraw:o(t(2865))};n.deployments.heco=E,n.deployments[128]=E;const x={ChannelFactory:o(t(2866)),ChannelMastercopy:o(t(2867)),HashlockTransfer:o(t(2868)),TestToken:o(t(2869)),TransferRegistry:o(t(2870)),Withdraw:o(t(2871))};n.deployments.avalanchefuji=x,n.deployments[43113]=x;const S={ChannelFactory:o(t(2872)),ChannelMastercopy:o(t(2873)),HashlockTransfer:o(t(2874)),TestToken:o(t(2875)),TransferRegistry:o(t(2876)),Withdraw:o(t(2877))};n.deployments.avalanche=S,n.deployments[43114]=S;const A={ChannelFactory:o(t(2878)),ChannelMastercopy:o(t(2879)),HashlockTransfer:o(t(2880)),TestToken:o(t(2881)),TransferRegistry:o(t(2882)),Withdraw:o(t(2883))};n.deployments.fantom=A,n.deployments[250]=A;const D={ChannelFactory:o(t(2884)),ChannelMastercopy:o(t(2885)),HashlockTransfer:o(t(2886)),TestToken:o(t(2887)),TransferRegistry:o(t(2888)),Withdraw:o(t(2889))};n.deployments.moonbasealpha=D,n.deployments[1287]=D},2794:function(e){e.exports=JSON.parse('{"address":"0xe561583d3A0dba55569Da8ff2e51a74d435eF372","abi":[{"inputs":[{"internalType":"address","name":"_mastercopy","type":"address"},{"internalType":"uint256","name":"_chainId","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"channel","type":"address"}],"name":"ChannelCreation","type":"event"},{"inputs":[{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"}],"name":"createChannel","outputs":[{"internalType":"address","name":"channel","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"createChannelAndDepositAlice","outputs":[{"internalType":"address","name":"channel","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"getChainId","outputs":[{"internalType":"uint256","name":"_chainId","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"}],"name":"getChannelAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMastercopy","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getProxyCreationCode","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStoredChainId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"transactionHash":"0x9d33a799476a2241a0c8ea88426bd59a1484a943307d73347bf83133c911db15","receipt":{"to":null,"from":"0xd4b33434Cb36df9286Ef5132FCFb8062c96aC56E","contractAddress":"0xe561583d3A0dba55569Da8ff2e51a74d435eF372","transactionIndex":45,"gasUsed":"677184","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","blockHash":"0x17a701525eba6de4e7c4b972d3944e8323c63f5208371eeb1630aef383ecc801","transactionHash":"0x9d33a799476a2241a0c8ea88426bd59a1484a943307d73347bf83133c911db15","logs":[],"blockNumber":11551518,"cumulativeGasUsed":"11932359","status":1,"byzantium":true},"args":["0xd105b6B42206dfA6Db00E6a4823bC88eFAC00476","0"],"solcInputHash":"89c55d5a88f10637860a9ea31a1daad3","metadata":"{\\"compiler\\":{\\"version\\":\\"0.7.1+commit.f4a555be\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_mastercopy\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_chainId\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"channel\\",\\"type\\":\\"address\\"}],\\"name\\":\\"ChannelCreation\\",\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"}],\\"name\\":\\"createChannel\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channel\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"createChannelAndDepositAlice\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channel\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"payable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getChainId\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_chainId\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getChannelAddress\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getMastercopy\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getProxyCreationCode\\",\\"outputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"\\",\\"type\\":\\"bytes\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getStoredChainId\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"author\\":\\"Connext <support@connext.network>\\",\\"kind\\":\\"dev\\",\\"methods\\":{\\"constructor\\":{\\"details\\":\\"Creates a new `ChannelFactory`\\",\\"params\\":{\\"_chainId\\":\\"the chain identifier when generating the CREATE2 salt. If zero, the chain identifier used in the proxy salt will be the result of the opcode\\",\\"_mastercopy\\":\\"the address of the `ChannelMastercopy` (channel logic)\\"}},\\"createChannel(address,address)\\":{\\"details\\":\\"Allows us to create new channel contract and get it all set up in one transaction\\",\\"params\\":{\\"alice\\":\\"address of the high fidelity channel participant\\",\\"bob\\":\\"address of the other channel participant\\"}},\\"createChannelAndDepositAlice(address,address,address,uint256)\\":{\\"details\\":\\"Allows us to create a new channel contract and fund it in one transaction\\",\\"params\\":{\\"bob\\":\\"address of the other channel participant\\"}},\\"getChainId()\\":{\\"details\\":\\"Allows us to get the chainId that this factory will use in the create2 salt\\"},\\"getChannelAddress(address,address)\\":{\\"details\\":\\"Allows us to get the address for a new channel contract created via `createChannel`\\",\\"params\\":{\\"alice\\":\\"address of the igh fidelity channel participant\\",\\"bob\\":\\"address of the other channel participant\\"}},\\"getMastercopy()\\":{\\"details\\":\\"Allows us to get the mastercopy that this factory will deploy channels against\\"},\\"getProxyCreationCode()\\":{\\"details\\":\\"Returns the proxy code used to both calculate the CREATE2 address and deploy the channel proxy pointed to the `ChannelMastercopy`\\"},\\"getStoredChainId()\\":{\\"details\\":\\"Allows us to get the chainId that this factory has stored\\"}},\\"title\\":\\"ChannelFactory\\",\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"notice\\":\\"Creates and sets up a new channel proxy contract\\",\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"src.sol/ChannelFactory.sol\\":\\"ChannelFactory\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Returns the amount of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender\'s allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\\\n     * allowance mechanism. `amount` is then deducted from the caller\'s\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Address.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Collection of functions related to the address type\\\\n */\\\\nlibrary Address {\\\\n    /**\\\\n     * @dev Returns true if `account` is a contract.\\\\n     *\\\\n     * [IMPORTANT]\\\\n     * ====\\\\n     * It is unsafe to assume that an address for which this function returns\\\\n     * false is an externally-owned account (EOA) and not a contract.\\\\n     *\\\\n     * Among others, `isContract` will return false for the following\\\\n     * types of addresses:\\\\n     *\\\\n     *  - an externally-owned account\\\\n     *  - a contract in construction\\\\n     *  - an address where a contract will be created\\\\n     *  - an address where a contract lived, but was destroyed\\\\n     * ====\\\\n     */\\\\n    function isContract(address account) internal view returns (bool) {\\\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\\\n        // for accounts without code, i.e. `keccak256(\'\')`\\\\n        bytes32 codehash;\\\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\\\n        // solhint-disable-next-line no-inline-assembly\\\\n        assembly { codehash := extcodehash(account) }\\\\n        return (codehash != accountHash && codehash != 0x0);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\\\\n     * `recipient`, forwarding all available gas and reverting on errors.\\\\n     *\\\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\\\n     * imposed by `transfer`, making them unable to receive funds via\\\\n     * `transfer`. {sendValue} removes this limitation.\\\\n     *\\\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\\\n     *\\\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\\\n     * taken to not create reentrancy vulnerabilities. Consider using\\\\n     * {ReentrancyGuard} or the\\\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\\\n     */\\\\n    function sendValue(address payable recipient, uint256 amount) internal {\\\\n        require(address(this).balance >= amount, \\\\\\"Address: insufficient balance\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\\\n        (bool success, ) = recipient.call{ value: amount }(\\\\\\"\\\\\\");\\\\n        require(success, \\\\\\"Address: unable to send value, recipient may have reverted\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Performs a Solidity function call using a low level `call`. A\\\\n     * plain`call` is an unsafe replacement for a function call: use this\\\\n     * function instead.\\\\n     *\\\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\\\n     * function (like regular Solidity function calls).\\\\n     *\\\\n     * Returns the raw returned data. To convert to the expected return value,\\\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `target` must be a contract.\\\\n     * - calling `target` with `data` must not revert.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n      return functionCall(target, data, \\\\\\"Address: low-level call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but also transferring `value` wei to `target`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the calling contract must have an ETH balance of at least `value`.\\\\n     * - the called Solidity function must be `payable`.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, value, \\\\\\"Address: low-level call with value failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\\\n        require(address(this).balance >= value, \\\\\\"Address: insufficient balance for call\\\\\\");\\\\n        return _functionCallWithValue(target, data, value, errorMessage);\\\\n    }\\\\n\\\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: call to non-contract\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls\\\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\\\n        if (success) {\\\\n            return returndata;\\\\n        } else {\\\\n            // Look for revert reason and bubble it up if present\\\\n            if (returndata.length > 0) {\\\\n                // The easiest way to bubble the revert reason is using memory via assembly\\\\n\\\\n                // solhint-disable-next-line no-inline-assembly\\\\n                assembly {\\\\n                    let returndata_size := mload(returndata)\\\\n                    revert(add(32, returndata), returndata_size)\\\\n                }\\\\n            } else {\\\\n                revert(errorMessage);\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x698f929f1097637d051976b322a2d532c27df022b09010e8d091e2888a5ebdf8\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Create2.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\\\n * `CREATE2` can be used to compute in advance the address where a smart\\\\n * contract will be deployed, which allows for interesting new mechanisms known\\\\n * as \'counterfactual interactions\'.\\\\n *\\\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\\\n * information.\\\\n */\\\\nlibrary Create2 {\\\\n    /**\\\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\\\n     * will be deployed can be known in advance via {computeAddress}.\\\\n     *\\\\n     * The bytecode for a contract can be obtained from Solidity with\\\\n     * `type(contractName).creationCode`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `bytecode` must not be empty.\\\\n     * - `salt` must have not been used for `bytecode` already.\\\\n     * - the factory must have a balance of at least `amount`.\\\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\\\n     */\\\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\\\\n        address addr;\\\\n        require(address(this).balance >= amount, \\\\\\"Create2: insufficient balance\\\\\\");\\\\n        require(bytecode.length != 0, \\\\\\"Create2: bytecode length is zero\\\\\\");\\\\n        // solhint-disable-next-line no-inline-assembly\\\\n        assembly {\\\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\\\n        }\\\\n        require(addr != address(0), \\\\\\"Create2: Failed on deploy\\\\\\");\\\\n        return addr;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\\\n     */\\\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\\\n        return computeAddress(salt, bytecodeHash, address(this));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\\\n     * `deployer`. If `deployer` is this contract\'s address, returns the same value as {computeAddress}.\\\\n     */\\\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\\\\n        bytes32 _data = keccak256(\\\\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\\\\n        );\\\\n        return address(uint256(_data));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x539295edd21ad514c0b1a0d1c89ada0831942f379ea83b6eb85769211fc7937e\\",\\"license\\":\\"MIT\\"},\\"src.sol/ChannelFactory.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Create2.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./interfaces/IChannelFactory.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/IVectorChannel.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibAsset.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibERC20.sol\\\\\\";\\\\n\\\\n/// @title ChannelFactory\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Creates and sets up a new channel proxy contract\\\\ncontract ChannelFactory is IChannelFactory {\\\\n    // Creation code constants taken from EIP1167\\\\n    bytes private constant proxyCreationCodePrefix =\\\\n        hex\\\\\\"3d602d80600a3d3981f3_363d3d373d3d3d363d73\\\\\\";\\\\n    bytes private constant proxyCreationCodeSuffix =\\\\n        hex\\\\\\"5af43d82803e903d91602b57fd5bf3\\\\\\";\\\\n\\\\n    bytes32 private creationCodeHash;\\\\n    address private immutable mastercopy;\\\\n    uint256 private immutable chainId;\\\\n\\\\n    /// @dev Creates a new `ChannelFactory`\\\\n    /// @param _mastercopy the address of the `ChannelMastercopy` (channel logic)\\\\n    /// @param _chainId the chain identifier when generating the CREATE2 salt. If zero, the chain identifier used in the proxy salt will be the result of the opcode\\\\n    constructor(address _mastercopy, uint256 _chainId) {\\\\n        mastercopy = _mastercopy;\\\\n        chainId = _chainId;\\\\n        creationCodeHash = keccak256(_getProxyCreationCode(_mastercopy));\\\\n    }\\\\n\\\\n    ////////////////////////////////////////\\\\n    // Public Methods\\\\n\\\\n    /// @dev Allows us to get the mastercopy that this factory will deploy channels against\\\\n    function getMastercopy() external view override returns (address) {\\\\n        return mastercopy;\\\\n    }\\\\n\\\\n    /// @dev Allows us to get the chainId that this factory will use in the create2 salt\\\\n    function getChainId() public view override returns (uint256 _chainId) {\\\\n        // Hold in memory to reduce sload calls\\\\n        uint256 chain = chainId;\\\\n        if (chain == 0) {\\\\n            assembly {\\\\n                _chainId := chainid()\\\\n            }\\\\n        } else {\\\\n            _chainId = chain;\\\\n        }\\\\n    }\\\\n\\\\n    /// @dev Allows us to get the chainId that this factory has stored\\\\n    function getStoredChainId() external view override returns (uint256) {\\\\n        return chainId;\\\\n    }\\\\n\\\\n    /// @dev Returns the proxy code used to both calculate the CREATE2 address and deploy the channel proxy pointed to the `ChannelMastercopy`\\\\n    function getProxyCreationCode()\\\\n        public\\\\n        view\\\\n        override\\\\n        returns (bytes memory)\\\\n    {\\\\n        return _getProxyCreationCode(mastercopy);\\\\n    }\\\\n\\\\n    /// @dev Allows us to get the address for a new channel contract created via `createChannel`\\\\n    /// @param alice address of the igh fidelity channel participant\\\\n    /// @param bob address of the other channel participant\\\\n    function getChannelAddress(address alice, address bob)\\\\n        external\\\\n        view\\\\n        override\\\\n        returns (address)\\\\n    {\\\\n        return\\\\n            Create2.computeAddress(\\\\n                generateSalt(alice, bob),\\\\n                creationCodeHash\\\\n            );\\\\n    }\\\\n\\\\n    /// @dev Allows us to create new channel contract and get it all set up in one transaction\\\\n    /// @param alice address of the high fidelity channel participant\\\\n    /// @param bob address of the other channel participant\\\\n    function createChannel(address alice, address bob)\\\\n        public\\\\n        override\\\\n        returns (address channel)\\\\n    {\\\\n        channel = deployChannelProxy(alice, bob);\\\\n        IVectorChannel(channel).setup(alice, bob);\\\\n        emit ChannelCreation(channel);\\\\n    }\\\\n\\\\n    /// @dev Allows us to create a new channel contract and fund it in one transaction\\\\n    /// @param bob address of the other channel participant\\\\n    function createChannelAndDepositAlice(\\\\n        address alice,\\\\n        address bob,\\\\n        address assetId,\\\\n        uint256 amount\\\\n    ) external payable override returns (address channel) {\\\\n        channel = createChannel(alice, bob);\\\\n        // Deposit funds (if a token) must be approved for the\\\\n        // `ChannelFactory`, which then claims the funds and transfers\\\\n        // to the channel address. While this is inefficient, this is\\\\n        // the safest/clearest way to transfer funds\\\\n        if (!LibAsset.isEther(assetId)) {\\\\n            require(\\\\n                LibERC20.transferFrom(\\\\n                    assetId,\\\\n                    msg.sender,\\\\n                    address(this),\\\\n                    amount\\\\n                ),\\\\n                \\\\\\"ChannelFactory: ERC20_TRANSFER_FAILED\\\\\\"\\\\n            );\\\\n            require(\\\\n                LibERC20.approve(assetId, address(channel), amount),\\\\n                \\\\\\"ChannelFactory: ERC20_APPROVE_FAILED\\\\\\"\\\\n            );\\\\n        }\\\\n        IVectorChannel(channel).depositAlice{value: msg.value}(assetId, amount);\\\\n    }\\\\n\\\\n    ////////////////////////////////////////\\\\n    // Internal Methods\\\\n\\\\n    function _getProxyCreationCode(address _mastercopy) internal pure returns (bytes memory) {\\\\n      return abi.encodePacked(\\\\n                proxyCreationCodePrefix,\\\\n                _mastercopy,\\\\n                proxyCreationCodeSuffix\\\\n            );\\\\n    }\\\\n\\\\n    /// @dev Allows us to create new channel contact using CREATE2\\\\n    /// @param alice address of the high fidelity participant in the channel\\\\n    /// @param bob address of the other channel participant\\\\n    function deployChannelProxy(address alice, address bob)\\\\n        internal\\\\n        returns (address)\\\\n    {\\\\n        bytes32 salt = generateSalt(alice, bob);\\\\n        return Create2.deploy(0, salt, getProxyCreationCode());\\\\n    }\\\\n\\\\n    /// @dev Generates the unique salt for calculating the CREATE2 address of the channel proxy\\\\n    function generateSalt(address alice, address bob)\\\\n        internal\\\\n        view\\\\n        returns (bytes32)\\\\n    {\\\\n        return keccak256(abi.encodePacked(alice, bob, getChainId()));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x9b30b13dd79eea72eadd2bec3eba0f515929259a21d2ece6b982703c280e532a\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCAdjudicator.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./Types.sol\\\\\\";\\\\n\\\\ninterface ICMCAdjudicator {\\\\n    struct CoreChannelState {\\\\n        address channelAddress;\\\\n        address alice;\\\\n        address bob;\\\\n        address[] assetIds;\\\\n        Balance[] balances;\\\\n        uint256[] processedDepositsA;\\\\n        uint256[] processedDepositsB;\\\\n        uint256[] defundNonces;\\\\n        uint256 timeout;\\\\n        uint256 nonce;\\\\n        bytes32 merkleRoot;\\\\n    }\\\\n\\\\n    struct CoreTransferState {\\\\n        address channelAddress;\\\\n        bytes32 transferId;\\\\n        address transferDefinition;\\\\n        address initiator;\\\\n        address responder;\\\\n        address assetId;\\\\n        Balance balance;\\\\n        uint256 transferTimeout;\\\\n        bytes32 initialStateHash;\\\\n    }\\\\n\\\\n    struct ChannelDispute {\\\\n        bytes32 channelStateHash;\\\\n        uint256 nonce;\\\\n        bytes32 merkleRoot;\\\\n        uint256 consensusExpiry;\\\\n        uint256 defundExpiry;\\\\n    }\\\\n\\\\n    struct TransferDispute {\\\\n        bytes32 transferStateHash;\\\\n        uint256 transferDisputeExpiry;\\\\n        bool isDefunded;\\\\n    }\\\\n\\\\n    event ChannelDisputed(\\\\n        address disputer,\\\\n        CoreChannelState state,\\\\n        ChannelDispute dispute\\\\n    );\\\\n\\\\n    event ChannelDefunded(\\\\n        address defunder,\\\\n        CoreChannelState state,\\\\n        ChannelDispute dispute,\\\\n        address[] assetIds\\\\n    );\\\\n\\\\n    event TransferDisputed(\\\\n        address disputer,\\\\n        CoreTransferState state,\\\\n        TransferDispute dispute\\\\n    );\\\\n\\\\n    event TransferDefunded(\\\\n        address defunder,\\\\n        CoreTransferState state,\\\\n        TransferDispute dispute,\\\\n        bytes encodedInitialState,\\\\n        bytes encodedResolver,\\\\n        Balance balance\\\\n    );\\\\n\\\\n    function getChannelDispute() external view returns (ChannelDispute memory);\\\\n\\\\n    function getDefundNonce(address assetId) external view returns (uint256);\\\\n\\\\n    function getTransferDispute(bytes32 transferId)\\\\n        external\\\\n        view\\\\n        returns (TransferDispute memory);\\\\n\\\\n    function disputeChannel(\\\\n        CoreChannelState calldata ccs,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) external;\\\\n\\\\n    function defundChannel(\\\\n        CoreChannelState calldata ccs,\\\\n        address[] calldata assetIds,\\\\n        uint256[] calldata indices\\\\n    ) external;\\\\n\\\\n    function disputeTransfer(\\\\n        CoreTransferState calldata cts,\\\\n        bytes32[] calldata merkleProofData\\\\n    ) external;\\\\n\\\\n    function defundTransfer(\\\\n        CoreTransferState calldata cts,\\\\n        bytes calldata encodedInitialTransferState,\\\\n        bytes calldata encodedTransferResolver,\\\\n        bytes calldata responderSignature\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x88522bb51c2b9991b24ef33a3c776ac76d96060ebbc33cd5b2b14513fb21d237\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCAsset.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface ICMCAsset {\\\\n    function getTotalTransferred(address assetId)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function getExitableAmount(address assetId, address owner)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function exit(\\\\n        address assetId,\\\\n        address owner,\\\\n        address payable recipient\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x895d89536e8ca469afe642b7001f0dfff497ce29d5d73f862b07a1cdc483f3f7\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCCore.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface ICMCCore {\\\\n    function setup(address _alice, address _bob) external;\\\\n\\\\n    function getAlice() external view returns (address);\\\\n\\\\n    function getBob() external view returns (address);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x8e8da2d8fb5198441ba6cdff018dff9e4145b07d575647c990659adad637ec8c\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCDeposit.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface ICMCDeposit {\\\\n    event AliceDeposited(address assetId, uint256 amount);\\\\n    \\\\n    function getTotalDepositsAlice(address assetId)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function getTotalDepositsBob(address assetId)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function depositAlice(address assetId, uint256 amount) external payable;\\\\n}\\\\n\\",\\"keccak256\\":\\"0xdf6f284e44d88013cf9d51220315fb37e63086e470442685891c90aadd138295\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCWithdraw.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nstruct WithdrawData {\\\\n    address channelAddress;\\\\n    address assetId;\\\\n    address payable recipient;\\\\n    uint256 amount;\\\\n    uint256 nonce;\\\\n    address callTo;\\\\n    bytes callData;\\\\n}\\\\n\\\\ninterface ICMCWithdraw {\\\\n    function getWithdrawalTransactionRecord(WithdrawData calldata wd)\\\\n        external\\\\n        view\\\\n        returns (bool);\\\\n\\\\n    function withdraw(\\\\n        WithdrawData calldata wd,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x097dfe95ad19096f9a3dd0138b4a51680c26e665d1639278a7c0a5c9f7fc5c78\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/IChannelFactory.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface IChannelFactory {\\\\n    event ChannelCreation(address channel);\\\\n\\\\n    function getMastercopy() external view returns (address);\\\\n\\\\n    function getChainId() external view returns (uint256);\\\\n\\\\n    function getStoredChainId() external view returns (uint256);\\\\n\\\\n    function getProxyCreationCode() external view returns (bytes memory);\\\\n\\\\n    function getChannelAddress(address alice, address bob)\\\\n        external\\\\n        view\\\\n        returns (address);\\\\n\\\\n    function createChannel(address alice, address bob)\\\\n        external\\\\n        returns (address);\\\\n\\\\n    function createChannelAndDepositAlice(\\\\n        address alice,\\\\n        address bob,\\\\n        address assetId,\\\\n        uint256 amount\\\\n    ) external payable returns (address);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x2330bd554f878feb2494fb9dd830a1707865b63cfd6471a8dad1e5912ebf72ea\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/IVectorChannel.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./ICMCCore.sol\\\\\\";\\\\nimport \\\\\\"./ICMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./ICMCDeposit.sol\\\\\\";\\\\nimport \\\\\\"./ICMCWithdraw.sol\\\\\\";\\\\nimport \\\\\\"./ICMCAdjudicator.sol\\\\\\";\\\\n\\\\ninterface IVectorChannel is\\\\n    ICMCCore,\\\\n    ICMCAsset,\\\\n    ICMCDeposit,\\\\n    ICMCWithdraw,\\\\n    ICMCAdjudicator\\\\n{}\\\\n\\",\\"keccak256\\":\\"0x9e21e3b6510bb5aecab999bfcbefe6184bd2be5a80179ef8ecadb63ddd2c8d53\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/Types.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nstruct Balance {\\\\n    uint256[2] amount; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n    address payable[2] to; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf8c71b155b630cde965f5d1db5f0d2751a9763f5a797f15d946613e9224f1046\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibAsset.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./LibERC20.sol\\\\\\";\\\\nimport \\\\\\"./LibUtils.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\\\\";\\\\n\\\\n\\\\n/// @title LibAsset\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This library contains helpers for dealing with onchain transfers\\\\n///         of in-channel assets. It is designed to safely handle all asset\\\\n///         transfers out of channel in the event of an onchain dispute. Also\\\\n///         safely handles ERC20 transfers that may be non-compliant\\\\nlibrary LibAsset {\\\\n    address constant ETHER_ASSETID = address(0);\\\\n\\\\n    function isEther(address assetId) internal pure returns (bool) {\\\\n        return assetId == ETHER_ASSETID;\\\\n    }\\\\n\\\\n    function getOwnBalance(address assetId) internal view returns (uint256) {\\\\n        return\\\\n            isEther(assetId)\\\\n                ? address(this).balance\\\\n                : IERC20(assetId).balanceOf(address(this));\\\\n    }\\\\n\\\\n    function transferEther(address payable recipient, uint256 amount)\\\\n        internal\\\\n        returns (bool)\\\\n    {\\\\n        (bool success, bytes memory returnData) =\\\\n            recipient.call{value: amount}(\\\\\\"\\\\\\");\\\\n        LibUtils.revertIfCallFailed(success, returnData);\\\\n        return true;\\\\n    }\\\\n\\\\n    function transferERC20(\\\\n        address assetId,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return LibERC20.transfer(assetId, recipient, amount);\\\\n    }\\\\n\\\\n    // This function is a wrapper for transfers of Ether or ERC20 tokens,\\\\n    // both standard-compliant ones as well as tokens that exhibit the\\\\n    // missing-return-value bug.\\\\n    // Although it behaves very much like Solidity\'s `transfer` function\\\\n    // or the ERC20 `transfer` and is, in fact, designed to replace direct\\\\n    // usage of those, it is deliberately named `unregisteredTransfer`,\\\\n    // because we need to register every transfer out of the channel.\\\\n    // Therefore, it should normally not be used directly, with the single\\\\n    // exception of the `transferAsset` function in `CMCAsset.sol`,\\\\n    // which combines the \\\\\\"naked\\\\\\" unregistered transfer given below\\\\n    // with a registration.\\\\n    // USING THIS FUNCTION SOMEWHERE ELSE IS PROBABLY WRONG!\\\\n    function unregisteredTransfer(\\\\n        address assetId,\\\\n        address payable recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            isEther(assetId)\\\\n                ? transferEther(recipient, amount)\\\\n                : transferERC20(assetId, recipient, amount);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x02e7b660846ad2f56f8005f786e0e2eb1d625c83f4cfcf9fc07a9566ca86195c\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./LibUtils.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Address.sol\\\\\\";\\\\n\\\\n/// @title LibERC20\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This library provides several functions to safely handle\\\\n///         noncompliant tokens (i.e. does not return a boolean from\\\\n///         the transfer function)\\\\n\\\\nlibrary LibERC20 {\\\\n    function wrapCall(address assetId, bytes memory callData)\\\\n        internal\\\\n        returns (bool)\\\\n    {\\\\n        require(Address.isContract(assetId), \\\\\\"LibERC20: NO_CODE\\\\\\");\\\\n        (bool success, bytes memory returnData) = assetId.call(callData);\\\\n        LibUtils.revertIfCallFailed(success, returnData);\\\\n        return returnData.length == 0 || abi.decode(returnData, (bool));\\\\n    }\\\\n\\\\n    function approve(\\\\n        address assetId,\\\\n        address spender,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            wrapCall(\\\\n                assetId,\\\\n                abi.encodeWithSignature(\\\\n                    \\\\\\"approve(address,uint256)\\\\\\",\\\\n                    spender,\\\\n                    amount\\\\n                )\\\\n            );\\\\n    }\\\\n\\\\n    function transferFrom(\\\\n        address assetId,\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            wrapCall(\\\\n                assetId,\\\\n                abi.encodeWithSignature(\\\\n                    \\\\\\"transferFrom(address,address,uint256)\\\\\\",\\\\n                    sender,\\\\n                    recipient,\\\\n                    amount\\\\n                )\\\\n            );\\\\n    }\\\\n\\\\n    function transfer(\\\\n        address assetId,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            wrapCall(\\\\n                assetId,\\\\n                abi.encodeWithSignature(\\\\n                    \\\\\\"transfer(address,uint256)\\\\\\",\\\\n                    recipient,\\\\n                    amount\\\\n                )\\\\n            );\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x5bad1474c93a295939c23f976786f0d086abc063f19ff9c8c1d069759c4a7ff5\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibUtils.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\n/// @title LibUtils\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains a helper to revert if a call was not successfully\\\\n///         made\\\\nlibrary LibUtils {\\\\n    // If success is false, reverts and passes on the revert string.\\\\n    function revertIfCallFailed(bool success, bytes memory returnData)\\\\n        internal\\\\n        pure\\\\n    {\\\\n        if (!success) {\\\\n            assembly {\\\\n                revert(add(returnData, 0x20), mload(returnData))\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf31897ed92b88739ca9c6e74d089e01c5dbf432183d2ab0b959b539842374ccd\\",\\"license\\":\\"UNLICENSED\\"}},\\"version\\":1}","bytecode":"0x60c060405234801561001057600080fd5b50604051610c8f380380610c8f83398101604081905261002f916100eb565b6001600160601b0319606083901b1660805260a081905261004f82610062565b8051602090910120600055506101909050565b60606040518060400160405280601481526020017f3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000815250826040518060400160405280600f81526020016e5af43d82803e903d91602b57fd5bf360881b8152506040516020016100d59392919061015c565b6040516020818303038152906040529050919050565b600080604083850312156100fd578182fd5b82516001600160a01b0381168114610113578283fd5b6020939093015192949293505050565b60008151815b818110156101435760208185018101518683015201610129565b818111156101515782828601525b509290920192915050565b60006101688286610123565b606085901b6001600160601b03191681526101866014820185610123565b9695505050505050565b60805160601c60a051610acf6101c06000398061017e52806101a452508061015352806102a65250610acf6000f3fe6080604052600436106100705760003560e01c806335a1ba6f1161004e57806335a1ba6f146100d7578063e617aaac14610104578063efe4369314610124578063fe4545011461013957610070565b806315727e911461007557806332a130c9146100a05780633408e470146100c2575b600080fd5b34801561008157600080fd5b5061008a61014c565b60405161009791906108d6565b60405180910390f35b3480156100ac57600080fd5b506100b561017c565b6040516100979190610a60565b3480156100ce57600080fd5b506100b56101a0565b3480156100e357600080fd5b506100f76100f2366004610703565b6101d8565b604051610097919061086b565b34801561011057600080fd5b506100f761011f366004610703565b610284565b34801561013057600080fd5b506100f76102a4565b6100f7610147366004610737565b6102c8565b60606101777f00000000000000000000000000000000000000000000000000000000000000006103a5565b905090565b7f000000000000000000000000000000000000000000000000000000000000000090565b60007f0000000000000000000000000000000000000000000000000000000000000000806101d0574691506101d4565b8091505b5090565b60006101e48383610425565b604051632d34ba7960e01b81529091506001600160a01b03821690632d34ba7990610215908690869060040161087f565b600060405180830381600087803b15801561022f57600080fd5b505af1158015610243573d6000803e3d6000fd5b505050507fa79ba8cc5fdc29196c8d65701a02433c92328f38f0ffbea3908335b80d81409d81604051610276919061086b565b60405180910390a192915050565b600061029b610293848461044f565b60005461048b565b90505b92915050565b7f000000000000000000000000000000000000000000000000000000000000000090565b60006102d485856101d8565b90506102df83610498565b61033b576102ef833330856104a5565b6103145760405162461bcd60e51b815260040161030b906109e4565b60405180910390fd5b61031f8382846104f8565b61033b5760405162461bcd60e51b815260040161030b906109a0565b60405163635ae90160e01b81526001600160a01b0382169063635ae90190349061036b90879087906004016108bd565b6000604051808303818588803b15801561038457600080fd5b505af1158015610398573d6000803e3d6000fd5b5050505050949350505050565b6060604051806040016040528060148152602001733d602d80600a3d3981f3363d3d373d3d3d363d7360601b815250826040518060400160405280600f81526020016e5af43d82803e903d91602b57fd5bf360881b81525060405160200161040f93929190610824565b6040516020818303038152906040529050919050565b600080610432848461044f565b905061044760008261044261014c565b610540565b949350505050565b6000828261045b6101a0565b60405160200161046d939291906107ab565b60405160208183030381529060405280519060200120905092915050565b600061029b8383306105b2565b6001600160a01b03161590565b60006104ef858585856040516024016104c093929190610899565b60408051601f198184030181529190526020810180516001600160e01b03166323b872dd60e01b1790526105f1565b95945050505050565b60006104478484846040516024016105119291906108bd565b60408051601f198184030181529190526020810180516001600160e01b031663095ea7b360e01b1790526105f1565b600080844710156105635760405162461bcd60e51b815260040161030b90610a29565b82516105815760405162461bcd60e51b815260040161030b90610909565b8383516020850187f590506001600160a01b0381166104475760405162461bcd60e51b815260040161030b9061093e565b60008060ff60f81b8386866040516020016105d094939291906107d4565b60408051808303601f19018152919052805160209091012095945050505050565b60006105fc836106a2565b6106185760405162461bcd60e51b815260040161030b90610975565b60006060846001600160a01b0316846040516106349190610808565b6000604051808303816000865af19150503d8060008114610671576040519150601f19603f3d011682016040523d82523d6000602084013e610676565b606091505b509150915061068582826106db565b805115806104ef5750808060200190518101906104ef9190610784565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610447575050151592915050565b816106e857805160208201fd5b5050565b80356001600160a01b038116811461029e57600080fd5b60008060408385031215610715578182fd5b61071f84846106ec565b915061072e84602085016106ec565b90509250929050565b6000806000806080858703121561074c578182fd5b61075686866106ec565b935061076586602087016106ec565b925061077486604087016106ec565b9396929550929360600135925050565b600060208284031215610795578081fd5b815180151581146107a4578182fd5b9392505050565b6001600160601b0319606094851b811682529290931b9091166014830152602882015260480190565b6001600160f81b031994909416845260609290921b6001600160601b03191660018401526015830152603582015260550190565b6000825161081a818460208701610a69565b9190910192915050565b60008451610836818460208901610a69565b606085901b6001600160601b031916908301908152835161085e816014840160208801610a69565b0160140195945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b60006020825282518060208401526108f5816040850160208701610a69565b601f01601f19169190910160400192915050565b6020808252818101527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604082015260600190565b60208082526019908201527f437265617465323a204661696c6564206f6e206465706c6f7900000000000000604082015260600190565b6020808252601190820152704c696245524332303a204e4f5f434f444560781b604082015260600190565b60208082526024908201527f4368616e6e656c466163746f72793a2045524332305f415050524f56455f46416040820152631253115160e21b606082015260800190565b60208082526025908201527f4368616e6e656c466163746f72793a2045524332305f5452414e534645525f46604082015264105253115160da1b606082015260800190565b6020808252601d908201527f437265617465323a20696e73756666696369656e742062616c616e6365000000604082015260600190565b90815260200190565b60005b83811015610a84578181015183820152602001610a6c565b83811115610a93576000848401525b5050505056fea26469706673582212206b46714e4e157ca4fcef5f14f882cae62cdcfb5e301602c8361ab37a1daaf2ab64736f6c63430007010033","deployedBytecode":"0x6080604052600436106100705760003560e01c806335a1ba6f1161004e57806335a1ba6f146100d7578063e617aaac14610104578063efe4369314610124578063fe4545011461013957610070565b806315727e911461007557806332a130c9146100a05780633408e470146100c2575b600080fd5b34801561008157600080fd5b5061008a61014c565b60405161009791906108d6565b60405180910390f35b3480156100ac57600080fd5b506100b561017c565b6040516100979190610a60565b3480156100ce57600080fd5b506100b56101a0565b3480156100e357600080fd5b506100f76100f2366004610703565b6101d8565b604051610097919061086b565b34801561011057600080fd5b506100f761011f366004610703565b610284565b34801561013057600080fd5b506100f76102a4565b6100f7610147366004610737565b6102c8565b60606101777f00000000000000000000000000000000000000000000000000000000000000006103a5565b905090565b7f000000000000000000000000000000000000000000000000000000000000000090565b60007f0000000000000000000000000000000000000000000000000000000000000000806101d0574691506101d4565b8091505b5090565b60006101e48383610425565b604051632d34ba7960e01b81529091506001600160a01b03821690632d34ba7990610215908690869060040161087f565b600060405180830381600087803b15801561022f57600080fd5b505af1158015610243573d6000803e3d6000fd5b505050507fa79ba8cc5fdc29196c8d65701a02433c92328f38f0ffbea3908335b80d81409d81604051610276919061086b565b60405180910390a192915050565b600061029b610293848461044f565b60005461048b565b90505b92915050565b7f000000000000000000000000000000000000000000000000000000000000000090565b60006102d485856101d8565b90506102df83610498565b61033b576102ef833330856104a5565b6103145760405162461bcd60e51b815260040161030b906109e4565b60405180910390fd5b61031f8382846104f8565b61033b5760405162461bcd60e51b815260040161030b906109a0565b60405163635ae90160e01b81526001600160a01b0382169063635ae90190349061036b90879087906004016108bd565b6000604051808303818588803b15801561038457600080fd5b505af1158015610398573d6000803e3d6000fd5b5050505050949350505050565b6060604051806040016040528060148152602001733d602d80600a3d3981f3363d3d373d3d3d363d7360601b815250826040518060400160405280600f81526020016e5af43d82803e903d91602b57fd5bf360881b81525060405160200161040f93929190610824565b6040516020818303038152906040529050919050565b600080610432848461044f565b905061044760008261044261014c565b610540565b949350505050565b6000828261045b6101a0565b60405160200161046d939291906107ab565b60405160208183030381529060405280519060200120905092915050565b600061029b8383306105b2565b6001600160a01b03161590565b60006104ef858585856040516024016104c093929190610899565b60408051601f198184030181529190526020810180516001600160e01b03166323b872dd60e01b1790526105f1565b95945050505050565b60006104478484846040516024016105119291906108bd565b60408051601f198184030181529190526020810180516001600160e01b031663095ea7b360e01b1790526105f1565b600080844710156105635760405162461bcd60e51b815260040161030b90610a29565b82516105815760405162461bcd60e51b815260040161030b90610909565b8383516020850187f590506001600160a01b0381166104475760405162461bcd60e51b815260040161030b9061093e565b60008060ff60f81b8386866040516020016105d094939291906107d4565b60408051808303601f19018152919052805160209091012095945050505050565b60006105fc836106a2565b6106185760405162461bcd60e51b815260040161030b90610975565b60006060846001600160a01b0316846040516106349190610808565b6000604051808303816000865af19150503d8060008114610671576040519150601f19603f3d011682016040523d82523d6000602084013e610676565b606091505b509150915061068582826106db565b805115806104ef5750808060200190518101906104ef9190610784565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610447575050151592915050565b816106e857805160208201fd5b5050565b80356001600160a01b038116811461029e57600080fd5b60008060408385031215610715578182fd5b61071f84846106ec565b915061072e84602085016106ec565b90509250929050565b6000806000806080858703121561074c578182fd5b61075686866106ec565b935061076586602087016106ec565b925061077486604087016106ec565b9396929550929360600135925050565b600060208284031215610795578081fd5b815180151581146107a4578182fd5b9392505050565b6001600160601b0319606094851b811682529290931b9091166014830152602882015260480190565b6001600160f81b031994909416845260609290921b6001600160601b03191660018401526015830152603582015260550190565b6000825161081a818460208701610a69565b9190910192915050565b60008451610836818460208901610a69565b606085901b6001600160601b031916908301908152835161085e816014840160208801610a69565b0160140195945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b60006020825282518060208401526108f5816040850160208701610a69565b601f01601f19169190910160400192915050565b6020808252818101527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604082015260600190565b60208082526019908201527f437265617465323a204661696c6564206f6e206465706c6f7900000000000000604082015260600190565b6020808252601190820152704c696245524332303a204e4f5f434f444560781b604082015260600190565b60208082526024908201527f4368616e6e656c466163746f72793a2045524332305f415050524f56455f46416040820152631253115160e21b606082015260800190565b60208082526025908201527f4368616e6e656c466163746f72793a2045524332305f5452414e534645525f46604082015264105253115160da1b606082015260800190565b6020808252601d908201527f437265617465323a20696e73756666696369656e742062616c616e6365000000604082015260600190565b90815260200190565b60005b83811015610a84578181015183820152602001610a6c565b83811115610a93576000848401525b5050505056fea26469706673582212206b46714e4e157ca4fcef5f14f882cae62cdcfb5e301602c8361ab37a1daaf2ab64736f6c63430007010033","devdoc":{"author":"Connext <support@connext.network>","kind":"dev","methods":{"constructor":{"details":"Creates a new `ChannelFactory`","params":{"_chainId":"the chain identifier when generating the CREATE2 salt. If zero, the chain identifier used in the proxy salt will be the result of the opcode","_mastercopy":"the address of the `ChannelMastercopy` (channel logic)"}},"createChannel(address,address)":{"details":"Allows us to create new channel contract and get it all set up in one transaction","params":{"alice":"address of the high fidelity channel participant","bob":"address of the other channel participant"}},"createChannelAndDepositAlice(address,address,address,uint256)":{"details":"Allows us to create a new channel contract and fund it in one transaction","params":{"bob":"address of the other channel participant"}},"getChainId()":{"details":"Allows us to get the chainId that this factory will use in the create2 salt"},"getChannelAddress(address,address)":{"details":"Allows us to get the address for a new channel contract created via `createChannel`","params":{"alice":"address of the igh fidelity channel participant","bob":"address of the other channel participant"}},"getMastercopy()":{"details":"Allows us to get the mastercopy that this factory will deploy channels against"},"getProxyCreationCode()":{"details":"Returns the proxy code used to both calculate the CREATE2 address and deploy the channel proxy pointed to the `ChannelMastercopy`"},"getStoredChainId()":{"details":"Allows us to get the chainId that this factory has stored"}},"title":"ChannelFactory","version":1},"userdoc":{"kind":"user","methods":{},"notice":"Creates and sets up a new channel proxy contract","version":1},"storageLayout":{"storage":[{"astId":3100,"contract":"src.sol/ChannelFactory.sol:ChannelFactory","label":"creationCodeHash","offset":0,"slot":"0","type":"t_bytes32"}],"types":{"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"}}}}')},2795:function(e){e.exports=JSON.parse('{"address":"0xd105b6B42206dfA6Db00E6a4823bC88eFAC00476","abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"assetId","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"AliceDeposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"defunder","type":"address"},{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"},{"internalType":"address[]","name":"assetIds","type":"address[]"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance[]","name":"balances","type":"tuple[]"},{"internalType":"uint256[]","name":"processedDepositsA","type":"uint256[]"},{"internalType":"uint256[]","name":"processedDepositsB","type":"uint256[]"},{"internalType":"uint256[]","name":"defundNonces","type":"uint256[]"},{"internalType":"uint256","name":"timeout","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"indexed":false,"internalType":"struct ICMCAdjudicator.CoreChannelState","name":"state","type":"tuple"},{"components":[{"internalType":"bytes32","name":"channelStateHash","type":"bytes32"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"consensusExpiry","type":"uint256"},{"internalType":"uint256","name":"defundExpiry","type":"uint256"}],"indexed":false,"internalType":"struct ICMCAdjudicator.ChannelDispute","name":"dispute","type":"tuple"},{"indexed":false,"internalType":"address[]","name":"assetIds","type":"address[]"}],"name":"ChannelDefunded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"disputer","type":"address"},{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"},{"internalType":"address[]","name":"assetIds","type":"address[]"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance[]","name":"balances","type":"tuple[]"},{"internalType":"uint256[]","name":"processedDepositsA","type":"uint256[]"},{"internalType":"uint256[]","name":"processedDepositsB","type":"uint256[]"},{"internalType":"uint256[]","name":"defundNonces","type":"uint256[]"},{"internalType":"uint256","name":"timeout","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"indexed":false,"internalType":"struct ICMCAdjudicator.CoreChannelState","name":"state","type":"tuple"},{"components":[{"internalType":"bytes32","name":"channelStateHash","type":"bytes32"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"consensusExpiry","type":"uint256"},{"internalType":"uint256","name":"defundExpiry","type":"uint256"}],"indexed":false,"internalType":"struct ICMCAdjudicator.ChannelDispute","name":"dispute","type":"tuple"}],"name":"ChannelDisputed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"defunder","type":"address"},{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"bytes32","name":"transferId","type":"bytes32"},{"internalType":"address","name":"transferDefinition","type":"address"},{"internalType":"address","name":"initiator","type":"address"},{"internalType":"address","name":"responder","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance","name":"balance","type":"tuple"},{"internalType":"uint256","name":"transferTimeout","type":"uint256"},{"internalType":"bytes32","name":"initialStateHash","type":"bytes32"}],"indexed":false,"internalType":"struct ICMCAdjudicator.CoreTransferState","name":"state","type":"tuple"},{"components":[{"internalType":"bytes32","name":"transferStateHash","type":"bytes32"},{"internalType":"uint256","name":"transferDisputeExpiry","type":"uint256"},{"internalType":"bool","name":"isDefunded","type":"bool"}],"indexed":false,"internalType":"struct ICMCAdjudicator.TransferDispute","name":"dispute","type":"tuple"},{"indexed":false,"internalType":"bytes","name":"encodedInitialState","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"encodedResolver","type":"bytes"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"indexed":false,"internalType":"struct Balance","name":"balance","type":"tuple"}],"name":"TransferDefunded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"disputer","type":"address"},{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"bytes32","name":"transferId","type":"bytes32"},{"internalType":"address","name":"transferDefinition","type":"address"},{"internalType":"address","name":"initiator","type":"address"},{"internalType":"address","name":"responder","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance","name":"balance","type":"tuple"},{"internalType":"uint256","name":"transferTimeout","type":"uint256"},{"internalType":"bytes32","name":"initialStateHash","type":"bytes32"}],"indexed":false,"internalType":"struct ICMCAdjudicator.CoreTransferState","name":"state","type":"tuple"},{"components":[{"internalType":"bytes32","name":"transferStateHash","type":"bytes32"},{"internalType":"uint256","name":"transferDisputeExpiry","type":"uint256"},{"internalType":"bool","name":"isDefunded","type":"bool"}],"indexed":false,"internalType":"struct ICMCAdjudicator.TransferDispute","name":"dispute","type":"tuple"}],"name":"TransferDisputed","type":"event"},{"inputs":[{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"},{"internalType":"address[]","name":"assetIds","type":"address[]"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance[]","name":"balances","type":"tuple[]"},{"internalType":"uint256[]","name":"processedDepositsA","type":"uint256[]"},{"internalType":"uint256[]","name":"processedDepositsB","type":"uint256[]"},{"internalType":"uint256[]","name":"defundNonces","type":"uint256[]"},{"internalType":"uint256","name":"timeout","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"internalType":"struct ICMCAdjudicator.CoreChannelState","name":"ccs","type":"tuple"},{"internalType":"address[]","name":"assetIds","type":"address[]"},{"internalType":"uint256[]","name":"indices","type":"uint256[]"}],"name":"defundChannel","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"bytes32","name":"transferId","type":"bytes32"},{"internalType":"address","name":"transferDefinition","type":"address"},{"internalType":"address","name":"initiator","type":"address"},{"internalType":"address","name":"responder","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance","name":"balance","type":"tuple"},{"internalType":"uint256","name":"transferTimeout","type":"uint256"},{"internalType":"bytes32","name":"initialStateHash","type":"bytes32"}],"internalType":"struct ICMCAdjudicator.CoreTransferState","name":"cts","type":"tuple"},{"internalType":"bytes","name":"encodedInitialTransferState","type":"bytes"},{"internalType":"bytes","name":"encodedTransferResolver","type":"bytes"},{"internalType":"bytes","name":"responderSignature","type":"bytes"}],"name":"defundTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"depositAlice","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"},{"internalType":"address[]","name":"assetIds","type":"address[]"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance[]","name":"balances","type":"tuple[]"},{"internalType":"uint256[]","name":"processedDepositsA","type":"uint256[]"},{"internalType":"uint256[]","name":"processedDepositsB","type":"uint256[]"},{"internalType":"uint256[]","name":"defundNonces","type":"uint256[]"},{"internalType":"uint256","name":"timeout","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"internalType":"struct ICMCAdjudicator.CoreChannelState","name":"ccs","type":"tuple"},{"internalType":"bytes","name":"aliceSignature","type":"bytes"},{"internalType":"bytes","name":"bobSignature","type":"bytes"}],"name":"disputeChannel","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"bytes32","name":"transferId","type":"bytes32"},{"internalType":"address","name":"transferDefinition","type":"address"},{"internalType":"address","name":"initiator","type":"address"},{"internalType":"address","name":"responder","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance","name":"balance","type":"tuple"},{"internalType":"uint256","name":"transferTimeout","type":"uint256"},{"internalType":"bytes32","name":"initialStateHash","type":"bytes32"}],"internalType":"struct ICMCAdjudicator.CoreTransferState","name":"cts","type":"tuple"},{"internalType":"bytes32[]","name":"merkleProofData","type":"bytes32[]"}],"name":"disputeTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address payable","name":"recipient","type":"address"}],"name":"exit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getAlice","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBob","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getChannelDispute","outputs":[{"components":[{"internalType":"bytes32","name":"channelStateHash","type":"bytes32"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"consensusExpiry","type":"uint256"},{"internalType":"uint256","name":"defundExpiry","type":"uint256"}],"internalType":"struct ICMCAdjudicator.ChannelDispute","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"}],"name":"getDefundNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"getExitableAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"}],"name":"getTotalDepositsAlice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"}],"name":"getTotalDepositsBob","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"}],"name":"getTotalTransferred","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"transferId","type":"bytes32"}],"name":"getTransferDispute","outputs":[{"components":[{"internalType":"bytes32","name":"transferStateHash","type":"bytes32"},{"internalType":"uint256","name":"transferDisputeExpiry","type":"uint256"},{"internalType":"bool","name":"isDefunded","type":"bool"}],"internalType":"struct ICMCAdjudicator.TransferDispute","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"internalType":"address payable","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"address","name":"callTo","type":"address"},{"internalType":"bytes","name":"callData","type":"bytes"}],"internalType":"struct WithdrawData","name":"wd","type":"tuple"}],"name":"getWithdrawalTransactionRecord","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_alice","type":"address"},{"internalType":"address","name":"_bob","type":"address"}],"name":"setup","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"internalType":"address payable","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"address","name":"callTo","type":"address"},{"internalType":"bytes","name":"callData","type":"bytes"}],"internalType":"struct WithdrawData","name":"wd","type":"tuple"},{"internalType":"bytes","name":"aliceSignature","type":"bytes"},{"internalType":"bytes","name":"bobSignature","type":"bytes"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"transactionHash":"0x0953a4e84f1c1b11a6799e3332a63f87a03b2f21021487fba36471bd36cb2663","receipt":{"to":null,"from":"0xd4b33434Cb36df9286Ef5132FCFb8062c96aC56E","contractAddress":"0xd105b6B42206dfA6Db00E6a4823bC88eFAC00476","transactionIndex":104,"gasUsed":"3585396","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","blockHash":"0x47be2c4cb7b8c2264da239faab1d094c7a65a58d4ef4e6f07eac9495c9233da2","transactionHash":"0x0953a4e84f1c1b11a6799e3332a63f87a03b2f21021487fba36471bd36cb2663","logs":[],"blockNumber":11551514,"cumulativeGasUsed":"11908290","status":1,"byzantium":true},"args":[],"solcInputHash":"89c55d5a88f10637860a9ea31a1daad3","metadata":"{\\"compiler\\":{\\"version\\":\\"0.7.1+commit.f4a555be\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"AliceDeposited\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"defunder\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address[]\\",\\"name\\":\\"assetIds\\",\\"type\\":\\"address[]\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance[]\\",\\"name\\":\\"balances\\",\\"type\\":\\"tuple[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsA\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsB\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"defundNonces\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"timeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.CoreChannelState\\",\\"name\\":\\"state\\",\\"type\\":\\"tuple\\"},{\\"components\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"channelStateHash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"consensusExpiry\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"defundExpiry\\",\\"type\\":\\"uint256\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.ChannelDispute\\",\\"name\\":\\"dispute\\",\\"type\\":\\"tuple\\"},{\\"indexed\\":false,\\"internalType\\":\\"address[]\\",\\"name\\":\\"assetIds\\",\\"type\\":\\"address[]\\"}],\\"name\\":\\"ChannelDefunded\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"disputer\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address[]\\",\\"name\\":\\"assetIds\\",\\"type\\":\\"address[]\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance[]\\",\\"name\\":\\"balances\\",\\"type\\":\\"tuple[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsA\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsB\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"defundNonces\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"timeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.CoreChannelState\\",\\"name\\":\\"state\\",\\"type\\":\\"tuple\\"},{\\"components\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"channelStateHash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"consensusExpiry\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"defundExpiry\\",\\"type\\":\\"uint256\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.ChannelDispute\\",\\"name\\":\\"dispute\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"ChannelDisputed\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"defunder\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferId\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"transferDefinition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"initiator\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"responder\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"balance\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferTimeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"initialStateHash\\",\\"type\\":\\"bytes32\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.CoreTransferState\\",\\"name\\":\\"state\\",\\"type\\":\\"tuple\\"},{\\"components\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferStateHash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferDisputeExpiry\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"isDefunded\\",\\"type\\":\\"bool\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.TransferDispute\\",\\"name\\":\\"dispute\\",\\"type\\":\\"tuple\\"},{\\"indexed\\":false,\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedInitialState\\",\\"type\\":\\"bytes\\"},{\\"indexed\\":false,\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedResolver\\",\\"type\\":\\"bytes\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"balance\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"TransferDefunded\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"disputer\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferId\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"transferDefinition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"initiator\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"responder\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"balance\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferTimeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"initialStateHash\\",\\"type\\":\\"bytes32\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.CoreTransferState\\",\\"name\\":\\"state\\",\\"type\\":\\"tuple\\"},{\\"components\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferStateHash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferDisputeExpiry\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"isDefunded\\",\\"type\\":\\"bool\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.TransferDispute\\",\\"name\\":\\"dispute\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"TransferDisputed\\",\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address[]\\",\\"name\\":\\"assetIds\\",\\"type\\":\\"address[]\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance[]\\",\\"name\\":\\"balances\\",\\"type\\":\\"tuple[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsA\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsB\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"defundNonces\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"timeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"}],\\"internalType\\":\\"struct ICMCAdjudicator.CoreChannelState\\",\\"name\\":\\"ccs\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"address[]\\",\\"name\\":\\"assetIds\\",\\"type\\":\\"address[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"indices\\",\\"type\\":\\"uint256[]\\"}],\\"name\\":\\"defundChannel\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferId\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"transferDefinition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"initiator\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"responder\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"balance\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferTimeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"initialStateHash\\",\\"type\\":\\"bytes32\\"}],\\"internalType\\":\\"struct ICMCAdjudicator.CoreTransferState\\",\\"name\\":\\"cts\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedInitialTransferState\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedTransferResolver\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"responderSignature\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"defundTransfer\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"depositAlice\\",\\"outputs\\":[],\\"stateMutability\\":\\"payable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address[]\\",\\"name\\":\\"assetIds\\",\\"type\\":\\"address[]\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance[]\\",\\"name\\":\\"balances\\",\\"type\\":\\"tuple[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsA\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsB\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"defundNonces\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"timeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"}],\\"internalType\\":\\"struct ICMCAdjudicator.CoreChannelState\\",\\"name\\":\\"ccs\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"aliceSignature\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"bobSignature\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"disputeChannel\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferId\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"transferDefinition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"initiator\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"responder\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"balance\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferTimeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"initialStateHash\\",\\"type\\":\\"bytes32\\"}],\\"internalType\\":\\"struct ICMCAdjudicator.CoreTransferState\\",\\"name\\":\\"cts\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"bytes32[]\\",\\"name\\":\\"merkleProofData\\",\\"type\\":\\"bytes32[]\\"}],\\"name\\":\\"disputeTransfer\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address payable\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"}],\\"name\\":\\"exit\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getAlice\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getBob\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getChannelDispute\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"channelStateHash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"consensusExpiry\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"defundExpiry\\",\\"type\\":\\"uint256\\"}],\\"internalType\\":\\"struct ICMCAdjudicator.ChannelDispute\\",\\"name\\":\\"\\",\\"type\\":\\"tuple\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getDefundNonce\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getExitableAmount\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getTotalDepositsAlice\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getTotalDepositsBob\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getTotalTransferred\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferId\\",\\"type\\":\\"bytes32\\"}],\\"name\\":\\"getTransferDispute\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferStateHash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferDisputeExpiry\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"isDefunded\\",\\"type\\":\\"bool\\"}],\\"internalType\\":\\"struct ICMCAdjudicator.TransferDispute\\",\\"name\\":\\"\\",\\"type\\":\\"tuple\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address payable\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"callTo\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"callData\\",\\"type\\":\\"bytes\\"}],\\"internalType\\":\\"struct WithdrawData\\",\\"name\\":\\"wd\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"getWithdrawalTransactionRecord\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"lock\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"_bob\\",\\"type\\":\\"address\\"}],\\"name\\":\\"setup\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address payable\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"callTo\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"callData\\",\\"type\\":\\"bytes\\"}],\\"internalType\\":\\"struct WithdrawData\\",\\"name\\":\\"wd\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"aliceSignature\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"bobSignature\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"withdraw\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"stateMutability\\":\\"payable\\",\\"type\\":\\"receive\\"}],\\"devdoc\\":{\\"author\\":\\"Connext <support@connext.network>\\",\\"kind\\":\\"dev\\",\\"methods\\":{\\"getAlice()\\":{\\"returns\\":{\\"_0\\":\\"Bob\'s signer address\\"}},\\"getBob()\\":{\\"returns\\":{\\"_0\\":\\"Alice\'s signer address\\"}},\\"setup(address,address)\\":{\\"params\\":{\\"_alice\\":\\": Address representing user with function deposit\\",\\"_bob\\":\\": Address representing user with multisig deposit\\"}},\\"withdraw((address,address,address,uint256,uint256,address,bytes),bytes,bytes)\\":{\\"params\\":{\\"aliceSignature\\":\\"Signature of owner a\\",\\"bobSignature\\":\\"Signature of owner b\\",\\"wd\\":\\"The withdraw data consisting of semantic withdraw information, i.e. assetId, recipient, and amount; information to make an optional call in addition to the actual transfer, i.e. target address for the call and call payload; additional information, i.e. channel address and nonce.\\"}}},\\"title\\":\\"ChannelMastercopy\\",\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{\\"getAlice()\\":{\\"notice\\":\\"A getter function for the bob of the multisig\\"},\\"getBob()\\":{\\"notice\\":\\"A getter function for the bob of the multisig\\"},\\"setup(address,address)\\":{\\"notice\\":\\"Contract constructor for Proxied copies\\"}},\\"notice\\":\\"Contains the logic used by all Vector multisigs. A proxy to this         contract is deployed per-channel using the ChannelFactory.sol.         Supports channel adjudication logic, deposit logic, and arbitrary         calls when a commitment is double-signed.\\",\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"src.sol/ChannelMastercopy.sol\\":\\"ChannelMastercopy\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\\\n *\\\\n * These functions can be used to verify that a message was signed by the holder\\\\n * of the private keys of a given address.\\\\n */\\\\nlibrary ECDSA {\\\\n    /**\\\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\\\n     * `signature`. This address can then be used for verification purposes.\\\\n     *\\\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\\\n     * this function rejects them by requiring the `s` value to be in the lower\\\\n     * half order, and the `v` value to be either 27 or 28.\\\\n     *\\\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\\\n     * verification to be secure: it is possible to craft signatures that\\\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\\\n     * this is by receiving a hash of the original message (which may otherwise\\\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\\\n     */\\\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\\\n        // Check the signature length\\\\n        if (signature.length != 65) {\\\\n            revert(\\\\\\"ECDSA: invalid signature length\\\\\\");\\\\n        }\\\\n\\\\n        // Divide the signature in r, s and v variables\\\\n        bytes32 r;\\\\n        bytes32 s;\\\\n        uint8 v;\\\\n\\\\n        // ecrecover takes the signature parameters, and the only way to get them\\\\n        // currently is to use assembly.\\\\n        // solhint-disable-next-line no-inline-assembly\\\\n        assembly {\\\\n            r := mload(add(signature, 0x20))\\\\n            s := mload(add(signature, 0x40))\\\\n            v := byte(0, mload(add(signature, 0x60)))\\\\n        }\\\\n\\\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\\\n        // the valid range for s in (281): 0 < s < secp256k1n \\\\u00f7 2 + 1, and for v in (282): v \\\\u2208 {27, 28}. Most\\\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\\\n        //\\\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\\\n        // these malleable signatures as well.\\\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\\\n            revert(\\\\\\"ECDSA: invalid signature \'s\' value\\\\\\");\\\\n        }\\\\n\\\\n        if (v != 27 && v != 28) {\\\\n            revert(\\\\\\"ECDSA: invalid signature \'v\' value\\\\\\");\\\\n        }\\\\n\\\\n        // If the signature is valid (and not malleable), return the signer address\\\\n        address signer = ecrecover(hash, v, r, s);\\\\n        require(signer != address(0), \\\\\\"ECDSA: invalid signature\\\\\\");\\\\n\\\\n        return signer;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\\\n     * replicates the behavior of the\\\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\\\n     * JSON-RPC method.\\\\n     *\\\\n     * See {recover}.\\\\n     */\\\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\\\n        // 32 is the length in bytes of hash,\\\\n        // enforced by the type signature above\\\\n        return keccak256(abi.encodePacked(\\\\\\"\\\\\\\\x19Ethereum Signed Message:\\\\\\\\n32\\\\\\", hash));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf25c49d2be2d28918ae6de7e9724238367dabe50631ec8fd23d1cdae2cb70262\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/cryptography/MerkleProof.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev These functions deal with verification of Merkle trees (hash trees),\\\\n */\\\\nlibrary MerkleProof {\\\\n    /**\\\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\\\n     * defined by `root`. For this, a `proof` must be provided, containing\\\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\\\n     */\\\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\\\n        bytes32 computedHash = leaf;\\\\n\\\\n        for (uint256 i = 0; i < proof.length; i++) {\\\\n            bytes32 proofElement = proof[i];\\\\n\\\\n            if (computedHash <= proofElement) {\\\\n                // Hash(current computed hash + current element of the proof)\\\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\\\n            } else {\\\\n                // Hash(current element of the proof + current computed hash)\\\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\\\n            }\\\\n        }\\\\n\\\\n        // Check if the computed hash (root) is equal to the provided root\\\\n        return computedHash == root;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x4959be2683e7af3439cb94f06aa6c40cb42ca9336747d0c7dce54f07196489bc\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/math/Math.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Standard math utilities missing in the Solidity language.\\\\n */\\\\nlibrary Math {\\\\n    /**\\\\n     * @dev Returns the largest of two numbers.\\\\n     */\\\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a >= b ? a : b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the smallest of two numbers.\\\\n     */\\\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a < b ? a : b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the average of two numbers. The result is rounded towards\\\\n     * zero.\\\\n     */\\\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        // (a + b) / 2 can overflow, so we distribute\\\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xa4fdec0ea7d943692cac780111ff2ff9d89848cad0494a59cfaed63a705054b4\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/math/SafeMath.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Wrappers over Solidity\'s arithmetic operations with added overflow\\\\n * checks.\\\\n *\\\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\\\n * in bugs, because programmers usually assume that an overflow raises an\\\\n * error, which is the standard behavior in high level programming languages.\\\\n * `SafeMath` restores this intuition by reverting the transaction when an\\\\n * operation overflows.\\\\n *\\\\n * Using this library instead of the unchecked operations eliminates an entire\\\\n * class of bugs, so it\'s recommended to use it always.\\\\n */\\\\nlibrary SafeMath {\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `+` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Addition cannot overflow.\\\\n     */\\\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        uint256 c = a + b;\\\\n        require(c >= a, \\\\\\"SafeMath: addition overflow\\\\\\");\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return sub(a, b, \\\\\\"SafeMath: subtraction overflow\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        require(b <= a, errorMessage);\\\\n        uint256 c = a - b;\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `*` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Multiplication cannot overflow.\\\\n     */\\\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\\\\n        // benefit is lost if \'b\' is also tested.\\\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\\\n        if (a == 0) {\\\\n            return 0;\\\\n        }\\\\n\\\\n        uint256 c = a * b;\\\\n        require(c / a == b, \\\\\\"SafeMath: multiplication overflow\\\\\\");\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return div(a, b, \\\\\\"SafeMath: division by zero\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        require(b > 0, errorMessage);\\\\n        uint256 c = a / b;\\\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * Reverts when dividing by zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return mod(a, b, \\\\\\"SafeMath: modulo by zero\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * Reverts with custom message when dividing by zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        require(b != 0, errorMessage);\\\\n        return a % b;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Returns the amount of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender\'s allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\\\n     * allowance mechanism. `amount` is then deducted from the caller\'s\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Address.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Collection of functions related to the address type\\\\n */\\\\nlibrary Address {\\\\n    /**\\\\n     * @dev Returns true if `account` is a contract.\\\\n     *\\\\n     * [IMPORTANT]\\\\n     * ====\\\\n     * It is unsafe to assume that an address for which this function returns\\\\n     * false is an externally-owned account (EOA) and not a contract.\\\\n     *\\\\n     * Among others, `isContract` will return false for the following\\\\n     * types of addresses:\\\\n     *\\\\n     *  - an externally-owned account\\\\n     *  - a contract in construction\\\\n     *  - an address where a contract will be created\\\\n     *  - an address where a contract lived, but was destroyed\\\\n     * ====\\\\n     */\\\\n    function isContract(address account) internal view returns (bool) {\\\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\\\n        // for accounts without code, i.e. `keccak256(\'\')`\\\\n        bytes32 codehash;\\\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\\\n        // solhint-disable-next-line no-inline-assembly\\\\n        assembly { codehash := extcodehash(account) }\\\\n        return (codehash != accountHash && codehash != 0x0);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\\\\n     * `recipient`, forwarding all available gas and reverting on errors.\\\\n     *\\\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\\\n     * imposed by `transfer`, making them unable to receive funds via\\\\n     * `transfer`. {sendValue} removes this limitation.\\\\n     *\\\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\\\n     *\\\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\\\n     * taken to not create reentrancy vulnerabilities. Consider using\\\\n     * {ReentrancyGuard} or the\\\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\\\n     */\\\\n    function sendValue(address payable recipient, uint256 amount) internal {\\\\n        require(address(this).balance >= amount, \\\\\\"Address: insufficient balance\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\\\n        (bool success, ) = recipient.call{ value: amount }(\\\\\\"\\\\\\");\\\\n        require(success, \\\\\\"Address: unable to send value, recipient may have reverted\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Performs a Solidity function call using a low level `call`. A\\\\n     * plain`call` is an unsafe replacement for a function call: use this\\\\n     * function instead.\\\\n     *\\\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\\\n     * function (like regular Solidity function calls).\\\\n     *\\\\n     * Returns the raw returned data. To convert to the expected return value,\\\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `target` must be a contract.\\\\n     * - calling `target` with `data` must not revert.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n      return functionCall(target, data, \\\\\\"Address: low-level call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but also transferring `value` wei to `target`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the calling contract must have an ETH balance of at least `value`.\\\\n     * - the called Solidity function must be `payable`.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, value, \\\\\\"Address: low-level call with value failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\\\n        require(address(this).balance >= value, \\\\\\"Address: insufficient balance for call\\\\\\");\\\\n        return _functionCallWithValue(target, data, value, errorMessage);\\\\n    }\\\\n\\\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: call to non-contract\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls\\\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\\\n        if (success) {\\\\n            return returndata;\\\\n        } else {\\\\n            // Look for revert reason and bubble it up if present\\\\n            if (returndata.length > 0) {\\\\n                // The easiest way to bubble the revert reason is using memory via assembly\\\\n\\\\n                // solhint-disable-next-line no-inline-assembly\\\\n                assembly {\\\\n                    let returndata_size := mload(returndata)\\\\n                    revert(add(32, returndata), returndata_size)\\\\n                }\\\\n            } else {\\\\n                revert(errorMessage);\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x698f929f1097637d051976b322a2d532c27df022b09010e8d091e2888a5ebdf8\\",\\"license\\":\\"MIT\\"},\\"src.sol/CMCAdjudicator.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/Commitment.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/ICMCAdjudicator.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/ITransferDefinition.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/Types.sol\\\\\\";\\\\nimport \\\\\\"./CMCCore.sol\\\\\\";\\\\nimport \\\\\\"./CMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./CMCDeposit.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibChannelCrypto.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibMath.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/cryptography/MerkleProof.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/math/SafeMath.sol\\\\\\";\\\\n\\\\n/// @title CMCAdjudicator\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains logic for disputing a single channel and all active\\\\n///         transfers associated with the channel. Contains two major phases:\\\\n///         (1) consensus: settle on latest channel state\\\\n///         (2) defund: remove assets and dispute active transfers\\\\ncontract CMCAdjudicator is CMCCore, CMCAsset, CMCDeposit, ICMCAdjudicator {\\\\n    using LibChannelCrypto for bytes32;\\\\n    using LibMath for uint256;\\\\n    using SafeMath for uint256;\\\\n\\\\n    uint256 private constant INITIAL_DEFUND_NONCE = 1;\\\\n\\\\n    ChannelDispute private channelDispute;\\\\n    mapping(address => uint256) private defundNonces;\\\\n    mapping(bytes32 => TransferDispute) private transferDisputes;\\\\n\\\\n    modifier validateChannel(CoreChannelState calldata ccs) {\\\\n        require(\\\\n            ccs.channelAddress == address(this) &&\\\\n                ccs.alice == alice &&\\\\n                ccs.bob == bob,\\\\n            \\\\\\"CMCAdjudicator: INVALID_CHANNEL\\\\\\"\\\\n        );\\\\n        _;\\\\n    }\\\\n\\\\n    modifier validateTransfer(CoreTransferState calldata cts) {\\\\n        require(\\\\n            cts.channelAddress == address(this),\\\\n            \\\\\\"CMCAdjudicator: INVALID_TRANSFER\\\\\\"\\\\n        );\\\\n        _;\\\\n    }\\\\n\\\\n    function getChannelDispute()\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (ChannelDispute memory)\\\\n    {\\\\n        return channelDispute;\\\\n    }\\\\n\\\\n    function getDefundNonce(address assetId)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (uint256)\\\\n    {\\\\n        return defundNonces[assetId];\\\\n    }\\\\n\\\\n    function getTransferDispute(bytes32 transferId)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (TransferDispute memory)\\\\n    {\\\\n        return transferDisputes[transferId];\\\\n    }\\\\n\\\\n    function disputeChannel(\\\\n        CoreChannelState calldata ccs,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) external override onlyViaProxy nonReentrant validateChannel(ccs) {\\\\n        // Generate hash\\\\n        bytes32 ccsHash = hashChannelState(ccs);\\\\n\\\\n        // Verify Alice\'s and Bob\'s signature on the channel state\\\\n        verifySignaturesOnChannelStateHash(ccs, ccsHash, aliceSignature, bobSignature);\\\\n\\\\n        // We cannot dispute a channel in its defund phase\\\\n        require(!inDefundPhase(), \\\\\\"CMCAdjudicator: INVALID_PHASE\\\\\\");\\\\n\\\\n        // New nonce must be strictly greater than the stored one\\\\n        require(\\\\n            channelDispute.nonce < ccs.nonce,\\\\n            \\\\\\"CMCAdjudicator: INVALID_NONCE\\\\\\"\\\\n        );\\\\n\\\\n        if (!inConsensusPhase()) {\\\\n            // We are not already in a dispute\\\\n            // Set expiries\\\\n            // TODO: offchain-ensure that there can\'t be an overflow\\\\n            channelDispute.consensusExpiry = block.timestamp.add(ccs.timeout);\\\\n            channelDispute.defundExpiry = block.timestamp.add(\\\\n                ccs.timeout.mul(2)\\\\n            );\\\\n        }\\\\n\\\\n        // Store newer state\\\\n        channelDispute.channelStateHash = ccsHash;\\\\n        channelDispute.nonce = ccs.nonce;\\\\n        channelDispute.merkleRoot = ccs.merkleRoot;\\\\n\\\\n        // Emit event\\\\n        emit ChannelDisputed(msg.sender, ccs, channelDispute);\\\\n    }\\\\n\\\\n    function defundChannel(\\\\n        CoreChannelState calldata ccs,\\\\n        address[] calldata assetIds,\\\\n        uint256[] calldata indices\\\\n    ) external override onlyViaProxy nonReentrant validateChannel(ccs) {\\\\n        // These checks are not strictly necessary, but it\'s a bit cleaner this way\\\\n        require(assetIds.length > 0, \\\\\\"CMCAdjudicator: NO_ASSETS_GIVEN\\\\\\");\\\\n        require(\\\\n            indices.length <= assetIds.length,\\\\n            \\\\\\"CMCAdjudicator: WRONG_ARRAY_LENGTHS\\\\\\"\\\\n        );\\\\n\\\\n        // Verify that the given channel state matches the stored one\\\\n        require(\\\\n            hashChannelState(ccs) == channelDispute.channelStateHash,\\\\n            \\\\\\"CMCAdjudicator: INVALID_CHANNEL_HASH\\\\\\"\\\\n        );\\\\n\\\\n        // We need to be in defund phase for that\\\\n        require(inDefundPhase(), \\\\\\"CMCAdjudicator: INVALID_PHASE\\\\\\");\\\\n\\\\n        // TODO SECURITY: Beware of reentrancy\\\\n        // TODO: offchain-ensure that all arrays have the same length:\\\\n        // assetIds, balances, processedDepositsA, processedDepositsB, defundNonces\\\\n        // Make sure there are no duplicates in the assetIds -- duplicates are often a source of double-spends\\\\n\\\\n        // Defund all assets given\\\\n        for (uint256 i = 0; i < assetIds.length; i++) {\\\\n            address assetId = assetIds[i];\\\\n\\\\n            // Verify or find the index of the assetId in the ccs.assetIds\\\\n            uint256 index;\\\\n            if (i < indices.length) {\\\\n                // The index was supposedly given -- we verify\\\\n                index = indices[i];\\\\n                require(\\\\n                    assetId == ccs.assetIds[index],\\\\n                    \\\\\\"CMCAdjudicator: INDEX_MISMATCH\\\\\\"\\\\n                );\\\\n            } else {\\\\n                // we search through the assets in ccs\\\\n                for (index = 0; index < ccs.assetIds.length; index++) {\\\\n                    if (assetId == ccs.assetIds[index]) {\\\\n                        break;\\\\n                    }\\\\n                }\\\\n            }\\\\n\\\\n            // Now, if `index`  is equal to the number of assets in ccs,\\\\n            // then the current asset is not in ccs;\\\\n            // otherwise, `index` is the index in ccs for the current asset\\\\n\\\\n            // Check the assets haven\'t already been defunded + update the\\\\n            // defundNonce for that asset\\\\n            {\\\\n                // Open a new block to avoid \\\\\\"stack too deep\\\\\\" error\\\\n                uint256 defundNonce =\\\\n                    (index == ccs.assetIds.length)\\\\n                        ? INITIAL_DEFUND_NONCE\\\\n                        : ccs.defundNonces[index];\\\\n                require(\\\\n                    defundNonces[assetId] < defundNonce,\\\\n                    \\\\\\"CMCAdjudicator: CHANNEL_ALREADY_DEFUNDED\\\\\\"\\\\n                );\\\\n                defundNonces[assetId] = defundNonce;\\\\n            }\\\\n\\\\n            // Get total deposits\\\\n            uint256 tdAlice = _getTotalDepositsAlice(assetId);\\\\n            uint256 tdBob = _getTotalDepositsBob(assetId);\\\\n\\\\n            Balance memory balance;\\\\n\\\\n            if (index == ccs.assetIds.length) {\\\\n                // The current asset is not a part of ccs; refund what has been deposited\\\\n                balance = Balance({\\\\n                    amount: [tdAlice, tdBob],\\\\n                    to: [payable(ccs.alice), payable(ccs.bob)]\\\\n                });\\\\n            } else {\\\\n                // Start with the final balances in ccs\\\\n                balance = ccs.balances[index];\\\\n                // Add unprocessed deposits\\\\n                balance.amount[0] = balance.amount[0].satAdd(\\\\n                    tdAlice - ccs.processedDepositsA[index]\\\\n                );\\\\n                balance.amount[1] = balance.amount[1].satAdd(\\\\n                    tdBob - ccs.processedDepositsB[index]\\\\n                );\\\\n            }\\\\n\\\\n            // Add result to exitable amounts\\\\n            makeBalanceExitable(assetId, balance);\\\\n        }\\\\n\\\\n        emit ChannelDefunded(\\\\n            msg.sender,\\\\n            ccs,\\\\n            channelDispute,\\\\n            assetIds\\\\n        );\\\\n    }\\\\n\\\\n    function disputeTransfer(\\\\n        CoreTransferState calldata cts,\\\\n        bytes32[] calldata merkleProofData\\\\n    ) external override onlyViaProxy nonReentrant validateTransfer(cts) {\\\\n        // Verify that the given transfer state is included in the \\\\\\"finalized\\\\\\" channel state\\\\n        bytes32 transferStateHash = hashTransferState(cts);\\\\n        verifyMerkleProof(\\\\n            merkleProofData,\\\\n            channelDispute.merkleRoot,\\\\n            transferStateHash\\\\n        );\\\\n\\\\n        // The channel needs to be in defund phase for that, i.e. channel state is \\\\\\"finalized\\\\\\"\\\\n        require(inDefundPhase(), \\\\\\"CMCAdjudicator: INVALID_PHASE\\\\\\");\\\\n\\\\n        // Get stored dispute for this transfer\\\\n        TransferDispute storage transferDispute =\\\\n            transferDisputes[cts.transferId];\\\\n\\\\n        // Verify that this transfer has not been disputed before\\\\n        require(\\\\n            transferDispute.transferDisputeExpiry == 0,\\\\n            \\\\\\"CMCAdjudicator: TRANSFER_ALREADY_DISPUTED\\\\\\"\\\\n        );\\\\n\\\\n        // Store transfer state and set expiry\\\\n        transferDispute.transferStateHash = transferStateHash;\\\\n        // TODO: offchain-ensure that there can\'t be an overflow\\\\n        transferDispute.transferDisputeExpiry = block.timestamp.add(\\\\n            cts.transferTimeout\\\\n        );\\\\n\\\\n        emit TransferDisputed(\\\\n            msg.sender,\\\\n            cts,\\\\n            transferDispute\\\\n        );\\\\n    }\\\\n\\\\n    function defundTransfer(\\\\n        CoreTransferState calldata cts,\\\\n        bytes calldata encodedInitialTransferState,\\\\n        bytes calldata encodedTransferResolver,\\\\n        bytes calldata responderSignature\\\\n    ) external override onlyViaProxy nonReentrant validateTransfer(cts) {\\\\n        // Get stored dispute for this transfer\\\\n        TransferDispute storage transferDispute =\\\\n            transferDisputes[cts.transferId];\\\\n\\\\n        // Verify that a dispute for this transfer has already been started\\\\n        require(\\\\n            transferDispute.transferDisputeExpiry != 0,\\\\n            \\\\\\"CMCAdjudicator: TRANSFER_NOT_DISPUTED\\\\\\"\\\\n        );\\\\n\\\\n        // Verify that the given transfer state matches the stored one\\\\n        require(\\\\n            hashTransferState(cts) == transferDispute.transferStateHash,\\\\n            \\\\\\"CMCAdjudicator: INVALID_TRANSFER_HASH\\\\\\"\\\\n        );\\\\n\\\\n        // We can\'t defund twice\\\\n        require(\\\\n            !transferDispute.isDefunded,\\\\n            \\\\\\"CMCAdjudicator: TRANSFER_ALREADY_DEFUNDED\\\\\\"\\\\n        );\\\\n        transferDispute.isDefunded = true;\\\\n\\\\n        Balance memory balance;\\\\n\\\\n        if (block.timestamp < transferDispute.transferDisputeExpiry) {\\\\n            // Ensure the correct hash is provided\\\\n            require(\\\\n                keccak256(encodedInitialTransferState) == cts.initialStateHash,\\\\n                \\\\\\"CMCAdjudicator: INVALID_TRANSFER_HASH\\\\\\"\\\\n            );\\\\n            \\\\n            // Before dispute expiry, responder or responder-authorized\\\\n            // agent (i.e. watchtower) can resolve\\\\n            require(\\\\n                msg.sender == cts.responder || cts.initialStateHash.checkSignature(responderSignature, cts.responder),\\\\n                \\\\\\"CMCAdjudicator: INVALID_RESOLVER\\\\\\"\\\\n            );\\\\n            \\\\n            ITransferDefinition transferDefinition =\\\\n                ITransferDefinition(cts.transferDefinition);\\\\n            balance = transferDefinition.resolve(\\\\n                abi.encode(cts.balance),\\\\n                encodedInitialTransferState,\\\\n                encodedTransferResolver\\\\n            );\\\\n            // Verify that returned balances don\'t exceed initial balances\\\\n            require(\\\\n                balance.amount[0].add(balance.amount[1]) <=\\\\n                    cts.balance.amount[0].add(cts.balance.amount[1]),\\\\n                \\\\\\"CMCAdjudicator: INVALID_BALANCES\\\\\\"\\\\n            );\\\\n        } else {\\\\n            // After dispute expiry, if the responder hasn\'t resolved, we defund the initial balance\\\\n            balance = cts.balance;\\\\n        }\\\\n\\\\n        // Depending on previous code path, defund either resolved or initial balance\\\\n        makeBalanceExitable(cts.assetId, balance);\\\\n\\\\n        // Emit event\\\\n        emit TransferDefunded(\\\\n            msg.sender,\\\\n            cts,\\\\n            transferDispute,\\\\n            encodedInitialTransferState,\\\\n            encodedTransferResolver,\\\\n            balance\\\\n        );\\\\n    }\\\\n\\\\n    function verifySignaturesOnChannelStateHash(\\\\n        CoreChannelState calldata ccs,\\\\n        bytes32 ccsHash,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) internal pure {\\\\n        bytes32 commitment =\\\\n            keccak256(abi.encode(CommitmentType.ChannelState, ccsHash));\\\\n        require(\\\\n            commitment.checkSignature(aliceSignature, ccs.alice),\\\\n            \\\\\\"CMCAdjudicator: INVALID_ALICE_SIG\\\\\\"\\\\n        );\\\\n        require(\\\\n            commitment.checkSignature(bobSignature, ccs.bob),\\\\n            \\\\\\"CMCAdjudicator: INVALID_BOB_SIG\\\\\\"\\\\n        );\\\\n    }\\\\n\\\\n    function verifyMerkleProof(\\\\n        bytes32[] calldata proof,\\\\n        bytes32 root,\\\\n        bytes32 leaf\\\\n    ) internal pure {\\\\n        require(\\\\n            MerkleProof.verify(proof, root, leaf),\\\\n            \\\\\\"CMCAdjudicator: INVALID_MERKLE_PROOF\\\\\\"\\\\n        );\\\\n    }\\\\n\\\\n    function inConsensusPhase() internal view returns (bool) {\\\\n        return block.timestamp < channelDispute.consensusExpiry;\\\\n    }\\\\n\\\\n    function inDefundPhase() internal view returns (bool) {\\\\n        return\\\\n            channelDispute.consensusExpiry <= block.timestamp &&\\\\n            block.timestamp < channelDispute.defundExpiry;\\\\n    }\\\\n\\\\n    function hashChannelState(CoreChannelState calldata ccs)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        return keccak256(abi.encode(ccs));\\\\n    }\\\\n\\\\n    function hashTransferState(CoreTransferState calldata cts)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        return keccak256(abi.encode(cts));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x351fb7770cbb6fbb6f3470e63d5a9e93c817722f9c8e2e5c62e38ebf8c6e389b\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/CMCAsset.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/ICMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/Types.sol\\\\\\";\\\\nimport \\\\\\"./CMCCore.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibAsset.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibMath.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/math/Math.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/math/SafeMath.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\\\\";\\\\n\\\\n/// @title CMCAsset\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains logic to safely transfer channel assets (even if they are\\\\n///         noncompliant). During adjudication, balances from defunding the\\\\n///         channel or defunding transfers are registered as withdrawable. Once\\\\n///         they are registered, the owner (or a watchtower on behalf of the\\\\n///         owner), may call `exit` to reclaim funds from the multisig.\\\\n\\\\ncontract CMCAsset is CMCCore, ICMCAsset {\\\\n    using SafeMath for uint256;\\\\n    using LibMath for uint256;\\\\n\\\\n    mapping(address => uint256) internal totalTransferred;\\\\n    mapping(address => mapping(address => uint256))\\\\n        private exitableAmount;\\\\n\\\\n    function registerTransfer(address assetId, uint256 amount) internal {\\\\n        totalTransferred[assetId] += amount;\\\\n    }\\\\n\\\\n    function getTotalTransferred(address assetId)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (uint256)\\\\n    {\\\\n        return totalTransferred[assetId];\\\\n    }\\\\n\\\\n    function makeExitable(\\\\n        address assetId,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal {\\\\n        exitableAmount[assetId][\\\\n            recipient\\\\n        ] = exitableAmount[assetId][recipient].satAdd(amount);\\\\n    }\\\\n\\\\n    function makeBalanceExitable(\\\\n        address assetId,\\\\n        Balance memory balance\\\\n    ) internal {\\\\n        for (uint256 i = 0; i < 2; i++) {\\\\n            uint256 amount = balance.amount[i];\\\\n            if (amount > 0) {\\\\n                makeExitable(assetId, balance.to[i], amount);\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n    function getExitableAmount(address assetId, address owner)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (uint256)\\\\n    {\\\\n        return exitableAmount[assetId][owner];\\\\n    }\\\\n\\\\n    function getAvailableAmount(address assetId, uint256 maxAmount)\\\\n        internal\\\\n        view\\\\n        returns (uint256)\\\\n    {\\\\n        // Taking the min protects against the case where the multisig\\\\n        // holds less than the amount that is trying to be withdrawn\\\\n        // while still allowing the total of the funds to be removed\\\\n        // without the transaction reverting.\\\\n        return Math.min(maxAmount, LibAsset.getOwnBalance(assetId));\\\\n    }\\\\n\\\\n    function transferAsset(\\\\n        address assetId,\\\\n        address payable recipient,\\\\n        uint256 amount\\\\n    ) internal {\\\\n        registerTransfer(assetId, amount);\\\\n        require(\\\\n            LibAsset.unregisteredTransfer(assetId, recipient, amount),\\\\n            \\\\\\"CMCAsset: TRANSFER_FAILED\\\\\\"\\\\n        );\\\\n    }\\\\n\\\\n    function exit(\\\\n        address assetId,\\\\n        address owner,\\\\n        address payable recipient\\\\n    ) external override onlyViaProxy nonReentrant {\\\\n        // Either the owner must be the recipient, or in control\\\\n        // of setting the recipient of the funds to whomever they\\\\n        // choose\\\\n        require(\\\\n            msg.sender == owner || owner == recipient,\\\\n            \\\\\\"CMCAsset: OWNER_MISMATCH\\\\\\"\\\\n        );\\\\n\\\\n        uint256 amount =\\\\n            getAvailableAmount(\\\\n                assetId,\\\\n                exitableAmount[assetId][owner]\\\\n            );\\\\n\\\\n        // Revert if amount is 0\\\\n        require(amount > 0, \\\\\\"CMCAsset: NO_OP\\\\\\");\\\\n\\\\n        // Reduce the amount claimable from the multisig by the owner\\\\n        exitableAmount[assetId][\\\\n            owner\\\\n        ] = exitableAmount[assetId][owner].sub(amount);\\\\n\\\\n        // Perform transfer\\\\n        transferAsset(assetId, recipient, amount);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x39c1bd81d8ec2a0fa7c23aad683017f5e2ec28a2db43643020649f935b5b74bf\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/CMCCore.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/ICMCCore.sol\\\\\\";\\\\nimport \\\\\\"./ReentrancyGuard.sol\\\\\\";\\\\n\\\\n/// @title CMCCore\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains logic pertaining to the participants of a channel,\\\\n///         including setting and retrieving the participants and the\\\\n///         mastercopy.\\\\n\\\\ncontract CMCCore is ReentrancyGuard, ICMCCore {\\\\n    address private immutable mastercopyAddress;\\\\n\\\\n    address internal alice;\\\\n    address internal bob;\\\\n\\\\n    /// @notice Set invalid participants to block the mastercopy from being used directly\\\\n    ///         Nonzero address also prevents the mastercopy from being setup\\\\n    ///         Only setting alice is sufficient, setting bob too wouldn\'t change anything\\\\n    constructor() {\\\\n        mastercopyAddress = address(this);\\\\n    }\\\\n\\\\n    // Prevents us from calling methods directly from the mastercopy contract\\\\n    modifier onlyViaProxy {\\\\n        require(\\\\n            address(this) != mastercopyAddress,\\\\n            \\\\\\"Mastercopy: ONLY_VIA_PROXY\\\\\\"\\\\n        );\\\\n        _;\\\\n    }\\\\n\\\\n    /// @notice Contract constructor for Proxied copies\\\\n    /// @param _alice: Address representing user with function deposit\\\\n    /// @param _bob: Address representing user with multisig deposit\\\\n    function setup(address _alice, address _bob)\\\\n        external\\\\n        override\\\\n        onlyViaProxy\\\\n    {\\\\n        require(alice == address(0), \\\\\\"CMCCore: ALREADY_SETUP\\\\\\");\\\\n        require(\\\\n            _alice != address(0) && _bob != address(0),\\\\n            \\\\\\"CMCCore: INVALID_PARTICIPANT\\\\\\"\\\\n        );\\\\n        require(_alice != _bob, \\\\\\"CMCCore: IDENTICAL_PARTICIPANTS\\\\\\");\\\\n        ReentrancyGuard.setup();\\\\n        alice = _alice;\\\\n        bob = _bob;\\\\n    }\\\\n\\\\n    /// @notice A getter function for the bob of the multisig\\\\n    /// @return Bob\'s signer address\\\\n    function getAlice()\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (address)\\\\n    {\\\\n        return alice;\\\\n    }\\\\n\\\\n    /// @notice A getter function for the bob of the multisig\\\\n    /// @return Alice\'s signer address\\\\n    function getBob()\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (address)\\\\n    {\\\\n        return bob;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x37324d80a19f1feb6e413fe6a41d82b5dba38bca62e0e05ae6f420000dd93c53\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/CMCDeposit.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/ICMCDeposit.sol\\\\\\";\\\\nimport \\\\\\"./CMCCore.sol\\\\\\";\\\\nimport \\\\\\"./CMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibAsset.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibERC20.sol\\\\\\";\\\\n\\\\n/// @title CMCDeposit\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains logic supporting channel multisig deposits. Channel\\\\n///         funding is asymmetric, with `alice` having to call a deposit\\\\n///         function which tracks the total amount she has deposited so far,\\\\n///         and any other funds in the multisig being attributed to `bob`.\\\\n\\\\ncontract CMCDeposit is CMCCore, CMCAsset, ICMCDeposit {\\\\n    mapping(address => uint256) private depositsAlice;\\\\n\\\\n    receive() external payable onlyViaProxy nonReentrant {}\\\\n\\\\n    function getTotalDepositsAlice(address assetId)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (uint256)\\\\n    {\\\\n        return _getTotalDepositsAlice(assetId);\\\\n    }\\\\n\\\\n    function _getTotalDepositsAlice(address assetId)\\\\n        internal\\\\n        view\\\\n        returns (uint256)\\\\n    {\\\\n        return depositsAlice[assetId];\\\\n    }\\\\n\\\\n    function getTotalDepositsBob(address assetId)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (uint256)\\\\n    {\\\\n        return _getTotalDepositsBob(assetId);\\\\n    }\\\\n\\\\n    // Calculated using invariant onchain properties. Note we DONT use safemath here\\\\n    function _getTotalDepositsBob(address assetId)\\\\n        internal\\\\n        view\\\\n        returns (uint256)\\\\n    {\\\\n        return\\\\n            LibAsset.getOwnBalance(assetId) +\\\\n            totalTransferred[assetId] -\\\\n            depositsAlice[assetId];\\\\n    }\\\\n\\\\n    function depositAlice(address assetId, uint256 amount)\\\\n        external\\\\n        payable\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrant\\\\n    {\\\\n        if (LibAsset.isEther(assetId)) {\\\\n            require(msg.value == amount, \\\\\\"CMCDeposit: VALUE_MISMATCH\\\\\\");\\\\n        } else {\\\\n            // If ETH is sent along, it will be attributed to bob\\\\n            require(msg.value == 0, \\\\\\"CMCDeposit: ETH_WITH_ERC_TRANSFER\\\\\\");\\\\n            require(\\\\n                LibERC20.transferFrom(\\\\n                    assetId,\\\\n                    msg.sender,\\\\n                    address(this),\\\\n                    amount\\\\n                ),\\\\n                \\\\\\"CMCDeposit: ERC20_TRANSFER_FAILED\\\\\\"\\\\n            );\\\\n        }\\\\n        // NOTE: explicitly do NOT use safemath here\\\\n        depositsAlice[assetId] += amount;\\\\n        emit AliceDeposited(assetId, amount);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x4d3dd828158289df93d6b5a6419bc5e8d95888aba81e62cd913af1e4c540bece\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/CMCWithdraw.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/Commitment.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/ICMCWithdraw.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/WithdrawHelper.sol\\\\\\";\\\\nimport \\\\\\"./CMCCore.sol\\\\\\";\\\\nimport \\\\\\"./CMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibAsset.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibChannelCrypto.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibUtils.sol\\\\\\";\\\\n\\\\n/// @title CMCWithdraw\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains logic for all cooperative channel multisig withdrawals.\\\\n///         Cooperative withdrawal commitments must be signed by both channel\\\\n///         participants. As part of the channel withdrawals, an arbitrary\\\\n///         call can be made, which is extracted from the withdraw data.\\\\n\\\\ncontract CMCWithdraw is CMCCore, CMCAsset, ICMCWithdraw {\\\\n    using LibChannelCrypto for bytes32;\\\\n\\\\n    mapping(bytes32 => bool) private isExecuted;\\\\n\\\\n    modifier validateWithdrawData(WithdrawData calldata wd) {\\\\n        require(\\\\n            wd.channelAddress == address(this),\\\\n            \\\\\\"CMCWithdraw: CHANNEL_MISMATCH\\\\\\"\\\\n        );\\\\n        _;\\\\n    }\\\\n\\\\n    function getWithdrawalTransactionRecord(WithdrawData calldata wd)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (bool)\\\\n    {\\\\n        return isExecuted[hashWithdrawData(wd)];\\\\n    }\\\\n\\\\n    /// @param wd The withdraw data consisting of\\\\n    /// semantic withdraw information, i.e. assetId, recipient, and amount;\\\\n    /// information to make an optional call in addition to the actual transfer,\\\\n    /// i.e. target address for the call and call payload;\\\\n    /// additional information, i.e. channel address and nonce.\\\\n    /// @param aliceSignature Signature of owner a\\\\n    /// @param bobSignature Signature of owner b\\\\n    function withdraw(\\\\n        WithdrawData calldata wd,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) external override onlyViaProxy nonReentrant validateWithdrawData(wd) {\\\\n        // Generate hash\\\\n        bytes32 wdHash = hashWithdrawData(wd);\\\\n\\\\n        // Verify Alice\'s and Bob\'s signature on the withdraw data\\\\n        verifySignaturesOnWithdrawDataHash(wdHash, aliceSignature, bobSignature);\\\\n\\\\n        // Replay protection\\\\n        require(!isExecuted[wdHash], \\\\\\"CMCWithdraw: ALREADY_EXECUTED\\\\\\");\\\\n        isExecuted[wdHash] = true;\\\\n\\\\n        // Determine actually transferable amount\\\\n        uint256 actualAmount = getAvailableAmount(wd.assetId, wd.amount);\\\\n\\\\n        // Revert if actualAmount is zero && callTo is 0\\\\n        require(\\\\n            actualAmount > 0 || wd.callTo != address(0),\\\\n            \\\\\\"CMCWithdraw: NO_OP\\\\\\"\\\\n        );\\\\n\\\\n        // Register and execute the transfer\\\\n        transferAsset(wd.assetId, wd.recipient, actualAmount);\\\\n\\\\n        // Do we have to make a call in addition to the actual transfer?\\\\n        if (wd.callTo != address(0)) {\\\\n            WithdrawHelper(wd.callTo).execute(wd, actualAmount);\\\\n        }\\\\n    }\\\\n\\\\n    function verifySignaturesOnWithdrawDataHash(\\\\n        bytes32 wdHash,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) internal view {\\\\n        bytes32 commitment =\\\\n            keccak256(abi.encode(CommitmentType.WithdrawData, wdHash));\\\\n        require(\\\\n            commitment.checkSignature(aliceSignature, alice),\\\\n            \\\\\\"CMCWithdraw: INVALID_ALICE_SIG\\\\\\"\\\\n        );\\\\n        require(\\\\n            commitment.checkSignature(bobSignature, bob),\\\\n            \\\\\\"CMCWithdraw: INVALID_BOB_SIG\\\\\\"\\\\n        );\\\\n    }\\\\n\\\\n    function hashWithdrawData(WithdrawData calldata wd)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        return keccak256(abi.encode(wd));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x7fde93a55cab8b4a9497471af1f8321a6d9463a93c3c6b11cf6d5ada26326beb\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/ChannelMastercopy.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/IVectorChannel.sol\\\\\\";\\\\nimport \\\\\\"./CMCCore.sol\\\\\\";\\\\nimport \\\\\\"./CMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./CMCDeposit.sol\\\\\\";\\\\nimport \\\\\\"./CMCWithdraw.sol\\\\\\";\\\\nimport \\\\\\"./CMCAdjudicator.sol\\\\\\";\\\\n\\\\n/// @title ChannelMastercopy\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains the logic used by all Vector multisigs. A proxy to this\\\\n///         contract is deployed per-channel using the ChannelFactory.sol.\\\\n///         Supports channel adjudication logic, deposit logic, and arbitrary\\\\n///         calls when a commitment is double-signed.\\\\ncontract ChannelMastercopy is\\\\n    CMCCore,\\\\n    CMCAsset,\\\\n    CMCDeposit,\\\\n    CMCWithdraw,\\\\n    CMCAdjudicator,\\\\n    IVectorChannel\\\\n{\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x96d68c908eb39a0002b574c423306ef1b9991da56087cb8f5e2d8b908676b3c7\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/ReentrancyGuard.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\n/// @title CMCWithdraw\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice A \\\\\\"mutex\\\\\\" reentrancy guard, heavily influenced by OpenZeppelin.\\\\n\\\\ncontract ReentrancyGuard {\\\\n    uint256 private constant OPEN = 1;\\\\n    uint256 private constant LOCKED = 2;\\\\n\\\\n    uint256 public lock;\\\\n\\\\n    function setup() internal {\\\\n        lock = OPEN;\\\\n    }\\\\n\\\\n    modifier nonReentrant() {\\\\n        require(lock == OPEN, \\\\\\"ReentrancyGuard: REENTRANT_CALL\\\\\\");\\\\n        lock = LOCKED;\\\\n        _;\\\\n        lock = OPEN;\\\\n    }\\\\n\\\\n    modifier nonReentrantView() {\\\\n        require(lock == OPEN, \\\\\\"ReentrancyGuard: REENTRANT_CALL\\\\\\");\\\\n        _;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf7adf3f05703e0176d892051633e6ca3291e5a3d7ab769f880c03a0d0849dfa7\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/Commitment.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nenum CommitmentType {ChannelState, WithdrawData}\\\\n\\",\\"keccak256\\":\\"0xabfb62d2dbe45e307fc08742f87d2ff5d6faa9ab065f0c2395dc4adcbe0a9c20\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCAdjudicator.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./Types.sol\\\\\\";\\\\n\\\\ninterface ICMCAdjudicator {\\\\n    struct CoreChannelState {\\\\n        address channelAddress;\\\\n        address alice;\\\\n        address bob;\\\\n        address[] assetIds;\\\\n        Balance[] balances;\\\\n        uint256[] processedDepositsA;\\\\n        uint256[] processedDepositsB;\\\\n        uint256[] defundNonces;\\\\n        uint256 timeout;\\\\n        uint256 nonce;\\\\n        bytes32 merkleRoot;\\\\n    }\\\\n\\\\n    struct CoreTransferState {\\\\n        address channelAddress;\\\\n        bytes32 transferId;\\\\n        address transferDefinition;\\\\n        address initiator;\\\\n        address responder;\\\\n        address assetId;\\\\n        Balance balance;\\\\n        uint256 transferTimeout;\\\\n        bytes32 initialStateHash;\\\\n    }\\\\n\\\\n    struct ChannelDispute {\\\\n        bytes32 channelStateHash;\\\\n        uint256 nonce;\\\\n        bytes32 merkleRoot;\\\\n        uint256 consensusExpiry;\\\\n        uint256 defundExpiry;\\\\n    }\\\\n\\\\n    struct TransferDispute {\\\\n        bytes32 transferStateHash;\\\\n        uint256 transferDisputeExpiry;\\\\n        bool isDefunded;\\\\n    }\\\\n\\\\n    event ChannelDisputed(\\\\n        address disputer,\\\\n        CoreChannelState state,\\\\n        ChannelDispute dispute\\\\n    );\\\\n\\\\n    event ChannelDefunded(\\\\n        address defunder,\\\\n        CoreChannelState state,\\\\n        ChannelDispute dispute,\\\\n        address[] assetIds\\\\n    );\\\\n\\\\n    event TransferDisputed(\\\\n        address disputer,\\\\n        CoreTransferState state,\\\\n        TransferDispute dispute\\\\n    );\\\\n\\\\n    event TransferDefunded(\\\\n        address defunder,\\\\n        CoreTransferState state,\\\\n        TransferDispute dispute,\\\\n        bytes encodedInitialState,\\\\n        bytes encodedResolver,\\\\n        Balance balance\\\\n    );\\\\n\\\\n    function getChannelDispute() external view returns (ChannelDispute memory);\\\\n\\\\n    function getDefundNonce(address assetId) external view returns (uint256);\\\\n\\\\n    function getTransferDispute(bytes32 transferId)\\\\n        external\\\\n        view\\\\n        returns (TransferDispute memory);\\\\n\\\\n    function disputeChannel(\\\\n        CoreChannelState calldata ccs,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) external;\\\\n\\\\n    function defundChannel(\\\\n        CoreChannelState calldata ccs,\\\\n        address[] calldata assetIds,\\\\n        uint256[] calldata indices\\\\n    ) external;\\\\n\\\\n    function disputeTransfer(\\\\n        CoreTransferState calldata cts,\\\\n        bytes32[] calldata merkleProofData\\\\n    ) external;\\\\n\\\\n    function defundTransfer(\\\\n        CoreTransferState calldata cts,\\\\n        bytes calldata encodedInitialTransferState,\\\\n        bytes calldata encodedTransferResolver,\\\\n        bytes calldata responderSignature\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x88522bb51c2b9991b24ef33a3c776ac76d96060ebbc33cd5b2b14513fb21d237\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCAsset.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface ICMCAsset {\\\\n    function getTotalTransferred(address assetId)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function getExitableAmount(address assetId, address owner)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function exit(\\\\n        address assetId,\\\\n        address owner,\\\\n        address payable recipient\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x895d89536e8ca469afe642b7001f0dfff497ce29d5d73f862b07a1cdc483f3f7\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCCore.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface ICMCCore {\\\\n    function setup(address _alice, address _bob) external;\\\\n\\\\n    function getAlice() external view returns (address);\\\\n\\\\n    function getBob() external view returns (address);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x8e8da2d8fb5198441ba6cdff018dff9e4145b07d575647c990659adad637ec8c\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCDeposit.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface ICMCDeposit {\\\\n    event AliceDeposited(address assetId, uint256 amount);\\\\n    \\\\n    function getTotalDepositsAlice(address assetId)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function getTotalDepositsBob(address assetId)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function depositAlice(address assetId, uint256 amount) external payable;\\\\n}\\\\n\\",\\"keccak256\\":\\"0xdf6f284e44d88013cf9d51220315fb37e63086e470442685891c90aadd138295\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCWithdraw.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nstruct WithdrawData {\\\\n    address channelAddress;\\\\n    address assetId;\\\\n    address payable recipient;\\\\n    uint256 amount;\\\\n    uint256 nonce;\\\\n    address callTo;\\\\n    bytes callData;\\\\n}\\\\n\\\\ninterface ICMCWithdraw {\\\\n    function getWithdrawalTransactionRecord(WithdrawData calldata wd)\\\\n        external\\\\n        view\\\\n        returns (bool);\\\\n\\\\n    function withdraw(\\\\n        WithdrawData calldata wd,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x097dfe95ad19096f9a3dd0138b4a51680c26e665d1639278a7c0a5c9f7fc5c78\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ITransferDefinition.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./ITransferRegistry.sol\\\\\\";\\\\nimport \\\\\\"./Types.sol\\\\\\";\\\\n\\\\ninterface ITransferDefinition {\\\\n    // Validates the initial state of the transfer.\\\\n    // Called by validator.ts during `create` updates.\\\\n    function create(bytes calldata encodedBalance, bytes calldata)\\\\n        external\\\\n        view\\\\n        returns (bool);\\\\n\\\\n    // Performs a state transition to resolve a transfer and returns final balances.\\\\n    // Called by validator.ts during `resolve` updates.\\\\n    function resolve(\\\\n        bytes calldata encodedBalance,\\\\n        bytes calldata,\\\\n        bytes calldata\\\\n    ) external view returns (Balance memory);\\\\n\\\\n    // Should also have the following properties:\\\\n    // string public constant override Name = \\\\\\"...\\\\\\";\\\\n    // string public constant override StateEncoding = \\\\\\"...\\\\\\";\\\\n    // string public constant override ResolverEncoding = \\\\\\"...\\\\\\";\\\\n    // These properties are included on the transfer specifically\\\\n    // to make it easier for implementers to add new transfers by\\\\n    // only include a `.sol` file\\\\n    function Name() external view returns (string memory);\\\\n\\\\n    function StateEncoding() external view returns (string memory);\\\\n\\\\n    function ResolverEncoding() external view returns (string memory);\\\\n\\\\n    function EncodedCancel() external view returns (bytes memory);\\\\n\\\\n    function getRegistryInformation()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd8eef575aa791b187397c9096e6cf40431b590d3999f0a80e38f3e59f4cf4764\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ITransferRegistry.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental \\\\\\"ABIEncoderV2\\\\\\";\\\\n\\\\nstruct RegisteredTransfer {\\\\n    string name;\\\\n    address definition;\\\\n    string stateEncoding;\\\\n    string resolverEncoding;\\\\n    bytes encodedCancel;\\\\n}\\\\n\\\\ninterface ITransferRegistry {\\\\n    event TransferAdded(RegisteredTransfer transfer);\\\\n\\\\n    event TransferRemoved(RegisteredTransfer transfer);\\\\n\\\\n    // Should add a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function addTransferDefinition(RegisteredTransfer memory transfer) external;\\\\n\\\\n    // Should remove a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function removeTransferDefinition(string memory name) external;\\\\n\\\\n    // Should return all transfer defintions in registry\\\\n    function getTransferDefinitions()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer[] memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd13be6d976c64e381a0d9df10c621cd964454b6916f25df4ea6c1b4cd873a58a\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/IVectorChannel.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./ICMCCore.sol\\\\\\";\\\\nimport \\\\\\"./ICMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./ICMCDeposit.sol\\\\\\";\\\\nimport \\\\\\"./ICMCWithdraw.sol\\\\\\";\\\\nimport \\\\\\"./ICMCAdjudicator.sol\\\\\\";\\\\n\\\\ninterface IVectorChannel is\\\\n    ICMCCore,\\\\n    ICMCAsset,\\\\n    ICMCDeposit,\\\\n    ICMCWithdraw,\\\\n    ICMCAdjudicator\\\\n{}\\\\n\\",\\"keccak256\\":\\"0x9e21e3b6510bb5aecab999bfcbefe6184bd2be5a80179ef8ecadb63ddd2c8d53\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/Types.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nstruct Balance {\\\\n    uint256[2] amount; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n    address payable[2] to; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf8c71b155b630cde965f5d1db5f0d2751a9763f5a797f15d946613e9224f1046\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/WithdrawHelper.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./ICMCWithdraw.sol\\\\\\";\\\\n\\\\ninterface WithdrawHelper {\\\\n    function execute(WithdrawData calldata wd, uint256 actualAmount) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x45bd70363bc7a45001589d55d8d068a3baa321c50382c0c73f1ffae45adfc4bb\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibAsset.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./LibERC20.sol\\\\\\";\\\\nimport \\\\\\"./LibUtils.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\\\\";\\\\n\\\\n\\\\n/// @title LibAsset\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This library contains helpers for dealing with onchain transfers\\\\n///         of in-channel assets. It is designed to safely handle all asset\\\\n///         transfers out of channel in the event of an onchain dispute. Also\\\\n///         safely handles ERC20 transfers that may be non-compliant\\\\nlibrary LibAsset {\\\\n    address constant ETHER_ASSETID = address(0);\\\\n\\\\n    function isEther(address assetId) internal pure returns (bool) {\\\\n        return assetId == ETHER_ASSETID;\\\\n    }\\\\n\\\\n    function getOwnBalance(address assetId) internal view returns (uint256) {\\\\n        return\\\\n            isEther(assetId)\\\\n                ? address(this).balance\\\\n                : IERC20(assetId).balanceOf(address(this));\\\\n    }\\\\n\\\\n    function transferEther(address payable recipient, uint256 amount)\\\\n        internal\\\\n        returns (bool)\\\\n    {\\\\n        (bool success, bytes memory returnData) =\\\\n            recipient.call{value: amount}(\\\\\\"\\\\\\");\\\\n        LibUtils.revertIfCallFailed(success, returnData);\\\\n        return true;\\\\n    }\\\\n\\\\n    function transferERC20(\\\\n        address assetId,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return LibERC20.transfer(assetId, recipient, amount);\\\\n    }\\\\n\\\\n    // This function is a wrapper for transfers of Ether or ERC20 tokens,\\\\n    // both standard-compliant ones as well as tokens that exhibit the\\\\n    // missing-return-value bug.\\\\n    // Although it behaves very much like Solidity\'s `transfer` function\\\\n    // or the ERC20 `transfer` and is, in fact, designed to replace direct\\\\n    // usage of those, it is deliberately named `unregisteredTransfer`,\\\\n    // because we need to register every transfer out of the channel.\\\\n    // Therefore, it should normally not be used directly, with the single\\\\n    // exception of the `transferAsset` function in `CMCAsset.sol`,\\\\n    // which combines the \\\\\\"naked\\\\\\" unregistered transfer given below\\\\n    // with a registration.\\\\n    // USING THIS FUNCTION SOMEWHERE ELSE IS PROBABLY WRONG!\\\\n    function unregisteredTransfer(\\\\n        address assetId,\\\\n        address payable recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            isEther(assetId)\\\\n                ? transferEther(recipient, amount)\\\\n                : transferERC20(assetId, recipient, amount);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x02e7b660846ad2f56f8005f786e0e2eb1d625c83f4cfcf9fc07a9566ca86195c\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibChannelCrypto.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\\\\\";\\\\n\\\\t\\\\t\\\\n/// @author Connext <support@connext.network>\\\\t\\\\t\\\\n/// @notice This library contains helpers for recovering signatures from a\\\\t\\\\t\\\\n///         Vector commitments. Channels do not allow for arbitrary signing of\\\\t\\\\t\\\\n///         messages to prevent misuse of private keys by injected providers,\\\\t\\\\t\\\\n///         and instead only sign messages with a Vector channel prefix.\\\\nlibrary LibChannelCrypto {\\\\n    function checkSignature(\\\\n        bytes32 hash,\\\\n        bytes memory signature,\\\\n        address allegedSigner\\\\n    ) internal pure returns (bool) {\\\\n        return recoverChannelMessageSigner(hash, signature) == allegedSigner;\\\\n    }\\\\n\\\\n    function recoverChannelMessageSigner(bytes32 hash, bytes memory signature)\\\\n        internal\\\\n        pure\\\\n        returns (address)\\\\n    {\\\\n        bytes32 digest = toChannelSignedMessage(hash);\\\\n        return ECDSA.recover(digest, signature);\\\\n    }\\\\n\\\\n    function toChannelSignedMessage(bytes32 hash)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        // 32 is the length in bytes of hash,\\\\n        // enforced by the type signature above\\\\n        return\\\\n            keccak256(abi.encodePacked(\\\\\\"\\\\\\\\x16Vector Signed Message:\\\\\\\\n32\\\\\\", hash));\\\\n    }\\\\n\\\\n    function checkUtilitySignature(\\\\n        bytes32 hash,\\\\n        bytes memory signature,\\\\n        address allegedSigner\\\\n    ) internal pure returns (bool) {\\\\n        return recoverChannelMessageSigner(hash, signature) == allegedSigner;\\\\n    }\\\\n\\\\n    function recoverUtilityMessageSigner(bytes32 hash, bytes memory signature)\\\\n        internal\\\\n        pure\\\\n        returns (address)\\\\n    {\\\\n        bytes32 digest = toUtilitySignedMessage(hash);\\\\n        return ECDSA.recover(digest, signature);\\\\n    }\\\\n\\\\n    function toUtilitySignedMessage(bytes32 hash)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        // 32 is the length in bytes of hash,\\\\n        // enforced by the type signature above\\\\n        return\\\\n            keccak256(abi.encodePacked(\\\\\\"\\\\\\\\x17Utility Signed Message:\\\\\\\\n32\\\\\\", hash));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xb8aa3679b75f2a1a5785f614f5dff9a76a689c18caa56a8df1f4e3c3167d6ece\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./LibUtils.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Address.sol\\\\\\";\\\\n\\\\n/// @title LibERC20\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This library provides several functions to safely handle\\\\n///         noncompliant tokens (i.e. does not return a boolean from\\\\n///         the transfer function)\\\\n\\\\nlibrary LibERC20 {\\\\n    function wrapCall(address assetId, bytes memory callData)\\\\n        internal\\\\n        returns (bool)\\\\n    {\\\\n        require(Address.isContract(assetId), \\\\\\"LibERC20: NO_CODE\\\\\\");\\\\n        (bool success, bytes memory returnData) = assetId.call(callData);\\\\n        LibUtils.revertIfCallFailed(success, returnData);\\\\n        return returnData.length == 0 || abi.decode(returnData, (bool));\\\\n    }\\\\n\\\\n    function approve(\\\\n        address assetId,\\\\n        address spender,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            wrapCall(\\\\n                assetId,\\\\n                abi.encodeWithSignature(\\\\n                    \\\\\\"approve(address,uint256)\\\\\\",\\\\n                    spender,\\\\n                    amount\\\\n                )\\\\n            );\\\\n    }\\\\n\\\\n    function transferFrom(\\\\n        address assetId,\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            wrapCall(\\\\n                assetId,\\\\n                abi.encodeWithSignature(\\\\n                    \\\\\\"transferFrom(address,address,uint256)\\\\\\",\\\\n                    sender,\\\\n                    recipient,\\\\n                    amount\\\\n                )\\\\n            );\\\\n    }\\\\n\\\\n    function transfer(\\\\n        address assetId,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            wrapCall(\\\\n                assetId,\\\\n                abi.encodeWithSignature(\\\\n                    \\\\\\"transfer(address,uint256)\\\\\\",\\\\n                    recipient,\\\\n                    amount\\\\n                )\\\\n            );\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x5bad1474c93a295939c23f976786f0d086abc063f19ff9c8c1d069759c4a7ff5\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibMath.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\n/// @title LibMath\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This library allows functions that would otherwise overflow and\\\\n///         revert if SafeMath was used to instead return the UINT_MAX. In the\\\\n///         adjudicator, this is used to ensure you can get the majority of\\\\n///         funds out in the event your balance > UINT_MAX and there is an\\\\n///         onchain dispute.\\\\nlibrary LibMath {\\\\n    /// @dev Returns the maximum uint256 for an addition that would overflow\\\\n    ///      (saturation arithmetic)\\\\n    function satAdd(uint256 x, uint256 y) internal pure returns (uint256) {\\\\n        uint256 sum = x + y;\\\\n        return sum >= x ? sum : type(uint256).max;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x1e6307538bfdb12a0f5234db5b9b22365b6abe2b96baa37f2e4b5d2d3f6683b8\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibUtils.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\n/// @title LibUtils\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains a helper to revert if a call was not successfully\\\\n///         made\\\\nlibrary LibUtils {\\\\n    // If success is false, reverts and passes on the revert string.\\\\n    function revertIfCallFailed(bool success, bytes memory returnData)\\\\n        internal\\\\n        pure\\\\n    {\\\\n        if (!success) {\\\\n            assembly {\\\\n                revert(add(returnData, 0x20), mload(returnData))\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf31897ed92b88739ca9c6e74d089e01c5dbf432183d2ab0b959b539842374ccd\\",\\"license\\":\\"UNLICENSED\\"}},\\"version\\":1}","bytecode":"","deployedBytecode":"","devdoc":{"author":"Connext <support@connext.network>","kind":"dev","methods":{"getAlice()":{"returns":{"_0":"Bob\'s signer address"}},"getBob()":{"returns":{"_0":"Alice\'s signer address"}},"setup(address,address)":{"params":{"_alice":": Address representing user with function deposit","_bob":": Address representing user with multisig deposit"}},"withdraw((address,address,address,uint256,uint256,address,bytes),bytes,bytes)":{"params":{"aliceSignature":"Signature of owner a","bobSignature":"Signature of owner b","wd":"The withdraw data consisting of semantic withdraw information, i.e. assetId, recipient, and amount; information to make an optional call in addition to the actual transfer, i.e. target address for the call and call payload; additional information, i.e. channel address and nonce."}}},"title":"ChannelMastercopy","version":1},"userdoc":{"kind":"user","methods":{"getAlice()":{"notice":"A getter function for the bob of the multisig"},"getBob()":{"notice":"A getter function for the bob of the multisig"},"setup(address,address)":{"notice":"Contract constructor for Proxied copies"}},"notice":"Contains the logic used by all Vector multisigs. A proxy to this         contract is deployed per-channel using the ChannelFactory.sol.         Supports channel adjudication logic, deposit logic, and arbitrary         calls when a commitment is double-signed.","version":1},"storageLayout":{"storage":[{"astId":3403,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"lock","offset":0,"slot":"0","type":"t_uint256"},{"astId":2597,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"alice","offset":0,"slot":"1","type":"t_address"},{"astId":2599,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"bob","offset":0,"slot":"2","type":"t_address"},{"astId":2348,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"totalTransferred","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":2354,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"exitableAmount","offset":0,"slot":"4","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":2732,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"depositsAlice","offset":0,"slot":"5","type":"t_mapping(t_address,t_uint256)"},{"astId":2895,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"isExecuted","offset":0,"slot":"6","type":"t_mapping(t_bytes32,t_bool)"},{"astId":1503,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"channelDispute","offset":0,"slot":"7","type":"t_struct(ChannelDispute)3596_storage"},{"astId":1507,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"defundNonces","offset":0,"slot":"12","type":"t_mapping(t_address,t_uint256)"},{"astId":1511,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"transferDisputes","offset":0,"slot":"13","type":"t_mapping(t_bytes32,t_struct(TransferDispute)3603_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_bool)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(TransferDispute)3603_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct ICMCAdjudicator.TransferDispute)","numberOfBytes":"32","value":"t_struct(TransferDispute)3603_storage"},"t_struct(ChannelDispute)3596_storage":{"encoding":"inplace","label":"struct ICMCAdjudicator.ChannelDispute","members":[{"astId":3587,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"channelStateHash","offset":0,"slot":"0","type":"t_bytes32"},{"astId":3589,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"nonce","offset":0,"slot":"1","type":"t_uint256"},{"astId":3591,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"merkleRoot","offset":0,"slot":"2","type":"t_bytes32"},{"astId":3593,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"consensusExpiry","offset":0,"slot":"3","type":"t_uint256"},{"astId":3595,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"defundExpiry","offset":0,"slot":"4","type":"t_uint256"}],"numberOfBytes":"160"},"t_struct(TransferDispute)3603_storage":{"encoding":"inplace","label":"struct ICMCAdjudicator.TransferDispute","members":[{"astId":3598,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"transferStateHash","offset":0,"slot":"0","type":"t_bytes32"},{"astId":3600,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"transferDisputeExpiry","offset":0,"slot":"1","type":"t_uint256"},{"astId":3602,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"isDefunded","offset":0,"slot":"2","type":"t_bool"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}}}')},2796:function(e){e.exports=JSON.parse('{"address":"0x4CA2F568B46f9d94Bb68940F187a1573a4AF23d5","abi":[{"inputs":[],"name":"EncodedCancel","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"Name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ResolverEncoding","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"StateEncoding","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"encodedBalance","type":"bytes"},{"internalType":"bytes","name":"encodedState","type":"bytes"}],"name":"create","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRegistryInformation","outputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"address","name":"definition","type":"address"},{"internalType":"string","name":"stateEncoding","type":"string"},{"internalType":"string","name":"resolverEncoding","type":"string"},{"internalType":"bytes","name":"encodedCancel","type":"bytes"}],"internalType":"struct RegisteredTransfer","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"encodedBalance","type":"bytes"},{"internalType":"bytes","name":"encodedState","type":"bytes"},{"internalType":"bytes","name":"encodedResolver","type":"bytes"}],"name":"resolve","outputs":[{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance","name":"","type":"tuple"}],"stateMutability":"view","type":"function"}],"transactionHash":"0xf08e7fd8f9c986be52ba954485feced5d9dc51b10f245bdfcaf83a6ca68309ba","receipt":{"to":null,"from":"0xd4b33434Cb36df9286Ef5132FCFb8062c96aC56E","contractAddress":"0x4CA2F568B46f9d94Bb68940F187a1573a4AF23d5","transactionIndex":137,"gasUsed":"795245","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","blockHash":"0x631b6d0c8303a4656bb059c68a5ce819eaf3ce3143b8e9ca5c9d71c55816a564","transactionHash":"0xf08e7fd8f9c986be52ba954485feced5d9dc51b10f245bdfcaf83a6ca68309ba","logs":[],"blockNumber":11551520,"cumulativeGasUsed":"12148145","status":1,"byzantium":true},"args":[],"solcInputHash":"89c55d5a88f10637860a9ea31a1daad3","metadata":"{\\"compiler\\":{\\"version\\":\\"0.7.1+commit.f4a555be\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[],\\"name\\":\\"EncodedCancel\\",\\"outputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"\\",\\"type\\":\\"bytes\\"}],\\"stateMutability\\":\\"pure\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"Name\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"ResolverEncoding\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"StateEncoding\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedBalance\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedState\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"create\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getRegistryInformation\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"definition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"stateEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"resolverEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedCancel\\",\\"type\\":\\"bytes\\"}],\\"internalType\\":\\"struct RegisteredTransfer\\",\\"name\\":\\"\\",\\"type\\":\\"tuple\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedBalance\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedState\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedResolver\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"resolve\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"\\",\\"type\\":\\"tuple\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"author\\":\\"Connext <support@connext.network>\\",\\"kind\\":\\"dev\\",\\"methods\\":{},\\"title\\":\\"HashlockTransfer\\",\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"notice\\":\\"This contract allows users to claim a payment locked in         the application if they provide the correct preImage. The payment is         reverted if not unlocked by the timelock if one is provided.\\",\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"src.sol/transferDefinitions/HashlockTransfer.sol\\":\\"HashlockTransfer\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"src.sol/interfaces/ITransferDefinition.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./ITransferRegistry.sol\\\\\\";\\\\nimport \\\\\\"./Types.sol\\\\\\";\\\\n\\\\ninterface ITransferDefinition {\\\\n    // Validates the initial state of the transfer.\\\\n    // Called by validator.ts during `create` updates.\\\\n    function create(bytes calldata encodedBalance, bytes calldata)\\\\n        external\\\\n        view\\\\n        returns (bool);\\\\n\\\\n    // Performs a state transition to resolve a transfer and returns final balances.\\\\n    // Called by validator.ts during `resolve` updates.\\\\n    function resolve(\\\\n        bytes calldata encodedBalance,\\\\n        bytes calldata,\\\\n        bytes calldata\\\\n    ) external view returns (Balance memory);\\\\n\\\\n    // Should also have the following properties:\\\\n    // string public constant override Name = \\\\\\"...\\\\\\";\\\\n    // string public constant override StateEncoding = \\\\\\"...\\\\\\";\\\\n    // string public constant override ResolverEncoding = \\\\\\"...\\\\\\";\\\\n    // These properties are included on the transfer specifically\\\\n    // to make it easier for implementers to add new transfers by\\\\n    // only include a `.sol` file\\\\n    function Name() external view returns (string memory);\\\\n\\\\n    function StateEncoding() external view returns (string memory);\\\\n\\\\n    function ResolverEncoding() external view returns (string memory);\\\\n\\\\n    function EncodedCancel() external view returns (bytes memory);\\\\n\\\\n    function getRegistryInformation()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd8eef575aa791b187397c9096e6cf40431b590d3999f0a80e38f3e59f4cf4764\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ITransferRegistry.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental \\\\\\"ABIEncoderV2\\\\\\";\\\\n\\\\nstruct RegisteredTransfer {\\\\n    string name;\\\\n    address definition;\\\\n    string stateEncoding;\\\\n    string resolverEncoding;\\\\n    bytes encodedCancel;\\\\n}\\\\n\\\\ninterface ITransferRegistry {\\\\n    event TransferAdded(RegisteredTransfer transfer);\\\\n\\\\n    event TransferRemoved(RegisteredTransfer transfer);\\\\n\\\\n    // Should add a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function addTransferDefinition(RegisteredTransfer memory transfer) external;\\\\n\\\\n    // Should remove a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function removeTransferDefinition(string memory name) external;\\\\n\\\\n    // Should return all transfer defintions in registry\\\\n    function getTransferDefinitions()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer[] memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd13be6d976c64e381a0d9df10c621cd964454b6916f25df4ea6c1b4cd873a58a\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/Types.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nstruct Balance {\\\\n    uint256[2] amount; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n    address payable[2] to; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf8c71b155b630cde965f5d1db5f0d2751a9763f5a797f15d946613e9224f1046\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/transferDefinitions/HashlockTransfer.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./TransferDefinition.sol\\\\\\";\\\\n\\\\n/// @title HashlockTransfer\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This contract allows users to claim a payment locked in\\\\n///         the application if they provide the correct preImage. The payment is\\\\n///         reverted if not unlocked by the timelock if one is provided.\\\\n\\\\ncontract HashlockTransfer is TransferDefinition {\\\\n    struct TransferState {\\\\n        bytes32 lockHash;\\\\n        uint256 expiry; // If 0, then no timelock is enforced\\\\n    }\\\\n\\\\n    struct TransferResolver {\\\\n        bytes32 preImage;\\\\n    }\\\\n\\\\n    // Provide registry information\\\\n    string public constant override Name = \\\\\\"HashlockTransfer\\\\\\";\\\\n    string public constant override StateEncoding =\\\\n        \\\\\\"tuple(bytes32 lockHash, uint256 expiry)\\\\\\";\\\\n    string public constant override ResolverEncoding =\\\\n        \\\\\\"tuple(bytes32 preImage)\\\\\\";\\\\n\\\\n    function EncodedCancel() external pure override returns(bytes memory) {\\\\n      TransferResolver memory resolver;\\\\n      resolver.preImage = bytes32(0);\\\\n      return abi.encode(resolver);\\\\n    } \\\\n\\\\n    function create(bytes calldata encodedBalance, bytes calldata encodedState)\\\\n        external\\\\n        view\\\\n        override\\\\n        returns (bool)\\\\n    {\\\\n        // Decode parameters\\\\n        TransferState memory state = abi.decode(encodedState, (TransferState));\\\\n        Balance memory balance = abi.decode(encodedBalance, (Balance));\\\\n\\\\n        require(\\\\n            balance.amount[0] > 0,\\\\n            \\\\\\"HashlockTransfer: ZER0_SENDER_BALANCE\\\\\\"\\\\n        );\\\\n\\\\n        require(\\\\n            balance.amount[1] == 0,\\\\n            \\\\\\"HashlockTransfer: NONZERO_RECIPIENT_BALANCE\\\\\\"\\\\n        );\\\\n        require(\\\\n            state.lockHash != bytes32(0),\\\\n            \\\\\\"HashlockTransfer: EMPTY_LOCKHASH\\\\\\"\\\\n        );\\\\n        require(\\\\n            state.expiry == 0 || state.expiry > block.timestamp,\\\\n            \\\\\\"HashlockTransfer: EXPIRED_TIMELOCK\\\\\\"\\\\n        );\\\\n\\\\n        // Valid transfer state\\\\n        return true;\\\\n    }\\\\n\\\\n    function resolve(\\\\n        bytes calldata encodedBalance,\\\\n        bytes calldata encodedState,\\\\n        bytes calldata encodedResolver\\\\n    ) external view override returns (Balance memory) {\\\\n        TransferState memory state = abi.decode(encodedState, (TransferState));\\\\n        TransferResolver memory resolver =\\\\n            abi.decode(encodedResolver, (TransferResolver));\\\\n        Balance memory balance = abi.decode(encodedBalance, (Balance));\\\\n\\\\n        // If you pass in bytes32(0), payment is canceled\\\\n        // If timelock is nonzero and has expired, payment must be canceled\\\\n        // otherwise resolve will revert\\\\n        if (resolver.preImage != bytes32(0)) {\\\\n            // Payment must not be expired\\\\n            require(state.expiry == 0 || state.expiry > block.timestamp, \\\\\\"HashlockTransfer: PAYMENT_EXPIRED\\\\\\");\\\\n\\\\n            // Check hash for normal payment unlock\\\\n            bytes32 generatedHash = sha256(abi.encode(resolver.preImage));\\\\n            require(\\\\n                state.lockHash == generatedHash,\\\\n                \\\\\\"HashlockTransfer: INVALID_PREIMAGE\\\\\\"\\\\n            );\\\\n\\\\n            // Update state\\\\n            balance.amount[1] = balance.amount[0];\\\\n            balance.amount[0] = 0;\\\\n        }\\\\n        // To cancel, the preImage must be empty (not simply incorrect)\\\\n        // There are no additional state mutations, and the preImage is\\\\n        // asserted by the `if` statement\\\\n\\\\n        return balance;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x0c403a415e87408f8f7be80d9ec3e4415189d5e85fb58e9ddef5730e4a2ae98e\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/transferDefinitions/TransferDefinition.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"../interfaces/ITransferDefinition.sol\\\\\\";\\\\nimport \\\\\\"../interfaces/ITransferRegistry.sol\\\\\\";\\\\n\\\\n/// @title TransferDefinition\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This contract helps reduce boilerplate needed when creating\\\\n///         new transfer definitions by providing an implementation of\\\\n///         the required getter\\\\n\\\\nabstract contract TransferDefinition is ITransferDefinition {\\\\n    function getRegistryInformation()\\\\n        external\\\\n        view\\\\n        override\\\\n        returns (RegisteredTransfer memory)\\\\n    {\\\\n        return\\\\n            RegisteredTransfer({\\\\n                name: this.Name(),\\\\n                stateEncoding: this.StateEncoding(),\\\\n                resolverEncoding: this.ResolverEncoding(),\\\\n                definition: address(this),\\\\n                encodedCancel: this.EncodedCancel()\\\\n            });\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xdb8bcb3fadd5c514bc6585b0a48d66952570bbb1a62f18b9dc9a4f693dc11c5e\\",\\"license\\":\\"UNLICENSED\\"}},\\"version\\":1}","bytecode":"0x608060405234801561001057600080fd5b50610d6c806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638052474d1161005b5780638052474d146100bd5780638de8b77e146100c55780638ef98a7e146100cd57806394184ba9146100ed5761007d565b80630528aa1c14610082578063206162be146100a05780633722aff9146100b5575b600080fd5b61008a61010d565b6040516100979190610a10565b60405180910390f35b6100a8610141565b6040516100979190610c1e565b61008a61034d565b61008a610386565b61008a6103b2565b6100e06100db3660046107ae565b6103ce565b6040516100979190610bb4565b6101006100fb366004610745565b61050e565b60405161009791906109fc565b60606101176105da565b6000815260405161012c908290602001610cae565b60405160208183030381529060405291505090565b6101496105ec565b6040518060a00160405280306001600160a01b0316638052474d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561018d57600080fd5b505afa1580156101a1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101c99190810190610844565b8152602001306001600160a01b03168152602001306001600160a01b0316638de8b77e6040518163ffffffff1660e01b815260040160006040518083038186803b15801561021657600080fd5b505afa15801561022a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102529190810190610844565b8152602001306001600160a01b0316633722aff96040518163ffffffff1660e01b815260040160006040518083038186803b15801561029057600080fd5b505afa1580156102a4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102cc9190810190610844565b8152602001306001600160a01b0316630528aa1c6040518163ffffffff1660e01b815260040160006040518083038186803b15801561030a57600080fd5b505afa15801561031e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103469190810190610844565b9052905090565b6040518060400160405280601781526020017f7475706c65286279746573333220707265496d6167652900000000000000000081525081565b6040518060400160405280601081526020016f2430b9b43637b1b5aa3930b739b332b960811b81525081565b604051806060016040528060278152602001610d106027913981565b6103d6610624565b6103de610649565b6103ea85870187610981565b90506103f46105da565b6104008486018661095c565b905061040a610624565b610416898b018b61087f565b82519091501561050157602083015115806104345750428360200151115b6104595760405162461bcd60e51b815260040161045090610b3e565b60405180910390fd5b6000600283600001516040516020016104729190610a07565b60408051601f198184030181529082905261048c916109e0565b602060405180830381855afa1580156104a9573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906104cc919061072d565b845190915081146104ef5760405162461bcd60e51b815260040161045090610a75565b50805180516020909101528051600090525b9998505050505050505050565b6000610518610649565b61052483850185610981565b905061052e610624565b61053a8688018861087f565b80515190915061055c5760405162461bcd60e51b815260040161045090610ab7565b8051602001511561057f5760405162461bcd60e51b815260040161045090610a2a565b815161059d5760405162461bcd60e51b815260040161045090610b7f565b602082015115806105b15750428260200151115b6105cd5760405162461bcd60e51b815260040161045090610afc565b5060019695505050505050565b60408051602081019091526000815290565b6040518060a001604052806060815260200160006001600160a01b031681526020016060815260200160608152602001606081525090565b6040518060400160405280610637610660565b8152602001610644610660565b905290565b604080518082019091526000808252602082015290565b60405180604001604052806002906020820280368337509192915050565b60008083601f84011261068f578182fd5b50813567ffffffffffffffff8111156106a6578182fd5b6020830191508360208285010111156106be57600080fd5b9250929050565b600082601f8301126106d5578081fd5b815167ffffffffffffffff8111156106eb578182fd5b6106fe601f8201601f1916602001610cb8565b915080825283602082850101111561071557600080fd5b610726816020840160208601610cdf565b5092915050565b60006020828403121561073e578081fd5b5051919050565b6000806000806040858703121561075a578283fd5b843567ffffffffffffffff80821115610771578485fd5b61077d8883890161067e565b90965094506020870135915080821115610795578384fd5b506107a28782880161067e565b95989497509550505050565b600080600080600080606087890312156107c6578182fd5b863567ffffffffffffffff808211156107dd578384fd5b6107e98a838b0161067e565b90985096506020890135915080821115610801578384fd5b61080d8a838b0161067e565b90965094506040890135915080821115610825578384fd5b5061083289828a0161067e565b979a9699509497509295939492505050565b600060208284031215610855578081fd5b815167ffffffffffffffff81111561086b578182fd5b610877848285016106c5565b949350505050565b600060808284031215610890578081fd5b61089a6040610cb8565b83601f8401126108a8578182fd5b6108b26040610cb8565b808460408601878111156108c4578586fd5b855b60028110156108e55782358552602094850194909201916001016108c6565b5082855287605f8801126108f7578586fd5b6109016040610cb8565b9350839250905060808601871015610917578485fd5b845b600281101561094d5781356001600160a01b0381168114610938578687fd5b84526020938401939190910190600101610919565b50506020830152509392505050565b60006020828403121561096d578081fd5b6109776020610cb8565b9135825250919050565b600060408284031215610992578081fd5b61099c6040610cb8565b82358152602083013560208201528091505092915050565b600081518084526109cc816020860160208601610cdf565b601f01601f19169290920160200192915050565b600082516109f2818460208701610cdf565b9190910192915050565b901515815260200190565b90815260200190565b600060208252610a2360208301846109b4565b9392505050565b6020808252602b908201527f486173686c6f636b5472616e736665723a204e4f4e5a45524f5f52454349504960408201526a454e545f42414c414e434560a81b606082015260800190565b60208082526022908201527f486173686c6f636b5472616e736665723a20494e56414c49445f505245494d41604082015261474560f01b606082015260800190565b60208082526025908201527f486173686c6f636b5472616e736665723a205a4552305f53454e4445525f42416040820152644c414e434560d81b606082015260800190565b60208082526022908201527f486173686c6f636b5472616e736665723a20455850495245445f54494d454c4f604082015261434b60f01b606082015260800190565b60208082526021908201527f486173686c6f636b5472616e736665723a205041594d454e545f4558504952456040820152601160fa1b606082015260800190565b6020808252818101527f486173686c6f636b5472616e736665723a20454d5054595f4c4f434b48415348604082015260600190565b815160808201908260005b6002811015610bde578251825260209283019290910190600101610bbf565b5050506020808401516040840160005b6002811015610c145782516001600160a01b031682529183019190830190600101610bee565b5050505092915050565b600060208252825160a06020840152610c3a60c08401826109b4565b905060018060a01b0360208501511660408401526040840151601f1980858403016060860152610c6a83836109b4565b92506060860151915080858403016080860152610c8783836109b4565b925060808601519150808584030160a086015250610ca582826109b4565b95945050505050565b9051815260200190565b60405181810167ffffffffffffffff81118282101715610cd757600080fd5b604052919050565b60005b83811015610cfa578181015183820152602001610ce2565b83811115610d09576000848401525b5050505056fe7475706c652862797465733332206c6f636b486173682c2075696e743235362065787069727929a2646970667358221220f7a1aad5efbe0de5a92ccb20170dbe8d594d5a4ccb943cb48fbcd3fcbc98e24c64736f6c63430007010033","deployedBytecode":"0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80638052474d1161005b5780638052474d146100bd5780638de8b77e146100c55780638ef98a7e146100cd57806394184ba9146100ed5761007d565b80630528aa1c14610082578063206162be146100a05780633722aff9146100b5575b600080fd5b61008a61010d565b6040516100979190610a10565b60405180910390f35b6100a8610141565b6040516100979190610c1e565b61008a61034d565b61008a610386565b61008a6103b2565b6100e06100db3660046107ae565b6103ce565b6040516100979190610bb4565b6101006100fb366004610745565b61050e565b60405161009791906109fc565b60606101176105da565b6000815260405161012c908290602001610cae565b60405160208183030381529060405291505090565b6101496105ec565b6040518060a00160405280306001600160a01b0316638052474d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561018d57600080fd5b505afa1580156101a1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101c99190810190610844565b8152602001306001600160a01b03168152602001306001600160a01b0316638de8b77e6040518163ffffffff1660e01b815260040160006040518083038186803b15801561021657600080fd5b505afa15801561022a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102529190810190610844565b8152602001306001600160a01b0316633722aff96040518163ffffffff1660e01b815260040160006040518083038186803b15801561029057600080fd5b505afa1580156102a4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102cc9190810190610844565b8152602001306001600160a01b0316630528aa1c6040518163ffffffff1660e01b815260040160006040518083038186803b15801561030a57600080fd5b505afa15801561031e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103469190810190610844565b9052905090565b6040518060400160405280601781526020017f7475706c65286279746573333220707265496d6167652900000000000000000081525081565b6040518060400160405280601081526020016f2430b9b43637b1b5aa3930b739b332b960811b81525081565b604051806060016040528060278152602001610d106027913981565b6103d6610624565b6103de610649565b6103ea85870187610981565b90506103f46105da565b6104008486018661095c565b905061040a610624565b610416898b018b61087f565b82519091501561050157602083015115806104345750428360200151115b6104595760405162461bcd60e51b815260040161045090610b3e565b60405180910390fd5b6000600283600001516040516020016104729190610a07565b60408051601f198184030181529082905261048c916109e0565b602060405180830381855afa1580156104a9573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906104cc919061072d565b845190915081146104ef5760405162461bcd60e51b815260040161045090610a75565b50805180516020909101528051600090525b9998505050505050505050565b6000610518610649565b61052483850185610981565b905061052e610624565b61053a8688018861087f565b80515190915061055c5760405162461bcd60e51b815260040161045090610ab7565b8051602001511561057f5760405162461bcd60e51b815260040161045090610a2a565b815161059d5760405162461bcd60e51b815260040161045090610b7f565b602082015115806105b15750428260200151115b6105cd5760405162461bcd60e51b815260040161045090610afc565b5060019695505050505050565b60408051602081019091526000815290565b6040518060a001604052806060815260200160006001600160a01b031681526020016060815260200160608152602001606081525090565b6040518060400160405280610637610660565b8152602001610644610660565b905290565b604080518082019091526000808252602082015290565b60405180604001604052806002906020820280368337509192915050565b60008083601f84011261068f578182fd5b50813567ffffffffffffffff8111156106a6578182fd5b6020830191508360208285010111156106be57600080fd5b9250929050565b600082601f8301126106d5578081fd5b815167ffffffffffffffff8111156106eb578182fd5b6106fe601f8201601f1916602001610cb8565b915080825283602082850101111561071557600080fd5b610726816020840160208601610cdf565b5092915050565b60006020828403121561073e578081fd5b5051919050565b6000806000806040858703121561075a578283fd5b843567ffffffffffffffff80821115610771578485fd5b61077d8883890161067e565b90965094506020870135915080821115610795578384fd5b506107a28782880161067e565b95989497509550505050565b600080600080600080606087890312156107c6578182fd5b863567ffffffffffffffff808211156107dd578384fd5b6107e98a838b0161067e565b90985096506020890135915080821115610801578384fd5b61080d8a838b0161067e565b90965094506040890135915080821115610825578384fd5b5061083289828a0161067e565b979a9699509497509295939492505050565b600060208284031215610855578081fd5b815167ffffffffffffffff81111561086b578182fd5b610877848285016106c5565b949350505050565b600060808284031215610890578081fd5b61089a6040610cb8565b83601f8401126108a8578182fd5b6108b26040610cb8565b808460408601878111156108c4578586fd5b855b60028110156108e55782358552602094850194909201916001016108c6565b5082855287605f8801126108f7578586fd5b6109016040610cb8565b9350839250905060808601871015610917578485fd5b845b600281101561094d5781356001600160a01b0381168114610938578687fd5b84526020938401939190910190600101610919565b50506020830152509392505050565b60006020828403121561096d578081fd5b6109776020610cb8565b9135825250919050565b600060408284031215610992578081fd5b61099c6040610cb8565b82358152602083013560208201528091505092915050565b600081518084526109cc816020860160208601610cdf565b601f01601f19169290920160200192915050565b600082516109f2818460208701610cdf565b9190910192915050565b901515815260200190565b90815260200190565b600060208252610a2360208301846109b4565b9392505050565b6020808252602b908201527f486173686c6f636b5472616e736665723a204e4f4e5a45524f5f52454349504960408201526a454e545f42414c414e434560a81b606082015260800190565b60208082526022908201527f486173686c6f636b5472616e736665723a20494e56414c49445f505245494d41604082015261474560f01b606082015260800190565b60208082526025908201527f486173686c6f636b5472616e736665723a205a4552305f53454e4445525f42416040820152644c414e434560d81b606082015260800190565b60208082526022908201527f486173686c6f636b5472616e736665723a20455850495245445f54494d454c4f604082015261434b60f01b606082015260800190565b60208082526021908201527f486173686c6f636b5472616e736665723a205041594d454e545f4558504952456040820152601160fa1b606082015260800190565b6020808252818101527f486173686c6f636b5472616e736665723a20454d5054595f4c4f434b48415348604082015260600190565b815160808201908260005b6002811015610bde578251825260209283019290910190600101610bbf565b5050506020808401516040840160005b6002811015610c145782516001600160a01b031682529183019190830190600101610bee565b5050505092915050565b600060208252825160a06020840152610c3a60c08401826109b4565b905060018060a01b0360208501511660408401526040840151601f1980858403016060860152610c6a83836109b4565b92506060860151915080858403016080860152610c8783836109b4565b925060808601519150808584030160a086015250610ca582826109b4565b95945050505050565b9051815260200190565b60405181810167ffffffffffffffff81118282101715610cd757600080fd5b604052919050565b60005b83811015610cfa578181015183820152602001610ce2565b83811115610d09576000848401525b5050505056fe7475706c652862797465733332206c6f636b486173682c2075696e743235362065787069727929a2646970667358221220f7a1aad5efbe0de5a92ccb20170dbe8d594d5a4ccb943cb48fbcd3fcbc98e24c64736f6c63430007010033","devdoc":{"author":"Connext <support@connext.network>","kind":"dev","methods":{},"title":"HashlockTransfer","version":1},"userdoc":{"kind":"user","methods":{},"notice":"This contract allows users to claim a payment locked in         the application if they provide the correct preImage. The payment is         reverted if not unlocked by the timelock if one is provided.","version":1},"storageLayout":{"storage":[],"types":null}}')},2797:function(e){e.exports=JSON.parse('{"address":"0x9E86dd60e0B1e7e142F033d1BdEf734c6b3224Bb","abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"transactionHash":"0x4ace558d435e320ce47616598322eab7087dcf82d9b169565a461cec0fce6985","receipt":{"to":null,"from":"0xd4b33434Cb36df9286Ef5132FCFb8062c96aC56E","contractAddress":"0x9E86dd60e0B1e7e142F033d1BdEf734c6b3224Bb","transactionIndex":108,"gasUsed":"888397","logsBloom":"0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000100000000000000000000000000000000000000000080000000000000200000000000000000000000000000000000a0000000000000000000800000000000000000000000010000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000008000000000000","blockHash":"0x6b9ad2ae22d67ea197508c3ff669bbc67561e37ff49ea6720a919670c0f80c96","transactionHash":"0x4ace558d435e320ce47616598322eab7087dcf82d9b169565a461cec0fce6985","logs":[{"transactionIndex":108,"blockNumber":11551571,"transactionHash":"0x4ace558d435e320ce47616598322eab7087dcf82d9b169565a461cec0fce6985","address":"0x9E86dd60e0B1e7e142F033d1BdEf734c6b3224Bb","topics":["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","0x0000000000000000000000000000000000000000000000000000000000000000","0x000000000000000000000000d4b33434cb36df9286ef5132fcfb8062c96ac56e"],"data":"0x00000000000000000000000000000000000000000000d3c21bcecceda1000000","logIndex":181,"blockHash":"0x6b9ad2ae22d67ea197508c3ff669bbc67561e37ff49ea6720a919670c0f80c96"}],"blockNumber":11551571,"cumulativeGasUsed":"8149506","status":1,"byzantium":true},"args":[],"solcInputHash":"89c55d5a88f10637860a9ea31a1daad3","metadata":"{\\"compiler\\":{\\"version\\":\\"0.7.1+commit.f4a555be\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"value\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Approval\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"from\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"value\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Transfer\\",\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"}],\\"name\\":\\"allowance\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"approve\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"balanceOf\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"burn\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"decimals\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"subtractedValue\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"decreaseAllowance\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"addedValue\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"increaseAllowance\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"mint\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"name\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"symbol\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"totalSupply\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"transfer\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"sender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"transferFrom\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{\\"allowance(address,address)\\":{\\"details\\":\\"See {IERC20-allowance}.\\"},\\"approve(address,uint256)\\":{\\"details\\":\\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\\"},\\"balanceOf(address)\\":{\\"details\\":\\"See {IERC20-balanceOf}.\\"},\\"decimals()\\":{\\"details\\":\\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\\"},\\"decreaseAllowance(address,uint256)\\":{\\"details\\":\\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\\"},\\"increaseAllowance(address,uint256)\\":{\\"details\\":\\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\\"},\\"name()\\":{\\"details\\":\\"Returns the name of the token.\\"},\\"symbol()\\":{\\"details\\":\\"Returns the symbol of the token, usually a shorter version of the name.\\"},\\"totalSupply()\\":{\\"details\\":\\"See {IERC20-totalSupply}.\\"},\\"transfer(address,uint256)\\":{\\"details\\":\\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\\"},\\"transferFrom(address,address,uint256)\\":{\\"details\\":\\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``\'s tokens of at least `amount`.\\"}},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"src.sol/testing/TestToken.sol\\":\\"TestToken\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/GSN/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/*\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with GSN meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address payable) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes memory) {\\\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x910a2e625b71168563edf9eeef55a50d6d699acfe27ceba3921f291829a8f938\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/math/SafeMath.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Wrappers over Solidity\'s arithmetic operations with added overflow\\\\n * checks.\\\\n *\\\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\\\n * in bugs, because programmers usually assume that an overflow raises an\\\\n * error, which is the standard behavior in high level programming languages.\\\\n * `SafeMath` restores this intuition by reverting the transaction when an\\\\n * operation overflows.\\\\n *\\\\n * Using this library instead of the unchecked operations eliminates an entire\\\\n * class of bugs, so it\'s recommended to use it always.\\\\n */\\\\nlibrary SafeMath {\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `+` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Addition cannot overflow.\\\\n     */\\\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        uint256 c = a + b;\\\\n        require(c >= a, \\\\\\"SafeMath: addition overflow\\\\\\");\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return sub(a, b, \\\\\\"SafeMath: subtraction overflow\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        require(b <= a, errorMessage);\\\\n        uint256 c = a - b;\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `*` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Multiplication cannot overflow.\\\\n     */\\\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\\\\n        // benefit is lost if \'b\' is also tested.\\\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\\\n        if (a == 0) {\\\\n            return 0;\\\\n        }\\\\n\\\\n        uint256 c = a * b;\\\\n        require(c / a == b, \\\\\\"SafeMath: multiplication overflow\\\\\\");\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return div(a, b, \\\\\\"SafeMath: division by zero\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        require(b > 0, errorMessage);\\\\n        uint256 c = a / b;\\\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * Reverts when dividing by zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return mod(a, b, \\\\\\"SafeMath: modulo by zero\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * Reverts with custom message when dividing by zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        require(b != 0, errorMessage);\\\\n        return a % b;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\nimport \\\\\\"../../GSN/Context.sol\\\\\\";\\\\nimport \\\\\\"./IERC20.sol\\\\\\";\\\\nimport \\\\\\"../../math/SafeMath.sol\\\\\\";\\\\nimport \\\\\\"../../utils/Address.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Implementation of the {IERC20} interface.\\\\n *\\\\n * This implementation is agnostic to the way tokens are created. This means\\\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\\\n *\\\\n * TIP: For a detailed writeup see our guide\\\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\\\n * to implement supply mechanisms].\\\\n *\\\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\\\n * of returning `false` on failure. This behavior is nonetheless conventional\\\\n * and does not conflict with the expectations of ERC20 applications.\\\\n *\\\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\\\n * This allows applications to reconstruct the allowance for all accounts just\\\\n * by listening to said events. Other implementations of the EIP may not emit\\\\n * these events, as it isn\'t required by the specification.\\\\n *\\\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\\\n * functions have been added to mitigate the well-known issues around setting\\\\n * allowances. See {IERC20-approve}.\\\\n */\\\\ncontract ERC20 is Context, IERC20 {\\\\n    using SafeMath for uint256;\\\\n    using Address for address;\\\\n\\\\n    mapping (address => uint256) private _balances;\\\\n\\\\n    mapping (address => mapping (address => uint256)) private _allowances;\\\\n\\\\n    uint256 private _totalSupply;\\\\n\\\\n    string private _name;\\\\n    string private _symbol;\\\\n    uint8 private _decimals;\\\\n\\\\n    /**\\\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\\\n     * a default value of 18.\\\\n     *\\\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\\\n     *\\\\n     * All three of these values are immutable: they can only be set once during\\\\n     * construction.\\\\n     */\\\\n    constructor (string memory name, string memory symbol) {\\\\n        _name = name;\\\\n        _symbol = symbol;\\\\n        _decimals = 18;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the name of the token.\\\\n     */\\\\n    function name() public view returns (string memory) {\\\\n        return _name;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\\\n     * name.\\\\n     */\\\\n    function symbol() public view returns (string memory) {\\\\n        return _symbol;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the number of decimals used to get its user representation.\\\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\\\n     *\\\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\\\n     * called.\\\\n     *\\\\n     * NOTE: This information is only used for _display_ purposes: it in\\\\n     * no way affects any of the arithmetic of the contract, including\\\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\\\n     */\\\\n    function decimals() public view returns (uint8) {\\\\n        return _decimals;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-totalSupply}.\\\\n     */\\\\n    function totalSupply() public view override returns (uint256) {\\\\n        return _totalSupply;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-balanceOf}.\\\\n     */\\\\n    function balanceOf(address account) public view override returns (uint256) {\\\\n        return _balances[account];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-transfer}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `recipient` cannot be the zero address.\\\\n     * - the caller must have a balance of at least `amount`.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\\\n        _transfer(_msgSender(), recipient, amount);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-allowance}.\\\\n     */\\\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\\\n        return _allowances[owner][spender];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-approve}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\\\n        _approve(_msgSender(), spender, amount);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-transferFrom}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\\\n     * required by the EIP. See the note at the beginning of {ERC20};\\\\n     *\\\\n     * Requirements:\\\\n     * - `sender` and `recipient` cannot be the zero address.\\\\n     * - `sender` must have a balance of at least `amount`.\\\\n     * - the caller must have allowance for ``sender``\'s tokens of at least\\\\n     * `amount`.\\\\n     */\\\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\\\n        _transfer(sender, recipient, amount);\\\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\\\\"ERC20: transfer amount exceeds allowance\\\\\\"));\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\\\n     *\\\\n     * This is an alternative to {approve} that can be used as a mitigation for\\\\n     * problems described in {IERC20-approve}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\\\n     *\\\\n     * This is an alternative to {approve} that can be used as a mitigation for\\\\n     * problems described in {IERC20-approve}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     * - `spender` must have allowance for the caller of at least\\\\n     * `subtractedValue`.\\\\n     */\\\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\\\\"ERC20: decreased allowance below zero\\\\\\"));\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\\\n     *\\\\n     * This is internal function is equivalent to {transfer}, and can be used to\\\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `sender` cannot be the zero address.\\\\n     * - `recipient` cannot be the zero address.\\\\n     * - `sender` must have a balance of at least `amount`.\\\\n     */\\\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\\\n        require(sender != address(0), \\\\\\"ERC20: transfer from the zero address\\\\\\");\\\\n        require(recipient != address(0), \\\\\\"ERC20: transfer to the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(sender, recipient, amount);\\\\n\\\\n        _balances[sender] = _balances[sender].sub(amount, \\\\\\"ERC20: transfer amount exceeds balance\\\\\\");\\\\n        _balances[recipient] = _balances[recipient].add(amount);\\\\n        emit Transfer(sender, recipient, amount);\\\\n    }\\\\n\\\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\\\n     * the total supply.\\\\n     *\\\\n     * Emits a {Transfer} event with `from` set to the zero address.\\\\n     *\\\\n     * Requirements\\\\n     *\\\\n     * - `to` cannot be the zero address.\\\\n     */\\\\n    function _mint(address account, uint256 amount) internal virtual {\\\\n        require(account != address(0), \\\\\\"ERC20: mint to the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(address(0), account, amount);\\\\n\\\\n        _totalSupply = _totalSupply.add(amount);\\\\n        _balances[account] = _balances[account].add(amount);\\\\n        emit Transfer(address(0), account, amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\\\n     * total supply.\\\\n     *\\\\n     * Emits a {Transfer} event with `to` set to the zero address.\\\\n     *\\\\n     * Requirements\\\\n     *\\\\n     * - `account` cannot be the zero address.\\\\n     * - `account` must have at least `amount` tokens.\\\\n     */\\\\n    function _burn(address account, uint256 amount) internal virtual {\\\\n        require(account != address(0), \\\\\\"ERC20: burn from the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(account, address(0), amount);\\\\n\\\\n        _balances[account] = _balances[account].sub(amount, \\\\\\"ERC20: burn amount exceeds balance\\\\\\");\\\\n        _totalSupply = _totalSupply.sub(amount);\\\\n        emit Transfer(account, address(0), amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\\\n     *\\\\n     * This internal function is equivalent to `approve`, and can be used to\\\\n     * e.g. set automatic allowances for certain subsystems, etc.\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `owner` cannot be the zero address.\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\\\n        require(owner != address(0), \\\\\\"ERC20: approve from the zero address\\\\\\");\\\\n        require(spender != address(0), \\\\\\"ERC20: approve to the zero address\\\\\\");\\\\n\\\\n        _allowances[owner][spender] = amount;\\\\n        emit Approval(owner, spender, amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\\\n     *\\\\n     * WARNING: This function should only be called from the constructor. Most\\\\n     * applications that interact with token contracts will not expect\\\\n     * {decimals} to ever change, and may work incorrectly if it does.\\\\n     */\\\\n    function _setupDecimals(uint8 decimals_) internal {\\\\n        _decimals = decimals_;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Hook that is called before any transfer of tokens. This includes\\\\n     * minting and burning.\\\\n     *\\\\n     * Calling conditions:\\\\n     *\\\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\'s tokens\\\\n     * will be to transferred to `to`.\\\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\\\n     * - when `to` is zero, `amount` of ``from``\'s tokens will be burned.\\\\n     * - `from` and `to` are never both zero.\\\\n     *\\\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\\\n     */\\\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf1ac0ee2ca2b36f90574d3b2b37422ced4fa829741d80794c62f5958a2d8f474\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Returns the amount of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender\'s allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\\\n     * allowance mechanism. `amount` is then deducted from the caller\'s\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Address.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Collection of functions related to the address type\\\\n */\\\\nlibrary Address {\\\\n    /**\\\\n     * @dev Returns true if `account` is a contract.\\\\n     *\\\\n     * [IMPORTANT]\\\\n     * ====\\\\n     * It is unsafe to assume that an address for which this function returns\\\\n     * false is an externally-owned account (EOA) and not a contract.\\\\n     *\\\\n     * Among others, `isContract` will return false for the following\\\\n     * types of addresses:\\\\n     *\\\\n     *  - an externally-owned account\\\\n     *  - a contract in construction\\\\n     *  - an address where a contract will be created\\\\n     *  - an address where a contract lived, but was destroyed\\\\n     * ====\\\\n     */\\\\n    function isContract(address account) internal view returns (bool) {\\\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\\\n        // for accounts without code, i.e. `keccak256(\'\')`\\\\n        bytes32 codehash;\\\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\\\n        // solhint-disable-next-line no-inline-assembly\\\\n        assembly { codehash := extcodehash(account) }\\\\n        return (codehash != accountHash && codehash != 0x0);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\\\\n     * `recipient`, forwarding all available gas and reverting on errors.\\\\n     *\\\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\\\n     * imposed by `transfer`, making them unable to receive funds via\\\\n     * `transfer`. {sendValue} removes this limitation.\\\\n     *\\\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\\\n     *\\\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\\\n     * taken to not create reentrancy vulnerabilities. Consider using\\\\n     * {ReentrancyGuard} or the\\\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\\\n     */\\\\n    function sendValue(address payable recipient, uint256 amount) internal {\\\\n        require(address(this).balance >= amount, \\\\\\"Address: insufficient balance\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\\\n        (bool success, ) = recipient.call{ value: amount }(\\\\\\"\\\\\\");\\\\n        require(success, \\\\\\"Address: unable to send value, recipient may have reverted\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Performs a Solidity function call using a low level `call`. A\\\\n     * plain`call` is an unsafe replacement for a function call: use this\\\\n     * function instead.\\\\n     *\\\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\\\n     * function (like regular Solidity function calls).\\\\n     *\\\\n     * Returns the raw returned data. To convert to the expected return value,\\\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `target` must be a contract.\\\\n     * - calling `target` with `data` must not revert.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n      return functionCall(target, data, \\\\\\"Address: low-level call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but also transferring `value` wei to `target`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the calling contract must have an ETH balance of at least `value`.\\\\n     * - the called Solidity function must be `payable`.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, value, \\\\\\"Address: low-level call with value failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\\\n        require(address(this).balance >= value, \\\\\\"Address: insufficient balance for call\\\\\\");\\\\n        return _functionCallWithValue(target, data, value, errorMessage);\\\\n    }\\\\n\\\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: call to non-contract\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls\\\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\\\n        if (success) {\\\\n            return returndata;\\\\n        } else {\\\\n            // Look for revert reason and bubble it up if present\\\\n            if (returndata.length > 0) {\\\\n                // The easiest way to bubble the revert reason is using memory via assembly\\\\n\\\\n                // solhint-disable-next-line no-inline-assembly\\\\n                assembly {\\\\n                    let returndata_size := mload(returndata)\\\\n                    revert(add(32, returndata), returndata_size)\\\\n                }\\\\n            } else {\\\\n                revert(errorMessage);\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x698f929f1097637d051976b322a2d532c27df022b09010e8d091e2888a5ebdf8\\",\\"license\\":\\"MIT\\"},\\"src.sol/testing/TestToken.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.1;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\\\\";\\\\n\\\\n/* This token is ONLY useful for testing\\\\n * Anybody can mint as many tokens as they like\\\\n * Anybody can burn anyone else\'s tokens\\\\n */\\\\ncontract TestToken is ERC20 {\\\\n    constructor() ERC20(\\\\\\"Test Token\\\\\\", \\\\\\"TEST\\\\\\") {\\\\n        _mint(msg.sender, 1000000 ether);\\\\n    }\\\\n\\\\n    function mint(address account, uint256 amount) external {\\\\n        _mint(account, amount);\\\\n    }\\\\n\\\\n    function burn(address account, uint256 amount) external {\\\\n        _burn(account, amount);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe879a63f0b107705dc9405af3efc7adc2f6425da2c5ec571c72f91db2a059876\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"0x60806040523480156200001157600080fd5b50604080518082018252600a8152692a32b9ba102a37b5b2b760b11b602080830191825283518085019094526004845263151154d560e21b908401528151919291620000609160039162000218565b5080516200007690600490602084019062000218565b50506005805460ff19166012179055506200009c3369d3c21bcecceda1000000620000a2565b620002b4565b6001600160a01b038216620000fe576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6200010c60008383620001b1565b6200012881600254620001b660201b6200060b1790919060201c565b6002556001600160a01b038216600090815260208181526040909120546200015b9183906200060b620001b6821b17901c565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b505050565b60008282018381101562000211576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200025b57805160ff19168380011785556200028b565b828001600101855582156200028b579182015b828111156200028b5782518255916020019190600101906200026e565b50620002999291506200029d565b5090565b5b808211156200029957600081556001016200029e565b610cfb80620002c46000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806340c10f191161008c5780639dc29fac116100665780639dc29fac14610287578063a457c2d7146102b3578063a9059cbb146102df578063dd62ed3e1461030b576100cf565b806340c10f191461022b57806370a082311461025957806395d89b411461027f576100cf565b806306fdde03146100d4578063095ea7b31461015157806318160ddd1461019157806323b872dd146101ab578063313ce567146101e157806339509351146101ff575b600080fd5b6100dc610339565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101165781810151838201526020016100fe565b50505050905090810190601f1680156101435780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561016757600080fd5b506001600160a01b0381351690602001356103cf565b604080519115158252519081900360200190f35b6101996103ec565b60408051918252519081900360200190f35b61017d600480360360608110156101c157600080fd5b506001600160a01b038135811691602081013590911690604001356103f2565b6101e9610479565b6040805160ff9092168252519081900360200190f35b61017d6004803603604081101561021557600080fd5b506001600160a01b038135169060200135610482565b6102576004803603604081101561024157600080fd5b506001600160a01b0381351690602001356104d0565b005b6101996004803603602081101561026f57600080fd5b50356001600160a01b03166104de565b6100dc6104f9565b6102576004803603604081101561029d57600080fd5b506001600160a01b03813516906020013561055a565b61017d600480360360408110156102c957600080fd5b506001600160a01b038135169060200135610564565b61017d600480360360408110156102f557600080fd5b506001600160a01b0381351690602001356105cc565b6101996004803603604081101561032157600080fd5b506001600160a01b03813581169160200135166105e0565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103c55780601f1061039a576101008083540402835291602001916103c5565b820191906000526020600020905b8154815290600101906020018083116103a857829003601f168201915b5050505050905090565b60006103e36103dc61066c565b8484610670565b50600192915050565b60025490565b60006103ff84848461075c565b61046f8461040b61066c565b61046a85604051806060016040528060288152602001610c0f602891396001600160a01b038a1660009081526001602052604081209061044961066c565b6001600160a01b0316815260208101919091526040016000205491906108b7565b610670565b5060019392505050565b60055460ff1690565b60006103e361048f61066c565b8461046a85600160006104a061066c565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549061060b565b6104da828261094e565b5050565b6001600160a01b031660009081526020819052604090205490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103c55780601f1061039a576101008083540402835291602001916103c5565b6104da8282610a3e565b60006103e361057161066c565b8461046a85604051806060016040528060258152602001610ca1602591396001600061059b61066c565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906108b7565b60006103e36105d961066c565b848461075c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600082820183811015610665576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b3390565b6001600160a01b0383166106b55760405162461bcd60e51b8152600401808060200182810382526024815260200180610c7d6024913960400191505060405180910390fd5b6001600160a01b0382166106fa5760405162461bcd60e51b8152600401808060200182810382526022815260200180610bc76022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166107a15760405162461bcd60e51b8152600401808060200182810382526025815260200180610c586025913960400191505060405180910390fd5b6001600160a01b0382166107e65760405162461bcd60e51b8152600401808060200182810382526023815260200180610b826023913960400191505060405180910390fd5b6107f1838383610b3a565b61082e81604051806060016040528060268152602001610be9602691396001600160a01b03861660009081526020819052604090205491906108b7565b6001600160a01b03808516600090815260208190526040808220939093559084168152205461085d908261060b565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600081848411156109465760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561090b5781810151838201526020016108f3565b50505050905090810190601f1680156109385780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b0382166109a9576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6109b560008383610b3a565b6002546109c2908261060b565b6002556001600160a01b0382166000908152602081905260409020546109e8908261060b565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b038216610a835760405162461bcd60e51b8152600401808060200182810382526021815260200180610c376021913960400191505060405180910390fd5b610a8f82600083610b3a565b610acc81604051806060016040528060228152602001610ba5602291396001600160a01b03851660009081526020819052604090205491906108b7565b6001600160a01b038316600090815260208190526040902055600254610af29082610b3f565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b505050565b600061066583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506108b756fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220ab9dcafdcf3d12155ca9697d505d71261c7afcb9c777a043bc5bb39f7a2d72ab64736f6c63430007010033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806340c10f191161008c5780639dc29fac116100665780639dc29fac14610287578063a457c2d7146102b3578063a9059cbb146102df578063dd62ed3e1461030b576100cf565b806340c10f191461022b57806370a082311461025957806395d89b411461027f576100cf565b806306fdde03146100d4578063095ea7b31461015157806318160ddd1461019157806323b872dd146101ab578063313ce567146101e157806339509351146101ff575b600080fd5b6100dc610339565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101165781810151838201526020016100fe565b50505050905090810190601f1680156101435780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561016757600080fd5b506001600160a01b0381351690602001356103cf565b604080519115158252519081900360200190f35b6101996103ec565b60408051918252519081900360200190f35b61017d600480360360608110156101c157600080fd5b506001600160a01b038135811691602081013590911690604001356103f2565b6101e9610479565b6040805160ff9092168252519081900360200190f35b61017d6004803603604081101561021557600080fd5b506001600160a01b038135169060200135610482565b6102576004803603604081101561024157600080fd5b506001600160a01b0381351690602001356104d0565b005b6101996004803603602081101561026f57600080fd5b50356001600160a01b03166104de565b6100dc6104f9565b6102576004803603604081101561029d57600080fd5b506001600160a01b03813516906020013561055a565b61017d600480360360408110156102c957600080fd5b506001600160a01b038135169060200135610564565b61017d600480360360408110156102f557600080fd5b506001600160a01b0381351690602001356105cc565b6101996004803603604081101561032157600080fd5b506001600160a01b03813581169160200135166105e0565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103c55780601f1061039a576101008083540402835291602001916103c5565b820191906000526020600020905b8154815290600101906020018083116103a857829003601f168201915b5050505050905090565b60006103e36103dc61066c565b8484610670565b50600192915050565b60025490565b60006103ff84848461075c565b61046f8461040b61066c565b61046a85604051806060016040528060288152602001610c0f602891396001600160a01b038a1660009081526001602052604081209061044961066c565b6001600160a01b0316815260208101919091526040016000205491906108b7565b610670565b5060019392505050565b60055460ff1690565b60006103e361048f61066c565b8461046a85600160006104a061066c565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549061060b565b6104da828261094e565b5050565b6001600160a01b031660009081526020819052604090205490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103c55780601f1061039a576101008083540402835291602001916103c5565b6104da8282610a3e565b60006103e361057161066c565b8461046a85604051806060016040528060258152602001610ca1602591396001600061059b61066c565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906108b7565b60006103e36105d961066c565b848461075c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600082820183811015610665576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b3390565b6001600160a01b0383166106b55760405162461bcd60e51b8152600401808060200182810382526024815260200180610c7d6024913960400191505060405180910390fd5b6001600160a01b0382166106fa5760405162461bcd60e51b8152600401808060200182810382526022815260200180610bc76022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166107a15760405162461bcd60e51b8152600401808060200182810382526025815260200180610c586025913960400191505060405180910390fd5b6001600160a01b0382166107e65760405162461bcd60e51b8152600401808060200182810382526023815260200180610b826023913960400191505060405180910390fd5b6107f1838383610b3a565b61082e81604051806060016040528060268152602001610be9602691396001600160a01b03861660009081526020819052604090205491906108b7565b6001600160a01b03808516600090815260208190526040808220939093559084168152205461085d908261060b565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600081848411156109465760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561090b5781810151838201526020016108f3565b50505050905090810190601f1680156109385780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b0382166109a9576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6109b560008383610b3a565b6002546109c2908261060b565b6002556001600160a01b0382166000908152602081905260409020546109e8908261060b565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b038216610a835760405162461bcd60e51b8152600401808060200182810382526021815260200180610c376021913960400191505060405180910390fd5b610a8f82600083610b3a565b610acc81604051806060016040528060228152602001610ba5602291396001600160a01b03851660009081526020819052604090205491906108b7565b6001600160a01b038316600090815260208190526040902055600254610af29082610b3f565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b505050565b600061066583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506108b756fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220ab9dcafdcf3d12155ca9697d505d71261c7afcb9c777a043bc5bb39f7a2d72ab64736f6c63430007010033","devdoc":{"kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``\'s tokens of at least `amount`."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1},"storageLayout":{"storage":[{"astId":590,"contract":"src.sol/testing/TestToken.sol:TestToken","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":596,"contract":"src.sol/testing/TestToken.sol:TestToken","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":598,"contract":"src.sol/testing/TestToken.sol:TestToken","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":600,"contract":"src.sol/testing/TestToken.sol:TestToken","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":602,"contract":"src.sol/testing/TestToken.sol:TestToken","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"},{"astId":604,"contract":"src.sol/testing/TestToken.sol:TestToken","label":"_decimals","offset":0,"slot":"5","type":"t_uint8"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}}}')},2798:function(e){e.exports=JSON.parse('{"address":"0x5FAe7F15Ae20A10053CCca1DcFce0E2Bb4D50A7d","abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"address","name":"definition","type":"address"},{"internalType":"string","name":"stateEncoding","type":"string"},{"internalType":"string","name":"resolverEncoding","type":"string"},{"internalType":"bytes","name":"encodedCancel","type":"bytes"}],"indexed":false,"internalType":"struct RegisteredTransfer","name":"transfer","type":"tuple"}],"name":"TransferAdded","type":"event"},{"anonymous":false,"inputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"address","name":"definition","type":"address"},{"internalType":"string","name":"stateEncoding","type":"string"},{"internalType":"string","name":"resolverEncoding","type":"string"},{"internalType":"bytes","name":"encodedCancel","type":"bytes"}],"indexed":false,"internalType":"struct RegisteredTransfer","name":"transfer","type":"tuple"}],"name":"TransferRemoved","type":"event"},{"inputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"address","name":"definition","type":"address"},{"internalType":"string","name":"stateEncoding","type":"string"},{"internalType":"string","name":"resolverEncoding","type":"string"},{"internalType":"bytes","name":"encodedCancel","type":"bytes"}],"internalType":"struct RegisteredTransfer","name":"definition","type":"tuple"}],"name":"addTransferDefinition","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getTransferDefinitions","outputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"address","name":"definition","type":"address"},{"internalType":"string","name":"stateEncoding","type":"string"},{"internalType":"string","name":"resolverEncoding","type":"string"},{"internalType":"bytes","name":"encodedCancel","type":"bytes"}],"internalType":"struct RegisteredTransfer[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"name","type":"string"}],"name":"removeTransferDefinition","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"transactionHash":"0x834b73daea7db4f7433587313d34cb3dbcf1ad503b095d1294302f70e164ea0a","receipt":{"to":null,"from":"0xd4b33434Cb36df9286Ef5132FCFb8062c96aC56E","contractAddress":"0x5FAe7F15Ae20A10053CCca1DcFce0E2Bb4D50A7d","transactionIndex":229,"gasUsed":"1239411","logsBloom":"0x000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010200000000000000000000000000000000000a0000200000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000020000000001000000000000000000000000000000000000000000008000000000000","blockHash":"0xbcb2b1e2f1df3ba8378cd2c0c9c222bdb2fa1e2f59818995bc1aa6ecf720fb1d","transactionHash":"0x834b73daea7db4f7433587313d34cb3dbcf1ad503b095d1294302f70e164ea0a","logs":[{"transactionIndex":229,"blockNumber":11551565,"transactionHash":"0x834b73daea7db4f7433587313d34cb3dbcf1ad503b095d1294302f70e164ea0a","address":"0x5FAe7F15Ae20A10053CCca1DcFce0E2Bb4D50A7d","topics":["0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","0x0000000000000000000000000000000000000000000000000000000000000000","0x000000000000000000000000d4b33434cb36df9286ef5132fcfb8062c96ac56e"],"data":"0x","logIndex":171,"blockHash":"0xbcb2b1e2f1df3ba8378cd2c0c9c222bdb2fa1e2f59818995bc1aa6ecf720fb1d"}],"blockNumber":11551565,"cumulativeGasUsed":"10993152","status":1,"byzantium":true},"args":[],"solcInputHash":"89c55d5a88f10637860a9ea31a1daad3","metadata":"{\\"compiler\\":{\\"version\\":\\"0.7.1+commit.f4a555be\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"previousOwner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"OwnershipTransferred\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"definition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"stateEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"resolverEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedCancel\\",\\"type\\":\\"bytes\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct RegisteredTransfer\\",\\"name\\":\\"transfer\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"TransferAdded\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"definition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"stateEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"resolverEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedCancel\\",\\"type\\":\\"bytes\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct RegisteredTransfer\\",\\"name\\":\\"transfer\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"TransferRemoved\\",\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"definition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"stateEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"resolverEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedCancel\\",\\"type\\":\\"bytes\\"}],\\"internalType\\":\\"struct RegisteredTransfer\\",\\"name\\":\\"definition\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"addTransferDefinition\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getTransferDefinitions\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"definition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"stateEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"resolverEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedCancel\\",\\"type\\":\\"bytes\\"}],\\"internalType\\":\\"struct RegisteredTransfer[]\\",\\"name\\":\\"\\",\\"type\\":\\"tuple[]\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"owner\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"}],\\"name\\":\\"removeTransferDefinition\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"renounceOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"transferOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"author\\":\\"Connext <support@connext.network>\\",\\"kind\\":\\"dev\\",\\"methods\\":{\\"addTransferDefinition((string,address,string,string,bytes))\\":{\\"details\\":\\"Should add a transfer definition to the registry\\"},\\"getTransferDefinitions()\\":{\\"details\\":\\"Should return all transfer defintions in registry\\"},\\"owner()\\":{\\"details\\":\\"Returns the address of the current owner.\\"},\\"removeTransferDefinition(string)\\":{\\"details\\":\\"Should remove a transfer definition from the registry\\"},\\"renounceOwnership()\\":{\\"details\\":\\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\\"},\\"transferOwnership(address)\\":{\\"details\\":\\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\\"}},\\"title\\":\\"TransferRegistry\\",\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"notice\\":\\"The TransferRegistry maintains an onchain record of all         supported transfers (specifically holds the registry information         defined within the contracts). The offchain protocol uses         this information to get the correct encodings when generating         signatures. The information stored here can only be updated         by the owner of the contract\\",\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"src.sol/TransferRegistry.sol\\":\\"TransferRegistry\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/GSN/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/*\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with GSN meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address payable) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes memory) {\\\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x910a2e625b71168563edf9eeef55a50d6d699acfe27ceba3921f291829a8f938\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/access/Ownable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\nimport \\\\\\"../GSN/Context.sol\\\\\\";\\\\n/**\\\\n * @dev Contract module which provides a basic access control mechanism, where\\\\n * there is an account (an owner) that can be granted exclusive access to\\\\n * specific functions.\\\\n *\\\\n * By default, the owner account will be the one that deploys the contract. This\\\\n * can later be changed with {transferOwnership}.\\\\n *\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\\\n * the owner.\\\\n */\\\\ncontract Ownable is Context {\\\\n    address private _owner;\\\\n\\\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\\\n\\\\n    /**\\\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\\\n     */\\\\n    constructor () {\\\\n        address msgSender = _msgSender();\\\\n        _owner = msgSender;\\\\n        emit OwnershipTransferred(address(0), msgSender);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the address of the current owner.\\\\n     */\\\\n    function owner() public view returns (address) {\\\\n        return _owner;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the owner.\\\\n     */\\\\n    modifier onlyOwner() {\\\\n        require(_owner == _msgSender(), \\\\\\"Ownable: caller is not the owner\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Leaves the contract without owner. It will not be possible to call\\\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\\\n     *\\\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\\\n     * thereby removing any functionality that is only available to the owner.\\\\n     */\\\\n    function renounceOwnership() public virtual onlyOwner {\\\\n        emit OwnershipTransferred(_owner, address(0));\\\\n        _owner = address(0);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\\\n     * Can only be called by the current owner.\\\\n     */\\\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\\\n        require(newOwner != address(0), \\\\\\"Ownable: new owner is the zero address\\\\\\");\\\\n        emit OwnershipTransferred(_owner, newOwner);\\\\n        _owner = newOwner;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x74b0525c81e47810f1bd795755962bdb84de3a4f71cfcb063f4c4d4999a3e96b\\",\\"license\\":\\"MIT\\"},\\"src.sol/TransferRegistry.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/ITransferRegistry.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibIterableMapping.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/access/Ownable.sol\\\\\\";\\\\n\\\\n/// @title TransferRegistry\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice The TransferRegistry maintains an onchain record of all\\\\n///         supported transfers (specifically holds the registry information\\\\n///         defined within the contracts). The offchain protocol uses\\\\n///         this information to get the correct encodings when generating\\\\n///         signatures. The information stored here can only be updated\\\\n///         by the owner of the contract\\\\n\\\\ncontract TransferRegistry is Ownable, ITransferRegistry {\\\\n    using LibIterableMapping for LibIterableMapping.IterableMapping;\\\\n\\\\n    LibIterableMapping.IterableMapping transfers;\\\\n\\\\n    /// @dev Should add a transfer definition to the registry\\\\n    function addTransferDefinition(RegisteredTransfer memory definition)\\\\n        external\\\\n        override\\\\n        onlyOwner\\\\n    {\\\\n        // Get index transfer will be added at\\\\n        uint256 idx = transfers.length();\\\\n        \\\\n        // Add registered transfer\\\\n        transfers.addTransferDefinition(definition);\\\\n\\\\n        // Emit event\\\\n        emit TransferAdded(transfers.getTransferDefinitionByIndex(idx));\\\\n    }\\\\n\\\\n    /// @dev Should remove a transfer definition from the registry\\\\n    function removeTransferDefinition(string memory name)\\\\n        external\\\\n        override\\\\n        onlyOwner\\\\n    {\\\\n        // Get transfer from library to remove for event\\\\n        RegisteredTransfer memory transfer = transfers.getTransferDefinitionByName(name);\\\\n\\\\n        // Remove transfer\\\\n        transfers.removeTransferDefinition(name);\\\\n\\\\n        // Emit event\\\\n        emit TransferRemoved(transfer);\\\\n    }\\\\n\\\\n    /// @dev Should return all transfer defintions in registry\\\\n    function getTransferDefinitions()\\\\n        external\\\\n        view\\\\n        override\\\\n        returns (RegisteredTransfer[] memory)\\\\n    {\\\\n        return transfers.getTransferDefinitions();\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe0bbdc74c5635a2b21ab1a0f2b4ebb377af048f05cc2bab70f645ac826984382\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ITransferRegistry.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental \\\\\\"ABIEncoderV2\\\\\\";\\\\n\\\\nstruct RegisteredTransfer {\\\\n    string name;\\\\n    address definition;\\\\n    string stateEncoding;\\\\n    string resolverEncoding;\\\\n    bytes encodedCancel;\\\\n}\\\\n\\\\ninterface ITransferRegistry {\\\\n    event TransferAdded(RegisteredTransfer transfer);\\\\n\\\\n    event TransferRemoved(RegisteredTransfer transfer);\\\\n\\\\n    // Should add a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function addTransferDefinition(RegisteredTransfer memory transfer) external;\\\\n\\\\n    // Should remove a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function removeTransferDefinition(string memory name) external;\\\\n\\\\n    // Should return all transfer defintions in registry\\\\n    function getTransferDefinitions()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer[] memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd13be6d976c64e381a0d9df10c621cd964454b6916f25df4ea6c1b4cd873a58a\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibIterableMapping.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"../interfaces/ITransferRegistry.sol\\\\\\";\\\\n\\\\n/// @title LibIterableMapping\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This library provides an efficient way to store and retrieve\\\\n///         RegisteredTransfers. This contract is used to manage the transfers\\\\n///         stored by `TransferRegistry.sol`\\\\nlibrary LibIterableMapping {\\\\n    struct TransferDefinitionWithIndex {\\\\n        RegisteredTransfer transfer;\\\\n        uint256 index;\\\\n    }\\\\n\\\\n    struct IterableMapping {\\\\n        mapping(string => TransferDefinitionWithIndex) transfers;\\\\n        string[] names;\\\\n    }\\\\n\\\\n    function stringEqual(string memory s, string memory t)\\\\n        internal\\\\n        pure\\\\n        returns (bool)\\\\n    {\\\\n        return keccak256(abi.encodePacked(s)) == keccak256(abi.encodePacked(t));\\\\n    }\\\\n\\\\n    function isEmptyString(string memory s) internal pure returns (bool) {\\\\n        return stringEqual(s, \\\\\\"\\\\\\");\\\\n    }\\\\n\\\\n    function nameExists(IterableMapping storage self, string memory name)\\\\n        internal\\\\n        view\\\\n        returns (bool)\\\\n    {\\\\n        return\\\\n            !isEmptyString(name) &&\\\\n            self.names.length != 0 &&\\\\n            stringEqual(self.names[self.transfers[name].index], name);\\\\n    }\\\\n\\\\n    function length(IterableMapping storage self)\\\\n        internal\\\\n        view\\\\n        returns (uint256)\\\\n    {\\\\n        return self.names.length;\\\\n    }\\\\n\\\\n    function getTransferDefinitionByName(\\\\n        IterableMapping storage self,\\\\n        string memory name\\\\n    ) internal view returns (RegisteredTransfer memory) {\\\\n        require(nameExists(self, name), \\\\\\"LibIterableMapping: NAME_NOT_FOUND\\\\\\");\\\\n        return self.transfers[name].transfer;\\\\n    }\\\\n\\\\n    function getTransferDefinitionByIndex(\\\\n        IterableMapping storage self,\\\\n        uint256 index\\\\n    ) internal view returns (RegisteredTransfer memory) {\\\\n        require(index < self.names.length, \\\\\\"LibIterableMapping: INVALID_INDEX\\\\\\");\\\\n        return self.transfers[self.names[index]].transfer;\\\\n    }\\\\n\\\\n    function getTransferDefinitions(IterableMapping storage self)\\\\n        internal\\\\n        view\\\\n        returns (RegisteredTransfer[] memory)\\\\n    {\\\\n        uint256 l = self.names.length;\\\\n        RegisteredTransfer[] memory transfers = new RegisteredTransfer[](l);\\\\n        for (uint256 i = 0; i < l; i++) {\\\\n            transfers[i] = self.transfers[self.names[i]].transfer;\\\\n        }\\\\n        return transfers;\\\\n    }\\\\n\\\\n    function addTransferDefinition(\\\\n        IterableMapping storage self,\\\\n        RegisteredTransfer memory transfer\\\\n    ) internal {\\\\n        string memory name = transfer.name;\\\\n        require(!isEmptyString(name), \\\\\\"LibIterableMapping: EMPTY_NAME\\\\\\");\\\\n        require(!nameExists(self, name), \\\\\\"LibIterableMapping: NAME_ALREADY_ADDED\\\\\\");\\\\n        self.transfers[name] = TransferDefinitionWithIndex({\\\\n            transfer: transfer,\\\\n            index: self.names.length\\\\n        });\\\\n        self.names.push(name);\\\\n    }\\\\n\\\\n    function removeTransferDefinition(\\\\n        IterableMapping storage self,\\\\n        string memory name\\\\n    ) internal {\\\\n        require(!isEmptyString(name), \\\\\\"LibIterableMapping: EMPTY_NAME\\\\\\");\\\\n        require(nameExists(self, name), \\\\\\"LibIterableMapping: NAME_NOT_FOUND\\\\\\");\\\\n        uint256 index = self.transfers[name].index;\\\\n        string memory lastName = self.names[self.names.length - 1];\\\\n        self.transfers[lastName].index = index;\\\\n        self.names[index] = lastName;\\\\n        delete self.transfers[name];\\\\n        self.names.pop();\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x52d4a240bb76e9892af1ecbf6cf72995890db0b115a36a54e1b0115f0f47ce8a\\",\\"license\\":\\"UNLICENSED\\"}},\\"version\\":1}","bytecode":"0x608060405234801561001057600080fd5b50600061001b61006a565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35061006e565b3390565b6115078061007d6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806355304c3f14610067578063715018a61461007c5780638da5cb5b14610084578063961bf9b1146100a2578063c9ff4d25146100b5578063f2fde38b146100ca575b600080fd5b61007a610075366004611061565b6100dd565b005b61007a610179565b61008c6101f8565b604051610099919061127c565b60405180910390f35b61007a6100b0366004611026565b610207565b6100bd61028b565b6040516100999190611290565b61007a6100d836600461100b565b61029c565b6100e5610352565b6000546001600160a01b0390811691161461011b5760405162461bcd60e51b81526004016101129061137c565b60405180910390fd5b60006101276001610356565b905061013460018361035d565b7fcdbba5dd6bffbe47d5f74dbed3cf4a2174815c7186eaa49b32f97af4c47543bf6101606001836104af565b60405161016d919061146b565b60405180910390a15050565b610181610352565b6000546001600160a01b039081169116146101ae5760405162461bcd60e51b81526004016101129061137c565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b61020f610352565b6000546001600160a01b0390811691161461023c5760405162461bcd60e51b81526004016101129061137c565b610244610e79565b61024f600183610783565b905061025c6001836107c1565b7fdc44d9d985df00268149ae57add485c612e57109279f8485035dbe2b2251222b8160405161016d919061146b565b606061029760016109df565b905090565b6102a4610352565b6000546001600160a01b039081169116146102d15760405162461bcd60e51b81526004016101129061137c565b6001600160a01b0381166102f75760405162461bcd60e51b8152600401610112906112f0565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6001015490565b805161036881610d0e565b156103855760405162461bcd60e51b8152600401610112906113b1565b61038f8382610d29565b156103ac5760405162461bcd60e51b815260040161011290611336565b60408051808201825283815260018501546020820152905184906103d19084906111f0565b908152604051602091819003820190208251805180519293919284926103fb928492910190610eb1565b506020828101516001830180546001600160a01b0319166001600160a01b039092169190911790556040830151805161043a9260028501920190610eb1565b5060608201518051610456916003840191602090910190610eb1565b5060808201518051610472916004840191602090910190610eb1565b505050602091820151600590910155600180850180549182018155600090815282902083516104a993919092019190840190610eb1565b50505050565b6104b7610e79565b600183015482106104da5760405162461bcd60e51b8152600401610112906113e8565b826000018360010183815481106104ed57fe5b90600052602060002001604051610504919061120c565b9081526040805160209281900383018120805460026001821615610100026000190190911604601f8101859004909402820160c090810190935260a0820184815291939092849291849184018282801561059f5780601f106105745761010080835404028352916020019161059f565b820191906000526020600020905b81548152906001019060200180831161058257829003601f168201915b50505091835250506001828101546001600160a01b0316602080840191909152600280850180546040805161010096831615969096026000190190911692909204601f810184900484028501840183528085529190940193918301828280156106495780601f1061061e57610100808354040283529160200191610649565b820191906000526020600020905b81548152906001019060200180831161062c57829003601f168201915b505050918352505060038201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156106dd5780601f106106b2576101008083540402835291602001916106dd565b820191906000526020600020905b8154815290600101906020018083116106c057829003601f168201915b505050918352505060048201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156107715780601f1061074657610100808354040283529160200191610771565b820191906000526020600020905b81548152906001019060200180831161075457829003601f168201915b50505050508152505090505b92915050565b61078b610e79565b6107958383610d29565b6107b15760405162461bcd60e51b815260040161011290611429565b60405183906105049084906111f0565b6107ca81610d0e565b156107e75760405162461bcd60e51b8152600401610112906113b1565b6107f18282610d29565b61080d5760405162461bcd60e51b815260040161011290611429565b6000826000018260405161082191906111f0565b90815260405190819003602001902060050154600184018054919250606091600019810190811061084e57fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156108dc5780601f106108b1576101008083540402835291602001916108dc565b820191906000526020600020905b8154815290600101906020018083116108bf57829003601f168201915b505050505090508184600001826040516108f691906111f0565b9081526020016040518091039020600501819055508084600101838154811061091b57fe5b906000526020600020019080519060200190610938929190610eb1565b5060405184906109499085906111f0565b908152604051908190036020019020600081816109668282610f2f565b6001820180546001600160a01b0319169055610986600283016000610f2f565b610994600383016000610f2f565b6109a2600483016000610f2f565b505060058201600090555050836001018054806109bb57fe5b6001900381819060005260206000200160006109d79190610f2f565b905550505050565b6001810154606090818167ffffffffffffffff811180156109ff57600080fd5b50604051908082528060200260200182016040528015610a3957816020015b610a26610e79565b815260200190600190039081610a1e5790505b50905060005b82811015610d065784600001856001018281548110610a5a57fe5b90600052602060002001604051610a71919061120c565b9081526040805160209281900383018120805460026001821615610100026000190190911604601f8101859004909402820160c090810190935260a08201848152919390928492918491840182828015610b0c5780601f10610ae157610100808354040283529160200191610b0c565b820191906000526020600020905b815481529060010190602001808311610aef57829003601f168201915b50505091835250506001828101546001600160a01b0316602080840191909152600280850180546040805161010096831615969096026000190190911692909204601f81018490048402850184018352808552919094019391830182828015610bb65780601f10610b8b57610100808354040283529160200191610bb6565b820191906000526020600020905b815481529060010190602001808311610b9957829003601f168201915b505050918352505060038201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015610c4a5780601f10610c1f57610100808354040283529160200191610c4a565b820191906000526020600020905b815481529060010190602001808311610c2d57829003601f168201915b505050918352505060048201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015610cde5780601f10610cb357610100808354040283529160200191610cde565b820191906000526020600020905b815481529060010190602001808311610cc157829003601f168201915b505050505081525050828281518110610cf357fe5b6020908102919091010152600101610a3f565b509392505050565b600061077d8260405180602001604052806000815250610e20565b6000610d3482610d0e565b158015610d445750600183015415155b8015610e195750610e19836001018460000184604051610d6491906111f0565b90815260200160405180910390206005015481548110610d8057fe5b600091825260209182902001805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015610e0e5780601f10610de357610100808354040283529160200191610e0e565b820191906000526020600020905b815481529060010190602001808311610df157829003601f168201915b505050505083610e20565b9392505050565b600081604051602001610e3391906111f0565b6040516020818303038152906040528051906020012083604051602001610e5a91906111f0565b6040516020818303038152906040528051906020012014905092915050565b6040518060a001604052806060815260200160006001600160a01b031681526020016060815260200160608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610ef257805160ff1916838001178555610f1f565b82800160010185558215610f1f579182015b82811115610f1f578251825591602001919060010190610f04565b50610f2b929150610f76565b5090565b50805460018160011615610100020316600290046000825580601f10610f555750610f73565b601f016020900490600052602060002090810190610f739190610f76565b50565b5b80821115610f2b5760008155600101610f77565b80356001600160a01b038116811461077d57600080fd5b600082601f830112610fb2578081fd5b813567ffffffffffffffff811115610fc8578182fd5b610fdb601f8201601f191660200161147e565b9150808252836020828501011115610ff257600080fd5b8060208401602084013760009082016020015292915050565b60006020828403121561101c578081fd5b610e198383610f8b565b600060208284031215611037578081fd5b813567ffffffffffffffff81111561104d578182fd5b61105984828501610fa2565b949350505050565b600060208284031215611072578081fd5b813567ffffffffffffffff80821115611089578283fd5b9083019060a0828603121561109c578283fd5b6110a660a061147e565b8235828111156110b4578485fd5b6110c087828601610fa2565b8252506110d08660208501610f8b565b60208201526040830135828111156110e6578485fd5b6110f287828601610fa2565b604083015250606083013582811115611109578485fd5b61111587828601610fa2565b60608301525060808301358281111561112c578485fd5b61113887828601610fa2565b60808301525095945050505050565b6000815180845261115f8160208601602086016114a5565b601f01601f19169290920160200192915050565b6000815160a0845261118860a0850182611147565b905060018060a01b036020840151166020850152604083015184820360408601526111b38282611147565b915050606083015184820360608601526111cd8282611147565b915050608083015184820360808601526111e78282611147565b95945050505050565b600082516112028184602087016114a5565b9190910192915050565b600080835460018082166000811461122b576001811461124257611271565b60ff198316865260028304607f1686019350611271565b600283048786526020808720875b838110156112695781548a820152908501908201611250565b505050860193505b509195945050505050565b6001600160a01b0391909116815260200190565b6000602080830181845280855180835260408601915060408482028701019250838701855b828110156112e357603f198886030184526112d1858351611173565b945092850192908501906001016112b5565b5092979650505050505050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526026908201527f4c69624974657261626c654d617070696e673a204e414d455f414c524541445960408201526517d05111115160d21b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601e908201527f4c69624974657261626c654d617070696e673a20454d5054595f4e414d450000604082015260600190565b60208082526021908201527f4c69624974657261626c654d617070696e673a20494e56414c49445f494e44456040820152600b60fb1b606082015260800190565b60208082526022908201527f4c69624974657261626c654d617070696e673a204e414d455f4e4f545f464f55604082015261139160f21b606082015260800190565b600060208252610e196020830184611173565b60405181810167ffffffffffffffff8111828210171561149d57600080fd5b604052919050565b60005b838110156114c05781810151838201526020016114a8565b838111156104a9575050600091015256fea26469706673582212207ffce686b133899c962d2392c37d7cc417bfb49017cb433d19d525b065f0f46d64736f6c63430007010033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106100625760003560e01c806355304c3f14610067578063715018a61461007c5780638da5cb5b14610084578063961bf9b1146100a2578063c9ff4d25146100b5578063f2fde38b146100ca575b600080fd5b61007a610075366004611061565b6100dd565b005b61007a610179565b61008c6101f8565b604051610099919061127c565b60405180910390f35b61007a6100b0366004611026565b610207565b6100bd61028b565b6040516100999190611290565b61007a6100d836600461100b565b61029c565b6100e5610352565b6000546001600160a01b0390811691161461011b5760405162461bcd60e51b81526004016101129061137c565b60405180910390fd5b60006101276001610356565b905061013460018361035d565b7fcdbba5dd6bffbe47d5f74dbed3cf4a2174815c7186eaa49b32f97af4c47543bf6101606001836104af565b60405161016d919061146b565b60405180910390a15050565b610181610352565b6000546001600160a01b039081169116146101ae5760405162461bcd60e51b81526004016101129061137c565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b61020f610352565b6000546001600160a01b0390811691161461023c5760405162461bcd60e51b81526004016101129061137c565b610244610e79565b61024f600183610783565b905061025c6001836107c1565b7fdc44d9d985df00268149ae57add485c612e57109279f8485035dbe2b2251222b8160405161016d919061146b565b606061029760016109df565b905090565b6102a4610352565b6000546001600160a01b039081169116146102d15760405162461bcd60e51b81526004016101129061137c565b6001600160a01b0381166102f75760405162461bcd60e51b8152600401610112906112f0565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6001015490565b805161036881610d0e565b156103855760405162461bcd60e51b8152600401610112906113b1565b61038f8382610d29565b156103ac5760405162461bcd60e51b815260040161011290611336565b60408051808201825283815260018501546020820152905184906103d19084906111f0565b908152604051602091819003820190208251805180519293919284926103fb928492910190610eb1565b506020828101516001830180546001600160a01b0319166001600160a01b039092169190911790556040830151805161043a9260028501920190610eb1565b5060608201518051610456916003840191602090910190610eb1565b5060808201518051610472916004840191602090910190610eb1565b505050602091820151600590910155600180850180549182018155600090815282902083516104a993919092019190840190610eb1565b50505050565b6104b7610e79565b600183015482106104da5760405162461bcd60e51b8152600401610112906113e8565b826000018360010183815481106104ed57fe5b90600052602060002001604051610504919061120c565b9081526040805160209281900383018120805460026001821615610100026000190190911604601f8101859004909402820160c090810190935260a0820184815291939092849291849184018282801561059f5780601f106105745761010080835404028352916020019161059f565b820191906000526020600020905b81548152906001019060200180831161058257829003601f168201915b50505091835250506001828101546001600160a01b0316602080840191909152600280850180546040805161010096831615969096026000190190911692909204601f810184900484028501840183528085529190940193918301828280156106495780601f1061061e57610100808354040283529160200191610649565b820191906000526020600020905b81548152906001019060200180831161062c57829003601f168201915b505050918352505060038201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156106dd5780601f106106b2576101008083540402835291602001916106dd565b820191906000526020600020905b8154815290600101906020018083116106c057829003601f168201915b505050918352505060048201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156107715780601f1061074657610100808354040283529160200191610771565b820191906000526020600020905b81548152906001019060200180831161075457829003601f168201915b50505050508152505090505b92915050565b61078b610e79565b6107958383610d29565b6107b15760405162461bcd60e51b815260040161011290611429565b60405183906105049084906111f0565b6107ca81610d0e565b156107e75760405162461bcd60e51b8152600401610112906113b1565b6107f18282610d29565b61080d5760405162461bcd60e51b815260040161011290611429565b6000826000018260405161082191906111f0565b90815260405190819003602001902060050154600184018054919250606091600019810190811061084e57fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156108dc5780601f106108b1576101008083540402835291602001916108dc565b820191906000526020600020905b8154815290600101906020018083116108bf57829003601f168201915b505050505090508184600001826040516108f691906111f0565b9081526020016040518091039020600501819055508084600101838154811061091b57fe5b906000526020600020019080519060200190610938929190610eb1565b5060405184906109499085906111f0565b908152604051908190036020019020600081816109668282610f2f565b6001820180546001600160a01b0319169055610986600283016000610f2f565b610994600383016000610f2f565b6109a2600483016000610f2f565b505060058201600090555050836001018054806109bb57fe5b6001900381819060005260206000200160006109d79190610f2f565b905550505050565b6001810154606090818167ffffffffffffffff811180156109ff57600080fd5b50604051908082528060200260200182016040528015610a3957816020015b610a26610e79565b815260200190600190039081610a1e5790505b50905060005b82811015610d065784600001856001018281548110610a5a57fe5b90600052602060002001604051610a71919061120c565b9081526040805160209281900383018120805460026001821615610100026000190190911604601f8101859004909402820160c090810190935260a08201848152919390928492918491840182828015610b0c5780601f10610ae157610100808354040283529160200191610b0c565b820191906000526020600020905b815481529060010190602001808311610aef57829003601f168201915b50505091835250506001828101546001600160a01b0316602080840191909152600280850180546040805161010096831615969096026000190190911692909204601f81018490048402850184018352808552919094019391830182828015610bb65780601f10610b8b57610100808354040283529160200191610bb6565b820191906000526020600020905b815481529060010190602001808311610b9957829003601f168201915b505050918352505060038201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015610c4a5780601f10610c1f57610100808354040283529160200191610c4a565b820191906000526020600020905b815481529060010190602001808311610c2d57829003601f168201915b505050918352505060048201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015610cde5780601f10610cb357610100808354040283529160200191610cde565b820191906000526020600020905b815481529060010190602001808311610cc157829003601f168201915b505050505081525050828281518110610cf357fe5b6020908102919091010152600101610a3f565b509392505050565b600061077d8260405180602001604052806000815250610e20565b6000610d3482610d0e565b158015610d445750600183015415155b8015610e195750610e19836001018460000184604051610d6491906111f0565b90815260200160405180910390206005015481548110610d8057fe5b600091825260209182902001805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015610e0e5780601f10610de357610100808354040283529160200191610e0e565b820191906000526020600020905b815481529060010190602001808311610df157829003601f168201915b505050505083610e20565b9392505050565b600081604051602001610e3391906111f0565b6040516020818303038152906040528051906020012083604051602001610e5a91906111f0565b6040516020818303038152906040528051906020012014905092915050565b6040518060a001604052806060815260200160006001600160a01b031681526020016060815260200160608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610ef257805160ff1916838001178555610f1f565b82800160010185558215610f1f579182015b82811115610f1f578251825591602001919060010190610f04565b50610f2b929150610f76565b5090565b50805460018160011615610100020316600290046000825580601f10610f555750610f73565b601f016020900490600052602060002090810190610f739190610f76565b50565b5b80821115610f2b5760008155600101610f77565b80356001600160a01b038116811461077d57600080fd5b600082601f830112610fb2578081fd5b813567ffffffffffffffff811115610fc8578182fd5b610fdb601f8201601f191660200161147e565b9150808252836020828501011115610ff257600080fd5b8060208401602084013760009082016020015292915050565b60006020828403121561101c578081fd5b610e198383610f8b565b600060208284031215611037578081fd5b813567ffffffffffffffff81111561104d578182fd5b61105984828501610fa2565b949350505050565b600060208284031215611072578081fd5b813567ffffffffffffffff80821115611089578283fd5b9083019060a0828603121561109c578283fd5b6110a660a061147e565b8235828111156110b4578485fd5b6110c087828601610fa2565b8252506110d08660208501610f8b565b60208201526040830135828111156110e6578485fd5b6110f287828601610fa2565b604083015250606083013582811115611109578485fd5b61111587828601610fa2565b60608301525060808301358281111561112c578485fd5b61113887828601610fa2565b60808301525095945050505050565b6000815180845261115f8160208601602086016114a5565b601f01601f19169290920160200192915050565b6000815160a0845261118860a0850182611147565b905060018060a01b036020840151166020850152604083015184820360408601526111b38282611147565b915050606083015184820360608601526111cd8282611147565b915050608083015184820360808601526111e78282611147565b95945050505050565b600082516112028184602087016114a5565b9190910192915050565b600080835460018082166000811461122b576001811461124257611271565b60ff198316865260028304607f1686019350611271565b600283048786526020808720875b838110156112695781548a820152908501908201611250565b505050860193505b509195945050505050565b6001600160a01b0391909116815260200190565b6000602080830181845280855180835260408601915060408482028701019250838701855b828110156112e357603f198886030184526112d1858351611173565b945092850192908501906001016112b5565b5092979650505050505050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526026908201527f4c69624974657261626c654d617070696e673a204e414d455f414c524541445960408201526517d05111115160d21b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601e908201527f4c69624974657261626c654d617070696e673a20454d5054595f4e414d450000604082015260600190565b60208082526021908201527f4c69624974657261626c654d617070696e673a20494e56414c49445f494e44456040820152600b60fb1b606082015260800190565b60208082526022908201527f4c69624974657261626c654d617070696e673a204e414d455f4e4f545f464f55604082015261139160f21b606082015260800190565b600060208252610e196020830184611173565b60405181810167ffffffffffffffff8111828210171561149d57600080fd5b604052919050565b60005b838110156114c05781810151838201526020016114a8565b838111156104a9575050600091015256fea26469706673582212207ffce686b133899c962d2392c37d7cc417bfb49017cb433d19d525b065f0f46d64736f6c63430007010033","devdoc":{"author":"Connext <support@connext.network>","kind":"dev","methods":{"addTransferDefinition((string,address,string,string,bytes))":{"details":"Should add a transfer definition to the registry"},"getTransferDefinitions()":{"details":"Should return all transfer defintions in registry"},"owner()":{"details":"Returns the address of the current owner."},"removeTransferDefinition(string)":{"details":"Should remove a transfer definition from the registry"},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"title":"TransferRegistry","version":1},"userdoc":{"kind":"user","methods":{},"notice":"The TransferRegistry maintains an onchain record of all         supported transfers (specifically holds the registry information         defined within the contracts). The offchain protocol uses         this information to get the correct encodings when generating         signatures. The information stored here can only be updated         by the owner of the contract","version":1},"storageLayout":{"storage":[{"astId":30,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":3458,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"transfers","offset":0,"slot":"1","type":"t_struct(IterableMapping)4424_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_string_storage)dyn_storage":{"base":"t_string_storage","encoding":"dynamic_array","label":"string[]","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_mapping(t_string_memory_ptr,t_struct(TransferDefinitionWithIndex)4416_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => struct LibIterableMapping.TransferDefinitionWithIndex)","numberOfBytes":"32","value":"t_struct(TransferDefinitionWithIndex)4416_storage"},"t_string_memory_ptr":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(IterableMapping)4424_storage":{"encoding":"inplace","label":"struct LibIterableMapping.IterableMapping","members":[{"astId":4420,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"transfers","offset":0,"slot":"0","type":"t_mapping(t_string_memory_ptr,t_struct(TransferDefinitionWithIndex)4416_storage)"},{"astId":4423,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"names","offset":0,"slot":"1","type":"t_array(t_string_storage)dyn_storage"}],"numberOfBytes":"64"},"t_struct(RegisteredTransfer)3967_storage":{"encoding":"inplace","label":"struct RegisteredTransfer","members":[{"astId":3958,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":3960,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"definition","offset":0,"slot":"1","type":"t_address"},{"astId":3962,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"stateEncoding","offset":0,"slot":"2","type":"t_string_storage"},{"astId":3964,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"resolverEncoding","offset":0,"slot":"3","type":"t_string_storage"},{"astId":3966,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"encodedCancel","offset":0,"slot":"4","type":"t_bytes_storage"}],"numberOfBytes":"160"},"t_struct(TransferDefinitionWithIndex)4416_storage":{"encoding":"inplace","label":"struct LibIterableMapping.TransferDefinitionWithIndex","members":[{"astId":4413,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"transfer","offset":0,"slot":"0","type":"t_struct(RegisteredTransfer)3967_storage"},{"astId":4415,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"index","offset":0,"slot":"5","type":"t_uint256"}],"numberOfBytes":"192"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}}}')},2799:function(e){e.exports=JSON.parse('{"address":"0xed911640fd86f92fD1337526010adda8F3Eb8344","abi":[{"inputs":[],"name":"EncodedCancel","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"Name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ResolverEncoding","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"StateEncoding","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"encodedBalance","type":"bytes"},{"internalType":"bytes","name":"encodedState","type":"bytes"}],"name":"create","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"getRegistryInformation","outputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"address","name":"definition","type":"address"},{"internalType":"string","name":"stateEncoding","type":"string"},{"internalType":"string","name":"resolverEncoding","type":"string"},{"internalType":"bytes","name":"encodedCancel","type":"bytes"}],"internalType":"struct RegisteredTransfer","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"encodedBalance","type":"bytes"},{"internalType":"bytes","name":"encodedState","type":"bytes"},{"internalType":"bytes","name":"encodedResolver","type":"bytes"}],"name":"resolve","outputs":[{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"}],"transactionHash":"0xd659b4a4aa3f3eeb706ccc046dae550ea3cb500e8779fe918800bf8f1e1aac52","receipt":{"to":null,"from":"0xd4b33434Cb36df9286Ef5132FCFb8062c96aC56E","contractAddress":"0xed911640fd86f92fD1337526010adda8F3Eb8344","transactionIndex":97,"gasUsed":"1069621","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","blockHash":"0x6580754ed2439d1bcdf528d17a710c8ef8160415dcf47ae4973f262f9df34928","transactionHash":"0xd659b4a4aa3f3eeb706ccc046dae550ea3cb500e8779fe918800bf8f1e1aac52","logs":[],"blockNumber":11551564,"cumulativeGasUsed":"6692442","status":1,"byzantium":true},"args":[],"solcInputHash":"89c55d5a88f10637860a9ea31a1daad3","metadata":"{\\"compiler\\":{\\"version\\":\\"0.7.1+commit.f4a555be\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[],\\"name\\":\\"EncodedCancel\\",\\"outputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"\\",\\"type\\":\\"bytes\\"}],\\"stateMutability\\":\\"pure\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"Name\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"ResolverEncoding\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"StateEncoding\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedBalance\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedState\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"create\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"pure\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getRegistryInformation\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"definition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"stateEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"resolverEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedCancel\\",\\"type\\":\\"bytes\\"}],\\"internalType\\":\\"struct RegisteredTransfer\\",\\"name\\":\\"\\",\\"type\\":\\"tuple\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedBalance\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedState\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedResolver\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"resolve\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"\\",\\"type\\":\\"tuple\\"}],\\"stateMutability\\":\\"pure\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"author\\":\\"Connext <support@connext.network>\\",\\"kind\\":\\"dev\\",\\"methods\\":{},\\"title\\":\\"Withdraw\\",\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"notice\\":\\"This contract burns the initiator\'s funds if a mutually signed         withdraw commitment can be generated\\",\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"src.sol/transferDefinitions/Withdraw.sol\\":\\"Withdraw\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\\\n *\\\\n * These functions can be used to verify that a message was signed by the holder\\\\n * of the private keys of a given address.\\\\n */\\\\nlibrary ECDSA {\\\\n    /**\\\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\\\n     * `signature`. This address can then be used for verification purposes.\\\\n     *\\\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\\\n     * this function rejects them by requiring the `s` value to be in the lower\\\\n     * half order, and the `v` value to be either 27 or 28.\\\\n     *\\\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\\\n     * verification to be secure: it is possible to craft signatures that\\\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\\\n     * this is by receiving a hash of the original message (which may otherwise\\\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\\\n     */\\\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\\\n        // Check the signature length\\\\n        if (signature.length != 65) {\\\\n            revert(\\\\\\"ECDSA: invalid signature length\\\\\\");\\\\n        }\\\\n\\\\n        // Divide the signature in r, s and v variables\\\\n        bytes32 r;\\\\n        bytes32 s;\\\\n        uint8 v;\\\\n\\\\n        // ecrecover takes the signature parameters, and the only way to get them\\\\n        // currently is to use assembly.\\\\n        // solhint-disable-next-line no-inline-assembly\\\\n        assembly {\\\\n            r := mload(add(signature, 0x20))\\\\n            s := mload(add(signature, 0x40))\\\\n            v := byte(0, mload(add(signature, 0x60)))\\\\n        }\\\\n\\\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\\\n        // the valid range for s in (281): 0 < s < secp256k1n \\\\u00f7 2 + 1, and for v in (282): v \\\\u2208 {27, 28}. Most\\\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\\\n        //\\\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\\\n        // these malleable signatures as well.\\\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\\\n            revert(\\\\\\"ECDSA: invalid signature \'s\' value\\\\\\");\\\\n        }\\\\n\\\\n        if (v != 27 && v != 28) {\\\\n            revert(\\\\\\"ECDSA: invalid signature \'v\' value\\\\\\");\\\\n        }\\\\n\\\\n        // If the signature is valid (and not malleable), return the signer address\\\\n        address signer = ecrecover(hash, v, r, s);\\\\n        require(signer != address(0), \\\\\\"ECDSA: invalid signature\\\\\\");\\\\n\\\\n        return signer;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\\\n     * replicates the behavior of the\\\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\\\n     * JSON-RPC method.\\\\n     *\\\\n     * See {recover}.\\\\n     */\\\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\\\n        // 32 is the length in bytes of hash,\\\\n        // enforced by the type signature above\\\\n        return keccak256(abi.encodePacked(\\\\\\"\\\\\\\\x19Ethereum Signed Message:\\\\\\\\n32\\\\\\", hash));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf25c49d2be2d28918ae6de7e9724238367dabe50631ec8fd23d1cdae2cb70262\\",\\"license\\":\\"MIT\\"},\\"src.sol/interfaces/ITransferDefinition.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./ITransferRegistry.sol\\\\\\";\\\\nimport \\\\\\"./Types.sol\\\\\\";\\\\n\\\\ninterface ITransferDefinition {\\\\n    // Validates the initial state of the transfer.\\\\n    // Called by validator.ts during `create` updates.\\\\n    function create(bytes calldata encodedBalance, bytes calldata)\\\\n        external\\\\n        view\\\\n        returns (bool);\\\\n\\\\n    // Performs a state transition to resolve a transfer and returns final balances.\\\\n    // Called by validator.ts during `resolve` updates.\\\\n    function resolve(\\\\n        bytes calldata encodedBalance,\\\\n        bytes calldata,\\\\n        bytes calldata\\\\n    ) external view returns (Balance memory);\\\\n\\\\n    // Should also have the following properties:\\\\n    // string public constant override Name = \\\\\\"...\\\\\\";\\\\n    // string public constant override StateEncoding = \\\\\\"...\\\\\\";\\\\n    // string public constant override ResolverEncoding = \\\\\\"...\\\\\\";\\\\n    // These properties are included on the transfer specifically\\\\n    // to make it easier for implementers to add new transfers by\\\\n    // only include a `.sol` file\\\\n    function Name() external view returns (string memory);\\\\n\\\\n    function StateEncoding() external view returns (string memory);\\\\n\\\\n    function ResolverEncoding() external view returns (string memory);\\\\n\\\\n    function EncodedCancel() external view returns (bytes memory);\\\\n\\\\n    function getRegistryInformation()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd8eef575aa791b187397c9096e6cf40431b590d3999f0a80e38f3e59f4cf4764\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ITransferRegistry.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental \\\\\\"ABIEncoderV2\\\\\\";\\\\n\\\\nstruct RegisteredTransfer {\\\\n    string name;\\\\n    address definition;\\\\n    string stateEncoding;\\\\n    string resolverEncoding;\\\\n    bytes encodedCancel;\\\\n}\\\\n\\\\ninterface ITransferRegistry {\\\\n    event TransferAdded(RegisteredTransfer transfer);\\\\n\\\\n    event TransferRemoved(RegisteredTransfer transfer);\\\\n\\\\n    // Should add a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function addTransferDefinition(RegisteredTransfer memory transfer) external;\\\\n\\\\n    // Should remove a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function removeTransferDefinition(string memory name) external;\\\\n\\\\n    // Should return all transfer defintions in registry\\\\n    function getTransferDefinitions()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer[] memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd13be6d976c64e381a0d9df10c621cd964454b6916f25df4ea6c1b4cd873a58a\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/Types.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nstruct Balance {\\\\n    uint256[2] amount; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n    address payable[2] to; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf8c71b155b630cde965f5d1db5f0d2751a9763f5a797f15d946613e9224f1046\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibChannelCrypto.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\\\\\";\\\\n\\\\t\\\\t\\\\n/// @author Connext <support@connext.network>\\\\t\\\\t\\\\n/// @notice This library contains helpers for recovering signatures from a\\\\t\\\\t\\\\n///         Vector commitments. Channels do not allow for arbitrary signing of\\\\t\\\\t\\\\n///         messages to prevent misuse of private keys by injected providers,\\\\t\\\\t\\\\n///         and instead only sign messages with a Vector channel prefix.\\\\nlibrary LibChannelCrypto {\\\\n    function checkSignature(\\\\n        bytes32 hash,\\\\n        bytes memory signature,\\\\n        address allegedSigner\\\\n    ) internal pure returns (bool) {\\\\n        return recoverChannelMessageSigner(hash, signature) == allegedSigner;\\\\n    }\\\\n\\\\n    function recoverChannelMessageSigner(bytes32 hash, bytes memory signature)\\\\n        internal\\\\n        pure\\\\n        returns (address)\\\\n    {\\\\n        bytes32 digest = toChannelSignedMessage(hash);\\\\n        return ECDSA.recover(digest, signature);\\\\n    }\\\\n\\\\n    function toChannelSignedMessage(bytes32 hash)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        // 32 is the length in bytes of hash,\\\\n        // enforced by the type signature above\\\\n        return\\\\n            keccak256(abi.encodePacked(\\\\\\"\\\\\\\\x16Vector Signed Message:\\\\\\\\n32\\\\\\", hash));\\\\n    }\\\\n\\\\n    function checkUtilitySignature(\\\\n        bytes32 hash,\\\\n        bytes memory signature,\\\\n        address allegedSigner\\\\n    ) internal pure returns (bool) {\\\\n        return recoverChannelMessageSigner(hash, signature) == allegedSigner;\\\\n    }\\\\n\\\\n    function recoverUtilityMessageSigner(bytes32 hash, bytes memory signature)\\\\n        internal\\\\n        pure\\\\n        returns (address)\\\\n    {\\\\n        bytes32 digest = toUtilitySignedMessage(hash);\\\\n        return ECDSA.recover(digest, signature);\\\\n    }\\\\n\\\\n    function toUtilitySignedMessage(bytes32 hash)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        // 32 is the length in bytes of hash,\\\\n        // enforced by the type signature above\\\\n        return\\\\n            keccak256(abi.encodePacked(\\\\\\"\\\\\\\\x17Utility Signed Message:\\\\\\\\n32\\\\\\", hash));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xb8aa3679b75f2a1a5785f614f5dff9a76a689c18caa56a8df1f4e3c3167d6ece\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/transferDefinitions/TransferDefinition.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"../interfaces/ITransferDefinition.sol\\\\\\";\\\\nimport \\\\\\"../interfaces/ITransferRegistry.sol\\\\\\";\\\\n\\\\n/// @title TransferDefinition\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This contract helps reduce boilerplate needed when creating\\\\n///         new transfer definitions by providing an implementation of\\\\n///         the required getter\\\\n\\\\nabstract contract TransferDefinition is ITransferDefinition {\\\\n    function getRegistryInformation()\\\\n        external\\\\n        view\\\\n        override\\\\n        returns (RegisteredTransfer memory)\\\\n    {\\\\n        return\\\\n            RegisteredTransfer({\\\\n                name: this.Name(),\\\\n                stateEncoding: this.StateEncoding(),\\\\n                resolverEncoding: this.ResolverEncoding(),\\\\n                definition: address(this),\\\\n                encodedCancel: this.EncodedCancel()\\\\n            });\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xdb8bcb3fadd5c514bc6585b0a48d66952570bbb1a62f18b9dc9a4f693dc11c5e\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/transferDefinitions/Withdraw.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./TransferDefinition.sol\\\\\\";\\\\nimport \\\\\\"../lib/LibChannelCrypto.sol\\\\\\";\\\\n\\\\n/// @title Withdraw\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This contract burns the initiator\'s funds if a mutually signed\\\\n///         withdraw commitment can be generated\\\\n\\\\ncontract Withdraw is TransferDefinition {\\\\n    using LibChannelCrypto for bytes32;\\\\n\\\\n    struct TransferState {\\\\n        bytes initiatorSignature;\\\\n        address initiator;\\\\n        address responder;\\\\n        bytes32 data;\\\\n        uint256 nonce; // included so that each withdraw commitment has a unique hash\\\\n        uint256 fee;\\\\n        address callTo;\\\\n        bytes callData;\\\\n    }\\\\n\\\\n    struct TransferResolver {\\\\n        bytes responderSignature;\\\\n    }\\\\n\\\\n    // Provide registry information\\\\n    string public constant override Name = \\\\\\"Withdraw\\\\\\";\\\\n    string public constant override StateEncoding =\\\\n        \\\\\\"tuple(bytes initiatorSignature, address initiator, address responder, bytes32 data, uint256 nonce, uint256 fee, address callTo, bytes callData)\\\\\\";\\\\n    string public constant override ResolverEncoding =\\\\n        \\\\\\"tuple(bytes responderSignature)\\\\\\";\\\\n\\\\n    function EncodedCancel() external pure override returns(bytes memory) {\\\\n      TransferResolver memory resolver;\\\\n      resolver.responderSignature = new bytes(65);\\\\n      return abi.encode(resolver);\\\\n    }\\\\n\\\\n    function create(bytes calldata encodedBalance, bytes calldata encodedState)\\\\n        external\\\\n        pure\\\\n        override\\\\n        returns (bool)\\\\n    {\\\\n        // Get unencoded information\\\\n        TransferState memory state = abi.decode(encodedState, (TransferState));\\\\n        Balance memory balance = abi.decode(encodedBalance, (Balance));\\\\n\\\\n        require(balance.amount[1] == 0, \\\\\\"Withdraw: NONZERO_RECIPIENT_BALANCE\\\\\\");\\\\n        require(\\\\n            state.initiator != address(0) && state.responder != address(0),\\\\n            \\\\\\"Withdraw: EMPTY_SIGNERS\\\\\\"\\\\n        );\\\\n        require(state.data != bytes32(0), \\\\\\"Withdraw: EMPTY_DATA\\\\\\");\\\\n        require(state.nonce != uint256(0), \\\\\\"Withdraw: EMPTY_NONCE\\\\\\");\\\\n        require(\\\\n            state.fee <= balance.amount[0],\\\\n            \\\\\\"Withdraw: INSUFFICIENT_BALANCE\\\\\\"\\\\n        );\\\\n        require(\\\\n            state.data.checkSignature(\\\\n                state.initiatorSignature,\\\\n                state.initiator\\\\n            ),\\\\n            \\\\\\"Withdraw: INVALID_INITIATOR_SIG\\\\\\"\\\\n        );\\\\n        \\\\n        // Valid initial transfer state\\\\n        return true;\\\\n    }\\\\n\\\\n    function resolve(\\\\n        bytes calldata encodedBalance,\\\\n        bytes calldata encodedState,\\\\n        bytes calldata encodedResolver\\\\n    ) external pure override returns (Balance memory) {\\\\n        TransferState memory state = abi.decode(encodedState, (TransferState));\\\\n        TransferResolver memory resolver =\\\\n            abi.decode(encodedResolver, (TransferResolver));\\\\n        Balance memory balance = abi.decode(encodedBalance, (Balance));\\\\n\\\\n        // Allow for a withdrawal to be canceled if an empty signature is \\\\n        // passed in. Should have *specific* cancellation action, not just\\\\n        // any invalid sig\\\\n        bytes memory b = new bytes(65);\\\\n        if (keccak256(resolver.responderSignature) == keccak256(b)) {\\\\n            // Withdraw should be cancelled, no state manipulation needed\\\\n        } else {\\\\n            require(\\\\n                state.data.checkSignature(\\\\n                    resolver.responderSignature,\\\\n                    state.responder\\\\n                ),\\\\n                \\\\\\"Withdraw: INVALID_RESPONDER_SIG\\\\\\"\\\\n            );\\\\n            // Reduce withdraw amount by optional fee\\\\n            // It\'s up to the offchain validators to ensure that the withdraw commitment takes this fee into account\\\\n            balance.amount[1] = state.fee;\\\\n            balance.amount[0] = 0;\\\\n        }\\\\n\\\\n        return balance;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x012e5deb93a2d67452884dff9179274801a30abf2455833eb4c59a42a87c50b0\\",\\"license\\":\\"UNLICENSED\\"}},\\"version\\":1}","bytecode":"0x608060405234801561001057600080fd5b50611263806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638052474d1161005b5780638052474d146100bd5780638de8b77e146100c55780638ef98a7e146100cd57806394184ba9146100ed5761007d565b80630528aa1c14610082578063206162be146100a05780633722aff9146100b5575b600080fd5b61008a61010d565b6040516100979190610d6e565b60405180910390f35b6100a861015c565b6040516100979190611060565b61008a610368565b61008a6103a1565b61008a6103c5565b6100e06100db3660046109fc565b6103e1565b6040516100979190610ff6565b6101006100fb366004610993565b6104ca565b6040516100979190610d45565b60606101176107b0565b604080516041808252608082019092529060208201818036833750505081526040516101479082906020016110f0565b60405160208183030381529060405291505090565b6101646107c3565b6040518060a00160405280306001600160a01b0316638052474d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156101a857600080fd5b505afa1580156101bc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101e49190810190610a92565b8152602001306001600160a01b03168152602001306001600160a01b0316638de8b77e6040518163ffffffff1660e01b815260040160006040518083038186803b15801561023157600080fd5b505afa158015610245573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261026d9190810190610a92565b8152602001306001600160a01b0316633722aff96040518163ffffffff1660e01b815260040160006040518083038186803b1580156102ab57600080fd5b505afa1580156102bf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102e79190810190610a92565b8152602001306001600160a01b0316630528aa1c6040518163ffffffff1660e01b815260040160006040518083038186803b15801561032557600080fd5b505afa158015610339573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103619190810190610a92565b9052905090565b6040518060400160405280601f81526020017f7475706c6528627974657320726573706f6e6465725369676e6174757265290081525081565b60405180604001604052806008815260200167576974686472617760c01b81525081565b6040518060c00160405280608f815260200161119f608f913981565b6103e96107fb565b6103f1610820565b6103fd85870187610c02565b90506104076107b0565b61041384860186610b97565b905061041d6107fb565b610429898b018b610ac5565b60408051604180825260808201909252919250606091906020820181803683370190505090508080519060200120836000015180519060200120141561046e576104bc565b825160408501516060860151610485929091610608565b6104aa5760405162461bcd60e51b81526004016104a190610fbf565b60405180910390fd5b60a08401518251602001528151600090525b509998505050505050505050565b60006104d4610820565b6104e083850185610c02565b90506104ea6107fb565b6104f686880188610ac5565b8051602001519091501561051c5760405162461bcd60e51b81526004016104a190610f1f565b60208201516001600160a01b031615801590610544575060408201516001600160a01b031615155b6105605760405162461bcd60e51b81526004016104a190610df6565b60608201516105815760405162461bcd60e51b81526004016104a190610f62565b60808201516105a25760405162461bcd60e51b81526004016104a190610f90565b80515160a083015111156105c85760405162461bcd60e51b81526004016104a190610ea6565b8151602083015160608401516105df929091610608565b6105fb5760405162461bcd60e51b81526004016104a190610e6f565b5060019695505050505050565b6000816001600160a01b031661061e8585610630565b6001600160a01b031614949350505050565b60008061063c84610652565b90506106488184610682565b9150505b92915050565b6000816040516020016106659190610d14565b604051602081830303815290604052805190602001209050919050565b600081516041146106a55760405162461bcd60e51b81526004016104a190610dbf565b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156106f75760405162461bcd60e51b81526004016104a190610e2d565b8060ff16601b1415801561070f57508060ff16601c14155b1561072c5760405162461bcd60e51b81526004016104a190610edd565b6000600187838686604051600081526020016040526040516107519493929190610d50565b6020604051602081039080840390855afa158015610773573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166107a65760405162461bcd60e51b81526004016104a190610d88565b9695505050505050565b6040518060200160405280606081525090565b6040518060a001604052806060815260200160006001600160a01b031681526020016060815260200160608152602001606081525090565b604051806040016040528061080e610883565b815260200161081b610883565b905290565b6040518061010001604052806060815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008019168152602001600081526020016000815260200160006001600160a01b03168152602001606081525090565b60405180604001604052806002906020820280368337509192915050565b803561064c81611186565b60008083601f8401126108bd578182fd5b50813567ffffffffffffffff8111156108d4578182fd5b6020830191508360208285010111156108ec57600080fd5b9250929050565b600082601f830112610903578081fd5b813561091661091182611132565b61110b565b915080825283602082850101111561092d57600080fd5b8060208401602084013760009082016020015292915050565b600082601f830112610956578081fd5b815161096461091182611132565b915080825283602082850101111561097b57600080fd5b61098c816020840160208601611156565b5092915050565b600080600080604085870312156109a8578384fd5b843567ffffffffffffffff808211156109bf578586fd5b6109cb888389016108ac565b909650945060208701359150808211156109e3578384fd5b506109f0878288016108ac565b95989497509550505050565b60008060008060008060608789031215610a14578182fd5b863567ffffffffffffffff80821115610a2b578384fd5b610a378a838b016108ac565b90985096506020890135915080821115610a4f578384fd5b610a5b8a838b016108ac565b90965094506040890135915080821115610a73578384fd5b50610a8089828a016108ac565b979a9699509497509295939492505050565b600060208284031215610aa3578081fd5b815167ffffffffffffffff811115610ab9578182fd5b61064884828501610946565b600060808284031215610ad6578081fd5b610ae0604061110b565b83601f840112610aee578182fd5b610af8604061110b565b80846040860187811115610b0a578586fd5b855b6002811015610b2b578235855260209485019490920191600101610b0c565b5082855287605f880112610b3d578586fd5b610b47604061110b565b9350839250905060808601871015610b5d578485fd5b845b6002811015610b88578135610b7381611186565b84526020938401939190910190600101610b5f565b50506020830152509392505050565b600060208284031215610ba8578081fd5b813567ffffffffffffffff80821115610bbf578283fd5b9083019060208286031215610bd2578283fd5b610bdc602061110b565b823582811115610bea578485fd5b610bf6878286016108f3565b82525095945050505050565b600060208284031215610c13578081fd5b813567ffffffffffffffff80821115610c2a578283fd5b8184019150610100808387031215610c40578384fd5b610c498161110b565b9050823582811115610c59578485fd5b610c65878286016108f3565b825250610c7586602085016108a1565b6020820152610c8786604085016108a1565b6040820152606083013560608201526080830135608082015260a083013560a0820152610cb78660c085016108a1565b60c082015260e083013582811115610ccd578485fd5b610cd9878286016108f3565b60e08301525095945050505050565b60008151808452610d00816020860160208601611156565b601f01601f19169290920160200192915050565b7f16566563746f72205369676e6564204d6573736167653a0a33320000000000008152601a810191909152603a0190565b901515815260200190565b93845260ff9290921660208401526040830152606082015260800190565b600060208252610d816020830184610ce8565b9392505050565b60208082526018908201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604082015260600190565b6020808252601f908201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604082015260600190565b60208082526017908201527f57697468647261773a20454d5054595f5349474e455253000000000000000000604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604082015261756560f01b606082015260800190565b6020808252601f908201527f57697468647261773a20494e56414c49445f494e49544941544f525f53494700604082015260600190565b6020808252601e908201527f57697468647261773a20494e53554646494349454e545f42414c414e43450000604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604082015261756560f01b606082015260800190565b60208082526023908201527f57697468647261773a204e4f4e5a45524f5f524543495049454e545f42414c416040820152624e434560e81b606082015260800190565b60208082526014908201527357697468647261773a20454d5054595f4441544160601b604082015260600190565b60208082526015908201527457697468647261773a20454d5054595f4e4f4e434560581b604082015260600190565b6020808252601f908201527f57697468647261773a20494e56414c49445f524553504f4e4445525f53494700604082015260600190565b815160808201908260005b6002811015611020578251825260209283019290910190600101611001565b5050506020808401516040840160005b60028110156110565782516001600160a01b031682529183019190830190600101611030565b5050505092915050565b600060208252825160a0602084015261107c60c0840182610ce8565b905060018060a01b0360208501511660408401526040840151601f19808584030160608601526110ac8383610ce8565b925060608601519150808584030160808601526110c98383610ce8565b925060808601519150808584030160a0860152506110e78282610ce8565b95945050505050565b60006020825282516020808401526106486040840182610ce8565b60405181810167ffffffffffffffff8111828210171561112a57600080fd5b604052919050565b600067ffffffffffffffff821115611148578081fd5b50601f01601f191660200190565b60005b83811015611171578181015183820152602001611159565b83811115611180576000848401525b50505050565b6001600160a01b038116811461119b57600080fd5b5056fe7475706c6528627974657320696e69746961746f725369676e61747572652c206164647265737320696e69746961746f722c206164647265737320726573706f6e6465722c206279746573333220646174612c2075696e74323536206e6f6e63652c2075696e74323536206665652c20616464726573732063616c6c546f2c2062797465732063616c6c4461746129a2646970667358221220e6c29ec66c4575ed5816330cc0372206a95865e0e0b591d5a21001f4a374293764736f6c63430007010033","deployedBytecode":"0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80638052474d1161005b5780638052474d146100bd5780638de8b77e146100c55780638ef98a7e146100cd57806394184ba9146100ed5761007d565b80630528aa1c14610082578063206162be146100a05780633722aff9146100b5575b600080fd5b61008a61010d565b6040516100979190610d6e565b60405180910390f35b6100a861015c565b6040516100979190611060565b61008a610368565b61008a6103a1565b61008a6103c5565b6100e06100db3660046109fc565b6103e1565b6040516100979190610ff6565b6101006100fb366004610993565b6104ca565b6040516100979190610d45565b60606101176107b0565b604080516041808252608082019092529060208201818036833750505081526040516101479082906020016110f0565b60405160208183030381529060405291505090565b6101646107c3565b6040518060a00160405280306001600160a01b0316638052474d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156101a857600080fd5b505afa1580156101bc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101e49190810190610a92565b8152602001306001600160a01b03168152602001306001600160a01b0316638de8b77e6040518163ffffffff1660e01b815260040160006040518083038186803b15801561023157600080fd5b505afa158015610245573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261026d9190810190610a92565b8152602001306001600160a01b0316633722aff96040518163ffffffff1660e01b815260040160006040518083038186803b1580156102ab57600080fd5b505afa1580156102bf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102e79190810190610a92565b8152602001306001600160a01b0316630528aa1c6040518163ffffffff1660e01b815260040160006040518083038186803b15801561032557600080fd5b505afa158015610339573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103619190810190610a92565b9052905090565b6040518060400160405280601f81526020017f7475706c6528627974657320726573706f6e6465725369676e6174757265290081525081565b60405180604001604052806008815260200167576974686472617760c01b81525081565b6040518060c00160405280608f815260200161119f608f913981565b6103e96107fb565b6103f1610820565b6103fd85870187610c02565b90506104076107b0565b61041384860186610b97565b905061041d6107fb565b610429898b018b610ac5565b60408051604180825260808201909252919250606091906020820181803683370190505090508080519060200120836000015180519060200120141561046e576104bc565b825160408501516060860151610485929091610608565b6104aa5760405162461bcd60e51b81526004016104a190610fbf565b60405180910390fd5b60a08401518251602001528151600090525b509998505050505050505050565b60006104d4610820565b6104e083850185610c02565b90506104ea6107fb565b6104f686880188610ac5565b8051602001519091501561051c5760405162461bcd60e51b81526004016104a190610f1f565b60208201516001600160a01b031615801590610544575060408201516001600160a01b031615155b6105605760405162461bcd60e51b81526004016104a190610df6565b60608201516105815760405162461bcd60e51b81526004016104a190610f62565b60808201516105a25760405162461bcd60e51b81526004016104a190610f90565b80515160a083015111156105c85760405162461bcd60e51b81526004016104a190610ea6565b8151602083015160608401516105df929091610608565b6105fb5760405162461bcd60e51b81526004016104a190610e6f565b5060019695505050505050565b6000816001600160a01b031661061e8585610630565b6001600160a01b031614949350505050565b60008061063c84610652565b90506106488184610682565b9150505b92915050565b6000816040516020016106659190610d14565b604051602081830303815290604052805190602001209050919050565b600081516041146106a55760405162461bcd60e51b81526004016104a190610dbf565b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156106f75760405162461bcd60e51b81526004016104a190610e2d565b8060ff16601b1415801561070f57508060ff16601c14155b1561072c5760405162461bcd60e51b81526004016104a190610edd565b6000600187838686604051600081526020016040526040516107519493929190610d50565b6020604051602081039080840390855afa158015610773573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166107a65760405162461bcd60e51b81526004016104a190610d88565b9695505050505050565b6040518060200160405280606081525090565b6040518060a001604052806060815260200160006001600160a01b031681526020016060815260200160608152602001606081525090565b604051806040016040528061080e610883565b815260200161081b610883565b905290565b6040518061010001604052806060815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008019168152602001600081526020016000815260200160006001600160a01b03168152602001606081525090565b60405180604001604052806002906020820280368337509192915050565b803561064c81611186565b60008083601f8401126108bd578182fd5b50813567ffffffffffffffff8111156108d4578182fd5b6020830191508360208285010111156108ec57600080fd5b9250929050565b600082601f830112610903578081fd5b813561091661091182611132565b61110b565b915080825283602082850101111561092d57600080fd5b8060208401602084013760009082016020015292915050565b600082601f830112610956578081fd5b815161096461091182611132565b915080825283602082850101111561097b57600080fd5b61098c816020840160208601611156565b5092915050565b600080600080604085870312156109a8578384fd5b843567ffffffffffffffff808211156109bf578586fd5b6109cb888389016108ac565b909650945060208701359150808211156109e3578384fd5b506109f0878288016108ac565b95989497509550505050565b60008060008060008060608789031215610a14578182fd5b863567ffffffffffffffff80821115610a2b578384fd5b610a378a838b016108ac565b90985096506020890135915080821115610a4f578384fd5b610a5b8a838b016108ac565b90965094506040890135915080821115610a73578384fd5b50610a8089828a016108ac565b979a9699509497509295939492505050565b600060208284031215610aa3578081fd5b815167ffffffffffffffff811115610ab9578182fd5b61064884828501610946565b600060808284031215610ad6578081fd5b610ae0604061110b565b83601f840112610aee578182fd5b610af8604061110b565b80846040860187811115610b0a578586fd5b855b6002811015610b2b578235855260209485019490920191600101610b0c565b5082855287605f880112610b3d578586fd5b610b47604061110b565b9350839250905060808601871015610b5d578485fd5b845b6002811015610b88578135610b7381611186565b84526020938401939190910190600101610b5f565b50506020830152509392505050565b600060208284031215610ba8578081fd5b813567ffffffffffffffff80821115610bbf578283fd5b9083019060208286031215610bd2578283fd5b610bdc602061110b565b823582811115610bea578485fd5b610bf6878286016108f3565b82525095945050505050565b600060208284031215610c13578081fd5b813567ffffffffffffffff80821115610c2a578283fd5b8184019150610100808387031215610c40578384fd5b610c498161110b565b9050823582811115610c59578485fd5b610c65878286016108f3565b825250610c7586602085016108a1565b6020820152610c8786604085016108a1565b6040820152606083013560608201526080830135608082015260a083013560a0820152610cb78660c085016108a1565b60c082015260e083013582811115610ccd578485fd5b610cd9878286016108f3565b60e08301525095945050505050565b60008151808452610d00816020860160208601611156565b601f01601f19169290920160200192915050565b7f16566563746f72205369676e6564204d6573736167653a0a33320000000000008152601a810191909152603a0190565b901515815260200190565b93845260ff9290921660208401526040830152606082015260800190565b600060208252610d816020830184610ce8565b9392505050565b60208082526018908201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604082015260600190565b6020808252601f908201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604082015260600190565b60208082526017908201527f57697468647261773a20454d5054595f5349474e455253000000000000000000604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604082015261756560f01b606082015260800190565b6020808252601f908201527f57697468647261773a20494e56414c49445f494e49544941544f525f53494700604082015260600190565b6020808252601e908201527f57697468647261773a20494e53554646494349454e545f42414c414e43450000604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604082015261756560f01b606082015260800190565b60208082526023908201527f57697468647261773a204e4f4e5a45524f5f524543495049454e545f42414c416040820152624e434560e81b606082015260800190565b60208082526014908201527357697468647261773a20454d5054595f4441544160601b604082015260600190565b60208082526015908201527457697468647261773a20454d5054595f4e4f4e434560581b604082015260600190565b6020808252601f908201527f57697468647261773a20494e56414c49445f524553504f4e4445525f53494700604082015260600190565b815160808201908260005b6002811015611020578251825260209283019290910190600101611001565b5050506020808401516040840160005b60028110156110565782516001600160a01b031682529183019190830190600101611030565b5050505092915050565b600060208252825160a0602084015261107c60c0840182610ce8565b905060018060a01b0360208501511660408401526040840151601f19808584030160608601526110ac8383610ce8565b925060608601519150808584030160808601526110c98383610ce8565b925060808601519150808584030160a0860152506110e78282610ce8565b95945050505050565b60006020825282516020808401526106486040840182610ce8565b60405181810167ffffffffffffffff8111828210171561112a57600080fd5b604052919050565b600067ffffffffffffffff821115611148578081fd5b50601f01601f191660200190565b60005b83811015611171578181015183820152602001611159565b83811115611180576000848401525b50505050565b6001600160a01b038116811461119b57600080fd5b5056fe7475706c6528627974657320696e69746961746f725369676e61747572652c206164647265737320696e69746961746f722c206164647265737320726573706f6e6465722c206279746573333220646174612c2075696e74323536206e6f6e63652c2075696e74323536206665652c20616464726573732063616c6c546f2c2062797465732063616c6c4461746129a2646970667358221220e6c29ec66c4575ed5816330cc0372206a95865e0e0b591d5a21001f4a374293764736f6c63430007010033","devdoc":{"author":"Connext <support@connext.network>","kind":"dev","methods":{},"title":"Withdraw","version":1},"userdoc":{"kind":"user","methods":{},"notice":"This contract burns the initiator\'s funds if a mutually signed         withdraw commitment can be generated","version":1},"storageLayout":{"storage":[],"types":null}}')},2800:function(e){e.exports=JSON.parse('{"address":"0xC82e22B0Ef5808DE0F7E9CeB265499e29012b02c","abi":[{"inputs":[{"internalType":"address","name":"_mastercopy","type":"address"},{"internalType":"uint256","name":"_chainId","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"channel","type":"address"}],"name":"ChannelCreation","type":"event"},{"inputs":[{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"}],"name":"createChannel","outputs":[{"internalType":"address","name":"channel","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"createChannelAndDepositAlice","outputs":[{"internalType":"address","name":"channel","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"getChainId","outputs":[{"internalType":"uint256","name":"_chainId","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"}],"name":"getChannelAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMastercopy","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getProxyCreationCode","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStoredChainId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"transactionHash":"0x30caf26d69bae07b0481da0ef8bb11efbc7e73e43d4121d81af5075bd0137055","receipt":{"to":null,"from":"0x627306090abaB3A6e1400e9345bC60c78a8BEf57","contractAddress":"0xC82e22B0Ef5808DE0F7E9CeB265499e29012b02c","transactionIndex":9,"gasUsed":"677196","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","blockHash":"0xd092c79a916bc139f19bc45422f5897be062050277ddbde387af715060ada489","transactionHash":"0x30caf26d69bae07b0481da0ef8bb11efbc7e73e43d4121d81af5075bd0137055","logs":[],"blockNumber":7772114,"cumulativeGasUsed":"3111286","status":1,"byzantium":true},"args":["0xb837e7F32d964469dfB4e9A0652fE2c101bce422","0"],"solcInputHash":"89c55d5a88f10637860a9ea31a1daad3","metadata":"{\\"compiler\\":{\\"version\\":\\"0.7.1+commit.f4a555be\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_mastercopy\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_chainId\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"channel\\",\\"type\\":\\"address\\"}],\\"name\\":\\"ChannelCreation\\",\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"}],\\"name\\":\\"createChannel\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channel\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"createChannelAndDepositAlice\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channel\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"payable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getChainId\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_chainId\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getChannelAddress\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getMastercopy\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getProxyCreationCode\\",\\"outputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"\\",\\"type\\":\\"bytes\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getStoredChainId\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"author\\":\\"Connext <support@connext.network>\\",\\"kind\\":\\"dev\\",\\"methods\\":{\\"constructor\\":{\\"details\\":\\"Creates a new `ChannelFactory`\\",\\"params\\":{\\"_chainId\\":\\"the chain identifier when generating the CREATE2 salt. If zero, the chain identifier used in the proxy salt will be the result of the opcode\\",\\"_mastercopy\\":\\"the address of the `ChannelMastercopy` (channel logic)\\"}},\\"createChannel(address,address)\\":{\\"details\\":\\"Allows us to create new channel contract and get it all set up in one transaction\\",\\"params\\":{\\"alice\\":\\"address of the high fidelity channel participant\\",\\"bob\\":\\"address of the other channel participant\\"}},\\"createChannelAndDepositAlice(address,address,address,uint256)\\":{\\"details\\":\\"Allows us to create a new channel contract and fund it in one transaction\\",\\"params\\":{\\"bob\\":\\"address of the other channel participant\\"}},\\"getChainId()\\":{\\"details\\":\\"Allows us to get the chainId that this factory will use in the create2 salt\\"},\\"getChannelAddress(address,address)\\":{\\"details\\":\\"Allows us to get the address for a new channel contract created via `createChannel`\\",\\"params\\":{\\"alice\\":\\"address of the igh fidelity channel participant\\",\\"bob\\":\\"address of the other channel participant\\"}},\\"getMastercopy()\\":{\\"details\\":\\"Allows us to get the mastercopy that this factory will deploy channels against\\"},\\"getProxyCreationCode()\\":{\\"details\\":\\"Returns the proxy code used to both calculate the CREATE2 address and deploy the channel proxy pointed to the `ChannelMastercopy`\\"},\\"getStoredChainId()\\":{\\"details\\":\\"Allows us to get the chainId that this factory has stored\\"}},\\"title\\":\\"ChannelFactory\\",\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"notice\\":\\"Creates and sets up a new channel proxy contract\\",\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"src.sol/ChannelFactory.sol\\":\\"ChannelFactory\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Returns the amount of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender\'s allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\\\n     * allowance mechanism. `amount` is then deducted from the caller\'s\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Address.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Collection of functions related to the address type\\\\n */\\\\nlibrary Address {\\\\n    /**\\\\n     * @dev Returns true if `account` is a contract.\\\\n     *\\\\n     * [IMPORTANT]\\\\n     * ====\\\\n     * It is unsafe to assume that an address for which this function returns\\\\n     * false is an externally-owned account (EOA) and not a contract.\\\\n     *\\\\n     * Among others, `isContract` will return false for the following\\\\n     * types of addresses:\\\\n     *\\\\n     *  - an externally-owned account\\\\n     *  - a contract in construction\\\\n     *  - an address where a contract will be created\\\\n     *  - an address where a contract lived, but was destroyed\\\\n     * ====\\\\n     */\\\\n    function isContract(address account) internal view returns (bool) {\\\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\\\n        // for accounts without code, i.e. `keccak256(\'\')`\\\\n        bytes32 codehash;\\\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\\\n        // solhint-disable-next-line no-inline-assembly\\\\n        assembly { codehash := extcodehash(account) }\\\\n        return (codehash != accountHash && codehash != 0x0);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\\\\n     * `recipient`, forwarding all available gas and reverting on errors.\\\\n     *\\\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\\\n     * imposed by `transfer`, making them unable to receive funds via\\\\n     * `transfer`. {sendValue} removes this limitation.\\\\n     *\\\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\\\n     *\\\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\\\n     * taken to not create reentrancy vulnerabilities. Consider using\\\\n     * {ReentrancyGuard} or the\\\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\\\n     */\\\\n    function sendValue(address payable recipient, uint256 amount) internal {\\\\n        require(address(this).balance >= amount, \\\\\\"Address: insufficient balance\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\\\n        (bool success, ) = recipient.call{ value: amount }(\\\\\\"\\\\\\");\\\\n        require(success, \\\\\\"Address: unable to send value, recipient may have reverted\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Performs a Solidity function call using a low level `call`. A\\\\n     * plain`call` is an unsafe replacement for a function call: use this\\\\n     * function instead.\\\\n     *\\\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\\\n     * function (like regular Solidity function calls).\\\\n     *\\\\n     * Returns the raw returned data. To convert to the expected return value,\\\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `target` must be a contract.\\\\n     * - calling `target` with `data` must not revert.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n      return functionCall(target, data, \\\\\\"Address: low-level call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but also transferring `value` wei to `target`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the calling contract must have an ETH balance of at least `value`.\\\\n     * - the called Solidity function must be `payable`.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, value, \\\\\\"Address: low-level call with value failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\\\n        require(address(this).balance >= value, \\\\\\"Address: insufficient balance for call\\\\\\");\\\\n        return _functionCallWithValue(target, data, value, errorMessage);\\\\n    }\\\\n\\\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: call to non-contract\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls\\\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\\\n        if (success) {\\\\n            return returndata;\\\\n        } else {\\\\n            // Look for revert reason and bubble it up if present\\\\n            if (returndata.length > 0) {\\\\n                // The easiest way to bubble the revert reason is using memory via assembly\\\\n\\\\n                // solhint-disable-next-line no-inline-assembly\\\\n                assembly {\\\\n                    let returndata_size := mload(returndata)\\\\n                    revert(add(32, returndata), returndata_size)\\\\n                }\\\\n            } else {\\\\n                revert(errorMessage);\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x698f929f1097637d051976b322a2d532c27df022b09010e8d091e2888a5ebdf8\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Create2.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\\\n * `CREATE2` can be used to compute in advance the address where a smart\\\\n * contract will be deployed, which allows for interesting new mechanisms known\\\\n * as \'counterfactual interactions\'.\\\\n *\\\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\\\n * information.\\\\n */\\\\nlibrary Create2 {\\\\n    /**\\\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\\\n     * will be deployed can be known in advance via {computeAddress}.\\\\n     *\\\\n     * The bytecode for a contract can be obtained from Solidity with\\\\n     * `type(contractName).creationCode`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `bytecode` must not be empty.\\\\n     * - `salt` must have not been used for `bytecode` already.\\\\n     * - the factory must have a balance of at least `amount`.\\\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\\\n     */\\\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\\\\n        address addr;\\\\n        require(address(this).balance >= amount, \\\\\\"Create2: insufficient balance\\\\\\");\\\\n        require(bytecode.length != 0, \\\\\\"Create2: bytecode length is zero\\\\\\");\\\\n        // solhint-disable-next-line no-inline-assembly\\\\n        assembly {\\\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\\\n        }\\\\n        require(addr != address(0), \\\\\\"Create2: Failed on deploy\\\\\\");\\\\n        return addr;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\\\n     */\\\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\\\n        return computeAddress(salt, bytecodeHash, address(this));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\\\n     * `deployer`. If `deployer` is this contract\'s address, returns the same value as {computeAddress}.\\\\n     */\\\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\\\\n        bytes32 _data = keccak256(\\\\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\\\\n        );\\\\n        return address(uint256(_data));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x539295edd21ad514c0b1a0d1c89ada0831942f379ea83b6eb85769211fc7937e\\",\\"license\\":\\"MIT\\"},\\"src.sol/ChannelFactory.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Create2.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./interfaces/IChannelFactory.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/IVectorChannel.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibAsset.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibERC20.sol\\\\\\";\\\\n\\\\n/// @title ChannelFactory\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Creates and sets up a new channel proxy contract\\\\ncontract ChannelFactory is IChannelFactory {\\\\n    // Creation code constants taken from EIP1167\\\\n    bytes private constant proxyCreationCodePrefix =\\\\n        hex\\\\\\"3d602d80600a3d3981f3_363d3d373d3d3d363d73\\\\\\";\\\\n    bytes private constant proxyCreationCodeSuffix =\\\\n        hex\\\\\\"5af43d82803e903d91602b57fd5bf3\\\\\\";\\\\n\\\\n    bytes32 private creationCodeHash;\\\\n    address private immutable mastercopy;\\\\n    uint256 private immutable chainId;\\\\n\\\\n    /// @dev Creates a new `ChannelFactory`\\\\n    /// @param _mastercopy the address of the `ChannelMastercopy` (channel logic)\\\\n    /// @param _chainId the chain identifier when generating the CREATE2 salt. If zero, the chain identifier used in the proxy salt will be the result of the opcode\\\\n    constructor(address _mastercopy, uint256 _chainId) {\\\\n        mastercopy = _mastercopy;\\\\n        chainId = _chainId;\\\\n        creationCodeHash = keccak256(_getProxyCreationCode(_mastercopy));\\\\n    }\\\\n\\\\n    ////////////////////////////////////////\\\\n    // Public Methods\\\\n\\\\n    /// @dev Allows us to get the mastercopy that this factory will deploy channels against\\\\n    function getMastercopy() external view override returns (address) {\\\\n        return mastercopy;\\\\n    }\\\\n\\\\n    /// @dev Allows us to get the chainId that this factory will use in the create2 salt\\\\n    function getChainId() public view override returns (uint256 _chainId) {\\\\n        // Hold in memory to reduce sload calls\\\\n        uint256 chain = chainId;\\\\n        if (chain == 0) {\\\\n            assembly {\\\\n                _chainId := chainid()\\\\n            }\\\\n        } else {\\\\n            _chainId = chain;\\\\n        }\\\\n    }\\\\n\\\\n    /// @dev Allows us to get the chainId that this factory has stored\\\\n    function getStoredChainId() external view override returns (uint256) {\\\\n        return chainId;\\\\n    }\\\\n\\\\n    /// @dev Returns the proxy code used to both calculate the CREATE2 address and deploy the channel proxy pointed to the `ChannelMastercopy`\\\\n    function getProxyCreationCode()\\\\n        public\\\\n        view\\\\n        override\\\\n        returns (bytes memory)\\\\n    {\\\\n        return _getProxyCreationCode(mastercopy);\\\\n    }\\\\n\\\\n    /// @dev Allows us to get the address for a new channel contract created via `createChannel`\\\\n    /// @param alice address of the igh fidelity channel participant\\\\n    /// @param bob address of the other channel participant\\\\n    function getChannelAddress(address alice, address bob)\\\\n        external\\\\n        view\\\\n        override\\\\n        returns (address)\\\\n    {\\\\n        return\\\\n            Create2.computeAddress(\\\\n                generateSalt(alice, bob),\\\\n                creationCodeHash\\\\n            );\\\\n    }\\\\n\\\\n    /// @dev Allows us to create new channel contract and get it all set up in one transaction\\\\n    /// @param alice address of the high fidelity channel participant\\\\n    /// @param bob address of the other channel participant\\\\n    function createChannel(address alice, address bob)\\\\n        public\\\\n        override\\\\n        returns (address channel)\\\\n    {\\\\n        channel = deployChannelProxy(alice, bob);\\\\n        IVectorChannel(channel).setup(alice, bob);\\\\n        emit ChannelCreation(channel);\\\\n    }\\\\n\\\\n    /// @dev Allows us to create a new channel contract and fund it in one transaction\\\\n    /// @param bob address of the other channel participant\\\\n    function createChannelAndDepositAlice(\\\\n        address alice,\\\\n        address bob,\\\\n        address assetId,\\\\n        uint256 amount\\\\n    ) external payable override returns (address channel) {\\\\n        channel = createChannel(alice, bob);\\\\n        // Deposit funds (if a token) must be approved for the\\\\n        // `ChannelFactory`, which then claims the funds and transfers\\\\n        // to the channel address. While this is inefficient, this is\\\\n        // the safest/clearest way to transfer funds\\\\n        if (!LibAsset.isEther(assetId)) {\\\\n            require(\\\\n                LibERC20.transferFrom(\\\\n                    assetId,\\\\n                    msg.sender,\\\\n                    address(this),\\\\n                    amount\\\\n                ),\\\\n                \\\\\\"ChannelFactory: ERC20_TRANSFER_FAILED\\\\\\"\\\\n            );\\\\n            require(\\\\n                LibERC20.approve(assetId, address(channel), amount),\\\\n                \\\\\\"ChannelFactory: ERC20_APPROVE_FAILED\\\\\\"\\\\n            );\\\\n        }\\\\n        IVectorChannel(channel).depositAlice{value: msg.value}(assetId, amount);\\\\n    }\\\\n\\\\n    ////////////////////////////////////////\\\\n    // Internal Methods\\\\n\\\\n    function _getProxyCreationCode(address _mastercopy) internal pure returns (bytes memory) {\\\\n      return abi.encodePacked(\\\\n                proxyCreationCodePrefix,\\\\n                _mastercopy,\\\\n                proxyCreationCodeSuffix\\\\n            );\\\\n    }\\\\n\\\\n    /// @dev Allows us to create new channel contact using CREATE2\\\\n    /// @param alice address of the high fidelity participant in the channel\\\\n    /// @param bob address of the other channel participant\\\\n    function deployChannelProxy(address alice, address bob)\\\\n        internal\\\\n        returns (address)\\\\n    {\\\\n        bytes32 salt = generateSalt(alice, bob);\\\\n        return Create2.deploy(0, salt, getProxyCreationCode());\\\\n    }\\\\n\\\\n    /// @dev Generates the unique salt for calculating the CREATE2 address of the channel proxy\\\\n    function generateSalt(address alice, address bob)\\\\n        internal\\\\n        view\\\\n        returns (bytes32)\\\\n    {\\\\n        return keccak256(abi.encodePacked(alice, bob, getChainId()));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x9b30b13dd79eea72eadd2bec3eba0f515929259a21d2ece6b982703c280e532a\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCAdjudicator.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./Types.sol\\\\\\";\\\\n\\\\ninterface ICMCAdjudicator {\\\\n    struct CoreChannelState {\\\\n        address channelAddress;\\\\n        address alice;\\\\n        address bob;\\\\n        address[] assetIds;\\\\n        Balance[] balances;\\\\n        uint256[] processedDepositsA;\\\\n        uint256[] processedDepositsB;\\\\n        uint256[] defundNonces;\\\\n        uint256 timeout;\\\\n        uint256 nonce;\\\\n        bytes32 merkleRoot;\\\\n    }\\\\n\\\\n    struct CoreTransferState {\\\\n        address channelAddress;\\\\n        bytes32 transferId;\\\\n        address transferDefinition;\\\\n        address initiator;\\\\n        address responder;\\\\n        address assetId;\\\\n        Balance balance;\\\\n        uint256 transferTimeout;\\\\n        bytes32 initialStateHash;\\\\n    }\\\\n\\\\n    struct ChannelDispute {\\\\n        bytes32 channelStateHash;\\\\n        uint256 nonce;\\\\n        bytes32 merkleRoot;\\\\n        uint256 consensusExpiry;\\\\n        uint256 defundExpiry;\\\\n    }\\\\n\\\\n    struct TransferDispute {\\\\n        bytes32 transferStateHash;\\\\n        uint256 transferDisputeExpiry;\\\\n        bool isDefunded;\\\\n    }\\\\n\\\\n    event ChannelDisputed(\\\\n        address disputer,\\\\n        CoreChannelState state,\\\\n        ChannelDispute dispute\\\\n    );\\\\n\\\\n    event ChannelDefunded(\\\\n        address defunder,\\\\n        CoreChannelState state,\\\\n        ChannelDispute dispute,\\\\n        address[] assetIds\\\\n    );\\\\n\\\\n    event TransferDisputed(\\\\n        address disputer,\\\\n        CoreTransferState state,\\\\n        TransferDispute dispute\\\\n    );\\\\n\\\\n    event TransferDefunded(\\\\n        address defunder,\\\\n        CoreTransferState state,\\\\n        TransferDispute dispute,\\\\n        bytes encodedInitialState,\\\\n        bytes encodedResolver,\\\\n        Balance balance\\\\n    );\\\\n\\\\n    function getChannelDispute() external view returns (ChannelDispute memory);\\\\n\\\\n    function getDefundNonce(address assetId) external view returns (uint256);\\\\n\\\\n    function getTransferDispute(bytes32 transferId)\\\\n        external\\\\n        view\\\\n        returns (TransferDispute memory);\\\\n\\\\n    function disputeChannel(\\\\n        CoreChannelState calldata ccs,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) external;\\\\n\\\\n    function defundChannel(\\\\n        CoreChannelState calldata ccs,\\\\n        address[] calldata assetIds,\\\\n        uint256[] calldata indices\\\\n    ) external;\\\\n\\\\n    function disputeTransfer(\\\\n        CoreTransferState calldata cts,\\\\n        bytes32[] calldata merkleProofData\\\\n    ) external;\\\\n\\\\n    function defundTransfer(\\\\n        CoreTransferState calldata cts,\\\\n        bytes calldata encodedInitialTransferState,\\\\n        bytes calldata encodedTransferResolver,\\\\n        bytes calldata responderSignature\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x88522bb51c2b9991b24ef33a3c776ac76d96060ebbc33cd5b2b14513fb21d237\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCAsset.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface ICMCAsset {\\\\n    function getTotalTransferred(address assetId)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function getExitableAmount(address assetId, address owner)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function exit(\\\\n        address assetId,\\\\n        address owner,\\\\n        address payable recipient\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x895d89536e8ca469afe642b7001f0dfff497ce29d5d73f862b07a1cdc483f3f7\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCCore.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface ICMCCore {\\\\n    function setup(address _alice, address _bob) external;\\\\n\\\\n    function getAlice() external view returns (address);\\\\n\\\\n    function getBob() external view returns (address);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x8e8da2d8fb5198441ba6cdff018dff9e4145b07d575647c990659adad637ec8c\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCDeposit.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface ICMCDeposit {\\\\n    event AliceDeposited(address assetId, uint256 amount);\\\\n    \\\\n    function getTotalDepositsAlice(address assetId)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function getTotalDepositsBob(address assetId)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function depositAlice(address assetId, uint256 amount) external payable;\\\\n}\\\\n\\",\\"keccak256\\":\\"0xdf6f284e44d88013cf9d51220315fb37e63086e470442685891c90aadd138295\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCWithdraw.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nstruct WithdrawData {\\\\n    address channelAddress;\\\\n    address assetId;\\\\n    address payable recipient;\\\\n    uint256 amount;\\\\n    uint256 nonce;\\\\n    address callTo;\\\\n    bytes callData;\\\\n}\\\\n\\\\ninterface ICMCWithdraw {\\\\n    function getWithdrawalTransactionRecord(WithdrawData calldata wd)\\\\n        external\\\\n        view\\\\n        returns (bool);\\\\n\\\\n    function withdraw(\\\\n        WithdrawData calldata wd,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x097dfe95ad19096f9a3dd0138b4a51680c26e665d1639278a7c0a5c9f7fc5c78\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/IChannelFactory.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface IChannelFactory {\\\\n    event ChannelCreation(address channel);\\\\n\\\\n    function getMastercopy() external view returns (address);\\\\n\\\\n    function getChainId() external view returns (uint256);\\\\n\\\\n    function getStoredChainId() external view returns (uint256);\\\\n\\\\n    function getProxyCreationCode() external view returns (bytes memory);\\\\n\\\\n    function getChannelAddress(address alice, address bob)\\\\n        external\\\\n        view\\\\n        returns (address);\\\\n\\\\n    function createChannel(address alice, address bob)\\\\n        external\\\\n        returns (address);\\\\n\\\\n    function createChannelAndDepositAlice(\\\\n        address alice,\\\\n        address bob,\\\\n        address assetId,\\\\n        uint256 amount\\\\n    ) external payable returns (address);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x2330bd554f878feb2494fb9dd830a1707865b63cfd6471a8dad1e5912ebf72ea\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/IVectorChannel.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./ICMCCore.sol\\\\\\";\\\\nimport \\\\\\"./ICMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./ICMCDeposit.sol\\\\\\";\\\\nimport \\\\\\"./ICMCWithdraw.sol\\\\\\";\\\\nimport \\\\\\"./ICMCAdjudicator.sol\\\\\\";\\\\n\\\\ninterface IVectorChannel is\\\\n    ICMCCore,\\\\n    ICMCAsset,\\\\n    ICMCDeposit,\\\\n    ICMCWithdraw,\\\\n    ICMCAdjudicator\\\\n{}\\\\n\\",\\"keccak256\\":\\"0x9e21e3b6510bb5aecab999bfcbefe6184bd2be5a80179ef8ecadb63ddd2c8d53\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/Types.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nstruct Balance {\\\\n    uint256[2] amount; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n    address payable[2] to; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf8c71b155b630cde965f5d1db5f0d2751a9763f5a797f15d946613e9224f1046\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibAsset.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./LibERC20.sol\\\\\\";\\\\nimport \\\\\\"./LibUtils.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\\\\";\\\\n\\\\n\\\\n/// @title LibAsset\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This library contains helpers for dealing with onchain transfers\\\\n///         of in-channel assets. It is designed to safely handle all asset\\\\n///         transfers out of channel in the event of an onchain dispute. Also\\\\n///         safely handles ERC20 transfers that may be non-compliant\\\\nlibrary LibAsset {\\\\n    address constant ETHER_ASSETID = address(0);\\\\n\\\\n    function isEther(address assetId) internal pure returns (bool) {\\\\n        return assetId == ETHER_ASSETID;\\\\n    }\\\\n\\\\n    function getOwnBalance(address assetId) internal view returns (uint256) {\\\\n        return\\\\n            isEther(assetId)\\\\n                ? address(this).balance\\\\n                : IERC20(assetId).balanceOf(address(this));\\\\n    }\\\\n\\\\n    function transferEther(address payable recipient, uint256 amount)\\\\n        internal\\\\n        returns (bool)\\\\n    {\\\\n        (bool success, bytes memory returnData) =\\\\n            recipient.call{value: amount}(\\\\\\"\\\\\\");\\\\n        LibUtils.revertIfCallFailed(success, returnData);\\\\n        return true;\\\\n    }\\\\n\\\\n    function transferERC20(\\\\n        address assetId,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return LibERC20.transfer(assetId, recipient, amount);\\\\n    }\\\\n\\\\n    // This function is a wrapper for transfers of Ether or ERC20 tokens,\\\\n    // both standard-compliant ones as well as tokens that exhibit the\\\\n    // missing-return-value bug.\\\\n    // Although it behaves very much like Solidity\'s `transfer` function\\\\n    // or the ERC20 `transfer` and is, in fact, designed to replace direct\\\\n    // usage of those, it is deliberately named `unregisteredTransfer`,\\\\n    // because we need to register every transfer out of the channel.\\\\n    // Therefore, it should normally not be used directly, with the single\\\\n    // exception of the `transferAsset` function in `CMCAsset.sol`,\\\\n    // which combines the \\\\\\"naked\\\\\\" unregistered transfer given below\\\\n    // with a registration.\\\\n    // USING THIS FUNCTION SOMEWHERE ELSE IS PROBABLY WRONG!\\\\n    function unregisteredTransfer(\\\\n        address assetId,\\\\n        address payable recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            isEther(assetId)\\\\n                ? transferEther(recipient, amount)\\\\n                : transferERC20(assetId, recipient, amount);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x02e7b660846ad2f56f8005f786e0e2eb1d625c83f4cfcf9fc07a9566ca86195c\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./LibUtils.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Address.sol\\\\\\";\\\\n\\\\n/// @title LibERC20\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This library provides several functions to safely handle\\\\n///         noncompliant tokens (i.e. does not return a boolean from\\\\n///         the transfer function)\\\\n\\\\nlibrary LibERC20 {\\\\n    function wrapCall(address assetId, bytes memory callData)\\\\n        internal\\\\n        returns (bool)\\\\n    {\\\\n        require(Address.isContract(assetId), \\\\\\"LibERC20: NO_CODE\\\\\\");\\\\n        (bool success, bytes memory returnData) = assetId.call(callData);\\\\n        LibUtils.revertIfCallFailed(success, returnData);\\\\n        return returnData.length == 0 || abi.decode(returnData, (bool));\\\\n    }\\\\n\\\\n    function approve(\\\\n        address assetId,\\\\n        address spender,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            wrapCall(\\\\n                assetId,\\\\n                abi.encodeWithSignature(\\\\n                    \\\\\\"approve(address,uint256)\\\\\\",\\\\n                    spender,\\\\n                    amount\\\\n                )\\\\n            );\\\\n    }\\\\n\\\\n    function transferFrom(\\\\n        address assetId,\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            wrapCall(\\\\n                assetId,\\\\n                abi.encodeWithSignature(\\\\n                    \\\\\\"transferFrom(address,address,uint256)\\\\\\",\\\\n                    sender,\\\\n                    recipient,\\\\n                    amount\\\\n                )\\\\n            );\\\\n    }\\\\n\\\\n    function transfer(\\\\n        address assetId,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            wrapCall(\\\\n                assetId,\\\\n                abi.encodeWithSignature(\\\\n                    \\\\\\"transfer(address,uint256)\\\\\\",\\\\n                    recipient,\\\\n                    amount\\\\n                )\\\\n            );\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x5bad1474c93a295939c23f976786f0d086abc063f19ff9c8c1d069759c4a7ff5\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibUtils.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\n/// @title LibUtils\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains a helper to revert if a call was not successfully\\\\n///         made\\\\nlibrary LibUtils {\\\\n    // If success is false, reverts and passes on the revert string.\\\\n    function revertIfCallFailed(bool success, bytes memory returnData)\\\\n        internal\\\\n        pure\\\\n    {\\\\n        if (!success) {\\\\n            assembly {\\\\n                revert(add(returnData, 0x20), mload(returnData))\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf31897ed92b88739ca9c6e74d089e01c5dbf432183d2ab0b959b539842374ccd\\",\\"license\\":\\"UNLICENSED\\"}},\\"version\\":1}","bytecode":"0x60c060405234801561001057600080fd5b50604051610c8f380380610c8f83398101604081905261002f916100eb565b6001600160601b0319606083901b1660805260a081905261004f82610062565b8051602090910120600055506101909050565b60606040518060400160405280601481526020017f3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000815250826040518060400160405280600f81526020016e5af43d82803e903d91602b57fd5bf360881b8152506040516020016100d59392919061015c565b6040516020818303038152906040529050919050565b600080604083850312156100fd578182fd5b82516001600160a01b0381168114610113578283fd5b6020939093015192949293505050565b60008151815b818110156101435760208185018101518683015201610129565b818111156101515782828601525b509290920192915050565b60006101688286610123565b606085901b6001600160601b03191681526101866014820185610123565b9695505050505050565b60805160601c60a051610acf6101c06000398061017e52806101a452508061015352806102a65250610acf6000f3fe6080604052600436106100705760003560e01c806335a1ba6f1161004e57806335a1ba6f146100d7578063e617aaac14610104578063efe4369314610124578063fe4545011461013957610070565b806315727e911461007557806332a130c9146100a05780633408e470146100c2575b600080fd5b34801561008157600080fd5b5061008a61014c565b60405161009791906108d6565b60405180910390f35b3480156100ac57600080fd5b506100b561017c565b6040516100979190610a60565b3480156100ce57600080fd5b506100b56101a0565b3480156100e357600080fd5b506100f76100f2366004610703565b6101d8565b604051610097919061086b565b34801561011057600080fd5b506100f761011f366004610703565b610284565b34801561013057600080fd5b506100f76102a4565b6100f7610147366004610737565b6102c8565b60606101777f00000000000000000000000000000000000000000000000000000000000000006103a5565b905090565b7f000000000000000000000000000000000000000000000000000000000000000090565b60007f0000000000000000000000000000000000000000000000000000000000000000806101d0574691506101d4565b8091505b5090565b60006101e48383610425565b604051632d34ba7960e01b81529091506001600160a01b03821690632d34ba7990610215908690869060040161087f565b600060405180830381600087803b15801561022f57600080fd5b505af1158015610243573d6000803e3d6000fd5b505050507fa79ba8cc5fdc29196c8d65701a02433c92328f38f0ffbea3908335b80d81409d81604051610276919061086b565b60405180910390a192915050565b600061029b610293848461044f565b60005461048b565b90505b92915050565b7f000000000000000000000000000000000000000000000000000000000000000090565b60006102d485856101d8565b90506102df83610498565b61033b576102ef833330856104a5565b6103145760405162461bcd60e51b815260040161030b906109e4565b60405180910390fd5b61031f8382846104f8565b61033b5760405162461bcd60e51b815260040161030b906109a0565b60405163635ae90160e01b81526001600160a01b0382169063635ae90190349061036b90879087906004016108bd565b6000604051808303818588803b15801561038457600080fd5b505af1158015610398573d6000803e3d6000fd5b5050505050949350505050565b6060604051806040016040528060148152602001733d602d80600a3d3981f3363d3d373d3d3d363d7360601b815250826040518060400160405280600f81526020016e5af43d82803e903d91602b57fd5bf360881b81525060405160200161040f93929190610824565b6040516020818303038152906040529050919050565b600080610432848461044f565b905061044760008261044261014c565b610540565b949350505050565b6000828261045b6101a0565b60405160200161046d939291906107ab565b60405160208183030381529060405280519060200120905092915050565b600061029b8383306105b2565b6001600160a01b03161590565b60006104ef858585856040516024016104c093929190610899565b60408051601f198184030181529190526020810180516001600160e01b03166323b872dd60e01b1790526105f1565b95945050505050565b60006104478484846040516024016105119291906108bd565b60408051601f198184030181529190526020810180516001600160e01b031663095ea7b360e01b1790526105f1565b600080844710156105635760405162461bcd60e51b815260040161030b90610a29565b82516105815760405162461bcd60e51b815260040161030b90610909565b8383516020850187f590506001600160a01b0381166104475760405162461bcd60e51b815260040161030b9061093e565b60008060ff60f81b8386866040516020016105d094939291906107d4565b60408051808303601f19018152919052805160209091012095945050505050565b60006105fc836106a2565b6106185760405162461bcd60e51b815260040161030b90610975565b60006060846001600160a01b0316846040516106349190610808565b6000604051808303816000865af19150503d8060008114610671576040519150601f19603f3d011682016040523d82523d6000602084013e610676565b606091505b509150915061068582826106db565b805115806104ef5750808060200190518101906104ef9190610784565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610447575050151592915050565b816106e857805160208201fd5b5050565b80356001600160a01b038116811461029e57600080fd5b60008060408385031215610715578182fd5b61071f84846106ec565b915061072e84602085016106ec565b90509250929050565b6000806000806080858703121561074c578182fd5b61075686866106ec565b935061076586602087016106ec565b925061077486604087016106ec565b9396929550929360600135925050565b600060208284031215610795578081fd5b815180151581146107a4578182fd5b9392505050565b6001600160601b0319606094851b811682529290931b9091166014830152602882015260480190565b6001600160f81b031994909416845260609290921b6001600160601b03191660018401526015830152603582015260550190565b6000825161081a818460208701610a69565b9190910192915050565b60008451610836818460208901610a69565b606085901b6001600160601b031916908301908152835161085e816014840160208801610a69565b0160140195945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b60006020825282518060208401526108f5816040850160208701610a69565b601f01601f19169190910160400192915050565b6020808252818101527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604082015260600190565b60208082526019908201527f437265617465323a204661696c6564206f6e206465706c6f7900000000000000604082015260600190565b6020808252601190820152704c696245524332303a204e4f5f434f444560781b604082015260600190565b60208082526024908201527f4368616e6e656c466163746f72793a2045524332305f415050524f56455f46416040820152631253115160e21b606082015260800190565b60208082526025908201527f4368616e6e656c466163746f72793a2045524332305f5452414e534645525f46604082015264105253115160da1b606082015260800190565b6020808252601d908201527f437265617465323a20696e73756666696369656e742062616c616e6365000000604082015260600190565b90815260200190565b60005b83811015610a84578181015183820152602001610a6c565b83811115610a93576000848401525b5050505056fea26469706673582212206b46714e4e157ca4fcef5f14f882cae62cdcfb5e301602c8361ab37a1daaf2ab64736f6c63430007010033","deployedBytecode":"0x6080604052600436106100705760003560e01c806335a1ba6f1161004e57806335a1ba6f146100d7578063e617aaac14610104578063efe4369314610124578063fe4545011461013957610070565b806315727e911461007557806332a130c9146100a05780633408e470146100c2575b600080fd5b34801561008157600080fd5b5061008a61014c565b60405161009791906108d6565b60405180910390f35b3480156100ac57600080fd5b506100b561017c565b6040516100979190610a60565b3480156100ce57600080fd5b506100b56101a0565b3480156100e357600080fd5b506100f76100f2366004610703565b6101d8565b604051610097919061086b565b34801561011057600080fd5b506100f761011f366004610703565b610284565b34801561013057600080fd5b506100f76102a4565b6100f7610147366004610737565b6102c8565b60606101777f00000000000000000000000000000000000000000000000000000000000000006103a5565b905090565b7f000000000000000000000000000000000000000000000000000000000000000090565b60007f0000000000000000000000000000000000000000000000000000000000000000806101d0574691506101d4565b8091505b5090565b60006101e48383610425565b604051632d34ba7960e01b81529091506001600160a01b03821690632d34ba7990610215908690869060040161087f565b600060405180830381600087803b15801561022f57600080fd5b505af1158015610243573d6000803e3d6000fd5b505050507fa79ba8cc5fdc29196c8d65701a02433c92328f38f0ffbea3908335b80d81409d81604051610276919061086b565b60405180910390a192915050565b600061029b610293848461044f565b60005461048b565b90505b92915050565b7f000000000000000000000000000000000000000000000000000000000000000090565b60006102d485856101d8565b90506102df83610498565b61033b576102ef833330856104a5565b6103145760405162461bcd60e51b815260040161030b906109e4565b60405180910390fd5b61031f8382846104f8565b61033b5760405162461bcd60e51b815260040161030b906109a0565b60405163635ae90160e01b81526001600160a01b0382169063635ae90190349061036b90879087906004016108bd565b6000604051808303818588803b15801561038457600080fd5b505af1158015610398573d6000803e3d6000fd5b5050505050949350505050565b6060604051806040016040528060148152602001733d602d80600a3d3981f3363d3d373d3d3d363d7360601b815250826040518060400160405280600f81526020016e5af43d82803e903d91602b57fd5bf360881b81525060405160200161040f93929190610824565b6040516020818303038152906040529050919050565b600080610432848461044f565b905061044760008261044261014c565b610540565b949350505050565b6000828261045b6101a0565b60405160200161046d939291906107ab565b60405160208183030381529060405280519060200120905092915050565b600061029b8383306105b2565b6001600160a01b03161590565b60006104ef858585856040516024016104c093929190610899565b60408051601f198184030181529190526020810180516001600160e01b03166323b872dd60e01b1790526105f1565b95945050505050565b60006104478484846040516024016105119291906108bd565b60408051601f198184030181529190526020810180516001600160e01b031663095ea7b360e01b1790526105f1565b600080844710156105635760405162461bcd60e51b815260040161030b90610a29565b82516105815760405162461bcd60e51b815260040161030b90610909565b8383516020850187f590506001600160a01b0381166104475760405162461bcd60e51b815260040161030b9061093e565b60008060ff60f81b8386866040516020016105d094939291906107d4565b60408051808303601f19018152919052805160209091012095945050505050565b60006105fc836106a2565b6106185760405162461bcd60e51b815260040161030b90610975565b60006060846001600160a01b0316846040516106349190610808565b6000604051808303816000865af19150503d8060008114610671576040519150601f19603f3d011682016040523d82523d6000602084013e610676565b606091505b509150915061068582826106db565b805115806104ef5750808060200190518101906104ef9190610784565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610447575050151592915050565b816106e857805160208201fd5b5050565b80356001600160a01b038116811461029e57600080fd5b60008060408385031215610715578182fd5b61071f84846106ec565b915061072e84602085016106ec565b90509250929050565b6000806000806080858703121561074c578182fd5b61075686866106ec565b935061076586602087016106ec565b925061077486604087016106ec565b9396929550929360600135925050565b600060208284031215610795578081fd5b815180151581146107a4578182fd5b9392505050565b6001600160601b0319606094851b811682529290931b9091166014830152602882015260480190565b6001600160f81b031994909416845260609290921b6001600160601b03191660018401526015830152603582015260550190565b6000825161081a818460208701610a69565b9190910192915050565b60008451610836818460208901610a69565b606085901b6001600160601b031916908301908152835161085e816014840160208801610a69565b0160140195945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b60006020825282518060208401526108f5816040850160208701610a69565b601f01601f19169190910160400192915050565b6020808252818101527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604082015260600190565b60208082526019908201527f437265617465323a204661696c6564206f6e206465706c6f7900000000000000604082015260600190565b6020808252601190820152704c696245524332303a204e4f5f434f444560781b604082015260600190565b60208082526024908201527f4368616e6e656c466163746f72793a2045524332305f415050524f56455f46416040820152631253115160e21b606082015260800190565b60208082526025908201527f4368616e6e656c466163746f72793a2045524332305f5452414e534645525f46604082015264105253115160da1b606082015260800190565b6020808252601d908201527f437265617465323a20696e73756666696369656e742062616c616e6365000000604082015260600190565b90815260200190565b60005b83811015610a84578181015183820152602001610a6c565b83811115610a93576000848401525b5050505056fea26469706673582212206b46714e4e157ca4fcef5f14f882cae62cdcfb5e301602c8361ab37a1daaf2ab64736f6c63430007010033","devdoc":{"author":"Connext <support@connext.network>","kind":"dev","methods":{"constructor":{"details":"Creates a new `ChannelFactory`","params":{"_chainId":"the chain identifier when generating the CREATE2 salt. If zero, the chain identifier used in the proxy salt will be the result of the opcode","_mastercopy":"the address of the `ChannelMastercopy` (channel logic)"}},"createChannel(address,address)":{"details":"Allows us to create new channel contract and get it all set up in one transaction","params":{"alice":"address of the high fidelity channel participant","bob":"address of the other channel participant"}},"createChannelAndDepositAlice(address,address,address,uint256)":{"details":"Allows us to create a new channel contract and fund it in one transaction","params":{"bob":"address of the other channel participant"}},"getChainId()":{"details":"Allows us to get the chainId that this factory will use in the create2 salt"},"getChannelAddress(address,address)":{"details":"Allows us to get the address for a new channel contract created via `createChannel`","params":{"alice":"address of the igh fidelity channel participant","bob":"address of the other channel participant"}},"getMastercopy()":{"details":"Allows us to get the mastercopy that this factory will deploy channels against"},"getProxyCreationCode()":{"details":"Returns the proxy code used to both calculate the CREATE2 address and deploy the channel proxy pointed to the `ChannelMastercopy`"},"getStoredChainId()":{"details":"Allows us to get the chainId that this factory has stored"}},"title":"ChannelFactory","version":1},"userdoc":{"kind":"user","methods":{},"notice":"Creates and sets up a new channel proxy contract","version":1},"storageLayout":{"storage":[{"astId":3100,"contract":"src.sol/ChannelFactory.sol:ChannelFactory","label":"creationCodeHash","offset":0,"slot":"0","type":"t_bytes32"}],"types":{"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"}}}}')},2801:function(e){e.exports=JSON.parse('{"address":"0xb837e7F32d964469dfB4e9A0652fE2c101bce422","abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"assetId","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"AliceDeposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"defunder","type":"address"},{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"},{"internalType":"address[]","name":"assetIds","type":"address[]"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance[]","name":"balances","type":"tuple[]"},{"internalType":"uint256[]","name":"processedDepositsA","type":"uint256[]"},{"internalType":"uint256[]","name":"processedDepositsB","type":"uint256[]"},{"internalType":"uint256[]","name":"defundNonces","type":"uint256[]"},{"internalType":"uint256","name":"timeout","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"indexed":false,"internalType":"struct ICMCAdjudicator.CoreChannelState","name":"state","type":"tuple"},{"components":[{"internalType":"bytes32","name":"channelStateHash","type":"bytes32"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"consensusExpiry","type":"uint256"},{"internalType":"uint256","name":"defundExpiry","type":"uint256"}],"indexed":false,"internalType":"struct ICMCAdjudicator.ChannelDispute","name":"dispute","type":"tuple"},{"indexed":false,"internalType":"address[]","name":"assetIds","type":"address[]"}],"name":"ChannelDefunded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"disputer","type":"address"},{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"},{"internalType":"address[]","name":"assetIds","type":"address[]"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance[]","name":"balances","type":"tuple[]"},{"internalType":"uint256[]","name":"processedDepositsA","type":"uint256[]"},{"internalType":"uint256[]","name":"processedDepositsB","type":"uint256[]"},{"internalType":"uint256[]","name":"defundNonces","type":"uint256[]"},{"internalType":"uint256","name":"timeout","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"indexed":false,"internalType":"struct ICMCAdjudicator.CoreChannelState","name":"state","type":"tuple"},{"components":[{"internalType":"bytes32","name":"channelStateHash","type":"bytes32"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"consensusExpiry","type":"uint256"},{"internalType":"uint256","name":"defundExpiry","type":"uint256"}],"indexed":false,"internalType":"struct ICMCAdjudicator.ChannelDispute","name":"dispute","type":"tuple"}],"name":"ChannelDisputed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"defunder","type":"address"},{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"bytes32","name":"transferId","type":"bytes32"},{"internalType":"address","name":"transferDefinition","type":"address"},{"internalType":"address","name":"initiator","type":"address"},{"internalType":"address","name":"responder","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance","name":"balance","type":"tuple"},{"internalType":"uint256","name":"transferTimeout","type":"uint256"},{"internalType":"bytes32","name":"initialStateHash","type":"bytes32"}],"indexed":false,"internalType":"struct ICMCAdjudicator.CoreTransferState","name":"state","type":"tuple"},{"components":[{"internalType":"bytes32","name":"transferStateHash","type":"bytes32"},{"internalType":"uint256","name":"transferDisputeExpiry","type":"uint256"},{"internalType":"bool","name":"isDefunded","type":"bool"}],"indexed":false,"internalType":"struct ICMCAdjudicator.TransferDispute","name":"dispute","type":"tuple"},{"indexed":false,"internalType":"bytes","name":"encodedInitialState","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"encodedResolver","type":"bytes"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"indexed":false,"internalType":"struct Balance","name":"balance","type":"tuple"}],"name":"TransferDefunded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"disputer","type":"address"},{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"bytes32","name":"transferId","type":"bytes32"},{"internalType":"address","name":"transferDefinition","type":"address"},{"internalType":"address","name":"initiator","type":"address"},{"internalType":"address","name":"responder","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance","name":"balance","type":"tuple"},{"internalType":"uint256","name":"transferTimeout","type":"uint256"},{"internalType":"bytes32","name":"initialStateHash","type":"bytes32"}],"indexed":false,"internalType":"struct ICMCAdjudicator.CoreTransferState","name":"state","type":"tuple"},{"components":[{"internalType":"bytes32","name":"transferStateHash","type":"bytes32"},{"internalType":"uint256","name":"transferDisputeExpiry","type":"uint256"},{"internalType":"bool","name":"isDefunded","type":"bool"}],"indexed":false,"internalType":"struct ICMCAdjudicator.TransferDispute","name":"dispute","type":"tuple"}],"name":"TransferDisputed","type":"event"},{"inputs":[{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"},{"internalType":"address[]","name":"assetIds","type":"address[]"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance[]","name":"balances","type":"tuple[]"},{"internalType":"uint256[]","name":"processedDepositsA","type":"uint256[]"},{"internalType":"uint256[]","name":"processedDepositsB","type":"uint256[]"},{"internalType":"uint256[]","name":"defundNonces","type":"uint256[]"},{"internalType":"uint256","name":"timeout","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"internalType":"struct ICMCAdjudicator.CoreChannelState","name":"ccs","type":"tuple"},{"internalType":"address[]","name":"assetIds","type":"address[]"},{"internalType":"uint256[]","name":"indices","type":"uint256[]"}],"name":"defundChannel","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"bytes32","name":"transferId","type":"bytes32"},{"internalType":"address","name":"transferDefinition","type":"address"},{"internalType":"address","name":"initiator","type":"address"},{"internalType":"address","name":"responder","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance","name":"balance","type":"tuple"},{"internalType":"uint256","name":"transferTimeout","type":"uint256"},{"internalType":"bytes32","name":"initialStateHash","type":"bytes32"}],"internalType":"struct ICMCAdjudicator.CoreTransferState","name":"cts","type":"tuple"},{"internalType":"bytes","name":"encodedInitialTransferState","type":"bytes"},{"internalType":"bytes","name":"encodedTransferResolver","type":"bytes"},{"internalType":"bytes","name":"responderSignature","type":"bytes"}],"name":"defundTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"depositAlice","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"},{"internalType":"address[]","name":"assetIds","type":"address[]"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance[]","name":"balances","type":"tuple[]"},{"internalType":"uint256[]","name":"processedDepositsA","type":"uint256[]"},{"internalType":"uint256[]","name":"processedDepositsB","type":"uint256[]"},{"internalType":"uint256[]","name":"defundNonces","type":"uint256[]"},{"internalType":"uint256","name":"timeout","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"internalType":"struct ICMCAdjudicator.CoreChannelState","name":"ccs","type":"tuple"},{"internalType":"bytes","name":"aliceSignature","type":"bytes"},{"internalType":"bytes","name":"bobSignature","type":"bytes"}],"name":"disputeChannel","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"bytes32","name":"transferId","type":"bytes32"},{"internalType":"address","name":"transferDefinition","type":"address"},{"internalType":"address","name":"initiator","type":"address"},{"internalType":"address","name":"responder","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance","name":"balance","type":"tuple"},{"internalType":"uint256","name":"transferTimeout","type":"uint256"},{"internalType":"bytes32","name":"initialStateHash","type":"bytes32"}],"internalType":"struct ICMCAdjudicator.CoreTransferState","name":"cts","type":"tuple"},{"internalType":"bytes32[]","name":"merkleProofData","type":"bytes32[]"}],"name":"disputeTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address payable","name":"recipient","type":"address"}],"name":"exit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getAlice","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBob","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getChannelDispute","outputs":[{"components":[{"internalType":"bytes32","name":"channelStateHash","type":"bytes32"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"consensusExpiry","type":"uint256"},{"internalType":"uint256","name":"defundExpiry","type":"uint256"}],"internalType":"struct ICMCAdjudicator.ChannelDispute","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"}],"name":"getDefundNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"getExitableAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"}],"name":"getTotalDepositsAlice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"}],"name":"getTotalDepositsBob","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"}],"name":"getTotalTransferred","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"transferId","type":"bytes32"}],"name":"getTransferDispute","outputs":[{"components":[{"internalType":"bytes32","name":"transferStateHash","type":"bytes32"},{"internalType":"uint256","name":"transferDisputeExpiry","type":"uint256"},{"internalType":"bool","name":"isDefunded","type":"bool"}],"internalType":"struct ICMCAdjudicator.TransferDispute","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"internalType":"address payable","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"address","name":"callTo","type":"address"},{"internalType":"bytes","name":"callData","type":"bytes"}],"internalType":"struct WithdrawData","name":"wd","type":"tuple"}],"name":"getWithdrawalTransactionRecord","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_alice","type":"address"},{"internalType":"address","name":"_bob","type":"address"}],"name":"setup","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"internalType":"address payable","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"address","name":"callTo","type":"address"},{"internalType":"bytes","name":"callData","type":"bytes"}],"internalType":"struct WithdrawData","name":"wd","type":"tuple"},{"internalType":"bytes","name":"aliceSignature","type":"bytes"},{"internalType":"bytes","name":"bobSignature","type":"bytes"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"transactionHash":"0x419bb199a654ecc9174201271e4ddae4dfbee9858a1427246d050814bf2ac88a","receipt":{"to":null,"from":"0x627306090abaB3A6e1400e9345bC60c78a8BEf57","contractAddress":"0xb837e7F32d964469dfB4e9A0652fE2c101bce422","transactionIndex":17,"gasUsed":"3585396","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","blockHash":"0xf1e7e06fac58a92bacf93322c3ce4c57b5fc4a360adbfd03030d3f9e22e3fa91","transactionHash":"0x419bb199a654ecc9174201271e4ddae4dfbee9858a1427246d050814bf2ac88a","logs":[],"blockNumber":7772113,"cumulativeGasUsed":"7045494","status":1,"byzantium":true},"args":[],"solcInputHash":"89c55d5a88f10637860a9ea31a1daad3","metadata":"{\\"compiler\\":{\\"version\\":\\"0.7.1+commit.f4a555be\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"AliceDeposited\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"defunder\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address[]\\",\\"name\\":\\"assetIds\\",\\"type\\":\\"address[]\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance[]\\",\\"name\\":\\"balances\\",\\"type\\":\\"tuple[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsA\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsB\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"defundNonces\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"timeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.CoreChannelState\\",\\"name\\":\\"state\\",\\"type\\":\\"tuple\\"},{\\"components\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"channelStateHash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"consensusExpiry\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"defundExpiry\\",\\"type\\":\\"uint256\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.ChannelDispute\\",\\"name\\":\\"dispute\\",\\"type\\":\\"tuple\\"},{\\"indexed\\":false,\\"internalType\\":\\"address[]\\",\\"name\\":\\"assetIds\\",\\"type\\":\\"address[]\\"}],\\"name\\":\\"ChannelDefunded\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"disputer\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address[]\\",\\"name\\":\\"assetIds\\",\\"type\\":\\"address[]\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance[]\\",\\"name\\":\\"balances\\",\\"type\\":\\"tuple[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsA\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsB\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"defundNonces\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"timeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.CoreChannelState\\",\\"name\\":\\"state\\",\\"type\\":\\"tuple\\"},{\\"components\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"channelStateHash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"consensusExpiry\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"defundExpiry\\",\\"type\\":\\"uint256\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.ChannelDispute\\",\\"name\\":\\"dispute\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"ChannelDisputed\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"defunder\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferId\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"transferDefinition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"initiator\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"responder\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"balance\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferTimeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"initialStateHash\\",\\"type\\":\\"bytes32\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.CoreTransferState\\",\\"name\\":\\"state\\",\\"type\\":\\"tuple\\"},{\\"components\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferStateHash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferDisputeExpiry\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"isDefunded\\",\\"type\\":\\"bool\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.TransferDispute\\",\\"name\\":\\"dispute\\",\\"type\\":\\"tuple\\"},{\\"indexed\\":false,\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedInitialState\\",\\"type\\":\\"bytes\\"},{\\"indexed\\":false,\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedResolver\\",\\"type\\":\\"bytes\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"balance\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"TransferDefunded\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"disputer\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferId\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"transferDefinition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"initiator\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"responder\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"balance\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferTimeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"initialStateHash\\",\\"type\\":\\"bytes32\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.CoreTransferState\\",\\"name\\":\\"state\\",\\"type\\":\\"tuple\\"},{\\"components\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferStateHash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferDisputeExpiry\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"isDefunded\\",\\"type\\":\\"bool\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.TransferDispute\\",\\"name\\":\\"dispute\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"TransferDisputed\\",\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address[]\\",\\"name\\":\\"assetIds\\",\\"type\\":\\"address[]\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance[]\\",\\"name\\":\\"balances\\",\\"type\\":\\"tuple[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsA\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsB\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"defundNonces\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"timeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"}],\\"internalType\\":\\"struct ICMCAdjudicator.CoreChannelState\\",\\"name\\":\\"ccs\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"address[]\\",\\"name\\":\\"assetIds\\",\\"type\\":\\"address[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"indices\\",\\"type\\":\\"uint256[]\\"}],\\"name\\":\\"defundChannel\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferId\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"transferDefinition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"initiator\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"responder\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"balance\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferTimeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"initialStateHash\\",\\"type\\":\\"bytes32\\"}],\\"internalType\\":\\"struct ICMCAdjudicator.CoreTransferState\\",\\"name\\":\\"cts\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedInitialTransferState\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedTransferResolver\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"responderSignature\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"defundTransfer\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"depositAlice\\",\\"outputs\\":[],\\"stateMutability\\":\\"payable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address[]\\",\\"name\\":\\"assetIds\\",\\"type\\":\\"address[]\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance[]\\",\\"name\\":\\"balances\\",\\"type\\":\\"tuple[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsA\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsB\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"defundNonces\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"timeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"}],\\"internalType\\":\\"struct ICMCAdjudicator.CoreChannelState\\",\\"name\\":\\"ccs\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"aliceSignature\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"bobSignature\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"disputeChannel\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferId\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"transferDefinition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"initiator\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"responder\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"balance\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferTimeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"initialStateHash\\",\\"type\\":\\"bytes32\\"}],\\"internalType\\":\\"struct ICMCAdjudicator.CoreTransferState\\",\\"name\\":\\"cts\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"bytes32[]\\",\\"name\\":\\"merkleProofData\\",\\"type\\":\\"bytes32[]\\"}],\\"name\\":\\"disputeTransfer\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address payable\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"}],\\"name\\":\\"exit\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getAlice\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getBob\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getChannelDispute\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"channelStateHash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"consensusExpiry\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"defundExpiry\\",\\"type\\":\\"uint256\\"}],\\"internalType\\":\\"struct ICMCAdjudicator.ChannelDispute\\",\\"name\\":\\"\\",\\"type\\":\\"tuple\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getDefundNonce\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getExitableAmount\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getTotalDepositsAlice\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getTotalDepositsBob\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getTotalTransferred\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferId\\",\\"type\\":\\"bytes32\\"}],\\"name\\":\\"getTransferDispute\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferStateHash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferDisputeExpiry\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"isDefunded\\",\\"type\\":\\"bool\\"}],\\"internalType\\":\\"struct ICMCAdjudicator.TransferDispute\\",\\"name\\":\\"\\",\\"type\\":\\"tuple\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address payable\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"callTo\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"callData\\",\\"type\\":\\"bytes\\"}],\\"internalType\\":\\"struct WithdrawData\\",\\"name\\":\\"wd\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"getWithdrawalTransactionRecord\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"lock\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"_bob\\",\\"type\\":\\"address\\"}],\\"name\\":\\"setup\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address payable\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"callTo\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"callData\\",\\"type\\":\\"bytes\\"}],\\"internalType\\":\\"struct WithdrawData\\",\\"name\\":\\"wd\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"aliceSignature\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"bobSignature\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"withdraw\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"stateMutability\\":\\"payable\\",\\"type\\":\\"receive\\"}],\\"devdoc\\":{\\"author\\":\\"Connext <support@connext.network>\\",\\"kind\\":\\"dev\\",\\"methods\\":{\\"getAlice()\\":{\\"returns\\":{\\"_0\\":\\"Bob\'s signer address\\"}},\\"getBob()\\":{\\"returns\\":{\\"_0\\":\\"Alice\'s signer address\\"}},\\"setup(address,address)\\":{\\"params\\":{\\"_alice\\":\\": Address representing user with function deposit\\",\\"_bob\\":\\": Address representing user with multisig deposit\\"}},\\"withdraw((address,address,address,uint256,uint256,address,bytes),bytes,bytes)\\":{\\"params\\":{\\"aliceSignature\\":\\"Signature of owner a\\",\\"bobSignature\\":\\"Signature of owner b\\",\\"wd\\":\\"The withdraw data consisting of semantic withdraw information, i.e. assetId, recipient, and amount; information to make an optional call in addition to the actual transfer, i.e. target address for the call and call payload; additional information, i.e. channel address and nonce.\\"}}},\\"title\\":\\"ChannelMastercopy\\",\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{\\"getAlice()\\":{\\"notice\\":\\"A getter function for the bob of the multisig\\"},\\"getBob()\\":{\\"notice\\":\\"A getter function for the bob of the multisig\\"},\\"setup(address,address)\\":{\\"notice\\":\\"Contract constructor for Proxied copies\\"}},\\"notice\\":\\"Contains the logic used by all Vector multisigs. A proxy to this         contract is deployed per-channel using the ChannelFactory.sol.         Supports channel adjudication logic, deposit logic, and arbitrary         calls when a commitment is double-signed.\\",\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"src.sol/ChannelMastercopy.sol\\":\\"ChannelMastercopy\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\\\n *\\\\n * These functions can be used to verify that a message was signed by the holder\\\\n * of the private keys of a given address.\\\\n */\\\\nlibrary ECDSA {\\\\n    /**\\\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\\\n     * `signature`. This address can then be used for verification purposes.\\\\n     *\\\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\\\n     * this function rejects them by requiring the `s` value to be in the lower\\\\n     * half order, and the `v` value to be either 27 or 28.\\\\n     *\\\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\\\n     * verification to be secure: it is possible to craft signatures that\\\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\\\n     * this is by receiving a hash of the original message (which may otherwise\\\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\\\n     */\\\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\\\n        // Check the signature length\\\\n        if (signature.length != 65) {\\\\n            revert(\\\\\\"ECDSA: invalid signature length\\\\\\");\\\\n        }\\\\n\\\\n        // Divide the signature in r, s and v variables\\\\n        bytes32 r;\\\\n        bytes32 s;\\\\n        uint8 v;\\\\n\\\\n        // ecrecover takes the signature parameters, and the only way to get them\\\\n        // currently is to use assembly.\\\\n        // solhint-disable-next-line no-inline-assembly\\\\n        assembly {\\\\n            r := mload(add(signature, 0x20))\\\\n            s := mload(add(signature, 0x40))\\\\n            v := byte(0, mload(add(signature, 0x60)))\\\\n        }\\\\n\\\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\\\n        // the valid range for s in (281): 0 < s < secp256k1n \\\\u00f7 2 + 1, and for v in (282): v \\\\u2208 {27, 28}. Most\\\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\\\n        //\\\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\\\n        // these malleable signatures as well.\\\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\\\n            revert(\\\\\\"ECDSA: invalid signature \'s\' value\\\\\\");\\\\n        }\\\\n\\\\n        if (v != 27 && v != 28) {\\\\n            revert(\\\\\\"ECDSA: invalid signature \'v\' value\\\\\\");\\\\n        }\\\\n\\\\n        // If the signature is valid (and not malleable), return the signer address\\\\n        address signer = ecrecover(hash, v, r, s);\\\\n        require(signer != address(0), \\\\\\"ECDSA: invalid signature\\\\\\");\\\\n\\\\n        return signer;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\\\n     * replicates the behavior of the\\\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\\\n     * JSON-RPC method.\\\\n     *\\\\n     * See {recover}.\\\\n     */\\\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\\\n        // 32 is the length in bytes of hash,\\\\n        // enforced by the type signature above\\\\n        return keccak256(abi.encodePacked(\\\\\\"\\\\\\\\x19Ethereum Signed Message:\\\\\\\\n32\\\\\\", hash));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf25c49d2be2d28918ae6de7e9724238367dabe50631ec8fd23d1cdae2cb70262\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/cryptography/MerkleProof.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev These functions deal with verification of Merkle trees (hash trees),\\\\n */\\\\nlibrary MerkleProof {\\\\n    /**\\\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\\\n     * defined by `root`. For this, a `proof` must be provided, containing\\\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\\\n     */\\\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\\\n        bytes32 computedHash = leaf;\\\\n\\\\n        for (uint256 i = 0; i < proof.length; i++) {\\\\n            bytes32 proofElement = proof[i];\\\\n\\\\n            if (computedHash <= proofElement) {\\\\n                // Hash(current computed hash + current element of the proof)\\\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\\\n            } else {\\\\n                // Hash(current element of the proof + current computed hash)\\\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\\\n            }\\\\n        }\\\\n\\\\n        // Check if the computed hash (root) is equal to the provided root\\\\n        return computedHash == root;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x4959be2683e7af3439cb94f06aa6c40cb42ca9336747d0c7dce54f07196489bc\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/math/Math.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Standard math utilities missing in the Solidity language.\\\\n */\\\\nlibrary Math {\\\\n    /**\\\\n     * @dev Returns the largest of two numbers.\\\\n     */\\\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a >= b ? a : b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the smallest of two numbers.\\\\n     */\\\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a < b ? a : b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the average of two numbers. The result is rounded towards\\\\n     * zero.\\\\n     */\\\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        // (a + b) / 2 can overflow, so we distribute\\\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xa4fdec0ea7d943692cac780111ff2ff9d89848cad0494a59cfaed63a705054b4\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/math/SafeMath.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Wrappers over Solidity\'s arithmetic operations with added overflow\\\\n * checks.\\\\n *\\\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\\\n * in bugs, because programmers usually assume that an overflow raises an\\\\n * error, which is the standard behavior in high level programming languages.\\\\n * `SafeMath` restores this intuition by reverting the transaction when an\\\\n * operation overflows.\\\\n *\\\\n * Using this library instead of the unchecked operations eliminates an entire\\\\n * class of bugs, so it\'s recommended to use it always.\\\\n */\\\\nlibrary SafeMath {\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `+` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Addition cannot overflow.\\\\n     */\\\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        uint256 c = a + b;\\\\n        require(c >= a, \\\\\\"SafeMath: addition overflow\\\\\\");\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return sub(a, b, \\\\\\"SafeMath: subtraction overflow\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        require(b <= a, errorMessage);\\\\n        uint256 c = a - b;\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `*` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Multiplication cannot overflow.\\\\n     */\\\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\\\\n        // benefit is lost if \'b\' is also tested.\\\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\\\n        if (a == 0) {\\\\n            return 0;\\\\n        }\\\\n\\\\n        uint256 c = a * b;\\\\n        require(c / a == b, \\\\\\"SafeMath: multiplication overflow\\\\\\");\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return div(a, b, \\\\\\"SafeMath: division by zero\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        require(b > 0, errorMessage);\\\\n        uint256 c = a / b;\\\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * Reverts when dividing by zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return mod(a, b, \\\\\\"SafeMath: modulo by zero\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * Reverts with custom message when dividing by zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        require(b != 0, errorMessage);\\\\n        return a % b;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Returns the amount of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender\'s allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\\\n     * allowance mechanism. `amount` is then deducted from the caller\'s\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Address.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Collection of functions related to the address type\\\\n */\\\\nlibrary Address {\\\\n    /**\\\\n     * @dev Returns true if `account` is a contract.\\\\n     *\\\\n     * [IMPORTANT]\\\\n     * ====\\\\n     * It is unsafe to assume that an address for which this function returns\\\\n     * false is an externally-owned account (EOA) and not a contract.\\\\n     *\\\\n     * Among others, `isContract` will return false for the following\\\\n     * types of addresses:\\\\n     *\\\\n     *  - an externally-owned account\\\\n     *  - a contract in construction\\\\n     *  - an address where a contract will be created\\\\n     *  - an address where a contract lived, but was destroyed\\\\n     * ====\\\\n     */\\\\n    function isContract(address account) internal view returns (bool) {\\\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\\\n        // for accounts without code, i.e. `keccak256(\'\')`\\\\n        bytes32 codehash;\\\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\\\n        // solhint-disable-next-line no-inline-assembly\\\\n        assembly { codehash := extcodehash(account) }\\\\n        return (codehash != accountHash && codehash != 0x0);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\\\\n     * `recipient`, forwarding all available gas and reverting on errors.\\\\n     *\\\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\\\n     * imposed by `transfer`, making them unable to receive funds via\\\\n     * `transfer`. {sendValue} removes this limitation.\\\\n     *\\\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\\\n     *\\\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\\\n     * taken to not create reentrancy vulnerabilities. Consider using\\\\n     * {ReentrancyGuard} or the\\\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\\\n     */\\\\n    function sendValue(address payable recipient, uint256 amount) internal {\\\\n        require(address(this).balance >= amount, \\\\\\"Address: insufficient balance\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\\\n        (bool success, ) = recipient.call{ value: amount }(\\\\\\"\\\\\\");\\\\n        require(success, \\\\\\"Address: unable to send value, recipient may have reverted\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Performs a Solidity function call using a low level `call`. A\\\\n     * plain`call` is an unsafe replacement for a function call: use this\\\\n     * function instead.\\\\n     *\\\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\\\n     * function (like regular Solidity function calls).\\\\n     *\\\\n     * Returns the raw returned data. To convert to the expected return value,\\\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `target` must be a contract.\\\\n     * - calling `target` with `data` must not revert.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n      return functionCall(target, data, \\\\\\"Address: low-level call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but also transferring `value` wei to `target`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the calling contract must have an ETH balance of at least `value`.\\\\n     * - the called Solidity function must be `payable`.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, value, \\\\\\"Address: low-level call with value failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\\\n        require(address(this).balance >= value, \\\\\\"Address: insufficient balance for call\\\\\\");\\\\n        return _functionCallWithValue(target, data, value, errorMessage);\\\\n    }\\\\n\\\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: call to non-contract\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls\\\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\\\n        if (success) {\\\\n            return returndata;\\\\n        } else {\\\\n            // Look for revert reason and bubble it up if present\\\\n            if (returndata.length > 0) {\\\\n                // The easiest way to bubble the revert reason is using memory via assembly\\\\n\\\\n                // solhint-disable-next-line no-inline-assembly\\\\n                assembly {\\\\n                    let returndata_size := mload(returndata)\\\\n                    revert(add(32, returndata), returndata_size)\\\\n                }\\\\n            } else {\\\\n                revert(errorMessage);\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x698f929f1097637d051976b322a2d532c27df022b09010e8d091e2888a5ebdf8\\",\\"license\\":\\"MIT\\"},\\"src.sol/CMCAdjudicator.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/Commitment.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/ICMCAdjudicator.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/ITransferDefinition.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/Types.sol\\\\\\";\\\\nimport \\\\\\"./CMCCore.sol\\\\\\";\\\\nimport \\\\\\"./CMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./CMCDeposit.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibChannelCrypto.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibMath.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/cryptography/MerkleProof.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/math/SafeMath.sol\\\\\\";\\\\n\\\\n/// @title CMCAdjudicator\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains logic for disputing a single channel and all active\\\\n///         transfers associated with the channel. Contains two major phases:\\\\n///         (1) consensus: settle on latest channel state\\\\n///         (2) defund: remove assets and dispute active transfers\\\\ncontract CMCAdjudicator is CMCCore, CMCAsset, CMCDeposit, ICMCAdjudicator {\\\\n    using LibChannelCrypto for bytes32;\\\\n    using LibMath for uint256;\\\\n    using SafeMath for uint256;\\\\n\\\\n    uint256 private constant INITIAL_DEFUND_NONCE = 1;\\\\n\\\\n    ChannelDispute private channelDispute;\\\\n    mapping(address => uint256) private defundNonces;\\\\n    mapping(bytes32 => TransferDispute) private transferDisputes;\\\\n\\\\n    modifier validateChannel(CoreChannelState calldata ccs) {\\\\n        require(\\\\n            ccs.channelAddress == address(this) &&\\\\n                ccs.alice == alice &&\\\\n                ccs.bob == bob,\\\\n            \\\\\\"CMCAdjudicator: INVALID_CHANNEL\\\\\\"\\\\n        );\\\\n        _;\\\\n    }\\\\n\\\\n    modifier validateTransfer(CoreTransferState calldata cts) {\\\\n        require(\\\\n            cts.channelAddress == address(this),\\\\n            \\\\\\"CMCAdjudicator: INVALID_TRANSFER\\\\\\"\\\\n        );\\\\n        _;\\\\n    }\\\\n\\\\n    function getChannelDispute()\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (ChannelDispute memory)\\\\n    {\\\\n        return channelDispute;\\\\n    }\\\\n\\\\n    function getDefundNonce(address assetId)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (uint256)\\\\n    {\\\\n        return defundNonces[assetId];\\\\n    }\\\\n\\\\n    function getTransferDispute(bytes32 transferId)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (TransferDispute memory)\\\\n    {\\\\n        return transferDisputes[transferId];\\\\n    }\\\\n\\\\n    function disputeChannel(\\\\n        CoreChannelState calldata ccs,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) external override onlyViaProxy nonReentrant validateChannel(ccs) {\\\\n        // Generate hash\\\\n        bytes32 ccsHash = hashChannelState(ccs);\\\\n\\\\n        // Verify Alice\'s and Bob\'s signature on the channel state\\\\n        verifySignaturesOnChannelStateHash(ccs, ccsHash, aliceSignature, bobSignature);\\\\n\\\\n        // We cannot dispute a channel in its defund phase\\\\n        require(!inDefundPhase(), \\\\\\"CMCAdjudicator: INVALID_PHASE\\\\\\");\\\\n\\\\n        // New nonce must be strictly greater than the stored one\\\\n        require(\\\\n            channelDispute.nonce < ccs.nonce,\\\\n            \\\\\\"CMCAdjudicator: INVALID_NONCE\\\\\\"\\\\n        );\\\\n\\\\n        if (!inConsensusPhase()) {\\\\n            // We are not already in a dispute\\\\n            // Set expiries\\\\n            // TODO: offchain-ensure that there can\'t be an overflow\\\\n            channelDispute.consensusExpiry = block.timestamp.add(ccs.timeout);\\\\n            channelDispute.defundExpiry = block.timestamp.add(\\\\n                ccs.timeout.mul(2)\\\\n            );\\\\n        }\\\\n\\\\n        // Store newer state\\\\n        channelDispute.channelStateHash = ccsHash;\\\\n        channelDispute.nonce = ccs.nonce;\\\\n        channelDispute.merkleRoot = ccs.merkleRoot;\\\\n\\\\n        // Emit event\\\\n        emit ChannelDisputed(msg.sender, ccs, channelDispute);\\\\n    }\\\\n\\\\n    function defundChannel(\\\\n        CoreChannelState calldata ccs,\\\\n        address[] calldata assetIds,\\\\n        uint256[] calldata indices\\\\n    ) external override onlyViaProxy nonReentrant validateChannel(ccs) {\\\\n        // These checks are not strictly necessary, but it\'s a bit cleaner this way\\\\n        require(assetIds.length > 0, \\\\\\"CMCAdjudicator: NO_ASSETS_GIVEN\\\\\\");\\\\n        require(\\\\n            indices.length <= assetIds.length,\\\\n            \\\\\\"CMCAdjudicator: WRONG_ARRAY_LENGTHS\\\\\\"\\\\n        );\\\\n\\\\n        // Verify that the given channel state matches the stored one\\\\n        require(\\\\n            hashChannelState(ccs) == channelDispute.channelStateHash,\\\\n            \\\\\\"CMCAdjudicator: INVALID_CHANNEL_HASH\\\\\\"\\\\n        );\\\\n\\\\n        // We need to be in defund phase for that\\\\n        require(inDefundPhase(), \\\\\\"CMCAdjudicator: INVALID_PHASE\\\\\\");\\\\n\\\\n        // TODO SECURITY: Beware of reentrancy\\\\n        // TODO: offchain-ensure that all arrays have the same length:\\\\n        // assetIds, balances, processedDepositsA, processedDepositsB, defundNonces\\\\n        // Make sure there are no duplicates in the assetIds -- duplicates are often a source of double-spends\\\\n\\\\n        // Defund all assets given\\\\n        for (uint256 i = 0; i < assetIds.length; i++) {\\\\n            address assetId = assetIds[i];\\\\n\\\\n            // Verify or find the index of the assetId in the ccs.assetIds\\\\n            uint256 index;\\\\n            if (i < indices.length) {\\\\n                // The index was supposedly given -- we verify\\\\n                index = indices[i];\\\\n                require(\\\\n                    assetId == ccs.assetIds[index],\\\\n                    \\\\\\"CMCAdjudicator: INDEX_MISMATCH\\\\\\"\\\\n                );\\\\n            } else {\\\\n                // we search through the assets in ccs\\\\n                for (index = 0; index < ccs.assetIds.length; index++) {\\\\n                    if (assetId == ccs.assetIds[index]) {\\\\n                        break;\\\\n                    }\\\\n                }\\\\n            }\\\\n\\\\n            // Now, if `index`  is equal to the number of assets in ccs,\\\\n            // then the current asset is not in ccs;\\\\n            // otherwise, `index` is the index in ccs for the current asset\\\\n\\\\n            // Check the assets haven\'t already been defunded + update the\\\\n            // defundNonce for that asset\\\\n            {\\\\n                // Open a new block to avoid \\\\\\"stack too deep\\\\\\" error\\\\n                uint256 defundNonce =\\\\n                    (index == ccs.assetIds.length)\\\\n                        ? INITIAL_DEFUND_NONCE\\\\n                        : ccs.defundNonces[index];\\\\n                require(\\\\n                    defundNonces[assetId] < defundNonce,\\\\n                    \\\\\\"CMCAdjudicator: CHANNEL_ALREADY_DEFUNDED\\\\\\"\\\\n                );\\\\n                defundNonces[assetId] = defundNonce;\\\\n            }\\\\n\\\\n            // Get total deposits\\\\n            uint256 tdAlice = _getTotalDepositsAlice(assetId);\\\\n            uint256 tdBob = _getTotalDepositsBob(assetId);\\\\n\\\\n            Balance memory balance;\\\\n\\\\n            if (index == ccs.assetIds.length) {\\\\n                // The current asset is not a part of ccs; refund what has been deposited\\\\n                balance = Balance({\\\\n                    amount: [tdAlice, tdBob],\\\\n                    to: [payable(ccs.alice), payable(ccs.bob)]\\\\n                });\\\\n            } else {\\\\n                // Start with the final balances in ccs\\\\n                balance = ccs.balances[index];\\\\n                // Add unprocessed deposits\\\\n                balance.amount[0] = balance.amount[0].satAdd(\\\\n                    tdAlice - ccs.processedDepositsA[index]\\\\n                );\\\\n                balance.amount[1] = balance.amount[1].satAdd(\\\\n                    tdBob - ccs.processedDepositsB[index]\\\\n                );\\\\n            }\\\\n\\\\n            // Add result to exitable amounts\\\\n            makeBalanceExitable(assetId, balance);\\\\n        }\\\\n\\\\n        emit ChannelDefunded(\\\\n            msg.sender,\\\\n            ccs,\\\\n            channelDispute,\\\\n            assetIds\\\\n        );\\\\n    }\\\\n\\\\n    function disputeTransfer(\\\\n        CoreTransferState calldata cts,\\\\n        bytes32[] calldata merkleProofData\\\\n    ) external override onlyViaProxy nonReentrant validateTransfer(cts) {\\\\n        // Verify that the given transfer state is included in the \\\\\\"finalized\\\\\\" channel state\\\\n        bytes32 transferStateHash = hashTransferState(cts);\\\\n        verifyMerkleProof(\\\\n            merkleProofData,\\\\n            channelDispute.merkleRoot,\\\\n            transferStateHash\\\\n        );\\\\n\\\\n        // The channel needs to be in defund phase for that, i.e. channel state is \\\\\\"finalized\\\\\\"\\\\n        require(inDefundPhase(), \\\\\\"CMCAdjudicator: INVALID_PHASE\\\\\\");\\\\n\\\\n        // Get stored dispute for this transfer\\\\n        TransferDispute storage transferDispute =\\\\n            transferDisputes[cts.transferId];\\\\n\\\\n        // Verify that this transfer has not been disputed before\\\\n        require(\\\\n            transferDispute.transferDisputeExpiry == 0,\\\\n            \\\\\\"CMCAdjudicator: TRANSFER_ALREADY_DISPUTED\\\\\\"\\\\n        );\\\\n\\\\n        // Store transfer state and set expiry\\\\n        transferDispute.transferStateHash = transferStateHash;\\\\n        // TODO: offchain-ensure that there can\'t be an overflow\\\\n        transferDispute.transferDisputeExpiry = block.timestamp.add(\\\\n            cts.transferTimeout\\\\n        );\\\\n\\\\n        emit TransferDisputed(\\\\n            msg.sender,\\\\n            cts,\\\\n            transferDispute\\\\n        );\\\\n    }\\\\n\\\\n    function defundTransfer(\\\\n        CoreTransferState calldata cts,\\\\n        bytes calldata encodedInitialTransferState,\\\\n        bytes calldata encodedTransferResolver,\\\\n        bytes calldata responderSignature\\\\n    ) external override onlyViaProxy nonReentrant validateTransfer(cts) {\\\\n        // Get stored dispute for this transfer\\\\n        TransferDispute storage transferDispute =\\\\n            transferDisputes[cts.transferId];\\\\n\\\\n        // Verify that a dispute for this transfer has already been started\\\\n        require(\\\\n            transferDispute.transferDisputeExpiry != 0,\\\\n            \\\\\\"CMCAdjudicator: TRANSFER_NOT_DISPUTED\\\\\\"\\\\n        );\\\\n\\\\n        // Verify that the given transfer state matches the stored one\\\\n        require(\\\\n            hashTransferState(cts) == transferDispute.transferStateHash,\\\\n            \\\\\\"CMCAdjudicator: INVALID_TRANSFER_HASH\\\\\\"\\\\n        );\\\\n\\\\n        // We can\'t defund twice\\\\n        require(\\\\n            !transferDispute.isDefunded,\\\\n            \\\\\\"CMCAdjudicator: TRANSFER_ALREADY_DEFUNDED\\\\\\"\\\\n        );\\\\n        transferDispute.isDefunded = true;\\\\n\\\\n        Balance memory balance;\\\\n\\\\n        if (block.timestamp < transferDispute.transferDisputeExpiry) {\\\\n            // Ensure the correct hash is provided\\\\n            require(\\\\n                keccak256(encodedInitialTransferState) == cts.initialStateHash,\\\\n                \\\\\\"CMCAdjudicator: INVALID_TRANSFER_HASH\\\\\\"\\\\n            );\\\\n            \\\\n            // Before dispute expiry, responder or responder-authorized\\\\n            // agent (i.e. watchtower) can resolve\\\\n            require(\\\\n                msg.sender == cts.responder || cts.initialStateHash.checkSignature(responderSignature, cts.responder),\\\\n                \\\\\\"CMCAdjudicator: INVALID_RESOLVER\\\\\\"\\\\n            );\\\\n            \\\\n            ITransferDefinition transferDefinition =\\\\n                ITransferDefinition(cts.transferDefinition);\\\\n            balance = transferDefinition.resolve(\\\\n                abi.encode(cts.balance),\\\\n                encodedInitialTransferState,\\\\n                encodedTransferResolver\\\\n            );\\\\n            // Verify that returned balances don\'t exceed initial balances\\\\n            require(\\\\n                balance.amount[0].add(balance.amount[1]) <=\\\\n                    cts.balance.amount[0].add(cts.balance.amount[1]),\\\\n                \\\\\\"CMCAdjudicator: INVALID_BALANCES\\\\\\"\\\\n            );\\\\n        } else {\\\\n            // After dispute expiry, if the responder hasn\'t resolved, we defund the initial balance\\\\n            balance = cts.balance;\\\\n        }\\\\n\\\\n        // Depending on previous code path, defund either resolved or initial balance\\\\n        makeBalanceExitable(cts.assetId, balance);\\\\n\\\\n        // Emit event\\\\n        emit TransferDefunded(\\\\n            msg.sender,\\\\n            cts,\\\\n            transferDispute,\\\\n            encodedInitialTransferState,\\\\n            encodedTransferResolver,\\\\n            balance\\\\n        );\\\\n    }\\\\n\\\\n    function verifySignaturesOnChannelStateHash(\\\\n        CoreChannelState calldata ccs,\\\\n        bytes32 ccsHash,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) internal pure {\\\\n        bytes32 commitment =\\\\n            keccak256(abi.encode(CommitmentType.ChannelState, ccsHash));\\\\n        require(\\\\n            commitment.checkSignature(aliceSignature, ccs.alice),\\\\n            \\\\\\"CMCAdjudicator: INVALID_ALICE_SIG\\\\\\"\\\\n        );\\\\n        require(\\\\n            commitment.checkSignature(bobSignature, ccs.bob),\\\\n            \\\\\\"CMCAdjudicator: INVALID_BOB_SIG\\\\\\"\\\\n        );\\\\n    }\\\\n\\\\n    function verifyMerkleProof(\\\\n        bytes32[] calldata proof,\\\\n        bytes32 root,\\\\n        bytes32 leaf\\\\n    ) internal pure {\\\\n        require(\\\\n            MerkleProof.verify(proof, root, leaf),\\\\n            \\\\\\"CMCAdjudicator: INVALID_MERKLE_PROOF\\\\\\"\\\\n        );\\\\n    }\\\\n\\\\n    function inConsensusPhase() internal view returns (bool) {\\\\n        return block.timestamp < channelDispute.consensusExpiry;\\\\n    }\\\\n\\\\n    function inDefundPhase() internal view returns (bool) {\\\\n        return\\\\n            channelDispute.consensusExpiry <= block.timestamp &&\\\\n            block.timestamp < channelDispute.defundExpiry;\\\\n    }\\\\n\\\\n    function hashChannelState(CoreChannelState calldata ccs)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        return keccak256(abi.encode(ccs));\\\\n    }\\\\n\\\\n    function hashTransferState(CoreTransferState calldata cts)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        return keccak256(abi.encode(cts));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x351fb7770cbb6fbb6f3470e63d5a9e93c817722f9c8e2e5c62e38ebf8c6e389b\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/CMCAsset.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/ICMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/Types.sol\\\\\\";\\\\nimport \\\\\\"./CMCCore.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibAsset.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibMath.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/math/Math.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/math/SafeMath.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\\\\";\\\\n\\\\n/// @title CMCAsset\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains logic to safely transfer channel assets (even if they are\\\\n///         noncompliant). During adjudication, balances from defunding the\\\\n///         channel or defunding transfers are registered as withdrawable. Once\\\\n///         they are registered, the owner (or a watchtower on behalf of the\\\\n///         owner), may call `exit` to reclaim funds from the multisig.\\\\n\\\\ncontract CMCAsset is CMCCore, ICMCAsset {\\\\n    using SafeMath for uint256;\\\\n    using LibMath for uint256;\\\\n\\\\n    mapping(address => uint256) internal totalTransferred;\\\\n    mapping(address => mapping(address => uint256))\\\\n        private exitableAmount;\\\\n\\\\n    function registerTransfer(address assetId, uint256 amount) internal {\\\\n        totalTransferred[assetId] += amount;\\\\n    }\\\\n\\\\n    function getTotalTransferred(address assetId)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (uint256)\\\\n    {\\\\n        return totalTransferred[assetId];\\\\n    }\\\\n\\\\n    function makeExitable(\\\\n        address assetId,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal {\\\\n        exitableAmount[assetId][\\\\n            recipient\\\\n        ] = exitableAmount[assetId][recipient].satAdd(amount);\\\\n    }\\\\n\\\\n    function makeBalanceExitable(\\\\n        address assetId,\\\\n        Balance memory balance\\\\n    ) internal {\\\\n        for (uint256 i = 0; i < 2; i++) {\\\\n            uint256 amount = balance.amount[i];\\\\n            if (amount > 0) {\\\\n                makeExitable(assetId, balance.to[i], amount);\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n    function getExitableAmount(address assetId, address owner)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (uint256)\\\\n    {\\\\n        return exitableAmount[assetId][owner];\\\\n    }\\\\n\\\\n    function getAvailableAmount(address assetId, uint256 maxAmount)\\\\n        internal\\\\n        view\\\\n        returns (uint256)\\\\n    {\\\\n        // Taking the min protects against the case where the multisig\\\\n        // holds less than the amount that is trying to be withdrawn\\\\n        // while still allowing the total of the funds to be removed\\\\n        // without the transaction reverting.\\\\n        return Math.min(maxAmount, LibAsset.getOwnBalance(assetId));\\\\n    }\\\\n\\\\n    function transferAsset(\\\\n        address assetId,\\\\n        address payable recipient,\\\\n        uint256 amount\\\\n    ) internal {\\\\n        registerTransfer(assetId, amount);\\\\n        require(\\\\n            LibAsset.unregisteredTransfer(assetId, recipient, amount),\\\\n            \\\\\\"CMCAsset: TRANSFER_FAILED\\\\\\"\\\\n        );\\\\n    }\\\\n\\\\n    function exit(\\\\n        address assetId,\\\\n        address owner,\\\\n        address payable recipient\\\\n    ) external override onlyViaProxy nonReentrant {\\\\n        // Either the owner must be the recipient, or in control\\\\n        // of setting the recipient of the funds to whomever they\\\\n        // choose\\\\n        require(\\\\n            msg.sender == owner || owner == recipient,\\\\n            \\\\\\"CMCAsset: OWNER_MISMATCH\\\\\\"\\\\n        );\\\\n\\\\n        uint256 amount =\\\\n            getAvailableAmount(\\\\n                assetId,\\\\n                exitableAmount[assetId][owner]\\\\n            );\\\\n\\\\n        // Revert if amount is 0\\\\n        require(amount > 0, \\\\\\"CMCAsset: NO_OP\\\\\\");\\\\n\\\\n        // Reduce the amount claimable from the multisig by the owner\\\\n        exitableAmount[assetId][\\\\n            owner\\\\n        ] = exitableAmount[assetId][owner].sub(amount);\\\\n\\\\n        // Perform transfer\\\\n        transferAsset(assetId, recipient, amount);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x39c1bd81d8ec2a0fa7c23aad683017f5e2ec28a2db43643020649f935b5b74bf\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/CMCCore.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/ICMCCore.sol\\\\\\";\\\\nimport \\\\\\"./ReentrancyGuard.sol\\\\\\";\\\\n\\\\n/// @title CMCCore\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains logic pertaining to the participants of a channel,\\\\n///         including setting and retrieving the participants and the\\\\n///         mastercopy.\\\\n\\\\ncontract CMCCore is ReentrancyGuard, ICMCCore {\\\\n    address private immutable mastercopyAddress;\\\\n\\\\n    address internal alice;\\\\n    address internal bob;\\\\n\\\\n    /// @notice Set invalid participants to block the mastercopy from being used directly\\\\n    ///         Nonzero address also prevents the mastercopy from being setup\\\\n    ///         Only setting alice is sufficient, setting bob too wouldn\'t change anything\\\\n    constructor() {\\\\n        mastercopyAddress = address(this);\\\\n    }\\\\n\\\\n    // Prevents us from calling methods directly from the mastercopy contract\\\\n    modifier onlyViaProxy {\\\\n        require(\\\\n            address(this) != mastercopyAddress,\\\\n            \\\\\\"Mastercopy: ONLY_VIA_PROXY\\\\\\"\\\\n        );\\\\n        _;\\\\n    }\\\\n\\\\n    /// @notice Contract constructor for Proxied copies\\\\n    /// @param _alice: Address representing user with function deposit\\\\n    /// @param _bob: Address representing user with multisig deposit\\\\n    function setup(address _alice, address _bob)\\\\n        external\\\\n        override\\\\n        onlyViaProxy\\\\n    {\\\\n        require(alice == address(0), \\\\\\"CMCCore: ALREADY_SETUP\\\\\\");\\\\n        require(\\\\n            _alice != address(0) && _bob != address(0),\\\\n            \\\\\\"CMCCore: INVALID_PARTICIPANT\\\\\\"\\\\n        );\\\\n        require(_alice != _bob, \\\\\\"CMCCore: IDENTICAL_PARTICIPANTS\\\\\\");\\\\n        ReentrancyGuard.setup();\\\\n        alice = _alice;\\\\n        bob = _bob;\\\\n    }\\\\n\\\\n    /// @notice A getter function for the bob of the multisig\\\\n    /// @return Bob\'s signer address\\\\n    function getAlice()\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (address)\\\\n    {\\\\n        return alice;\\\\n    }\\\\n\\\\n    /// @notice A getter function for the bob of the multisig\\\\n    /// @return Alice\'s signer address\\\\n    function getBob()\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (address)\\\\n    {\\\\n        return bob;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x37324d80a19f1feb6e413fe6a41d82b5dba38bca62e0e05ae6f420000dd93c53\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/CMCDeposit.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/ICMCDeposit.sol\\\\\\";\\\\nimport \\\\\\"./CMCCore.sol\\\\\\";\\\\nimport \\\\\\"./CMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibAsset.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibERC20.sol\\\\\\";\\\\n\\\\n/// @title CMCDeposit\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains logic supporting channel multisig deposits. Channel\\\\n///         funding is asymmetric, with `alice` having to call a deposit\\\\n///         function which tracks the total amount she has deposited so far,\\\\n///         and any other funds in the multisig being attributed to `bob`.\\\\n\\\\ncontract CMCDeposit is CMCCore, CMCAsset, ICMCDeposit {\\\\n    mapping(address => uint256) private depositsAlice;\\\\n\\\\n    receive() external payable onlyViaProxy nonReentrant {}\\\\n\\\\n    function getTotalDepositsAlice(address assetId)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (uint256)\\\\n    {\\\\n        return _getTotalDepositsAlice(assetId);\\\\n    }\\\\n\\\\n    function _getTotalDepositsAlice(address assetId)\\\\n        internal\\\\n        view\\\\n        returns (uint256)\\\\n    {\\\\n        return depositsAlice[assetId];\\\\n    }\\\\n\\\\n    function getTotalDepositsBob(address assetId)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (uint256)\\\\n    {\\\\n        return _getTotalDepositsBob(assetId);\\\\n    }\\\\n\\\\n    // Calculated using invariant onchain properties. Note we DONT use safemath here\\\\n    function _getTotalDepositsBob(address assetId)\\\\n        internal\\\\n        view\\\\n        returns (uint256)\\\\n    {\\\\n        return\\\\n            LibAsset.getOwnBalance(assetId) +\\\\n            totalTransferred[assetId] -\\\\n            depositsAlice[assetId];\\\\n    }\\\\n\\\\n    function depositAlice(address assetId, uint256 amount)\\\\n        external\\\\n        payable\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrant\\\\n    {\\\\n        if (LibAsset.isEther(assetId)) {\\\\n            require(msg.value == amount, \\\\\\"CMCDeposit: VALUE_MISMATCH\\\\\\");\\\\n        } else {\\\\n            // If ETH is sent along, it will be attributed to bob\\\\n            require(msg.value == 0, \\\\\\"CMCDeposit: ETH_WITH_ERC_TRANSFER\\\\\\");\\\\n            require(\\\\n                LibERC20.transferFrom(\\\\n                    assetId,\\\\n                    msg.sender,\\\\n                    address(this),\\\\n                    amount\\\\n                ),\\\\n                \\\\\\"CMCDeposit: ERC20_TRANSFER_FAILED\\\\\\"\\\\n            );\\\\n        }\\\\n        // NOTE: explicitly do NOT use safemath here\\\\n        depositsAlice[assetId] += amount;\\\\n        emit AliceDeposited(assetId, amount);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x4d3dd828158289df93d6b5a6419bc5e8d95888aba81e62cd913af1e4c540bece\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/CMCWithdraw.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/Commitment.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/ICMCWithdraw.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/WithdrawHelper.sol\\\\\\";\\\\nimport \\\\\\"./CMCCore.sol\\\\\\";\\\\nimport \\\\\\"./CMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibAsset.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibChannelCrypto.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibUtils.sol\\\\\\";\\\\n\\\\n/// @title CMCWithdraw\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains logic for all cooperative channel multisig withdrawals.\\\\n///         Cooperative withdrawal commitments must be signed by both channel\\\\n///         participants. As part of the channel withdrawals, an arbitrary\\\\n///         call can be made, which is extracted from the withdraw data.\\\\n\\\\ncontract CMCWithdraw is CMCCore, CMCAsset, ICMCWithdraw {\\\\n    using LibChannelCrypto for bytes32;\\\\n\\\\n    mapping(bytes32 => bool) private isExecuted;\\\\n\\\\n    modifier validateWithdrawData(WithdrawData calldata wd) {\\\\n        require(\\\\n            wd.channelAddress == address(this),\\\\n            \\\\\\"CMCWithdraw: CHANNEL_MISMATCH\\\\\\"\\\\n        );\\\\n        _;\\\\n    }\\\\n\\\\n    function getWithdrawalTransactionRecord(WithdrawData calldata wd)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (bool)\\\\n    {\\\\n        return isExecuted[hashWithdrawData(wd)];\\\\n    }\\\\n\\\\n    /// @param wd The withdraw data consisting of\\\\n    /// semantic withdraw information, i.e. assetId, recipient, and amount;\\\\n    /// information to make an optional call in addition to the actual transfer,\\\\n    /// i.e. target address for the call and call payload;\\\\n    /// additional information, i.e. channel address and nonce.\\\\n    /// @param aliceSignature Signature of owner a\\\\n    /// @param bobSignature Signature of owner b\\\\n    function withdraw(\\\\n        WithdrawData calldata wd,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) external override onlyViaProxy nonReentrant validateWithdrawData(wd) {\\\\n        // Generate hash\\\\n        bytes32 wdHash = hashWithdrawData(wd);\\\\n\\\\n        // Verify Alice\'s and Bob\'s signature on the withdraw data\\\\n        verifySignaturesOnWithdrawDataHash(wdHash, aliceSignature, bobSignature);\\\\n\\\\n        // Replay protection\\\\n        require(!isExecuted[wdHash], \\\\\\"CMCWithdraw: ALREADY_EXECUTED\\\\\\");\\\\n        isExecuted[wdHash] = true;\\\\n\\\\n        // Determine actually transferable amount\\\\n        uint256 actualAmount = getAvailableAmount(wd.assetId, wd.amount);\\\\n\\\\n        // Revert if actualAmount is zero && callTo is 0\\\\n        require(\\\\n            actualAmount > 0 || wd.callTo != address(0),\\\\n            \\\\\\"CMCWithdraw: NO_OP\\\\\\"\\\\n        );\\\\n\\\\n        // Register and execute the transfer\\\\n        transferAsset(wd.assetId, wd.recipient, actualAmount);\\\\n\\\\n        // Do we have to make a call in addition to the actual transfer?\\\\n        if (wd.callTo != address(0)) {\\\\n            WithdrawHelper(wd.callTo).execute(wd, actualAmount);\\\\n        }\\\\n    }\\\\n\\\\n    function verifySignaturesOnWithdrawDataHash(\\\\n        bytes32 wdHash,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) internal view {\\\\n        bytes32 commitment =\\\\n            keccak256(abi.encode(CommitmentType.WithdrawData, wdHash));\\\\n        require(\\\\n            commitment.checkSignature(aliceSignature, alice),\\\\n            \\\\\\"CMCWithdraw: INVALID_ALICE_SIG\\\\\\"\\\\n        );\\\\n        require(\\\\n            commitment.checkSignature(bobSignature, bob),\\\\n            \\\\\\"CMCWithdraw: INVALID_BOB_SIG\\\\\\"\\\\n        );\\\\n    }\\\\n\\\\n    function hashWithdrawData(WithdrawData calldata wd)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        return keccak256(abi.encode(wd));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x7fde93a55cab8b4a9497471af1f8321a6d9463a93c3c6b11cf6d5ada26326beb\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/ChannelMastercopy.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/IVectorChannel.sol\\\\\\";\\\\nimport \\\\\\"./CMCCore.sol\\\\\\";\\\\nimport \\\\\\"./CMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./CMCDeposit.sol\\\\\\";\\\\nimport \\\\\\"./CMCWithdraw.sol\\\\\\";\\\\nimport \\\\\\"./CMCAdjudicator.sol\\\\\\";\\\\n\\\\n/// @title ChannelMastercopy\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains the logic used by all Vector multisigs. A proxy to this\\\\n///         contract is deployed per-channel using the ChannelFactory.sol.\\\\n///         Supports channel adjudication logic, deposit logic, and arbitrary\\\\n///         calls when a commitment is double-signed.\\\\ncontract ChannelMastercopy is\\\\n    CMCCore,\\\\n    CMCAsset,\\\\n    CMCDeposit,\\\\n    CMCWithdraw,\\\\n    CMCAdjudicator,\\\\n    IVectorChannel\\\\n{\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x96d68c908eb39a0002b574c423306ef1b9991da56087cb8f5e2d8b908676b3c7\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/ReentrancyGuard.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\n/// @title CMCWithdraw\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice A \\\\\\"mutex\\\\\\" reentrancy guard, heavily influenced by OpenZeppelin.\\\\n\\\\ncontract ReentrancyGuard {\\\\n    uint256 private constant OPEN = 1;\\\\n    uint256 private constant LOCKED = 2;\\\\n\\\\n    uint256 public lock;\\\\n\\\\n    function setup() internal {\\\\n        lock = OPEN;\\\\n    }\\\\n\\\\n    modifier nonReentrant() {\\\\n        require(lock == OPEN, \\\\\\"ReentrancyGuard: REENTRANT_CALL\\\\\\");\\\\n        lock = LOCKED;\\\\n        _;\\\\n        lock = OPEN;\\\\n    }\\\\n\\\\n    modifier nonReentrantView() {\\\\n        require(lock == OPEN, \\\\\\"ReentrancyGuard: REENTRANT_CALL\\\\\\");\\\\n        _;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf7adf3f05703e0176d892051633e6ca3291e5a3d7ab769f880c03a0d0849dfa7\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/Commitment.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nenum CommitmentType {ChannelState, WithdrawData}\\\\n\\",\\"keccak256\\":\\"0xabfb62d2dbe45e307fc08742f87d2ff5d6faa9ab065f0c2395dc4adcbe0a9c20\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCAdjudicator.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./Types.sol\\\\\\";\\\\n\\\\ninterface ICMCAdjudicator {\\\\n    struct CoreChannelState {\\\\n        address channelAddress;\\\\n        address alice;\\\\n        address bob;\\\\n        address[] assetIds;\\\\n        Balance[] balances;\\\\n        uint256[] processedDepositsA;\\\\n        uint256[] processedDepositsB;\\\\n        uint256[] defundNonces;\\\\n        uint256 timeout;\\\\n        uint256 nonce;\\\\n        bytes32 merkleRoot;\\\\n    }\\\\n\\\\n    struct CoreTransferState {\\\\n        address channelAddress;\\\\n        bytes32 transferId;\\\\n        address transferDefinition;\\\\n        address initiator;\\\\n        address responder;\\\\n        address assetId;\\\\n        Balance balance;\\\\n        uint256 transferTimeout;\\\\n        bytes32 initialStateHash;\\\\n    }\\\\n\\\\n    struct ChannelDispute {\\\\n        bytes32 channelStateHash;\\\\n        uint256 nonce;\\\\n        bytes32 merkleRoot;\\\\n        uint256 consensusExpiry;\\\\n        uint256 defundExpiry;\\\\n    }\\\\n\\\\n    struct TransferDispute {\\\\n        bytes32 transferStateHash;\\\\n        uint256 transferDisputeExpiry;\\\\n        bool isDefunded;\\\\n    }\\\\n\\\\n    event ChannelDisputed(\\\\n        address disputer,\\\\n        CoreChannelState state,\\\\n        ChannelDispute dispute\\\\n    );\\\\n\\\\n    event ChannelDefunded(\\\\n        address defunder,\\\\n        CoreChannelState state,\\\\n        ChannelDispute dispute,\\\\n        address[] assetIds\\\\n    );\\\\n\\\\n    event TransferDisputed(\\\\n        address disputer,\\\\n        CoreTransferState state,\\\\n        TransferDispute dispute\\\\n    );\\\\n\\\\n    event TransferDefunded(\\\\n        address defunder,\\\\n        CoreTransferState state,\\\\n        TransferDispute dispute,\\\\n        bytes encodedInitialState,\\\\n        bytes encodedResolver,\\\\n        Balance balance\\\\n    );\\\\n\\\\n    function getChannelDispute() external view returns (ChannelDispute memory);\\\\n\\\\n    function getDefundNonce(address assetId) external view returns (uint256);\\\\n\\\\n    function getTransferDispute(bytes32 transferId)\\\\n        external\\\\n        view\\\\n        returns (TransferDispute memory);\\\\n\\\\n    function disputeChannel(\\\\n        CoreChannelState calldata ccs,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) external;\\\\n\\\\n    function defundChannel(\\\\n        CoreChannelState calldata ccs,\\\\n        address[] calldata assetIds,\\\\n        uint256[] calldata indices\\\\n    ) external;\\\\n\\\\n    function disputeTransfer(\\\\n        CoreTransferState calldata cts,\\\\n        bytes32[] calldata merkleProofData\\\\n    ) external;\\\\n\\\\n    function defundTransfer(\\\\n        CoreTransferState calldata cts,\\\\n        bytes calldata encodedInitialTransferState,\\\\n        bytes calldata encodedTransferResolver,\\\\n        bytes calldata responderSignature\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x88522bb51c2b9991b24ef33a3c776ac76d96060ebbc33cd5b2b14513fb21d237\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCAsset.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface ICMCAsset {\\\\n    function getTotalTransferred(address assetId)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function getExitableAmount(address assetId, address owner)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function exit(\\\\n        address assetId,\\\\n        address owner,\\\\n        address payable recipient\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x895d89536e8ca469afe642b7001f0dfff497ce29d5d73f862b07a1cdc483f3f7\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCCore.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface ICMCCore {\\\\n    function setup(address _alice, address _bob) external;\\\\n\\\\n    function getAlice() external view returns (address);\\\\n\\\\n    function getBob() external view returns (address);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x8e8da2d8fb5198441ba6cdff018dff9e4145b07d575647c990659adad637ec8c\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCDeposit.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface ICMCDeposit {\\\\n    event AliceDeposited(address assetId, uint256 amount);\\\\n    \\\\n    function getTotalDepositsAlice(address assetId)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function getTotalDepositsBob(address assetId)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function depositAlice(address assetId, uint256 amount) external payable;\\\\n}\\\\n\\",\\"keccak256\\":\\"0xdf6f284e44d88013cf9d51220315fb37e63086e470442685891c90aadd138295\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCWithdraw.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nstruct WithdrawData {\\\\n    address channelAddress;\\\\n    address assetId;\\\\n    address payable recipient;\\\\n    uint256 amount;\\\\n    uint256 nonce;\\\\n    address callTo;\\\\n    bytes callData;\\\\n}\\\\n\\\\ninterface ICMCWithdraw {\\\\n    function getWithdrawalTransactionRecord(WithdrawData calldata wd)\\\\n        external\\\\n        view\\\\n        returns (bool);\\\\n\\\\n    function withdraw(\\\\n        WithdrawData calldata wd,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x097dfe95ad19096f9a3dd0138b4a51680c26e665d1639278a7c0a5c9f7fc5c78\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ITransferDefinition.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./ITransferRegistry.sol\\\\\\";\\\\nimport \\\\\\"./Types.sol\\\\\\";\\\\n\\\\ninterface ITransferDefinition {\\\\n    // Validates the initial state of the transfer.\\\\n    // Called by validator.ts during `create` updates.\\\\n    function create(bytes calldata encodedBalance, bytes calldata)\\\\n        external\\\\n        view\\\\n        returns (bool);\\\\n\\\\n    // Performs a state transition to resolve a transfer and returns final balances.\\\\n    // Called by validator.ts during `resolve` updates.\\\\n    function resolve(\\\\n        bytes calldata encodedBalance,\\\\n        bytes calldata,\\\\n        bytes calldata\\\\n    ) external view returns (Balance memory);\\\\n\\\\n    // Should also have the following properties:\\\\n    // string public constant override Name = \\\\\\"...\\\\\\";\\\\n    // string public constant override StateEncoding = \\\\\\"...\\\\\\";\\\\n    // string public constant override ResolverEncoding = \\\\\\"...\\\\\\";\\\\n    // These properties are included on the transfer specifically\\\\n    // to make it easier for implementers to add new transfers by\\\\n    // only include a `.sol` file\\\\n    function Name() external view returns (string memory);\\\\n\\\\n    function StateEncoding() external view returns (string memory);\\\\n\\\\n    function ResolverEncoding() external view returns (string memory);\\\\n\\\\n    function EncodedCancel() external view returns (bytes memory);\\\\n\\\\n    function getRegistryInformation()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd8eef575aa791b187397c9096e6cf40431b590d3999f0a80e38f3e59f4cf4764\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ITransferRegistry.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental \\\\\\"ABIEncoderV2\\\\\\";\\\\n\\\\nstruct RegisteredTransfer {\\\\n    string name;\\\\n    address definition;\\\\n    string stateEncoding;\\\\n    string resolverEncoding;\\\\n    bytes encodedCancel;\\\\n}\\\\n\\\\ninterface ITransferRegistry {\\\\n    event TransferAdded(RegisteredTransfer transfer);\\\\n\\\\n    event TransferRemoved(RegisteredTransfer transfer);\\\\n\\\\n    // Should add a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function addTransferDefinition(RegisteredTransfer memory transfer) external;\\\\n\\\\n    // Should remove a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function removeTransferDefinition(string memory name) external;\\\\n\\\\n    // Should return all transfer defintions in registry\\\\n    function getTransferDefinitions()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer[] memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd13be6d976c64e381a0d9df10c621cd964454b6916f25df4ea6c1b4cd873a58a\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/IVectorChannel.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./ICMCCore.sol\\\\\\";\\\\nimport \\\\\\"./ICMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./ICMCDeposit.sol\\\\\\";\\\\nimport \\\\\\"./ICMCWithdraw.sol\\\\\\";\\\\nimport \\\\\\"./ICMCAdjudicator.sol\\\\\\";\\\\n\\\\ninterface IVectorChannel is\\\\n    ICMCCore,\\\\n    ICMCAsset,\\\\n    ICMCDeposit,\\\\n    ICMCWithdraw,\\\\n    ICMCAdjudicator\\\\n{}\\\\n\\",\\"keccak256\\":\\"0x9e21e3b6510bb5aecab999bfcbefe6184bd2be5a80179ef8ecadb63ddd2c8d53\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/Types.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nstruct Balance {\\\\n    uint256[2] amount; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n    address payable[2] to; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf8c71b155b630cde965f5d1db5f0d2751a9763f5a797f15d946613e9224f1046\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/WithdrawHelper.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./ICMCWithdraw.sol\\\\\\";\\\\n\\\\ninterface WithdrawHelper {\\\\n    function execute(WithdrawData calldata wd, uint256 actualAmount) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x45bd70363bc7a45001589d55d8d068a3baa321c50382c0c73f1ffae45adfc4bb\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibAsset.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./LibERC20.sol\\\\\\";\\\\nimport \\\\\\"./LibUtils.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\\\\";\\\\n\\\\n\\\\n/// @title LibAsset\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This library contains helpers for dealing with onchain transfers\\\\n///         of in-channel assets. It is designed to safely handle all asset\\\\n///         transfers out of channel in the event of an onchain dispute. Also\\\\n///         safely handles ERC20 transfers that may be non-compliant\\\\nlibrary LibAsset {\\\\n    address constant ETHER_ASSETID = address(0);\\\\n\\\\n    function isEther(address assetId) internal pure returns (bool) {\\\\n        return assetId == ETHER_ASSETID;\\\\n    }\\\\n\\\\n    function getOwnBalance(address assetId) internal view returns (uint256) {\\\\n        return\\\\n            isEther(assetId)\\\\n                ? address(this).balance\\\\n                : IERC20(assetId).balanceOf(address(this));\\\\n    }\\\\n\\\\n    function transferEther(address payable recipient, uint256 amount)\\\\n        internal\\\\n        returns (bool)\\\\n    {\\\\n        (bool success, bytes memory returnData) =\\\\n            recipient.call{value: amount}(\\\\\\"\\\\\\");\\\\n        LibUtils.revertIfCallFailed(success, returnData);\\\\n        return true;\\\\n    }\\\\n\\\\n    function transferERC20(\\\\n        address assetId,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return LibERC20.transfer(assetId, recipient, amount);\\\\n    }\\\\n\\\\n    // This function is a wrapper for transfers of Ether or ERC20 tokens,\\\\n    // both standard-compliant ones as well as tokens that exhibit the\\\\n    // missing-return-value bug.\\\\n    // Although it behaves very much like Solidity\'s `transfer` function\\\\n    // or the ERC20 `transfer` and is, in fact, designed to replace direct\\\\n    // usage of those, it is deliberately named `unregisteredTransfer`,\\\\n    // because we need to register every transfer out of the channel.\\\\n    // Therefore, it should normally not be used directly, with the single\\\\n    // exception of the `transferAsset` function in `CMCAsset.sol`,\\\\n    // which combines the \\\\\\"naked\\\\\\" unregistered transfer given below\\\\n    // with a registration.\\\\n    // USING THIS FUNCTION SOMEWHERE ELSE IS PROBABLY WRONG!\\\\n    function unregisteredTransfer(\\\\n        address assetId,\\\\n        address payable recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            isEther(assetId)\\\\n                ? transferEther(recipient, amount)\\\\n                : transferERC20(assetId, recipient, amount);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x02e7b660846ad2f56f8005f786e0e2eb1d625c83f4cfcf9fc07a9566ca86195c\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibChannelCrypto.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\\\\\";\\\\n\\\\t\\\\t\\\\n/// @author Connext <support@connext.network>\\\\t\\\\t\\\\n/// @notice This library contains helpers for recovering signatures from a\\\\t\\\\t\\\\n///         Vector commitments. Channels do not allow for arbitrary signing of\\\\t\\\\t\\\\n///         messages to prevent misuse of private keys by injected providers,\\\\t\\\\t\\\\n///         and instead only sign messages with a Vector channel prefix.\\\\nlibrary LibChannelCrypto {\\\\n    function checkSignature(\\\\n        bytes32 hash,\\\\n        bytes memory signature,\\\\n        address allegedSigner\\\\n    ) internal pure returns (bool) {\\\\n        return recoverChannelMessageSigner(hash, signature) == allegedSigner;\\\\n    }\\\\n\\\\n    function recoverChannelMessageSigner(bytes32 hash, bytes memory signature)\\\\n        internal\\\\n        pure\\\\n        returns (address)\\\\n    {\\\\n        bytes32 digest = toChannelSignedMessage(hash);\\\\n        return ECDSA.recover(digest, signature);\\\\n    }\\\\n\\\\n    function toChannelSignedMessage(bytes32 hash)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        // 32 is the length in bytes of hash,\\\\n        // enforced by the type signature above\\\\n        return\\\\n            keccak256(abi.encodePacked(\\\\\\"\\\\\\\\x16Vector Signed Message:\\\\\\\\n32\\\\\\", hash));\\\\n    }\\\\n\\\\n    function checkUtilitySignature(\\\\n        bytes32 hash,\\\\n        bytes memory signature,\\\\n        address allegedSigner\\\\n    ) internal pure returns (bool) {\\\\n        return recoverChannelMessageSigner(hash, signature) == allegedSigner;\\\\n    }\\\\n\\\\n    function recoverUtilityMessageSigner(bytes32 hash, bytes memory signature)\\\\n        internal\\\\n        pure\\\\n        returns (address)\\\\n    {\\\\n        bytes32 digest = toUtilitySignedMessage(hash);\\\\n        return ECDSA.recover(digest, signature);\\\\n    }\\\\n\\\\n    function toUtilitySignedMessage(bytes32 hash)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        // 32 is the length in bytes of hash,\\\\n        // enforced by the type signature above\\\\n        return\\\\n            keccak256(abi.encodePacked(\\\\\\"\\\\\\\\x17Utility Signed Message:\\\\\\\\n32\\\\\\", hash));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xb8aa3679b75f2a1a5785f614f5dff9a76a689c18caa56a8df1f4e3c3167d6ece\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./LibUtils.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Address.sol\\\\\\";\\\\n\\\\n/// @title LibERC20\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This library provides several functions to safely handle\\\\n///         noncompliant tokens (i.e. does not return a boolean from\\\\n///         the transfer function)\\\\n\\\\nlibrary LibERC20 {\\\\n    function wrapCall(address assetId, bytes memory callData)\\\\n        internal\\\\n        returns (bool)\\\\n    {\\\\n        require(Address.isContract(assetId), \\\\\\"LibERC20: NO_CODE\\\\\\");\\\\n        (bool success, bytes memory returnData) = assetId.call(callData);\\\\n        LibUtils.revertIfCallFailed(success, returnData);\\\\n        return returnData.length == 0 || abi.decode(returnData, (bool));\\\\n    }\\\\n\\\\n    function approve(\\\\n        address assetId,\\\\n        address spender,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            wrapCall(\\\\n                assetId,\\\\n                abi.encodeWithSignature(\\\\n                    \\\\\\"approve(address,uint256)\\\\\\",\\\\n                    spender,\\\\n                    amount\\\\n                )\\\\n            );\\\\n    }\\\\n\\\\n    function transferFrom(\\\\n        address assetId,\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            wrapCall(\\\\n                assetId,\\\\n                abi.encodeWithSignature(\\\\n                    \\\\\\"transferFrom(address,address,uint256)\\\\\\",\\\\n                    sender,\\\\n                    recipient,\\\\n                    amount\\\\n                )\\\\n            );\\\\n    }\\\\n\\\\n    function transfer(\\\\n        address assetId,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            wrapCall(\\\\n                assetId,\\\\n                abi.encodeWithSignature(\\\\n                    \\\\\\"transfer(address,uint256)\\\\\\",\\\\n                    recipient,\\\\n                    amount\\\\n                )\\\\n            );\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x5bad1474c93a295939c23f976786f0d086abc063f19ff9c8c1d069759c4a7ff5\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibMath.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\n/// @title LibMath\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This library allows functions that would otherwise overflow and\\\\n///         revert if SafeMath was used to instead return the UINT_MAX. In the\\\\n///         adjudicator, this is used to ensure you can get the majority of\\\\n///         funds out in the event your balance > UINT_MAX and there is an\\\\n///         onchain dispute.\\\\nlibrary LibMath {\\\\n    /// @dev Returns the maximum uint256 for an addition that would overflow\\\\n    ///      (saturation arithmetic)\\\\n    function satAdd(uint256 x, uint256 y) internal pure returns (uint256) {\\\\n        uint256 sum = x + y;\\\\n        return sum >= x ? sum : type(uint256).max;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x1e6307538bfdb12a0f5234db5b9b22365b6abe2b96baa37f2e4b5d2d3f6683b8\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibUtils.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\n/// @title LibUtils\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains a helper to revert if a call was not successfully\\\\n///         made\\\\nlibrary LibUtils {\\\\n    // If success is false, reverts and passes on the revert string.\\\\n    function revertIfCallFailed(bool success, bytes memory returnData)\\\\n        internal\\\\n        pure\\\\n    {\\\\n        if (!success) {\\\\n            assembly {\\\\n                revert(add(returnData, 0x20), mload(returnData))\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf31897ed92b88739ca9c6e74d089e01c5dbf432183d2ab0b959b539842374ccd\\",\\"license\\":\\"UNLICENSED\\"}},\\"version\\":1}","bytecode":"0x60a060405234801561001057600080fd5b5030606081901b608052613ffa61008b60003980610128528061041b52806107c752806108425280610a765280610b945280610c3d528061114652806112bb5280611423528061156e52806115ea528061167e52806116f252806118f6528061197f5280611a085280611aa15280611b245250613ffa6000f3fe6080604052600436106101185760003560e01c80636f33389e116100a0578063e7283a8d11610064578063e7283a8d14610384578063e9852569146103a4578063eeb30fea146103c4578063f19eb10e146103d9578063f83d08ba146103fb57610198565b80636f33389e146102ca5780638c048fc2146102f7578063b081e9c814610324578063c60939be14610344578063cefa51221461036457610198565b80633ff0da16116100e75780633ff0da161461022a5780634d3fcbda146102575780635bc9d96d146102775780635fd334d914610297578063635ae901146102b757610198565b8063072f25fd1461019d578063241686a0146101bf5780632c889aa1146101ea5780632d34ba791461020a57610198565b3661019857306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561016f5760405162461bcd60e51b815260040161016690613cab565b60405180910390fd5b6001600054146101915760405162461bcd60e51b815260040161016690613a67565b6001600055005b600080fd5b3480156101a957600080fd5b506101bd6101b8366004612b84565b610410565b005b3480156101cb57600080fd5b506101d46107ba565b6040516101e191906131ad565b60405180910390f35b3480156101f657600080fd5b506101bd610205366004612c61565b610837565b34801561021657600080fd5b506101bd6102253660046127a8565b610a6b565b34801561023657600080fd5b5061024a610245366004612875565b610b81565b6040516101e19190613dc6565b34801561026357600080fd5b506101bd610272366004612a22565b610c32565b34801561028357600080fd5b506101bd6102923660046127e0565b61113b565b3480156102a357600080fd5b506101bd6102b2366004612b31565b6112b0565b6101bd6102c536600461282a565b611418565b3480156102d657600080fd5b506102ea6102e536600461278c565b611561565b6040516101e19190613e1e565b34801561030357600080fd5b50610317610312366004612c2f565b6115dd565b6040516101e1919061337b565b34801561033057600080fd5b506102ea61033f36600461278c565b611671565b34801561035057600080fd5b506101bd61035f366004612ab2565b6116e7565b34801561037057600080fd5b506102ea61037f36600461278c565b6118e9565b34801561039057600080fd5b506102ea61039f36600461278c565b611972565b3480156103b057600080fd5b506102ea6103bf3660046127a8565b6119fb565b3480156103d057600080fd5b506101d4611a94565b3480156103e557600080fd5b506103ee611b11565b6040516101e19190613d6a565b34801561040757600080fd5b506102ea611bb9565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156104595760405162461bcd60e51b815260040161016690613cab565b60016000541461047b5760405162461bcd60e51b815260040161016690613a67565b6002600055863061048f602083018361278c565b6001600160a01b0316146104b55760405162461bcd60e51b81526004016101669061358d565b6020808901356000908152600d9091526040902060018101546104ea5760405162461bcd60e51b8152600401610166906139b6565b80546104f58a611bbf565b146105125760405162461bcd60e51b815260040161016690613d17565b600281015460ff16156105375760405162461bcd60e51b8152600401610166906136d5565b60028101805460ff1916600117905561054e61262e565b816001015442101561073657896101600135898960405161057092919061314d565b6040518091039020146105955760405162461bcd60e51b815260040161016690613d17565b6105a560a08b0160808c0161278c565b6001600160a01b0316336001600160a01b03161480610616575061061685858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506106099250505060a08d0160808e0161278c565b6101608d01359190611bef565b6106325760405162461bcd60e51b815260040161016690613c76565b600061064460608c0160408d0161278c565b9050806001600160a01b0316638ef98a7e8c60c0016040516020016106699190613d5c565b6040516020818303038152906040528c8c8c8c6040518663ffffffff1660e01b815260040161069c9594939291906133a4565b60806040518083038186803b1580156106b457600080fd5b505afa1580156106c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ec919061295f565b915061070060c08c013560e08d0135611c17565b82516020810151905161071291611c17565b11156107305760405162461bcd60e51b815260040161016690613ce2565b5061074b565b610748368b90038b0160c08c0161288d565b90505b61076461075e60c08c0160a08d0161278c565b82611c43565b7f93f6b8187e81bd7d01ce234c043cd6ae4feda2e2ae91daae0962c68a656da8c7338b848c8c8c8c886040516107a1989796959493929190613273565b60405180910390a1505060016000555050505050505050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156108055760405162461bcd60e51b815260040161016690613cab565b6001600054146108275760405162461bcd60e51b815260040161016690613a67565b506002546001600160a01b031690565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156108805760405162461bcd60e51b815260040161016690613cab565b6001600054146108a25760405162461bcd60e51b815260040161016690613a67565b600260005584306108b6602083018361278c565b6001600160a01b0316146108dc5760405162461bcd60e51b8152600401610166906134bc565b60006108e787611c99565b90506108f68187878787611cac565b60008181526006602052604090205460ff16156109255760405162461bcd60e51b8152600401610166906138c5565b6000818152600660209081526040808320805460ff1916600117905561095d91610953918b01908b0161278c565b8960600135611db6565b905060008111806109875750600061097b60c08a0160a08b0161278c565b6001600160a01b031614155b6109a35760405162461bcd60e51b8152600401610166906134f3565b6109cc6109b660408a0160208b0161278c565b6109c660608b0160408c0161278c565b83611dca565b60006109de60c08a0160a08b0161278c565b6001600160a01b031614610a5c576109fc60c0890160a08a0161278c565b6001600160a01b031663f50cd32c89836040518363ffffffff1660e01b8152600401610a29929190613dfc565b600060405180830381600087803b158015610a4357600080fd5b505af1158015610a57573d6000803e3d6000fd5b505050505b50506001600055505050505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610ab45760405162461bcd60e51b815260040161016690613cab565b6001546001600160a01b031615610add5760405162461bcd60e51b815260040161016690613bc2565b6001600160a01b03821615801590610afd57506001600160a01b03811615155b610b195760405162461bcd60e51b81526004016101669061384d565b806001600160a01b0316826001600160a01b03161415610b4b5760405162461bcd60e51b8152600401610166906135c2565b610b53611dfb565b600180546001600160a01b039384166001600160a01b03199182161790915560028054929093169116179055565b610b89612653565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610bd25760405162461bcd60e51b815260040161016690613cab565b600160005414610bf45760405162461bcd60e51b815260040161016690613a67565b506000908152600d60209081526040918290208251606081018452815481526001820154928101929092526002015460ff1615159181019190915290565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610c7b5760405162461bcd60e51b815260040161016690613cab565b600160005414610c9d5760405162461bcd60e51b815260040161016690613a67565b60026000558430610cb1602083018361278c565b6001600160a01b0316148015610ce957506001546001600160a01b0316610cde604083016020840161278c565b6001600160a01b0316145b8015610d1757506002546001600160a01b0316610d0c606083016040840161278c565b6001600160a01b0316145b610d335760405162461bcd60e51b815260040161016690613755565b83610d505760405162461bcd60e51b81526004016101669061371e565b83821115610d705760405162461bcd60e51b815260040161016690613bf2565b600754610d7c87611e02565b14610d995760405162461bcd60e51b815260040161016690613441565b610da1611e15565b610dbd5760405162461bcd60e51b815260040161016690613556565b60005b848110156110ed576000868683818110610dd657fe5b9050602002016020810190610deb919061278c565b9050600084831015610e7057858584818110610e0357fe5b905060200201359050888060600190610e1c9190613e27565b82818110610e2657fe5b9050602002016020810190610e3b919061278c565b6001600160a01b0316826001600160a01b031614610e6b5760405162461bcd60e51b815260040161016690613485565b610edc565b5060005b610e8160608a018a613e27565b9050811015610edc57610e9760608a018a613e27565b82818110610ea157fe5b9050602002016020810190610eb6919061278c565b6001600160a01b0316826001600160a01b03161415610ed457610edc565b600101610e74565b6000610eeb60608b018b613e27565b90508214610f1657610f0060e08b018b613e27565b83818110610f0a57fe5b90506020020135610f19565b60015b6001600160a01b0384166000908152600c60205260409020549091508111610f535760405162461bcd60e51b8152600401610166906137ce565b6001600160a01b0383166000908152600c6020526040812091909155610f7883611e32565b90506000610f8584611e4d565b9050610f8f61262e565b610f9c60608d018d613e27565b9050841415611026576040518060400160405280604051806040016040528086815260200185815250815260200160405180604001604052808f6020016020810190610fe8919061278c565b6001600160a01b03166001600160a01b031681526020018f6040016020810190611012919061278c565b6001600160a01b03169052905290506110d2565b61103360808d018d613e6d565b8581811061103d57fe5b905060800201803603810190611053919061288d565b905061109461106560a08e018e613e27565b8681811061106f57fe5b905060200201358403826000015160006002811061108957fe5b602002015190611e82565b8151526110cb6110a760c08e018e613e27565b868181106110b157fe5b905060200201358303826000015160016002811061108957fe5b8151602001525b6110dc8582611c43565b505060019093019250610dc0915050565b507f49cbb28c69ffbdb6b3893f83d64557662a5dd43ffd6045b6a5180ab0a027f2243387600788886040516111269594939291906131f4565b60405180910390a15050600160005550505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156111845760405162461bcd60e51b815260040161016690613cab565b6001600054146111a65760405162461bcd60e51b815260040161016690613a67565b6002600055336001600160a01b03831614806111d35750806001600160a01b0316826001600160a01b0316145b6111ef5760405162461bcd60e51b815260040161016690613b8b565b6001600160a01b038084166000908152600460209081526040808320938616835292905290812054611222908590611db6565b9050600081116112445760405162461bcd60e51b815260040161016690613ae2565b6001600160a01b038085166000908152600460209081526040808320938716835292905220546112749082611e9b565b6001600160a01b038086166000908152600460209081526040808320938816835292905220556112a5848383611dca565b505060016000555050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156112f95760405162461bcd60e51b815260040161016690613cab565b60016000541461131b5760405162461bcd60e51b815260040161016690613a67565b6002600055823061132f602083018361278c565b6001600160a01b0316146113555760405162461bcd60e51b81526004016101669061358d565b600061136085611bbf565b9050611373848460076002015484611edd565b61137b611e15565b6113975760405162461bcd60e51b815260040161016690613556565b6020808601356000908152600d909152604090206001810154156113cd5760405162461bcd60e51b815260040161016690613b42565b8181556113df42610140880135611c17565b60018201556040517f87b348a76dd4ef431d45553a1d8c5934db960e64201a5776ab64e3eb397f4cfa9061112690339089908590613247565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156114615760405162461bcd60e51b815260040161016690613cab565b6001600054146114835760405162461bcd60e51b815260040161016690613a67565b600260005561149182611f3f565b156114ba578034146114b55760405162461bcd60e51b8152600401610166906138fc565b611500565b34156114d85760405162461bcd60e51b815260040161016690613975565b6114e482333084611f4c565b6115005760405162461bcd60e51b815260040161016690613884565b6001600160a01b03821660009081526005602052604090819020805483019055517fb52926ac8ed62d53d4b88d81b71c48639bd63aa53950fcf3e1d7676ca7c26140906115509084908490613362565b60405180910390a150506001600055565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156115ac5760405162461bcd60e51b815260040161016690613cab565b6001600054146115ce5760405162461bcd60e51b815260040161016690613a67565b6115d782611e32565b92915050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156116285760405162461bcd60e51b815260040161016690613cab565b60016000541461164a5760405162461bcd60e51b815260040161016690613a67565b6006600061165784611c99565b815260208101919091526040016000205460ff1692915050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156116bc5760405162461bcd60e51b815260040161016690613cab565b6001600054146116de5760405162461bcd60e51b815260040161016690613a67565b6115d782611e4d565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156117305760405162461bcd60e51b815260040161016690613cab565b6001600054146117525760405162461bcd60e51b815260040161016690613a67565b60026000558430611766602083018361278c565b6001600160a01b031614801561179e57506001546001600160a01b0316611793604083016020840161278c565b6001600160a01b0316145b80156117cc57506002546001600160a01b03166117c1606083016040840161278c565b6001600160a01b0316145b6117e85760405162461bcd60e51b815260040161016690613755565b60006117f387611e02565b9050611803878288888888611f9f565b61180b611e15565b156118285760405162461bcd60e51b815260040161016690613556565b6008546101208801351161184e5760405162461bcd60e51b8152600401610166906135f9565b6118566120a9565b61188a5761186942610100890135611c17565b600a5561188661187f61010089013560026120b1565b4290611c17565b600b555b60078181556101208801356008556101408801356009556040517fef03cf86f2e77e1a0ae5cb25b50519e55b94788b920ace71f92341df2dab97ed916118d39133918b916131c1565b60405180910390a1505060016000555050505050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156119345760405162461bcd60e51b815260040161016690613cab565b6001600054146119565760405162461bcd60e51b815260040161016690613a67565b506001600160a01b031660009081526003602052604090205490565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156119bd5760405162461bcd60e51b815260040161016690613cab565b6001600054146119df5760405162461bcd60e51b815260040161016690613a67565b506001600160a01b03166000908152600c602052604090205490565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415611a465760405162461bcd60e51b815260040161016690613cab565b600160005414611a685760405162461bcd60e51b815260040161016690613a67565b506001600160a01b03918216600090815260046020908152604080832093909416825291909152205490565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415611adf5760405162461bcd60e51b815260040161016690613cab565b600160005414611b015760405162461bcd60e51b815260040161016690613a67565b506001546001600160a01b031690565b611b19612673565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415611b625760405162461bcd60e51b815260040161016690613cab565b600160005414611b845760405162461bcd60e51b815260040161016690613a67565b506040805160a0810182526007548152600854602082015260095491810191909152600a546060820152600b54608082015290565b60005481565b600081604051602001611bd29190613db7565b604051602081830303815290604052805190602001209050919050565b6000816001600160a01b0316611c0585856120eb565b6001600160a01b031614949350505050565b600082820183811015611c3c5760405162461bcd60e51b81526004016101669061369e565b9392505050565b60005b6002811015611c945781516000908260028110611c5f57fe5b602002015190508015611c8b57611c8b8484602001518460028110611c8057fe5b602002015183612103565b50600101611c46565b505050565b600081604051602001611bd29190613de9565b6000600186604051602001611cc29291906133df565b604051602081830303815290604052805190602001209050611d2885858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050600154859392506001600160a01b03169050611bef565b611d445760405162461bcd60e51b815260040161016690613b0b565b611d9283838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050600254859392506001600160a01b03169050611bef565b611dae5760405162461bcd60e51b815260040161016690613816565b505050505050565b6000611c3c82611dc585612164565b6121fb565b611dd48382612211565b611ddf838383612233565b611c945760405162461bcd60e51b815260040161016690613630565b6001600055565b600081604051602001611bd29190613da4565b60004260076003015411158015611e2d5750600b5442105b905090565b6001600160a01b031660009081526005602052604090205490565b6001600160a01b0381166000908152600560209081526040808320546003909252822054611e7a84612164565b010392915050565b600082820183811015611c3c576000195b949350505050565b6000611c3c83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061225c565b611f1d8484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508692508591506122889050565b611f395760405162461bcd60e51b815260040161016690613a9e565b50505050565b6001600160a01b03161590565b6000611f9685858585604051602401611f679392919061333e565b60408051601f198184030181529190526020810180516001600160e01b03166323b872dd60e01b179052612325565b95945050505050565b60008086604051602001611fb49291906133df565b60405160208183030381529060405280519060200120905061201e85858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506120169250505060408a0160208b0161278c565b839190611bef565b61203a5760405162461bcd60e51b815260040161016690613c35565b61208483838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506120169250505060608a0160408b0161278c565b6120a05760405162461bcd60e51b815260040161016690613667565b50505050505050565b600a54421090565b6000826120c0575060006115d7565b828202828482816120cd57fe5b0414611c3c5760405162461bcd60e51b8152600401610166906139fb565b6000806120f7846123d6565b9050611e9381846123e9565b6001600160a01b038084166000908152600460209081526040808320938616835292905220546121339082611e82565b6001600160a01b03938416600090815260046020908152604080832095909616825293909352929091209190915550565b600061216f82611f3f565b6121f4576040516370a0823160e01b81526001600160a01b038316906370a082319061219f9030906004016131ad565b60206040518083038186803b1580156121b757600080fd5b505afa1580156121cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ef9190612c9a565b6115d7565b5047919050565b600081831061220a5781611c3c565b5090919050565b6001600160a01b03909116600090815260036020526040902080549091019055565b600061223e84611f3f565b6122525761224d848484612517565b611e93565b611e938383612524565b600081848411156122805760405162461bcd60e51b815260040161016691906133f7565b505050900390565b600081815b855181101561231a5760008682815181106122a457fe5b602002602001015190508083116122e55782816040516020016122c892919061313f565b604051602081830303815290604052805190602001209250612311565b80836040516020016122f892919061313f565b6040516020818303038152906040528051906020012092505b5060010161228d565b509092149392505050565b60006123308361259c565b61234c5760405162461bcd60e51b815260040161016690613a3c565b60006060846001600160a01b031684604051612368919061315d565b6000604051808303816000865af19150503d80600081146123a5576040519150601f19603f3d011682016040523d82523d6000602084013e6123aa565b606091505b50915091506123b982826125d5565b80511580611f96575080806020019051810190611f969190612855565b600081604051602001611bd29190613179565b6000815160411461240c5760405162461bcd60e51b81526004016101669061351f565b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a082111561245e5760405162461bcd60e51b81526004016101669061378c565b8060ff16601b1415801561247657508060ff16601c14155b156124935760405162461bcd60e51b815260040161016690613933565b6000600187838686604051600081526020016040526040516124b89493929190613386565b6020604051602081039080840390855afa1580156124da573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661250d5760405162461bcd60e51b81526004016101669061340a565b9695505050505050565b6000611e938484846125e6565b6000806060846001600160a01b031684604051612540906131aa565b60006040518083038185875af1925050503d806000811461257d576040519150601f19603f3d011682016040523d82523d6000602084013e612582565b606091505b509150915061259182826125d5565b506001949350505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590611e93575050151592915050565b816125e257805160208201fd5b5050565b6000611e938484846040516024016125ff929190613362565b60408051601f198184030181529190526020810180516001600160e01b031663a9059cbb60e01b179052612325565b60405180604001604052806126416126a1565b815260200161264e6126a1565b905290565b604080516060810182526000808252602082018190529181019190915290565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b60405180604001604052806002906020820280368337509192915050565b80356115d781613fac565b60008083601f8401126126db578182fd5b5081356001600160401b038111156126f1578182fd5b602083019150836020808302850101111561270b57600080fd5b9250929050565b60008083601f840112612723578182fd5b5081356001600160401b03811115612739578182fd5b60208301915083602082850101111561270b57600080fd5b60006101608284031215612763578081fd5b50919050565b60006101808284031215612763578081fd5b600060e08284031215612763578081fd5b60006020828403121561279d578081fd5b8135611c3c81613fac565b600080604083850312156127ba578081fd5b82356127c581613fac565b915060208301356127d581613fac565b809150509250929050565b6000806000606084860312156127f4578081fd5b83356127ff81613fac565b9250602084013561280f81613fac565b9150604084013561281f81613fac565b809150509250925092565b6000806040838503121561283c578182fd5b823561284781613fac565b946020939093013593505050565b600060208284031215612866578081fd5b81518015158114611c3c578182fd5b600060208284031215612886578081fd5b5035919050565b60006080828403121561289e578081fd5b6128a86040613eb3565b83601f8401126128b6578182fd5b6128c06040613eb3565b808460408601878111156128d2578586fd5b855b60028110156128f35782358552602094850194909201916001016128d4565b5082855287605f880112612905578586fd5b61290f6040613eb3565b9350839250905060808601871015612925578485fd5b845b600281101561295057813561293b81613fac565b84526020938401939190910190600101612927565b50506020830152509392505050565b600060808284031215612970578081fd5b61297a6040613eb3565b83601f840112612988578182fd5b6129926040613eb3565b808460408601878111156129a4578586fd5b855b60028110156129c55782518552602094850194909201916001016129a6565b5082855287605f8801126129d7578586fd5b6129e16040613eb3565b93508392509050608086018710156129f7578485fd5b845b6002811015612950578151612a0d81613fac565b845260209384019391909101906001016129f9565b600080600080600060608688031215612a39578283fd5b85356001600160401b0380821115612a4f578485fd5b612a5b89838a01612751565b96506020880135915080821115612a70578485fd5b612a7c89838a016126ca565b90965094506040880135915080821115612a94578283fd5b50612aa1888289016126ca565b969995985093965092949392505050565b600080600080600060608688031215612ac9578283fd5b85356001600160401b0380821115612adf578485fd5b612aeb89838a01612751565b96506020880135915080821115612b00578485fd5b612b0c89838a01612712565b90965094506040880135915080821115612b24578283fd5b50612aa188828901612712565b60008060006101a08486031215612b46578081fd5b612b508585612769565b92506101808401356001600160401b03811115612b6b578182fd5b612b77868287016126ca565b9497909650939450505050565b60008060008060008060006101e0888a031215612b9f578485fd5b612ba98989612769565b96506101808801356001600160401b0380821115612bc5578687fd5b612bd18b838c01612712565b90985096506101a08a0135915080821115612bea578384fd5b612bf68b838c01612712565b90965094506101c08a0135915080821115612c0f578384fd5b50612c1c8a828b01612712565b989b979a50959850939692959293505050565b600060208284031215612c40578081fd5b81356001600160401b03811115612c55578182fd5b611e938482850161277b565b600080600080600060608688031215612c78578283fd5b85356001600160401b0380821115612c8e578485fd5b612aeb89838a0161277b565b600060208284031215612cab578081fd5b5051919050565b6001600160a01b03169052565b60008284526020808501945082825b85811015612cfc578135612ce181613fac565b6001600160a01b031687529582019590820190600101612cce565b509495945050505050565b60008284526020808501945082825b85811015612cfc576040808389378781018581529083019085905b6002821015612d62578235612d4581613fac565b6001600160a01b0316815291850191600191909101908501612d31565b5050506080968701969190910190600101612d16565b81835260006001600160fb1b03831115612d90578081fd5b6020830280836020870137939093016020019283525090919050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452612dee816020860160208601613f80565b601f01601f19169290920160200192915050565b604081833760006040838101828152908301915b6002811015612e475760208335612e2c81613fac565b6001600160a01b031683529283019290910190600101612e16565b5050505050565b8054825260018101546020830152600281015460408301526003810154606083015260040154608090910152565b600061016060208301612e9885612e9383876126bf565b612cb2565b612ea28185613ed9565b9050612eb16020860182612cb2565b50612ebf6040840184613ed9565b612ecc6040860182612cb2565b50612eda6060840184613ee6565b826060870152612eed8387018284612cbf565b92505050612efe6080840184613f2d565b8583036080870152612f11838284612d07565b92505050612f2260a0840184613ee6565b85830360a0870152612f35838284612d78565b92505050612f4660c0840184613ee6565b85830360c0870152612f59838284612d78565b92505050612f6a60e0840184613ee6565b85830360e0870152612f7d838284612d78565b6101008681013590880152610120808701359088015261014095860135959096019490945250929392505050565b8035612fb681613fac565b6001600160a01b03908116835260208281013590840152604082013590612fdc82613fac565b166040830152612fef6060820182613ed9565b612ffc6060840182612cb2565b5061300a6080820182613ed9565b6130176080840182612cb2565b5061302560a0820182613ed9565b61303260a0840182612cb2565b5061304360c0830160c08301612e02565b610140818101359083015261016090810135910152565b80548252600181015460208301526002015460ff161515604090910152565b6000813561308681613fac565b6001600160a01b0390811684526020830135906130a282613fac565b90811660208501526040830135906130b982613fac565b8082166040860152606084013560608601526080840135608086015260a084013591506130e582613fac565b1660a084015260c082013536839003601e19018112613102578182fd5b820180356001600160401b03811115613119578283fd5b803603841315613127578283fd5b60e060c0860152611f9660e086018260208501612dac565b918252602082015260400190565b6000828483379101908152919050565b6000825161316f818460208701613f80565b9190910192915050565b7f16566563746f72205369676e6564204d6573736167653a0a33320000000000008152601a810191909152603a0190565b90565b6001600160a01b0391909116815260200190565b6001600160a01b038416815260e0602082018190526000906131e590830185612e7c565b9050611e936040830184612e4e565b6001600160a01b03861681526101006020820181905260009061321983820188612e7c565b90506132286040840187612e4e565b82810360e084015261323b818587612cbf565b98975050505050505050565b6001600160a01b038416815261020081016132656020830185612fab565b611e936101a083018461305a565b6001600160a01b038916815260006102c060206132928185018c612fab565b6132a06101a085018b61305a565b816102008501526132b4828501898b612dac565b91508382036102208501526132ca828789612dac565b85519093509150600061024085015b60028210156132f85783518152928201926001919091019082016132d9565b5050808501519150610280840160005b600281101561332d5761331b8451613f74565b82529282019290820190600101613308565b505050509998505050505050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b93845260ff9290921660208401526040830152606082015260800190565b6000606082526133b76060830188612dd6565b82810360208401526133ca818789612dac565b9050828103604084015261323b818587612dac565b60408101600284106133ed57fe5b9281526020015290565b600060208252611c3c6020830184612dd6565b60208082526018908201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604082015260600190565b60208082526024908201527f434d4341646a7564696361746f723a20494e56414c49445f4348414e4e454c5f60408201526309082a6960e31b606082015260800190565b6020808252601e908201527f434d4341646a7564696361746f723a20494e4445585f4d49534d415443480000604082015260600190565b6020808252601d908201527f434d4357697468647261773a204348414e4e454c5f4d49534d41544348000000604082015260600190565b6020808252601290820152710434d4357697468647261773a204e4f5f4f560741b604082015260600190565b6020808252601f908201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604082015260600190565b6020808252601d908201527f434d4341646a7564696361746f723a20494e56414c49445f5048415345000000604082015260600190565b6020808252818101527f434d4341646a7564696361746f723a20494e56414c49445f5452414e53464552604082015260600190565b6020808252601f908201527f434d43436f72653a204944454e544943414c5f5041525449434950414e545300604082015260600190565b6020808252601d908201527f434d4341646a7564696361746f723a20494e56414c49445f4e4f4e4345000000604082015260600190565b60208082526019908201527f434d4341737365743a205452414e534645525f4641494c454400000000000000604082015260600190565b6020808252601f908201527f434d4341646a7564696361746f723a20494e56414c49445f424f425f53494700604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526029908201527f434d4341646a7564696361746f723a205452414e534645525f414c524541445960408201526817d11151955391115160ba1b606082015260800190565b6020808252601f908201527f434d4341646a7564696361746f723a204e4f5f4153534554535f474956454e00604082015260600190565b6020808252601f908201527f434d4341646a7564696361746f723a20494e56414c49445f4348414e4e454c00604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604082015261756560f01b606082015260800190565b60208082526028908201527f434d4341646a7564696361746f723a204348414e4e454c5f414c52454144595f604082015267111151955391115160c21b606082015260800190565b6020808252601c908201527f434d4357697468647261773a20494e56414c49445f424f425f53494700000000604082015260600190565b6020808252601c908201527f434d43436f72653a20494e56414c49445f5041525449434950414e5400000000604082015260600190565b60208082526021908201527f434d434465706f7369743a2045524332305f5452414e534645525f4641494c456040820152601160fa1b606082015260800190565b6020808252601d908201527f434d4357697468647261773a20414c52454144595f4558454355544544000000604082015260600190565b6020808252601a908201527f434d434465706f7369743a2056414c55455f4d49534d41544348000000000000604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604082015261756560f01b606082015260800190565b60208082526021908201527f434d434465706f7369743a204554485f574954485f4552435f5452414e5346456040820152602960f91b606082015260800190565b60208082526025908201527f434d4341646a7564696361746f723a205452414e534645525f4e4f545f444953604082015264141555115160da1b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252601190820152704c696245524332303a204e4f5f434f444560781b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a205245454e5452414e545f43414c4c00604082015260600190565b60208082526024908201527f434d4341646a7564696361746f723a20494e56414c49445f4d45524b4c455f506040820152632927a7a360e11b606082015260800190565b6020808252600f908201526e0434d4341737365743a204e4f5f4f5608c1b604082015260600190565b6020808252601e908201527f434d4357697468647261773a20494e56414c49445f414c4943455f5349470000604082015260600190565b60208082526029908201527f434d4341646a7564696361746f723a205452414e534645525f414c524541445960408201526817d11254d41555115160ba1b606082015260800190565b60208082526018908201527f434d4341737365743a204f574e45525f4d49534d415443480000000000000000604082015260600190565b6020808252601690820152750434d43436f72653a20414c52454144595f53455455560541b604082015260600190565b60208082526023908201527f434d4341646a7564696361746f723a2057524f4e475f41525241595f4c454e4760408201526254485360e81b606082015260800190565b60208082526021908201527f434d4341646a7564696361746f723a20494e56414c49445f414c4943455f53496040820152604760f81b606082015260800190565b6020808252818101527f434d4341646a7564696361746f723a20494e56414c49445f5245534f4c564552604082015260600190565b6020808252601a908201527f4d6173746572636f70793a204f4e4c595f5649415f50524f5859000000000000604082015260600190565b6020808252818101527f434d4341646a7564696361746f723a20494e56414c49445f42414c414e434553604082015260600190565b60208082526025908201527f434d4341646a7564696361746f723a20494e56414c49445f5452414e534645526040820152640be9082a6960db1b606082015260800190565b608081016115d78284612e02565b600060a082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b600060208252611c3c6020830184612e7c565b61018081016115d78284612fab565b815181526020808301519082015260409182015115159181019190915260600190565b600060208252611c3c6020830184613079565b600060408252613e0f6040830185613079565b90508260208301529392505050565b90815260200190565b6000808335601e19843603018112613e3d578283fd5b8301803591506001600160401b03821115613e56578283fd5b602090810192508102360382131561270b57600080fd5b6000808335601e19843603018112613e83578283fd5b8301803591506001600160401b03821115613e9c578283fd5b602001915060808102360382131561270b57600080fd5b6040518181016001600160401b0381118282101715613ed157600080fd5b604052919050565b60008235611c3c81613fac565b6000808335601e19843603018112613efc578283fd5b83016020810192503590506001600160401b03811115613f1b57600080fd5b60208102360383131561270b57600080fd5b6000808335601e19843603018112613f43578283fd5b83016020810192503590506001600160401b03811115613f6257600080fd5b60808102360383131561270b57600080fd5b6001600160a01b031690565b60005b83811015613f9b578181015183820152602001613f83565b83811115611f395750506000910152565b6001600160a01b0381168114613fc157600080fd5b5056fea26469706673582212200c5761a7a244ea0132fa44dddcf0e7db8a07d95db5eae27e73fff5d050f1145c64736f6c63430007010033","deployedBytecode":"","devdoc":{"author":"Connext <support@connext.network>","kind":"dev","methods":{"getAlice()":{"returns":{"_0":"Bob\'s signer address"}},"getBob()":{"returns":{"_0":"Alice\'s signer address"}},"setup(address,address)":{"params":{"_alice":": Address representing user with function deposit","_bob":": Address representing user with multisig deposit"}},"withdraw((address,address,address,uint256,uint256,address,bytes),bytes,bytes)":{"params":{"aliceSignature":"Signature of owner a","bobSignature":"Signature of owner b","wd":"The withdraw data consisting of semantic withdraw information, i.e. assetId, recipient, and amount; information to make an optional call in addition to the actual transfer, i.e. target address for the call and call payload; additional information, i.e. channel address and nonce."}}},"title":"ChannelMastercopy","version":1},"userdoc":{"kind":"user","methods":{"getAlice()":{"notice":"A getter function for the bob of the multisig"},"getBob()":{"notice":"A getter function for the bob of the multisig"},"setup(address,address)":{"notice":"Contract constructor for Proxied copies"}},"notice":"Contains the logic used by all Vector multisigs. A proxy to this         contract is deployed per-channel using the ChannelFactory.sol.         Supports channel adjudication logic, deposit logic, and arbitrary         calls when a commitment is double-signed.","version":1},"storageLayout":{"storage":[{"astId":3403,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"lock","offset":0,"slot":"0","type":"t_uint256"},{"astId":2597,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"alice","offset":0,"slot":"1","type":"t_address"},{"astId":2599,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"bob","offset":0,"slot":"2","type":"t_address"},{"astId":2348,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"totalTransferred","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":2354,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"exitableAmount","offset":0,"slot":"4","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":2732,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"depositsAlice","offset":0,"slot":"5","type":"t_mapping(t_address,t_uint256)"},{"astId":2895,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"isExecuted","offset":0,"slot":"6","type":"t_mapping(t_bytes32,t_bool)"},{"astId":1503,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"channelDispute","offset":0,"slot":"7","type":"t_struct(ChannelDispute)3596_storage"},{"astId":1507,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"defundNonces","offset":0,"slot":"12","type":"t_mapping(t_address,t_uint256)"},{"astId":1511,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"transferDisputes","offset":0,"slot":"13","type":"t_mapping(t_bytes32,t_struct(TransferDispute)3603_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_bool)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(TransferDispute)3603_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct ICMCAdjudicator.TransferDispute)","numberOfBytes":"32","value":"t_struct(TransferDispute)3603_storage"},"t_struct(ChannelDispute)3596_storage":{"encoding":"inplace","label":"struct ICMCAdjudicator.ChannelDispute","members":[{"astId":3587,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"channelStateHash","offset":0,"slot":"0","type":"t_bytes32"},{"astId":3589,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"nonce","offset":0,"slot":"1","type":"t_uint256"},{"astId":3591,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"merkleRoot","offset":0,"slot":"2","type":"t_bytes32"},{"astId":3593,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"consensusExpiry","offset":0,"slot":"3","type":"t_uint256"},{"astId":3595,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"defundExpiry","offset":0,"slot":"4","type":"t_uint256"}],"numberOfBytes":"160"},"t_struct(TransferDispute)3603_storage":{"encoding":"inplace","label":"struct ICMCAdjudicator.TransferDispute","members":[{"astId":3598,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"transferStateHash","offset":0,"slot":"0","type":"t_bytes32"},{"astId":3600,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"transferDisputeExpiry","offset":0,"slot":"1","type":"t_uint256"},{"astId":3602,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"isDefunded","offset":0,"slot":"2","type":"t_bool"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}}}')},2802:function(e){e.exports=JSON.parse('{"address":"0xDBef662C6b49509A0bA1DfbDB8aD4b2a4D7d807B","abi":[{"inputs":[],"name":"EncodedCancel","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"Name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ResolverEncoding","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"StateEncoding","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"encodedBalance","type":"bytes"},{"internalType":"bytes","name":"encodedState","type":"bytes"}],"name":"create","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRegistryInformation","outputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"address","name":"definition","type":"address"},{"internalType":"string","name":"stateEncoding","type":"string"},{"internalType":"string","name":"resolverEncoding","type":"string"},{"internalType":"bytes","name":"encodedCancel","type":"bytes"}],"internalType":"struct RegisteredTransfer","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"encodedBalance","type":"bytes"},{"internalType":"bytes","name":"encodedState","type":"bytes"},{"internalType":"bytes","name":"encodedResolver","type":"bytes"}],"name":"resolve","outputs":[{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance","name":"","type":"tuple"}],"stateMutability":"view","type":"function"}],"transactionHash":"0xdcc6ed8d621c7f200efa170c742c63a630bccfa1b42c8c4ff7413fe12074a050","receipt":{"to":null,"from":"0x627306090abaB3A6e1400e9345bC60c78a8BEf57","contractAddress":"0xDBef662C6b49509A0bA1DfbDB8aD4b2a4D7d807B","transactionIndex":10,"gasUsed":"795245","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","blockHash":"0x1aa38d549e978c4f46f923d9ae6aeb64dfe1e97d2713e30c0aa197604b906158","transactionHash":"0xdcc6ed8d621c7f200efa170c742c63a630bccfa1b42c8c4ff7413fe12074a050","logs":[],"blockNumber":7772115,"cumulativeGasUsed":"1741563","status":1,"byzantium":true},"args":[],"solcInputHash":"89c55d5a88f10637860a9ea31a1daad3","metadata":"{\\"compiler\\":{\\"version\\":\\"0.7.1+commit.f4a555be\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[],\\"name\\":\\"EncodedCancel\\",\\"outputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"\\",\\"type\\":\\"bytes\\"}],\\"stateMutability\\":\\"pure\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"Name\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"ResolverEncoding\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"StateEncoding\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedBalance\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedState\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"create\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getRegistryInformation\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"definition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"stateEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"resolverEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedCancel\\",\\"type\\":\\"bytes\\"}],\\"internalType\\":\\"struct RegisteredTransfer\\",\\"name\\":\\"\\",\\"type\\":\\"tuple\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedBalance\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedState\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedResolver\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"resolve\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"\\",\\"type\\":\\"tuple\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"author\\":\\"Connext <support@connext.network>\\",\\"kind\\":\\"dev\\",\\"methods\\":{},\\"title\\":\\"HashlockTransfer\\",\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"notice\\":\\"This contract allows users to claim a payment locked in         the application if they provide the correct preImage. The payment is         reverted if not unlocked by the timelock if one is provided.\\",\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"src.sol/transferDefinitions/HashlockTransfer.sol\\":\\"HashlockTransfer\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"src.sol/interfaces/ITransferDefinition.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./ITransferRegistry.sol\\\\\\";\\\\nimport \\\\\\"./Types.sol\\\\\\";\\\\n\\\\ninterface ITransferDefinition {\\\\n    // Validates the initial state of the transfer.\\\\n    // Called by validator.ts during `create` updates.\\\\n    function create(bytes calldata encodedBalance, bytes calldata)\\\\n        external\\\\n        view\\\\n        returns (bool);\\\\n\\\\n    // Performs a state transition to resolve a transfer and returns final balances.\\\\n    // Called by validator.ts during `resolve` updates.\\\\n    function resolve(\\\\n        bytes calldata encodedBalance,\\\\n        bytes calldata,\\\\n        bytes calldata\\\\n    ) external view returns (Balance memory);\\\\n\\\\n    // Should also have the following properties:\\\\n    // string public constant override Name = \\\\\\"...\\\\\\";\\\\n    // string public constant override StateEncoding = \\\\\\"...\\\\\\";\\\\n    // string public constant override ResolverEncoding = \\\\\\"...\\\\\\";\\\\n    // These properties are included on the transfer specifically\\\\n    // to make it easier for implementers to add new transfers by\\\\n    // only include a `.sol` file\\\\n    function Name() external view returns (string memory);\\\\n\\\\n    function StateEncoding() external view returns (string memory);\\\\n\\\\n    function ResolverEncoding() external view returns (string memory);\\\\n\\\\n    function EncodedCancel() external view returns (bytes memory);\\\\n\\\\n    function getRegistryInformation()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd8eef575aa791b187397c9096e6cf40431b590d3999f0a80e38f3e59f4cf4764\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ITransferRegistry.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental \\\\\\"ABIEncoderV2\\\\\\";\\\\n\\\\nstruct RegisteredTransfer {\\\\n    string name;\\\\n    address definition;\\\\n    string stateEncoding;\\\\n    string resolverEncoding;\\\\n    bytes encodedCancel;\\\\n}\\\\n\\\\ninterface ITransferRegistry {\\\\n    event TransferAdded(RegisteredTransfer transfer);\\\\n\\\\n    event TransferRemoved(RegisteredTransfer transfer);\\\\n\\\\n    // Should add a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function addTransferDefinition(RegisteredTransfer memory transfer) external;\\\\n\\\\n    // Should remove a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function removeTransferDefinition(string memory name) external;\\\\n\\\\n    // Should return all transfer defintions in registry\\\\n    function getTransferDefinitions()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer[] memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd13be6d976c64e381a0d9df10c621cd964454b6916f25df4ea6c1b4cd873a58a\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/Types.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nstruct Balance {\\\\n    uint256[2] amount; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n    address payable[2] to; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf8c71b155b630cde965f5d1db5f0d2751a9763f5a797f15d946613e9224f1046\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/transferDefinitions/HashlockTransfer.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./TransferDefinition.sol\\\\\\";\\\\n\\\\n/// @title HashlockTransfer\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This contract allows users to claim a payment locked in\\\\n///         the application if they provide the correct preImage. The payment is\\\\n///         reverted if not unlocked by the timelock if one is provided.\\\\n\\\\ncontract HashlockTransfer is TransferDefinition {\\\\n    struct TransferState {\\\\n        bytes32 lockHash;\\\\n        uint256 expiry; // If 0, then no timelock is enforced\\\\n    }\\\\n\\\\n    struct TransferResolver {\\\\n        bytes32 preImage;\\\\n    }\\\\n\\\\n    // Provide registry information\\\\n    string public constant override Name = \\\\\\"HashlockTransfer\\\\\\";\\\\n    string public constant override StateEncoding =\\\\n        \\\\\\"tuple(bytes32 lockHash, uint256 expiry)\\\\\\";\\\\n    string public constant override ResolverEncoding =\\\\n        \\\\\\"tuple(bytes32 preImage)\\\\\\";\\\\n\\\\n    function EncodedCancel() external pure override returns(bytes memory) {\\\\n      TransferResolver memory resolver;\\\\n      resolver.preImage = bytes32(0);\\\\n      return abi.encode(resolver);\\\\n    } \\\\n\\\\n    function create(bytes calldata encodedBalance, bytes calldata encodedState)\\\\n        external\\\\n        view\\\\n        override\\\\n        returns (bool)\\\\n    {\\\\n        // Decode parameters\\\\n        TransferState memory state = abi.decode(encodedState, (TransferState));\\\\n        Balance memory balance = abi.decode(encodedBalance, (Balance));\\\\n\\\\n        require(\\\\n            balance.amount[0] > 0,\\\\n            \\\\\\"HashlockTransfer: ZER0_SENDER_BALANCE\\\\\\"\\\\n        );\\\\n\\\\n        require(\\\\n            balance.amount[1] == 0,\\\\n            \\\\\\"HashlockTransfer: NONZERO_RECIPIENT_BALANCE\\\\\\"\\\\n        );\\\\n        require(\\\\n            state.lockHash != bytes32(0),\\\\n            \\\\\\"HashlockTransfer: EMPTY_LOCKHASH\\\\\\"\\\\n        );\\\\n        require(\\\\n            state.expiry == 0 || state.expiry > block.timestamp,\\\\n            \\\\\\"HashlockTransfer: EXPIRED_TIMELOCK\\\\\\"\\\\n        );\\\\n\\\\n        // Valid transfer state\\\\n        return true;\\\\n    }\\\\n\\\\n    function resolve(\\\\n        bytes calldata encodedBalance,\\\\n        bytes calldata encodedState,\\\\n        bytes calldata encodedResolver\\\\n    ) external view override returns (Balance memory) {\\\\n        TransferState memory state = abi.decode(encodedState, (TransferState));\\\\n        TransferResolver memory resolver =\\\\n            abi.decode(encodedResolver, (TransferResolver));\\\\n        Balance memory balance = abi.decode(encodedBalance, (Balance));\\\\n\\\\n        // If you pass in bytes32(0), payment is canceled\\\\n        // If timelock is nonzero and has expired, payment must be canceled\\\\n        // otherwise resolve will revert\\\\n        if (resolver.preImage != bytes32(0)) {\\\\n            // Payment must not be expired\\\\n            require(state.expiry == 0 || state.expiry > block.timestamp, \\\\\\"HashlockTransfer: PAYMENT_EXPIRED\\\\\\");\\\\n\\\\n            // Check hash for normal payment unlock\\\\n            bytes32 generatedHash = sha256(abi.encode(resolver.preImage));\\\\n            require(\\\\n                state.lockHash == generatedHash,\\\\n                \\\\\\"HashlockTransfer: INVALID_PREIMAGE\\\\\\"\\\\n            );\\\\n\\\\n            // Update state\\\\n            balance.amount[1] = balance.amount[0];\\\\n            balance.amount[0] = 0;\\\\n        }\\\\n        // To cancel, the preImage must be empty (not simply incorrect)\\\\n        // There are no additional state mutations, and the preImage is\\\\n        // asserted by the `if` statement\\\\n\\\\n        return balance;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x0c403a415e87408f8f7be80d9ec3e4415189d5e85fb58e9ddef5730e4a2ae98e\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/transferDefinitions/TransferDefinition.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"../interfaces/ITransferDefinition.sol\\\\\\";\\\\nimport \\\\\\"../interfaces/ITransferRegistry.sol\\\\\\";\\\\n\\\\n/// @title TransferDefinition\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This contract helps reduce boilerplate needed when creating\\\\n///         new transfer definitions by providing an implementation of\\\\n///         the required getter\\\\n\\\\nabstract contract TransferDefinition is ITransferDefinition {\\\\n    function getRegistryInformation()\\\\n        external\\\\n        view\\\\n        override\\\\n        returns (RegisteredTransfer memory)\\\\n    {\\\\n        return\\\\n            RegisteredTransfer({\\\\n                name: this.Name(),\\\\n                stateEncoding: this.StateEncoding(),\\\\n                resolverEncoding: this.ResolverEncoding(),\\\\n                definition: address(this),\\\\n                encodedCancel: this.EncodedCancel()\\\\n            });\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xdb8bcb3fadd5c514bc6585b0a48d66952570bbb1a62f18b9dc9a4f693dc11c5e\\",\\"license\\":\\"UNLICENSED\\"}},\\"version\\":1}","bytecode":"0x608060405234801561001057600080fd5b50610d6c806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638052474d1161005b5780638052474d146100bd5780638de8b77e146100c55780638ef98a7e146100cd57806394184ba9146100ed5761007d565b80630528aa1c14610082578063206162be146100a05780633722aff9146100b5575b600080fd5b61008a61010d565b6040516100979190610a10565b60405180910390f35b6100a8610141565b6040516100979190610c1e565b61008a61034d565b61008a610386565b61008a6103b2565b6100e06100db3660046107ae565b6103ce565b6040516100979190610bb4565b6101006100fb366004610745565b61050e565b60405161009791906109fc565b60606101176105da565b6000815260405161012c908290602001610cae565b60405160208183030381529060405291505090565b6101496105ec565b6040518060a00160405280306001600160a01b0316638052474d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561018d57600080fd5b505afa1580156101a1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101c99190810190610844565b8152602001306001600160a01b03168152602001306001600160a01b0316638de8b77e6040518163ffffffff1660e01b815260040160006040518083038186803b15801561021657600080fd5b505afa15801561022a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102529190810190610844565b8152602001306001600160a01b0316633722aff96040518163ffffffff1660e01b815260040160006040518083038186803b15801561029057600080fd5b505afa1580156102a4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102cc9190810190610844565b8152602001306001600160a01b0316630528aa1c6040518163ffffffff1660e01b815260040160006040518083038186803b15801561030a57600080fd5b505afa15801561031e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103469190810190610844565b9052905090565b6040518060400160405280601781526020017f7475706c65286279746573333220707265496d6167652900000000000000000081525081565b6040518060400160405280601081526020016f2430b9b43637b1b5aa3930b739b332b960811b81525081565b604051806060016040528060278152602001610d106027913981565b6103d6610624565b6103de610649565b6103ea85870187610981565b90506103f46105da565b6104008486018661095c565b905061040a610624565b610416898b018b61087f565b82519091501561050157602083015115806104345750428360200151115b6104595760405162461bcd60e51b815260040161045090610b3e565b60405180910390fd5b6000600283600001516040516020016104729190610a07565b60408051601f198184030181529082905261048c916109e0565b602060405180830381855afa1580156104a9573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906104cc919061072d565b845190915081146104ef5760405162461bcd60e51b815260040161045090610a75565b50805180516020909101528051600090525b9998505050505050505050565b6000610518610649565b61052483850185610981565b905061052e610624565b61053a8688018861087f565b80515190915061055c5760405162461bcd60e51b815260040161045090610ab7565b8051602001511561057f5760405162461bcd60e51b815260040161045090610a2a565b815161059d5760405162461bcd60e51b815260040161045090610b7f565b602082015115806105b15750428260200151115b6105cd5760405162461bcd60e51b815260040161045090610afc565b5060019695505050505050565b60408051602081019091526000815290565b6040518060a001604052806060815260200160006001600160a01b031681526020016060815260200160608152602001606081525090565b6040518060400160405280610637610660565b8152602001610644610660565b905290565b604080518082019091526000808252602082015290565b60405180604001604052806002906020820280368337509192915050565b60008083601f84011261068f578182fd5b50813567ffffffffffffffff8111156106a6578182fd5b6020830191508360208285010111156106be57600080fd5b9250929050565b600082601f8301126106d5578081fd5b815167ffffffffffffffff8111156106eb578182fd5b6106fe601f8201601f1916602001610cb8565b915080825283602082850101111561071557600080fd5b610726816020840160208601610cdf565b5092915050565b60006020828403121561073e578081fd5b5051919050565b6000806000806040858703121561075a578283fd5b843567ffffffffffffffff80821115610771578485fd5b61077d8883890161067e565b90965094506020870135915080821115610795578384fd5b506107a28782880161067e565b95989497509550505050565b600080600080600080606087890312156107c6578182fd5b863567ffffffffffffffff808211156107dd578384fd5b6107e98a838b0161067e565b90985096506020890135915080821115610801578384fd5b61080d8a838b0161067e565b90965094506040890135915080821115610825578384fd5b5061083289828a0161067e565b979a9699509497509295939492505050565b600060208284031215610855578081fd5b815167ffffffffffffffff81111561086b578182fd5b610877848285016106c5565b949350505050565b600060808284031215610890578081fd5b61089a6040610cb8565b83601f8401126108a8578182fd5b6108b26040610cb8565b808460408601878111156108c4578586fd5b855b60028110156108e55782358552602094850194909201916001016108c6565b5082855287605f8801126108f7578586fd5b6109016040610cb8565b9350839250905060808601871015610917578485fd5b845b600281101561094d5781356001600160a01b0381168114610938578687fd5b84526020938401939190910190600101610919565b50506020830152509392505050565b60006020828403121561096d578081fd5b6109776020610cb8565b9135825250919050565b600060408284031215610992578081fd5b61099c6040610cb8565b82358152602083013560208201528091505092915050565b600081518084526109cc816020860160208601610cdf565b601f01601f19169290920160200192915050565b600082516109f2818460208701610cdf565b9190910192915050565b901515815260200190565b90815260200190565b600060208252610a2360208301846109b4565b9392505050565b6020808252602b908201527f486173686c6f636b5472616e736665723a204e4f4e5a45524f5f52454349504960408201526a454e545f42414c414e434560a81b606082015260800190565b60208082526022908201527f486173686c6f636b5472616e736665723a20494e56414c49445f505245494d41604082015261474560f01b606082015260800190565b60208082526025908201527f486173686c6f636b5472616e736665723a205a4552305f53454e4445525f42416040820152644c414e434560d81b606082015260800190565b60208082526022908201527f486173686c6f636b5472616e736665723a20455850495245445f54494d454c4f604082015261434b60f01b606082015260800190565b60208082526021908201527f486173686c6f636b5472616e736665723a205041594d454e545f4558504952456040820152601160fa1b606082015260800190565b6020808252818101527f486173686c6f636b5472616e736665723a20454d5054595f4c4f434b48415348604082015260600190565b815160808201908260005b6002811015610bde578251825260209283019290910190600101610bbf565b5050506020808401516040840160005b6002811015610c145782516001600160a01b031682529183019190830190600101610bee565b5050505092915050565b600060208252825160a06020840152610c3a60c08401826109b4565b905060018060a01b0360208501511660408401526040840151601f1980858403016060860152610c6a83836109b4565b92506060860151915080858403016080860152610c8783836109b4565b925060808601519150808584030160a086015250610ca582826109b4565b95945050505050565b9051815260200190565b60405181810167ffffffffffffffff81118282101715610cd757600080fd5b604052919050565b60005b83811015610cfa578181015183820152602001610ce2565b83811115610d09576000848401525b5050505056fe7475706c652862797465733332206c6f636b486173682c2075696e743235362065787069727929a2646970667358221220f7a1aad5efbe0de5a92ccb20170dbe8d594d5a4ccb943cb48fbcd3fcbc98e24c64736f6c63430007010033","deployedBytecode":"0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80638052474d1161005b5780638052474d146100bd5780638de8b77e146100c55780638ef98a7e146100cd57806394184ba9146100ed5761007d565b80630528aa1c14610082578063206162be146100a05780633722aff9146100b5575b600080fd5b61008a61010d565b6040516100979190610a10565b60405180910390f35b6100a8610141565b6040516100979190610c1e565b61008a61034d565b61008a610386565b61008a6103b2565b6100e06100db3660046107ae565b6103ce565b6040516100979190610bb4565b6101006100fb366004610745565b61050e565b60405161009791906109fc565b60606101176105da565b6000815260405161012c908290602001610cae565b60405160208183030381529060405291505090565b6101496105ec565b6040518060a00160405280306001600160a01b0316638052474d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561018d57600080fd5b505afa1580156101a1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101c99190810190610844565b8152602001306001600160a01b03168152602001306001600160a01b0316638de8b77e6040518163ffffffff1660e01b815260040160006040518083038186803b15801561021657600080fd5b505afa15801561022a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102529190810190610844565b8152602001306001600160a01b0316633722aff96040518163ffffffff1660e01b815260040160006040518083038186803b15801561029057600080fd5b505afa1580156102a4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102cc9190810190610844565b8152602001306001600160a01b0316630528aa1c6040518163ffffffff1660e01b815260040160006040518083038186803b15801561030a57600080fd5b505afa15801561031e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103469190810190610844565b9052905090565b6040518060400160405280601781526020017f7475706c65286279746573333220707265496d6167652900000000000000000081525081565b6040518060400160405280601081526020016f2430b9b43637b1b5aa3930b739b332b960811b81525081565b604051806060016040528060278152602001610d106027913981565b6103d6610624565b6103de610649565b6103ea85870187610981565b90506103f46105da565b6104008486018661095c565b905061040a610624565b610416898b018b61087f565b82519091501561050157602083015115806104345750428360200151115b6104595760405162461bcd60e51b815260040161045090610b3e565b60405180910390fd5b6000600283600001516040516020016104729190610a07565b60408051601f198184030181529082905261048c916109e0565b602060405180830381855afa1580156104a9573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906104cc919061072d565b845190915081146104ef5760405162461bcd60e51b815260040161045090610a75565b50805180516020909101528051600090525b9998505050505050505050565b6000610518610649565b61052483850185610981565b905061052e610624565b61053a8688018861087f565b80515190915061055c5760405162461bcd60e51b815260040161045090610ab7565b8051602001511561057f5760405162461bcd60e51b815260040161045090610a2a565b815161059d5760405162461bcd60e51b815260040161045090610b7f565b602082015115806105b15750428260200151115b6105cd5760405162461bcd60e51b815260040161045090610afc565b5060019695505050505050565b60408051602081019091526000815290565b6040518060a001604052806060815260200160006001600160a01b031681526020016060815260200160608152602001606081525090565b6040518060400160405280610637610660565b8152602001610644610660565b905290565b604080518082019091526000808252602082015290565b60405180604001604052806002906020820280368337509192915050565b60008083601f84011261068f578182fd5b50813567ffffffffffffffff8111156106a6578182fd5b6020830191508360208285010111156106be57600080fd5b9250929050565b600082601f8301126106d5578081fd5b815167ffffffffffffffff8111156106eb578182fd5b6106fe601f8201601f1916602001610cb8565b915080825283602082850101111561071557600080fd5b610726816020840160208601610cdf565b5092915050565b60006020828403121561073e578081fd5b5051919050565b6000806000806040858703121561075a578283fd5b843567ffffffffffffffff80821115610771578485fd5b61077d8883890161067e565b90965094506020870135915080821115610795578384fd5b506107a28782880161067e565b95989497509550505050565b600080600080600080606087890312156107c6578182fd5b863567ffffffffffffffff808211156107dd578384fd5b6107e98a838b0161067e565b90985096506020890135915080821115610801578384fd5b61080d8a838b0161067e565b90965094506040890135915080821115610825578384fd5b5061083289828a0161067e565b979a9699509497509295939492505050565b600060208284031215610855578081fd5b815167ffffffffffffffff81111561086b578182fd5b610877848285016106c5565b949350505050565b600060808284031215610890578081fd5b61089a6040610cb8565b83601f8401126108a8578182fd5b6108b26040610cb8565b808460408601878111156108c4578586fd5b855b60028110156108e55782358552602094850194909201916001016108c6565b5082855287605f8801126108f7578586fd5b6109016040610cb8565b9350839250905060808601871015610917578485fd5b845b600281101561094d5781356001600160a01b0381168114610938578687fd5b84526020938401939190910190600101610919565b50506020830152509392505050565b60006020828403121561096d578081fd5b6109776020610cb8565b9135825250919050565b600060408284031215610992578081fd5b61099c6040610cb8565b82358152602083013560208201528091505092915050565b600081518084526109cc816020860160208601610cdf565b601f01601f19169290920160200192915050565b600082516109f2818460208701610cdf565b9190910192915050565b901515815260200190565b90815260200190565b600060208252610a2360208301846109b4565b9392505050565b6020808252602b908201527f486173686c6f636b5472616e736665723a204e4f4e5a45524f5f52454349504960408201526a454e545f42414c414e434560a81b606082015260800190565b60208082526022908201527f486173686c6f636b5472616e736665723a20494e56414c49445f505245494d41604082015261474560f01b606082015260800190565b60208082526025908201527f486173686c6f636b5472616e736665723a205a4552305f53454e4445525f42416040820152644c414e434560d81b606082015260800190565b60208082526022908201527f486173686c6f636b5472616e736665723a20455850495245445f54494d454c4f604082015261434b60f01b606082015260800190565b60208082526021908201527f486173686c6f636b5472616e736665723a205041594d454e545f4558504952456040820152601160fa1b606082015260800190565b6020808252818101527f486173686c6f636b5472616e736665723a20454d5054595f4c4f434b48415348604082015260600190565b815160808201908260005b6002811015610bde578251825260209283019290910190600101610bbf565b5050506020808401516040840160005b6002811015610c145782516001600160a01b031682529183019190830190600101610bee565b5050505092915050565b600060208252825160a06020840152610c3a60c08401826109b4565b905060018060a01b0360208501511660408401526040840151601f1980858403016060860152610c6a83836109b4565b92506060860151915080858403016080860152610c8783836109b4565b925060808601519150808584030160a086015250610ca582826109b4565b95945050505050565b9051815260200190565b60405181810167ffffffffffffffff81118282101715610cd757600080fd5b604052919050565b60005b83811015610cfa578181015183820152602001610ce2565b83811115610d09576000848401525b5050505056fe7475706c652862797465733332206c6f636b486173682c2075696e743235362065787069727929a2646970667358221220f7a1aad5efbe0de5a92ccb20170dbe8d594d5a4ccb943cb48fbcd3fcbc98e24c64736f6c63430007010033","devdoc":{"author":"Connext <support@connext.network>","kind":"dev","methods":{},"title":"HashlockTransfer","version":1},"userdoc":{"kind":"user","methods":{},"notice":"This contract allows users to claim a payment locked in         the application if they provide the correct preImage. The payment is         reverted if not unlocked by the timelock if one is provided.","version":1},"storageLayout":{"storage":[],"types":null}}')},2803:function(e){e.exports=JSON.parse('{"address":"0x8bad6f387643Ae621714Cd739d26071cFBE3d0C9","abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"transactionHash":"0x0fe65aaa9a7a0a8d6b07ed0ee36e9a5e9c65e340f7014239a7a80efceb341ff6","receipt":{"to":null,"from":"0x6E137983f0B260BAD708b4FAef30cba5a74E69AA","contractAddress":"0x8bad6f387643Ae621714Cd739d26071cFBE3d0C9","transactionIndex":3,"gasUsed":"888397","logsBloom":"0xblockHash":"0x2462339ef1a6ba5f0416a50220162e7770aa503748b326e8c29c2296abafb62f","transactionHash":"0x0fe65aaa9a7a0a8d6b07ed0ee36e9a5e9c65e340f7014239a7a80efceb341ff6","logs":[{"transactionIndex":3,"blockNumber":7757809,"transactionHash":"0x0fe65aaa9a7a0a8d6b07ed0ee36e9a5e9c65e340f7014239a7a80efceb341ff6","address":"0x8bad6f387643Ae621714Cd739d26071cFBE3d0C9","topics":["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000006e137983f0b260bad708b4faef30cba5a74e69aa"],"data":"0x00000000000000000000000000000000000000000000d3c21bcecceda1000000","logIndex":2,"blockHash":"0x2462339ef1a6ba5f0416a50220162e7770aa503748b326e8c29c2296abafb62f"}],"blockNumber":7757809,"cumulativeGasUsed":"2553067","status":1,"byzantium":true},"args":[],"solcInputHash":"e64b9cdf4f72778a3c3a9b0d6a298f3c","metadata":"{\\"compiler\\":{\\"version\\":\\"0.7.1+commit.f4a555be\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"value\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Approval\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"from\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"value\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Transfer\\",\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"}],\\"name\\":\\"allowance\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"approve\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"balanceOf\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"burn\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"decimals\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"subtractedValue\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"decreaseAllowance\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"addedValue\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"increaseAllowance\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"mint\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"name\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"symbol\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"totalSupply\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"transfer\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"sender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"transferFrom\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{\\"allowance(address,address)\\":{\\"details\\":\\"See {IERC20-allowance}.\\"},\\"approve(address,uint256)\\":{\\"details\\":\\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\\"},\\"balanceOf(address)\\":{\\"details\\":\\"See {IERC20-balanceOf}.\\"},\\"decimals()\\":{\\"details\\":\\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\\"},\\"decreaseAllowance(address,uint256)\\":{\\"details\\":\\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\\"},\\"increaseAllowance(address,uint256)\\":{\\"details\\":\\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\\"},\\"name()\\":{\\"details\\":\\"Returns the name of the token.\\"},\\"symbol()\\":{\\"details\\":\\"Returns the symbol of the token, usually a shorter version of the name.\\"},\\"totalSupply()\\":{\\"details\\":\\"See {IERC20-totalSupply}.\\"},\\"transfer(address,uint256)\\":{\\"details\\":\\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\\"},\\"transferFrom(address,address,uint256)\\":{\\"details\\":\\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``\'s tokens of at least `amount`.\\"}},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"src.sol/testing/TestToken.sol\\":\\"TestToken\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/GSN/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/*\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with GSN meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address payable) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes memory) {\\\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x910a2e625b71168563edf9eeef55a50d6d699acfe27ceba3921f291829a8f938\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/math/SafeMath.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Wrappers over Solidity\'s arithmetic operations with added overflow\\\\n * checks.\\\\n *\\\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\\\n * in bugs, because programmers usually assume that an overflow raises an\\\\n * error, which is the standard behavior in high level programming languages.\\\\n * `SafeMath` restores this intuition by reverting the transaction when an\\\\n * operation overflows.\\\\n *\\\\n * Using this library instead of the unchecked operations eliminates an entire\\\\n * class of bugs, so it\'s recommended to use it always.\\\\n */\\\\nlibrary SafeMath {\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `+` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Addition cannot overflow.\\\\n     */\\\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        uint256 c = a + b;\\\\n        require(c >= a, \\\\\\"SafeMath: addition overflow\\\\\\");\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return sub(a, b, \\\\\\"SafeMath: subtraction overflow\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        require(b <= a, errorMessage);\\\\n        uint256 c = a - b;\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `*` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Multiplication cannot overflow.\\\\n     */\\\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\\\\n        // benefit is lost if \'b\' is also tested.\\\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\\\n        if (a == 0) {\\\\n            return 0;\\\\n        }\\\\n\\\\n        uint256 c = a * b;\\\\n        require(c / a == b, \\\\\\"SafeMath: multiplication overflow\\\\\\");\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return div(a, b, \\\\\\"SafeMath: division by zero\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        require(b > 0, errorMessage);\\\\n        uint256 c = a / b;\\\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * Reverts when dividing by zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return mod(a, b, \\\\\\"SafeMath: modulo by zero\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * Reverts with custom message when dividing by zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        require(b != 0, errorMessage);\\\\n        return a % b;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\nimport \\\\\\"../../GSN/Context.sol\\\\\\";\\\\nimport \\\\\\"./IERC20.sol\\\\\\";\\\\nimport \\\\\\"../../math/SafeMath.sol\\\\\\";\\\\nimport \\\\\\"../../utils/Address.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Implementation of the {IERC20} interface.\\\\n *\\\\n * This implementation is agnostic to the way tokens are created. This means\\\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\\\n *\\\\n * TIP: For a detailed writeup see our guide\\\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\\\n * to implement supply mechanisms].\\\\n *\\\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\\\n * of returning `false` on failure. This behavior is nonetheless conventional\\\\n * and does not conflict with the expectations of ERC20 applications.\\\\n *\\\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\\\n * This allows applications to reconstruct the allowance for all accounts just\\\\n * by listening to said events. Other implementations of the EIP may not emit\\\\n * these events, as it isn\'t required by the specification.\\\\n *\\\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\\\n * functions have been added to mitigate the well-known issues around setting\\\\n * allowances. See {IERC20-approve}.\\\\n */\\\\ncontract ERC20 is Context, IERC20 {\\\\n    using SafeMath for uint256;\\\\n    using Address for address;\\\\n\\\\n    mapping (address => uint256) private _balances;\\\\n\\\\n    mapping (address => mapping (address => uint256)) private _allowances;\\\\n\\\\n    uint256 private _totalSupply;\\\\n\\\\n    string private _name;\\\\n    string private _symbol;\\\\n    uint8 private _decimals;\\\\n\\\\n    /**\\\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\\\n     * a default value of 18.\\\\n     *\\\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\\\n     *\\\\n     * All three of these values are immutable: they can only be set once during\\\\n     * construction.\\\\n     */\\\\n    constructor (string memory name, string memory symbol) {\\\\n        _name = name;\\\\n        _symbol = symbol;\\\\n        _decimals = 18;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the name of the token.\\\\n     */\\\\n    function name() public view returns (string memory) {\\\\n        return _name;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\\\n     * name.\\\\n     */\\\\n    function symbol() public view returns (string memory) {\\\\n        return _symbol;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the number of decimals used to get its user representation.\\\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\\\n     *\\\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\\\n     * called.\\\\n     *\\\\n     * NOTE: This information is only used for _display_ purposes: it in\\\\n     * no way affects any of the arithmetic of the contract, including\\\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\\\n     */\\\\n    function decimals() public view returns (uint8) {\\\\n        return _decimals;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-totalSupply}.\\\\n     */\\\\n    function totalSupply() public view override returns (uint256) {\\\\n        return _totalSupply;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-balanceOf}.\\\\n     */\\\\n    function balanceOf(address account) public view override returns (uint256) {\\\\n        return _balances[account];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-transfer}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `recipient` cannot be the zero address.\\\\n     * - the caller must have a balance of at least `amount`.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\\\n        _transfer(_msgSender(), recipient, amount);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-allowance}.\\\\n     */\\\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\\\n        return _allowances[owner][spender];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-approve}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\\\n        _approve(_msgSender(), spender, amount);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-transferFrom}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\\\n     * required by the EIP. See the note at the beginning of {ERC20};\\\\n     *\\\\n     * Requirements:\\\\n     * - `sender` and `recipient` cannot be the zero address.\\\\n     * - `sender` must have a balance of at least `amount`.\\\\n     * - the caller must have allowance for ``sender``\'s tokens of at least\\\\n     * `amount`.\\\\n     */\\\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\\\n        _transfer(sender, recipient, amount);\\\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\\\\"ERC20: transfer amount exceeds allowance\\\\\\"));\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\\\n     *\\\\n     * This is an alternative to {approve} that can be used as a mitigation for\\\\n     * problems described in {IERC20-approve}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\\\n     *\\\\n     * This is an alternative to {approve} that can be used as a mitigation for\\\\n     * problems described in {IERC20-approve}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     * - `spender` must have allowance for the caller of at least\\\\n     * `subtractedValue`.\\\\n     */\\\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\\\\"ERC20: decreased allowance below zero\\\\\\"));\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\\\n     *\\\\n     * This is internal function is equivalent to {transfer}, and can be used to\\\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `sender` cannot be the zero address.\\\\n     * - `recipient` cannot be the zero address.\\\\n     * - `sender` must have a balance of at least `amount`.\\\\n     */\\\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\\\n        require(sender != address(0), \\\\\\"ERC20: transfer from the zero address\\\\\\");\\\\n        require(recipient != address(0), \\\\\\"ERC20: transfer to the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(sender, recipient, amount);\\\\n\\\\n        _balances[sender] = _balances[sender].sub(amount, \\\\\\"ERC20: transfer amount exceeds balance\\\\\\");\\\\n        _balances[recipient] = _balances[recipient].add(amount);\\\\n        emit Transfer(sender, recipient, amount);\\\\n    }\\\\n\\\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\\\n     * the total supply.\\\\n     *\\\\n     * Emits a {Transfer} event with `from` set to the zero address.\\\\n     *\\\\n     * Requirements\\\\n     *\\\\n     * - `to` cannot be the zero address.\\\\n     */\\\\n    function _mint(address account, uint256 amount) internal virtual {\\\\n        require(account != address(0), \\\\\\"ERC20: mint to the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(address(0), account, amount);\\\\n\\\\n        _totalSupply = _totalSupply.add(amount);\\\\n        _balances[account] = _balances[account].add(amount);\\\\n        emit Transfer(address(0), account, amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\\\n     * total supply.\\\\n     *\\\\n     * Emits a {Transfer} event with `to` set to the zero address.\\\\n     *\\\\n     * Requirements\\\\n     *\\\\n     * - `account` cannot be the zero address.\\\\n     * - `account` must have at least `amount` tokens.\\\\n     */\\\\n    function _burn(address account, uint256 amount) internal virtual {\\\\n        require(account != address(0), \\\\\\"ERC20: burn from the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(account, address(0), amount);\\\\n\\\\n        _balances[account] = _balances[account].sub(amount, \\\\\\"ERC20: burn amount exceeds balance\\\\\\");\\\\n        _totalSupply = _totalSupply.sub(amount);\\\\n        emit Transfer(account, address(0), amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\\\n     *\\\\n     * This internal function is equivalent to `approve`, and can be used to\\\\n     * e.g. set automatic allowances for certain subsystems, etc.\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `owner` cannot be the zero address.\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\\\n        require(owner != address(0), \\\\\\"ERC20: approve from the zero address\\\\\\");\\\\n        require(spender != address(0), \\\\\\"ERC20: approve to the zero address\\\\\\");\\\\n\\\\n        _allowances[owner][spender] = amount;\\\\n        emit Approval(owner, spender, amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\\\n     *\\\\n     * WARNING: This function should only be called from the constructor. Most\\\\n     * applications that interact with token contracts will not expect\\\\n     * {decimals} to ever change, and may work incorrectly if it does.\\\\n     */\\\\n    function _setupDecimals(uint8 decimals_) internal {\\\\n        _decimals = decimals_;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Hook that is called before any transfer of tokens. This includes\\\\n     * minting and burning.\\\\n     *\\\\n     * Calling conditions:\\\\n     *\\\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\'s tokens\\\\n     * will be to transferred to `to`.\\\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\\\n     * - when `to` is zero, `amount` of ``from``\'s tokens will be burned.\\\\n     * - `from` and `to` are never both zero.\\\\n     *\\\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\\\n     */\\\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf1ac0ee2ca2b36f90574d3b2b37422ced4fa829741d80794c62f5958a2d8f474\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Returns the amount of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender\'s allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\\\n     * allowance mechanism. `amount` is then deducted from the caller\'s\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Address.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Collection of functions related to the address type\\\\n */\\\\nlibrary Address {\\\\n    /**\\\\n     * @dev Returns true if `account` is a contract.\\\\n     *\\\\n     * [IMPORTANT]\\\\n     * ====\\\\n     * It is unsafe to assume that an address for which this function returns\\\\n     * false is an externally-owned account (EOA) and not a contract.\\\\n     *\\\\n     * Among others, `isContract` will return false for the following\\\\n     * types of addresses:\\\\n     *\\\\n     *  - an externally-owned account\\\\n     *  - a contract in construction\\\\n     *  - an address where a contract will be created\\\\n     *  - an address where a contract lived, but was destroyed\\\\n     * ====\\\\n     */\\\\n    function isContract(address account) internal view returns (bool) {\\\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\\\n        // for accounts without code, i.e. `keccak256(\'\')`\\\\n        bytes32 codehash;\\\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\\\n        // solhint-disable-next-line no-inline-assembly\\\\n        assembly { codehash := extcodehash(account) }\\\\n        return (codehash != accountHash && codehash != 0x0);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\\\\n     * `recipient`, forwarding all available gas and reverting on errors.\\\\n     *\\\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\\\n     * imposed by `transfer`, making them unable to receive funds via\\\\n     * `transfer`. {sendValue} removes this limitation.\\\\n     *\\\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\\\n     *\\\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\\\n     * taken to not create reentrancy vulnerabilities. Consider using\\\\n     * {ReentrancyGuard} or the\\\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\\\n     */\\\\n    function sendValue(address payable recipient, uint256 amount) internal {\\\\n        require(address(this).balance >= amount, \\\\\\"Address: insufficient balance\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\\\n        (bool success, ) = recipient.call{ value: amount }(\\\\\\"\\\\\\");\\\\n        require(success, \\\\\\"Address: unable to send value, recipient may have reverted\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Performs a Solidity function call using a low level `call`. A\\\\n     * plain`call` is an unsafe replacement for a function call: use this\\\\n     * function instead.\\\\n     *\\\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\\\n     * function (like regular Solidity function calls).\\\\n     *\\\\n     * Returns the raw returned data. To convert to the expected return value,\\\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `target` must be a contract.\\\\n     * - calling `target` with `data` must not revert.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n      return functionCall(target, data, \\\\\\"Address: low-level call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but also transferring `value` wei to `target`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the calling contract must have an ETH balance of at least `value`.\\\\n     * - the called Solidity function must be `payable`.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, value, \\\\\\"Address: low-level call with value failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\\\n        require(address(this).balance >= value, \\\\\\"Address: insufficient balance for call\\\\\\");\\\\n        return _functionCallWithValue(target, data, value, errorMessage);\\\\n    }\\\\n\\\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: call to non-contract\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls\\\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\\\n        if (success) {\\\\n            return returndata;\\\\n        } else {\\\\n            // Look for revert reason and bubble it up if present\\\\n            if (returndata.length > 0) {\\\\n                // The easiest way to bubble the revert reason is using memory via assembly\\\\n\\\\n                // solhint-disable-next-line no-inline-assembly\\\\n                assembly {\\\\n                    let returndata_size := mload(returndata)\\\\n                    revert(add(32, returndata), returndata_size)\\\\n                }\\\\n            } else {\\\\n                revert(errorMessage);\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x698f929f1097637d051976b322a2d532c27df022b09010e8d091e2888a5ebdf8\\",\\"license\\":\\"MIT\\"},\\"src.sol/testing/TestToken.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.1;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\\\\";\\\\n\\\\n/* This token is ONLY useful for testing\\\\n * Anybody can mint as many tokens as they like\\\\n * Anybody can burn anyone else\'s tokens\\\\n */\\\\ncontract TestToken is ERC20 {\\\\n    constructor() ERC20(\\\\\\"Test Token\\\\\\", \\\\\\"TEST\\\\\\") {\\\\n        _mint(msg.sender, 1000000 ether);\\\\n    }\\\\n\\\\n    function mint(address account, uint256 amount) external {\\\\n        _mint(account, amount);\\\\n    }\\\\n\\\\n    function burn(address account, uint256 amount) external {\\\\n        _burn(account, amount);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe879a63f0b107705dc9405af3efc7adc2f6425da2c5ec571c72f91db2a059876\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"0x60806040523480156200001157600080fd5b50604080518082018252600a8152692a32b9ba102a37b5b2b760b11b602080830191825283518085019094526004845263151154d560e21b908401528151919291620000609160039162000218565b5080516200007690600490602084019062000218565b50506005805460ff19166012179055506200009c3369d3c21bcecceda1000000620000a2565b620002b4565b6001600160a01b038216620000fe576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6200010c60008383620001b1565b6200012881600254620001b660201b6200060b1790919060201c565b6002556001600160a01b038216600090815260208181526040909120546200015b9183906200060b620001b6821b17901c565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b505050565b60008282018381101562000211576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200025b57805160ff19168380011785556200028b565b828001600101855582156200028b579182015b828111156200028b5782518255916020019190600101906200026e565b50620002999291506200029d565b5090565b5b808211156200029957600081556001016200029e565b610cfb80620002c46000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806340c10f191161008c5780639dc29fac116100665780639dc29fac14610287578063a457c2d7146102b3578063a9059cbb146102df578063dd62ed3e1461030b576100cf565b806340c10f191461022b57806370a082311461025957806395d89b411461027f576100cf565b806306fdde03146100d4578063095ea7b31461015157806318160ddd1461019157806323b872dd146101ab578063313ce567146101e157806339509351146101ff575b600080fd5b6100dc610339565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101165781810151838201526020016100fe565b50505050905090810190601f1680156101435780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561016757600080fd5b506001600160a01b0381351690602001356103cf565b604080519115158252519081900360200190f35b6101996103ec565b60408051918252519081900360200190f35b61017d600480360360608110156101c157600080fd5b506001600160a01b038135811691602081013590911690604001356103f2565b6101e9610479565b6040805160ff9092168252519081900360200190f35b61017d6004803603604081101561021557600080fd5b506001600160a01b038135169060200135610482565b6102576004803603604081101561024157600080fd5b506001600160a01b0381351690602001356104d0565b005b6101996004803603602081101561026f57600080fd5b50356001600160a01b03166104de565b6100dc6104f9565b6102576004803603604081101561029d57600080fd5b506001600160a01b03813516906020013561055a565b61017d600480360360408110156102c957600080fd5b506001600160a01b038135169060200135610564565b61017d600480360360408110156102f557600080fd5b506001600160a01b0381351690602001356105cc565b6101996004803603604081101561032157600080fd5b506001600160a01b03813581169160200135166105e0565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103c55780601f1061039a576101008083540402835291602001916103c5565b820191906000526020600020905b8154815290600101906020018083116103a857829003601f168201915b5050505050905090565b60006103e36103dc61066c565b8484610670565b50600192915050565b60025490565b60006103ff84848461075c565b61046f8461040b61066c565b61046a85604051806060016040528060288152602001610c0f602891396001600160a01b038a1660009081526001602052604081209061044961066c565b6001600160a01b0316815260208101919091526040016000205491906108b7565b610670565b5060019392505050565b60055460ff1690565b60006103e361048f61066c565b8461046a85600160006104a061066c565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549061060b565b6104da828261094e565b5050565b6001600160a01b031660009081526020819052604090205490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103c55780601f1061039a576101008083540402835291602001916103c5565b6104da8282610a3e565b60006103e361057161066c565b8461046a85604051806060016040528060258152602001610ca1602591396001600061059b61066c565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906108b7565b60006103e36105d961066c565b848461075c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600082820183811015610665576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b3390565b6001600160a01b0383166106b55760405162461bcd60e51b8152600401808060200182810382526024815260200180610c7d6024913960400191505060405180910390fd5b6001600160a01b0382166106fa5760405162461bcd60e51b8152600401808060200182810382526022815260200180610bc76022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166107a15760405162461bcd60e51b8152600401808060200182810382526025815260200180610c586025913960400191505060405180910390fd5b6001600160a01b0382166107e65760405162461bcd60e51b8152600401808060200182810382526023815260200180610b826023913960400191505060405180910390fd5b6107f1838383610b3a565b61082e81604051806060016040528060268152602001610be9602691396001600160a01b03861660009081526020819052604090205491906108b7565b6001600160a01b03808516600090815260208190526040808220939093559084168152205461085d908261060b565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600081848411156109465760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561090b5781810151838201526020016108f3565b50505050905090810190601f1680156109385780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b0382166109a9576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6109b560008383610b3a565b6002546109c2908261060b565b6002556001600160a01b0382166000908152602081905260409020546109e8908261060b565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b038216610a835760405162461bcd60e51b8152600401808060200182810382526021815260200180610c376021913960400191505060405180910390fd5b610a8f82600083610b3a565b610acc81604051806060016040528060228152602001610ba5602291396001600160a01b03851660009081526020819052604090205491906108b7565b6001600160a01b038316600090815260208190526040902055600254610af29082610b3f565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b505050565b600061066583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506108b756fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220ab9dcafdcf3d12155ca9697d505d71261c7afcb9c777a043bc5bb39f7a2d72ab64736f6c63430007010033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806340c10f191161008c5780639dc29fac116100665780639dc29fac14610287578063a457c2d7146102b3578063a9059cbb146102df578063dd62ed3e1461030b576100cf565b806340c10f191461022b57806370a082311461025957806395d89b411461027f576100cf565b806306fdde03146100d4578063095ea7b31461015157806318160ddd1461019157806323b872dd146101ab578063313ce567146101e157806339509351146101ff575b600080fd5b6100dc610339565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101165781810151838201526020016100fe565b50505050905090810190601f1680156101435780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561016757600080fd5b506001600160a01b0381351690602001356103cf565b604080519115158252519081900360200190f35b6101996103ec565b60408051918252519081900360200190f35b61017d600480360360608110156101c157600080fd5b506001600160a01b038135811691602081013590911690604001356103f2565b6101e9610479565b6040805160ff9092168252519081900360200190f35b61017d6004803603604081101561021557600080fd5b506001600160a01b038135169060200135610482565b6102576004803603604081101561024157600080fd5b506001600160a01b0381351690602001356104d0565b005b6101996004803603602081101561026f57600080fd5b50356001600160a01b03166104de565b6100dc6104f9565b6102576004803603604081101561029d57600080fd5b506001600160a01b03813516906020013561055a565b61017d600480360360408110156102c957600080fd5b506001600160a01b038135169060200135610564565b61017d600480360360408110156102f557600080fd5b506001600160a01b0381351690602001356105cc565b6101996004803603604081101561032157600080fd5b506001600160a01b03813581169160200135166105e0565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103c55780601f1061039a576101008083540402835291602001916103c5565b820191906000526020600020905b8154815290600101906020018083116103a857829003601f168201915b5050505050905090565b60006103e36103dc61066c565b8484610670565b50600192915050565b60025490565b60006103ff84848461075c565b61046f8461040b61066c565b61046a85604051806060016040528060288152602001610c0f602891396001600160a01b038a1660009081526001602052604081209061044961066c565b6001600160a01b0316815260208101919091526040016000205491906108b7565b610670565b5060019392505050565b60055460ff1690565b60006103e361048f61066c565b8461046a85600160006104a061066c565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549061060b565b6104da828261094e565b5050565b6001600160a01b031660009081526020819052604090205490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103c55780601f1061039a576101008083540402835291602001916103c5565b6104da8282610a3e565b60006103e361057161066c565b8461046a85604051806060016040528060258152602001610ca1602591396001600061059b61066c565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906108b7565b60006103e36105d961066c565b848461075c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600082820183811015610665576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b3390565b6001600160a01b0383166106b55760405162461bcd60e51b8152600401808060200182810382526024815260200180610c7d6024913960400191505060405180910390fd5b6001600160a01b0382166106fa5760405162461bcd60e51b8152600401808060200182810382526022815260200180610bc76022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166107a15760405162461bcd60e51b8152600401808060200182810382526025815260200180610c586025913960400191505060405180910390fd5b6001600160a01b0382166107e65760405162461bcd60e51b8152600401808060200182810382526023815260200180610b826023913960400191505060405180910390fd5b6107f1838383610b3a565b61082e81604051806060016040528060268152602001610be9602691396001600160a01b03861660009081526020819052604090205491906108b7565b6001600160a01b03808516600090815260208190526040808220939093559084168152205461085d908261060b565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600081848411156109465760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561090b5781810151838201526020016108f3565b50505050905090810190601f1680156109385780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b0382166109a9576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6109b560008383610b3a565b6002546109c2908261060b565b6002556001600160a01b0382166000908152602081905260409020546109e8908261060b565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b038216610a835760405162461bcd60e51b8152600401808060200182810382526021815260200180610c376021913960400191505060405180910390fd5b610a8f82600083610b3a565b610acc81604051806060016040528060228152602001610ba5602291396001600160a01b03851660009081526020819052604090205491906108b7565b6001600160a01b038316600090815260208190526040902055600254610af29082610b3f565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b505050565b600061066583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506108b756fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220ab9dcafdcf3d12155ca9697d505d71261c7afcb9c777a043bc5bb39f7a2d72ab64736f6c63430007010033","devdoc":{"kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``\'s tokens of at least `amount`."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1},"storageLayout":{"storage":[{"astId":590,"contract":"src.sol/testing/TestToken.sol:TestToken","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":596,"contract":"src.sol/testing/TestToken.sol:TestToken","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":598,"contract":"src.sol/testing/TestToken.sol:TestToken","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":600,"contract":"src.sol/testing/TestToken.sol:TestToken","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":602,"contract":"src.sol/testing/TestToken.sol:TestToken","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"},{"astId":604,"contract":"src.sol/testing/TestToken.sol:TestToken","label":"_decimals","offset":0,"slot":"5","type":"t_uint8"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}}}')},2804:function(e){e.exports=JSON.parse('{"address":"0x4b86a332d76b21933d245fEF7636B1019EE6C824","abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"address","name":"definition","type":"address"},{"internalType":"string","name":"stateEncoding","type":"string"},{"internalType":"string","name":"resolverEncoding","type":"string"},{"internalType":"bytes","name":"encodedCancel","type":"bytes"}],"indexed":false,"internalType":"struct RegisteredTransfer","name":"transfer","type":"tuple"}],"name":"TransferAdded","type":"event"},{"anonymous":false,"inputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"address","name":"definition","type":"address"},{"internalType":"string","name":"stateEncoding","type":"string"},{"internalType":"string","name":"resolverEncoding","type":"string"},{"internalType":"bytes","name":"encodedCancel","type":"bytes"}],"indexed":false,"internalType":"struct RegisteredTransfer","name":"transfer","type":"tuple"}],"name":"TransferRemoved","type":"event"},{"inputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"address","name":"definition","type":"address"},{"internalType":"string","name":"stateEncoding","type":"string"},{"internalType":"string","name":"resolverEncoding","type":"string"},{"internalType":"bytes","name":"encodedCancel","type":"bytes"}],"internalType":"struct RegisteredTransfer","name":"definition","type":"tuple"}],"name":"addTransferDefinition","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getTransferDefinitions","outputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"address","name":"definition","type":"address"},{"internalType":"string","name":"stateEncoding","type":"string"},{"internalType":"string","name":"resolverEncoding","type":"string"},{"internalType":"bytes","name":"encodedCancel","type":"bytes"}],"internalType":"struct RegisteredTransfer[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"name","type":"string"}],"name":"removeTransferDefinition","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"transactionHash":"0xa91c1d3dfb81a0516aa007f445d9ed36363f409f70530b3b5ca6ee5067f6dfef","receipt":{"to":null,"from":"0x627306090abaB3A6e1400e9345bC60c78a8BEf57","contractAddress":"0x4b86a332d76b21933d245fEF7636B1019EE6C824","transactionIndex":15,"gasUsed":"1239411","logsBloom":"0xblockHash":"0x9cfa41952d73e4a23db8bedd25967f259abf273dad3edbdead42b34786f18b90","transactionHash":"0xa91c1d3dfb81a0516aa007f445d9ed36363f409f70530b3b5ca6ee5067f6dfef","logs":[{"transactionIndex":15,"blockNumber":7772117,"transactionHash":"0xa91c1d3dfb81a0516aa007f445d9ed36363f409f70530b3b5ca6ee5067f6dfef","address":"0x4b86a332d76b21933d245fEF7636B1019EE6C824","topics":["0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","0x0000000000000000000000000000000000000000000000000000000000000000","0x000000000000000000000000627306090abab3a6e1400e9345bc60c78a8bef57"],"data":"0x","logIndex":30,"blockHash":"0x9cfa41952d73e4a23db8bedd25967f259abf273dad3edbdead42b34786f18b90"}],"blockNumber":7772117,"cumulativeGasUsed":"2342650","status":1,"byzantium":true},"args":[],"solcInputHash":"89c55d5a88f10637860a9ea31a1daad3","metadata":"{\\"compiler\\":{\\"version\\":\\"0.7.1+commit.f4a555be\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"previousOwner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"OwnershipTransferred\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"definition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"stateEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"resolverEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedCancel\\",\\"type\\":\\"bytes\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct RegisteredTransfer\\",\\"name\\":\\"transfer\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"TransferAdded\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"definition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"stateEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"resolverEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedCancel\\",\\"type\\":\\"bytes\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct RegisteredTransfer\\",\\"name\\":\\"transfer\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"TransferRemoved\\",\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"definition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"stateEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"resolverEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedCancel\\",\\"type\\":\\"bytes\\"}],\\"internalType\\":\\"struct RegisteredTransfer\\",\\"name\\":\\"definition\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"addTransferDefinition\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getTransferDefinitions\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"definition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"stateEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"resolverEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedCancel\\",\\"type\\":\\"bytes\\"}],\\"internalType\\":\\"struct RegisteredTransfer[]\\",\\"name\\":\\"\\",\\"type\\":\\"tuple[]\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"owner\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"}],\\"name\\":\\"removeTransferDefinition\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"renounceOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"transferOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"author\\":\\"Connext <support@connext.network>\\",\\"kind\\":\\"dev\\",\\"methods\\":{\\"addTransferDefinition((string,address,string,string,bytes))\\":{\\"details\\":\\"Should add a transfer definition to the registry\\"},\\"getTransferDefinitions()\\":{\\"details\\":\\"Should return all transfer defintions in registry\\"},\\"owner()\\":{\\"details\\":\\"Returns the address of the current owner.\\"},\\"removeTransferDefinition(string)\\":{\\"details\\":\\"Should remove a transfer definition from the registry\\"},\\"renounceOwnership()\\":{\\"details\\":\\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\\"},\\"transferOwnership(address)\\":{\\"details\\":\\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\\"}},\\"title\\":\\"TransferRegistry\\",\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"notice\\":\\"The TransferRegistry maintains an onchain record of all         supported transfers (specifically holds the registry information         defined within the contracts). The offchain protocol uses         this information to get the correct encodings when generating         signatures. The information stored here can only be updated         by the owner of the contract\\",\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"src.sol/TransferRegistry.sol\\":\\"TransferRegistry\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/GSN/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/*\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with GSN meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address payable) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes memory) {\\\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x910a2e625b71168563edf9eeef55a50d6d699acfe27ceba3921f291829a8f938\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/access/Ownable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\nimport \\\\\\"../GSN/Context.sol\\\\\\";\\\\n/**\\\\n * @dev Contract module which provides a basic access control mechanism, where\\\\n * there is an account (an owner) that can be granted exclusive access to\\\\n * specific functions.\\\\n *\\\\n * By default, the owner account will be the one that deploys the contract. This\\\\n * can later be changed with {transferOwnership}.\\\\n *\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\\\n * the owner.\\\\n */\\\\ncontract Ownable is Context {\\\\n    address private _owner;\\\\n\\\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\\\n\\\\n    /**\\\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\\\n     */\\\\n    constructor () {\\\\n        address msgSender = _msgSender();\\\\n        _owner = msgSender;\\\\n        emit OwnershipTransferred(address(0), msgSender);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the address of the current owner.\\\\n     */\\\\n    function owner() public view returns (address) {\\\\n        return _owner;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the owner.\\\\n     */\\\\n    modifier onlyOwner() {\\\\n        require(_owner == _msgSender(), \\\\\\"Ownable: caller is not the owner\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Leaves the contract without owner. It will not be possible to call\\\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\\\n     *\\\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\\\n     * thereby removing any functionality that is only available to the owner.\\\\n     */\\\\n    function renounceOwnership() public virtual onlyOwner {\\\\n        emit OwnershipTransferred(_owner, address(0));\\\\n        _owner = address(0);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\\\n     * Can only be called by the current owner.\\\\n     */\\\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\\\n        require(newOwner != address(0), \\\\\\"Ownable: new owner is the zero address\\\\\\");\\\\n        emit OwnershipTransferred(_owner, newOwner);\\\\n        _owner = newOwner;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x74b0525c81e47810f1bd795755962bdb84de3a4f71cfcb063f4c4d4999a3e96b\\",\\"license\\":\\"MIT\\"},\\"src.sol/TransferRegistry.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/ITransferRegistry.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibIterableMapping.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/access/Ownable.sol\\\\\\";\\\\n\\\\n/// @title TransferRegistry\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice The TransferRegistry maintains an onchain record of all\\\\n///         supported transfers (specifically holds the registry information\\\\n///         defined within the contracts). The offchain protocol uses\\\\n///         this information to get the correct encodings when generating\\\\n///         signatures. The information stored here can only be updated\\\\n///         by the owner of the contract\\\\n\\\\ncontract TransferRegistry is Ownable, ITransferRegistry {\\\\n    using LibIterableMapping for LibIterableMapping.IterableMapping;\\\\n\\\\n    LibIterableMapping.IterableMapping transfers;\\\\n\\\\n    /// @dev Should add a transfer definition to the registry\\\\n    function addTransferDefinition(RegisteredTransfer memory definition)\\\\n        external\\\\n        override\\\\n        onlyOwner\\\\n    {\\\\n        // Get index transfer will be added at\\\\n        uint256 idx = transfers.length();\\\\n        \\\\n        // Add registered transfer\\\\n        transfers.addTransferDefinition(definition);\\\\n\\\\n        // Emit event\\\\n        emit TransferAdded(transfers.getTransferDefinitionByIndex(idx));\\\\n    }\\\\n\\\\n    /// @dev Should remove a transfer definition from the registry\\\\n    function removeTransferDefinition(string memory name)\\\\n        external\\\\n        override\\\\n        onlyOwner\\\\n    {\\\\n        // Get transfer from library to remove for event\\\\n        RegisteredTransfer memory transfer = transfers.getTransferDefinitionByName(name);\\\\n\\\\n        // Remove transfer\\\\n        transfers.removeTransferDefinition(name);\\\\n\\\\n        // Emit event\\\\n        emit TransferRemoved(transfer);\\\\n    }\\\\n\\\\n    /// @dev Should return all transfer defintions in registry\\\\n    function getTransferDefinitions()\\\\n        external\\\\n        view\\\\n        override\\\\n        returns (RegisteredTransfer[] memory)\\\\n    {\\\\n        return transfers.getTransferDefinitions();\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe0bbdc74c5635a2b21ab1a0f2b4ebb377af048f05cc2bab70f645ac826984382\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ITransferRegistry.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental \\\\\\"ABIEncoderV2\\\\\\";\\\\n\\\\nstruct RegisteredTransfer {\\\\n    string name;\\\\n    address definition;\\\\n    string stateEncoding;\\\\n    string resolverEncoding;\\\\n    bytes encodedCancel;\\\\n}\\\\n\\\\ninterface ITransferRegistry {\\\\n    event TransferAdded(RegisteredTransfer transfer);\\\\n\\\\n    event TransferRemoved(RegisteredTransfer transfer);\\\\n\\\\n    // Should add a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function addTransferDefinition(RegisteredTransfer memory transfer) external;\\\\n\\\\n    // Should remove a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function removeTransferDefinition(string memory name) external;\\\\n\\\\n    // Should return all transfer defintions in registry\\\\n    function getTransferDefinitions()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer[] memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd13be6d976c64e381a0d9df10c621cd964454b6916f25df4ea6c1b4cd873a58a\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibIterableMapping.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"../interfaces/ITransferRegistry.sol\\\\\\";\\\\n\\\\n/// @title LibIterableMapping\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This library provides an efficient way to store and retrieve\\\\n///         RegisteredTransfers. This contract is used to manage the transfers\\\\n///         stored by `TransferRegistry.sol`\\\\nlibrary LibIterableMapping {\\\\n    struct TransferDefinitionWithIndex {\\\\n        RegisteredTransfer transfer;\\\\n        uint256 index;\\\\n    }\\\\n\\\\n    struct IterableMapping {\\\\n        mapping(string => TransferDefinitionWithIndex) transfers;\\\\n        string[] names;\\\\n    }\\\\n\\\\n    function stringEqual(string memory s, string memory t)\\\\n        internal\\\\n        pure\\\\n        returns (bool)\\\\n    {\\\\n        return keccak256(abi.encodePacked(s)) == keccak256(abi.encodePacked(t));\\\\n    }\\\\n\\\\n    function isEmptyString(string memory s) internal pure returns (bool) {\\\\n        return stringEqual(s, \\\\\\"\\\\\\");\\\\n    }\\\\n\\\\n    function nameExists(IterableMapping storage self, string memory name)\\\\n        internal\\\\n        view\\\\n        returns (bool)\\\\n    {\\\\n        return\\\\n            !isEmptyString(name) &&\\\\n            self.names.length != 0 &&\\\\n            stringEqual(self.names[self.transfers[name].index], name);\\\\n    }\\\\n\\\\n    function length(IterableMapping storage self)\\\\n        internal\\\\n        view\\\\n        returns (uint256)\\\\n    {\\\\n        return self.names.length;\\\\n    }\\\\n\\\\n    function getTransferDefinitionByName(\\\\n        IterableMapping storage self,\\\\n        string memory name\\\\n    ) internal view returns (RegisteredTransfer memory) {\\\\n        require(nameExists(self, name), \\\\\\"LibIterableMapping: NAME_NOT_FOUND\\\\\\");\\\\n        return self.transfers[name].transfer;\\\\n    }\\\\n\\\\n    function getTransferDefinitionByIndex(\\\\n        IterableMapping storage self,\\\\n        uint256 index\\\\n    ) internal view returns (RegisteredTransfer memory) {\\\\n        require(index < self.names.length, \\\\\\"LibIterableMapping: INVALID_INDEX\\\\\\");\\\\n        return self.transfers[self.names[index]].transfer;\\\\n    }\\\\n\\\\n    function getTransferDefinitions(IterableMapping storage self)\\\\n        internal\\\\n        view\\\\n        returns (RegisteredTransfer[] memory)\\\\n    {\\\\n        uint256 l = self.names.length;\\\\n        RegisteredTransfer[] memory transfers = new RegisteredTransfer[](l);\\\\n        for (uint256 i = 0; i < l; i++) {\\\\n            transfers[i] = self.transfers[self.names[i]].transfer;\\\\n        }\\\\n        return transfers;\\\\n    }\\\\n\\\\n    function addTransferDefinition(\\\\n        IterableMapping storage self,\\\\n        RegisteredTransfer memory transfer\\\\n    ) internal {\\\\n        string memory name = transfer.name;\\\\n        require(!isEmptyString(name), \\\\\\"LibIterableMapping: EMPTY_NAME\\\\\\");\\\\n        require(!nameExists(self, name), \\\\\\"LibIterableMapping: NAME_ALREADY_ADDED\\\\\\");\\\\n        self.transfers[name] = TransferDefinitionWithIndex({\\\\n            transfer: transfer,\\\\n            index: self.names.length\\\\n        });\\\\n        self.names.push(name);\\\\n    }\\\\n\\\\n    function removeTransferDefinition(\\\\n        IterableMapping storage self,\\\\n        string memory name\\\\n    ) internal {\\\\n        require(!isEmptyString(name), \\\\\\"LibIterableMapping: EMPTY_NAME\\\\\\");\\\\n        require(nameExists(self, name), \\\\\\"LibIterableMapping: NAME_NOT_FOUND\\\\\\");\\\\n        uint256 index = self.transfers[name].index;\\\\n        string memory lastName = self.names[self.names.length - 1];\\\\n        self.transfers[lastName].index = index;\\\\n        self.names[index] = lastName;\\\\n        delete self.transfers[name];\\\\n        self.names.pop();\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x52d4a240bb76e9892af1ecbf6cf72995890db0b115a36a54e1b0115f0f47ce8a\\",\\"license\\":\\"UNLICENSED\\"}},\\"version\\":1}","bytecode":"0x608060405234801561001057600080fd5b50600061001b61006a565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35061006e565b3390565b6115078061007d6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806355304c3f14610067578063715018a61461007c5780638da5cb5b14610084578063961bf9b1146100a2578063c9ff4d25146100b5578063f2fde38b146100ca575b600080fd5b61007a610075366004611061565b6100dd565b005b61007a610179565b61008c6101f8565b604051610099919061127c565b60405180910390f35b61007a6100b0366004611026565b610207565b6100bd61028b565b6040516100999190611290565b61007a6100d836600461100b565b61029c565b6100e5610352565b6000546001600160a01b0390811691161461011b5760405162461bcd60e51b81526004016101129061137c565b60405180910390fd5b60006101276001610356565b905061013460018361035d565b7fcdbba5dd6bffbe47d5f74dbed3cf4a2174815c7186eaa49b32f97af4c47543bf6101606001836104af565b60405161016d919061146b565b60405180910390a15050565b610181610352565b6000546001600160a01b039081169116146101ae5760405162461bcd60e51b81526004016101129061137c565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b61020f610352565b6000546001600160a01b0390811691161461023c5760405162461bcd60e51b81526004016101129061137c565b610244610e79565b61024f600183610783565b905061025c6001836107c1565b7fdc44d9d985df00268149ae57add485c612e57109279f8485035dbe2b2251222b8160405161016d919061146b565b606061029760016109df565b905090565b6102a4610352565b6000546001600160a01b039081169116146102d15760405162461bcd60e51b81526004016101129061137c565b6001600160a01b0381166102f75760405162461bcd60e51b8152600401610112906112f0565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6001015490565b805161036881610d0e565b156103855760405162461bcd60e51b8152600401610112906113b1565b61038f8382610d29565b156103ac5760405162461bcd60e51b815260040161011290611336565b60408051808201825283815260018501546020820152905184906103d19084906111f0565b908152604051602091819003820190208251805180519293919284926103fb928492910190610eb1565b506020828101516001830180546001600160a01b0319166001600160a01b039092169190911790556040830151805161043a9260028501920190610eb1565b5060608201518051610456916003840191602090910190610eb1565b5060808201518051610472916004840191602090910190610eb1565b505050602091820151600590910155600180850180549182018155600090815282902083516104a993919092019190840190610eb1565b50505050565b6104b7610e79565b600183015482106104da5760405162461bcd60e51b8152600401610112906113e8565b826000018360010183815481106104ed57fe5b90600052602060002001604051610504919061120c565b9081526040805160209281900383018120805460026001821615610100026000190190911604601f8101859004909402820160c090810190935260a0820184815291939092849291849184018282801561059f5780601f106105745761010080835404028352916020019161059f565b820191906000526020600020905b81548152906001019060200180831161058257829003601f168201915b50505091835250506001828101546001600160a01b0316602080840191909152600280850180546040805161010096831615969096026000190190911692909204601f810184900484028501840183528085529190940193918301828280156106495780601f1061061e57610100808354040283529160200191610649565b820191906000526020600020905b81548152906001019060200180831161062c57829003601f168201915b505050918352505060038201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156106dd5780601f106106b2576101008083540402835291602001916106dd565b820191906000526020600020905b8154815290600101906020018083116106c057829003601f168201915b505050918352505060048201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156107715780601f1061074657610100808354040283529160200191610771565b820191906000526020600020905b81548152906001019060200180831161075457829003601f168201915b50505050508152505090505b92915050565b61078b610e79565b6107958383610d29565b6107b15760405162461bcd60e51b815260040161011290611429565b60405183906105049084906111f0565b6107ca81610d0e565b156107e75760405162461bcd60e51b8152600401610112906113b1565b6107f18282610d29565b61080d5760405162461bcd60e51b815260040161011290611429565b6000826000018260405161082191906111f0565b90815260405190819003602001902060050154600184018054919250606091600019810190811061084e57fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156108dc5780601f106108b1576101008083540402835291602001916108dc565b820191906000526020600020905b8154815290600101906020018083116108bf57829003601f168201915b505050505090508184600001826040516108f691906111f0565b9081526020016040518091039020600501819055508084600101838154811061091b57fe5b906000526020600020019080519060200190610938929190610eb1565b5060405184906109499085906111f0565b908152604051908190036020019020600081816109668282610f2f565b6001820180546001600160a01b0319169055610986600283016000610f2f565b610994600383016000610f2f565b6109a2600483016000610f2f565b505060058201600090555050836001018054806109bb57fe5b6001900381819060005260206000200160006109d79190610f2f565b905550505050565b6001810154606090818167ffffffffffffffff811180156109ff57600080fd5b50604051908082528060200260200182016040528015610a3957816020015b610a26610e79565b815260200190600190039081610a1e5790505b50905060005b82811015610d065784600001856001018281548110610a5a57fe5b90600052602060002001604051610a71919061120c565b9081526040805160209281900383018120805460026001821615610100026000190190911604601f8101859004909402820160c090810190935260a08201848152919390928492918491840182828015610b0c5780601f10610ae157610100808354040283529160200191610b0c565b820191906000526020600020905b815481529060010190602001808311610aef57829003601f168201915b50505091835250506001828101546001600160a01b0316602080840191909152600280850180546040805161010096831615969096026000190190911692909204601f81018490048402850184018352808552919094019391830182828015610bb65780601f10610b8b57610100808354040283529160200191610bb6565b820191906000526020600020905b815481529060010190602001808311610b9957829003601f168201915b505050918352505060038201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015610c4a5780601f10610c1f57610100808354040283529160200191610c4a565b820191906000526020600020905b815481529060010190602001808311610c2d57829003601f168201915b505050918352505060048201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015610cde5780601f10610cb357610100808354040283529160200191610cde565b820191906000526020600020905b815481529060010190602001808311610cc157829003601f168201915b505050505081525050828281518110610cf357fe5b6020908102919091010152600101610a3f565b509392505050565b600061077d8260405180602001604052806000815250610e20565b6000610d3482610d0e565b158015610d445750600183015415155b8015610e195750610e19836001018460000184604051610d6491906111f0565b90815260200160405180910390206005015481548110610d8057fe5b600091825260209182902001805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015610e0e5780601f10610de357610100808354040283529160200191610e0e565b820191906000526020600020905b815481529060010190602001808311610df157829003601f168201915b505050505083610e20565b9392505050565b600081604051602001610e3391906111f0565b6040516020818303038152906040528051906020012083604051602001610e5a91906111f0565b6040516020818303038152906040528051906020012014905092915050565b6040518060a001604052806060815260200160006001600160a01b031681526020016060815260200160608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610ef257805160ff1916838001178555610f1f565b82800160010185558215610f1f579182015b82811115610f1f578251825591602001919060010190610f04565b50610f2b929150610f76565b5090565b50805460018160011615610100020316600290046000825580601f10610f555750610f73565b601f016020900490600052602060002090810190610f739190610f76565b50565b5b80821115610f2b5760008155600101610f77565b80356001600160a01b038116811461077d57600080fd5b600082601f830112610fb2578081fd5b813567ffffffffffffffff811115610fc8578182fd5b610fdb601f8201601f191660200161147e565b9150808252836020828501011115610ff257600080fd5b8060208401602084013760009082016020015292915050565b60006020828403121561101c578081fd5b610e198383610f8b565b600060208284031215611037578081fd5b813567ffffffffffffffff81111561104d578182fd5b61105984828501610fa2565b949350505050565b600060208284031215611072578081fd5b813567ffffffffffffffff80821115611089578283fd5b9083019060a0828603121561109c578283fd5b6110a660a061147e565b8235828111156110b4578485fd5b6110c087828601610fa2565b8252506110d08660208501610f8b565b60208201526040830135828111156110e6578485fd5b6110f287828601610fa2565b604083015250606083013582811115611109578485fd5b61111587828601610fa2565b60608301525060808301358281111561112c578485fd5b61113887828601610fa2565b60808301525095945050505050565b6000815180845261115f8160208601602086016114a5565b601f01601f19169290920160200192915050565b6000815160a0845261118860a0850182611147565b905060018060a01b036020840151166020850152604083015184820360408601526111b38282611147565b915050606083015184820360608601526111cd8282611147565b915050608083015184820360808601526111e78282611147565b95945050505050565b600082516112028184602087016114a5565b9190910192915050565b600080835460018082166000811461122b576001811461124257611271565b60ff198316865260028304607f1686019350611271565b600283048786526020808720875b838110156112695781548a820152908501908201611250565b505050860193505b509195945050505050565b6001600160a01b0391909116815260200190565b6000602080830181845280855180835260408601915060408482028701019250838701855b828110156112e357603f198886030184526112d1858351611173565b945092850192908501906001016112b5565b5092979650505050505050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526026908201527f4c69624974657261626c654d617070696e673a204e414d455f414c524541445960408201526517d05111115160d21b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601e908201527f4c69624974657261626c654d617070696e673a20454d5054595f4e414d450000604082015260600190565b60208082526021908201527f4c69624974657261626c654d617070696e673a20494e56414c49445f494e44456040820152600b60fb1b606082015260800190565b60208082526022908201527f4c69624974657261626c654d617070696e673a204e414d455f4e4f545f464f55604082015261139160f21b606082015260800190565b600060208252610e196020830184611173565b60405181810167ffffffffffffffff8111828210171561149d57600080fd5b604052919050565b60005b838110156114c05781810151838201526020016114a8565b838111156104a9575050600091015256fea26469706673582212207ffce686b133899c962d2392c37d7cc417bfb49017cb433d19d525b065f0f46d64736f6c63430007010033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106100625760003560e01c806355304c3f14610067578063715018a61461007c5780638da5cb5b14610084578063961bf9b1146100a2578063c9ff4d25146100b5578063f2fde38b146100ca575b600080fd5b61007a610075366004611061565b6100dd565b005b61007a610179565b61008c6101f8565b604051610099919061127c565b60405180910390f35b61007a6100b0366004611026565b610207565b6100bd61028b565b6040516100999190611290565b61007a6100d836600461100b565b61029c565b6100e5610352565b6000546001600160a01b0390811691161461011b5760405162461bcd60e51b81526004016101129061137c565b60405180910390fd5b60006101276001610356565b905061013460018361035d565b7fcdbba5dd6bffbe47d5f74dbed3cf4a2174815c7186eaa49b32f97af4c47543bf6101606001836104af565b60405161016d919061146b565b60405180910390a15050565b610181610352565b6000546001600160a01b039081169116146101ae5760405162461bcd60e51b81526004016101129061137c565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b61020f610352565b6000546001600160a01b0390811691161461023c5760405162461bcd60e51b81526004016101129061137c565b610244610e79565b61024f600183610783565b905061025c6001836107c1565b7fdc44d9d985df00268149ae57add485c612e57109279f8485035dbe2b2251222b8160405161016d919061146b565b606061029760016109df565b905090565b6102a4610352565b6000546001600160a01b039081169116146102d15760405162461bcd60e51b81526004016101129061137c565b6001600160a01b0381166102f75760405162461bcd60e51b8152600401610112906112f0565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6001015490565b805161036881610d0e565b156103855760405162461bcd60e51b8152600401610112906113b1565b61038f8382610d29565b156103ac5760405162461bcd60e51b815260040161011290611336565b60408051808201825283815260018501546020820152905184906103d19084906111f0565b908152604051602091819003820190208251805180519293919284926103fb928492910190610eb1565b506020828101516001830180546001600160a01b0319166001600160a01b039092169190911790556040830151805161043a9260028501920190610eb1565b5060608201518051610456916003840191602090910190610eb1565b5060808201518051610472916004840191602090910190610eb1565b505050602091820151600590910155600180850180549182018155600090815282902083516104a993919092019190840190610eb1565b50505050565b6104b7610e79565b600183015482106104da5760405162461bcd60e51b8152600401610112906113e8565b826000018360010183815481106104ed57fe5b90600052602060002001604051610504919061120c565b9081526040805160209281900383018120805460026001821615610100026000190190911604601f8101859004909402820160c090810190935260a0820184815291939092849291849184018282801561059f5780601f106105745761010080835404028352916020019161059f565b820191906000526020600020905b81548152906001019060200180831161058257829003601f168201915b50505091835250506001828101546001600160a01b0316602080840191909152600280850180546040805161010096831615969096026000190190911692909204601f810184900484028501840183528085529190940193918301828280156106495780601f1061061e57610100808354040283529160200191610649565b820191906000526020600020905b81548152906001019060200180831161062c57829003601f168201915b505050918352505060038201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156106dd5780601f106106b2576101008083540402835291602001916106dd565b820191906000526020600020905b8154815290600101906020018083116106c057829003601f168201915b505050918352505060048201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156107715780601f1061074657610100808354040283529160200191610771565b820191906000526020600020905b81548152906001019060200180831161075457829003601f168201915b50505050508152505090505b92915050565b61078b610e79565b6107958383610d29565b6107b15760405162461bcd60e51b815260040161011290611429565b60405183906105049084906111f0565b6107ca81610d0e565b156107e75760405162461bcd60e51b8152600401610112906113b1565b6107f18282610d29565b61080d5760405162461bcd60e51b815260040161011290611429565b6000826000018260405161082191906111f0565b90815260405190819003602001902060050154600184018054919250606091600019810190811061084e57fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156108dc5780601f106108b1576101008083540402835291602001916108dc565b820191906000526020600020905b8154815290600101906020018083116108bf57829003601f168201915b505050505090508184600001826040516108f691906111f0565b9081526020016040518091039020600501819055508084600101838154811061091b57fe5b906000526020600020019080519060200190610938929190610eb1565b5060405184906109499085906111f0565b908152604051908190036020019020600081816109668282610f2f565b6001820180546001600160a01b0319169055610986600283016000610f2f565b610994600383016000610f2f565b6109a2600483016000610f2f565b505060058201600090555050836001018054806109bb57fe5b6001900381819060005260206000200160006109d79190610f2f565b905550505050565b6001810154606090818167ffffffffffffffff811180156109ff57600080fd5b50604051908082528060200260200182016040528015610a3957816020015b610a26610e79565b815260200190600190039081610a1e5790505b50905060005b82811015610d065784600001856001018281548110610a5a57fe5b90600052602060002001604051610a71919061120c565b9081526040805160209281900383018120805460026001821615610100026000190190911604601f8101859004909402820160c090810190935260a08201848152919390928492918491840182828015610b0c5780601f10610ae157610100808354040283529160200191610b0c565b820191906000526020600020905b815481529060010190602001808311610aef57829003601f168201915b50505091835250506001828101546001600160a01b0316602080840191909152600280850180546040805161010096831615969096026000190190911692909204601f81018490048402850184018352808552919094019391830182828015610bb65780601f10610b8b57610100808354040283529160200191610bb6565b820191906000526020600020905b815481529060010190602001808311610b9957829003601f168201915b505050918352505060038201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015610c4a5780601f10610c1f57610100808354040283529160200191610c4a565b820191906000526020600020905b815481529060010190602001808311610c2d57829003601f168201915b505050918352505060048201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015610cde5780601f10610cb357610100808354040283529160200191610cde565b820191906000526020600020905b815481529060010190602001808311610cc157829003601f168201915b505050505081525050828281518110610cf357fe5b6020908102919091010152600101610a3f565b509392505050565b600061077d8260405180602001604052806000815250610e20565b6000610d3482610d0e565b158015610d445750600183015415155b8015610e195750610e19836001018460000184604051610d6491906111f0565b90815260200160405180910390206005015481548110610d8057fe5b600091825260209182902001805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015610e0e5780601f10610de357610100808354040283529160200191610e0e565b820191906000526020600020905b815481529060010190602001808311610df157829003601f168201915b505050505083610e20565b9392505050565b600081604051602001610e3391906111f0565b6040516020818303038152906040528051906020012083604051602001610e5a91906111f0565b6040516020818303038152906040528051906020012014905092915050565b6040518060a001604052806060815260200160006001600160a01b031681526020016060815260200160608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610ef257805160ff1916838001178555610f1f565b82800160010185558215610f1f579182015b82811115610f1f578251825591602001919060010190610f04565b50610f2b929150610f76565b5090565b50805460018160011615610100020316600290046000825580601f10610f555750610f73565b601f016020900490600052602060002090810190610f739190610f76565b50565b5b80821115610f2b5760008155600101610f77565b80356001600160a01b038116811461077d57600080fd5b600082601f830112610fb2578081fd5b813567ffffffffffffffff811115610fc8578182fd5b610fdb601f8201601f191660200161147e565b9150808252836020828501011115610ff257600080fd5b8060208401602084013760009082016020015292915050565b60006020828403121561101c578081fd5b610e198383610f8b565b600060208284031215611037578081fd5b813567ffffffffffffffff81111561104d578182fd5b61105984828501610fa2565b949350505050565b600060208284031215611072578081fd5b813567ffffffffffffffff80821115611089578283fd5b9083019060a0828603121561109c578283fd5b6110a660a061147e565b8235828111156110b4578485fd5b6110c087828601610fa2565b8252506110d08660208501610f8b565b60208201526040830135828111156110e6578485fd5b6110f287828601610fa2565b604083015250606083013582811115611109578485fd5b61111587828601610fa2565b60608301525060808301358281111561112c578485fd5b61113887828601610fa2565b60808301525095945050505050565b6000815180845261115f8160208601602086016114a5565b601f01601f19169290920160200192915050565b6000815160a0845261118860a0850182611147565b905060018060a01b036020840151166020850152604083015184820360408601526111b38282611147565b915050606083015184820360608601526111cd8282611147565b915050608083015184820360808601526111e78282611147565b95945050505050565b600082516112028184602087016114a5565b9190910192915050565b600080835460018082166000811461122b576001811461124257611271565b60ff198316865260028304607f1686019350611271565b600283048786526020808720875b838110156112695781548a820152908501908201611250565b505050860193505b509195945050505050565b6001600160a01b0391909116815260200190565b6000602080830181845280855180835260408601915060408482028701019250838701855b828110156112e357603f198886030184526112d1858351611173565b945092850192908501906001016112b5565b5092979650505050505050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526026908201527f4c69624974657261626c654d617070696e673a204e414d455f414c524541445960408201526517d05111115160d21b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601e908201527f4c69624974657261626c654d617070696e673a20454d5054595f4e414d450000604082015260600190565b60208082526021908201527f4c69624974657261626c654d617070696e673a20494e56414c49445f494e44456040820152600b60fb1b606082015260800190565b60208082526022908201527f4c69624974657261626c654d617070696e673a204e414d455f4e4f545f464f55604082015261139160f21b606082015260800190565b600060208252610e196020830184611173565b60405181810167ffffffffffffffff8111828210171561149d57600080fd5b604052919050565b60005b838110156114c05781810151838201526020016114a8565b838111156104a9575050600091015256fea26469706673582212207ffce686b133899c962d2392c37d7cc417bfb49017cb433d19d525b065f0f46d64736f6c63430007010033","devdoc":{"author":"Connext <support@connext.network>","kind":"dev","methods":{"addTransferDefinition((string,address,string,string,bytes))":{"details":"Should add a transfer definition to the registry"},"getTransferDefinitions()":{"details":"Should return all transfer defintions in registry"},"owner()":{"details":"Returns the address of the current owner."},"removeTransferDefinition(string)":{"details":"Should remove a transfer definition from the registry"},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"title":"TransferRegistry","version":1},"userdoc":{"kind":"user","methods":{},"notice":"The TransferRegistry maintains an onchain record of all         supported transfers (specifically holds the registry information         defined within the contracts). The offchain protocol uses         this information to get the correct encodings when generating         signatures. The information stored here can only be updated         by the owner of the contract","version":1},"storageLayout":{"storage":[{"astId":30,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":3458,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"transfers","offset":0,"slot":"1","type":"t_struct(IterableMapping)4424_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_string_storage)dyn_storage":{"base":"t_string_storage","encoding":"dynamic_array","label":"string[]","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_mapping(t_string_memory_ptr,t_struct(TransferDefinitionWithIndex)4416_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => struct LibIterableMapping.TransferDefinitionWithIndex)","numberOfBytes":"32","value":"t_struct(TransferDefinitionWithIndex)4416_storage"},"t_string_memory_ptr":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(IterableMapping)4424_storage":{"encoding":"inplace","label":"struct LibIterableMapping.IterableMapping","members":[{"astId":4420,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"transfers","offset":0,"slot":"0","type":"t_mapping(t_string_memory_ptr,t_struct(TransferDefinitionWithIndex)4416_storage)"},{"astId":4423,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"names","offset":0,"slot":"1","type":"t_array(t_string_storage)dyn_storage"}],"numberOfBytes":"64"},"t_struct(RegisteredTransfer)3967_storage":{"encoding":"inplace","label":"struct RegisteredTransfer","members":[{"astId":3958,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":3960,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"definition","offset":0,"slot":"1","type":"t_address"},{"astId":3962,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"stateEncoding","offset":0,"slot":"2","type":"t_string_storage"},{"astId":3964,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"resolverEncoding","offset":0,"slot":"3","type":"t_string_storage"},{"astId":3966,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"encodedCancel","offset":0,"slot":"4","type":"t_bytes_storage"}],"numberOfBytes":"160"},"t_struct(TransferDefinitionWithIndex)4416_storage":{"encoding":"inplace","label":"struct LibIterableMapping.TransferDefinitionWithIndex","members":[{"astId":4413,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"transfer","offset":0,"slot":"0","type":"t_struct(RegisteredTransfer)3967_storage"},{"astId":4415,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"index","offset":0,"slot":"5","type":"t_uint256"}],"numberOfBytes":"192"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}}}')},2805:function(e){e.exports=JSON.parse('{"address":"0x283bb08f3C4C49E2Ec5e968b64c95Aa001dC1083","abi":[{"inputs":[],"name":"EncodedCancel","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"Name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ResolverEncoding","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"StateEncoding","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"encodedBalance","type":"bytes"},{"internalType":"bytes","name":"encodedState","type":"bytes"}],"name":"create","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"getRegistryInformation","outputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"address","name":"definition","type":"address"},{"internalType":"string","name":"stateEncoding","type":"string"},{"internalType":"string","name":"resolverEncoding","type":"string"},{"internalType":"bytes","name":"encodedCancel","type":"bytes"}],"internalType":"struct RegisteredTransfer","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"encodedBalance","type":"bytes"},{"internalType":"bytes","name":"encodedState","type":"bytes"},{"internalType":"bytes","name":"encodedResolver","type":"bytes"}],"name":"resolve","outputs":[{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"}],"transactionHash":"0x79cba27a8df353674bfdad2890fc7e102e467c2ab38e149c159f8771e48f2d73","receipt":{"to":null,"from":"0x627306090abaB3A6e1400e9345bC60c78a8BEf57","contractAddress":"0x283bb08f3C4C49E2Ec5e968b64c95Aa001dC1083","transactionIndex":18,"gasUsed":"1069621","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","blockHash":"0x8a1e2c9a04fdf68c7efcd6b7e2cdcdf2b8b78da1780e78c23e5f430f84d97f6b","transactionHash":"0x79cba27a8df353674bfdad2890fc7e102e467c2ab38e149c159f8771e48f2d73","logs":[],"blockNumber":7772116,"cumulativeGasUsed":"2941842","status":1,"byzantium":true},"args":[],"solcInputHash":"89c55d5a88f10637860a9ea31a1daad3","metadata":"{\\"compiler\\":{\\"version\\":\\"0.7.1+commit.f4a555be\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[],\\"name\\":\\"EncodedCancel\\",\\"outputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"\\",\\"type\\":\\"bytes\\"}],\\"stateMutability\\":\\"pure\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"Name\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"ResolverEncoding\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"StateEncoding\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedBalance\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedState\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"create\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"pure\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getRegistryInformation\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"definition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"stateEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"resolverEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedCancel\\",\\"type\\":\\"bytes\\"}],\\"internalType\\":\\"struct RegisteredTransfer\\",\\"name\\":\\"\\",\\"type\\":\\"tuple\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedBalance\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedState\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedResolver\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"resolve\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"\\",\\"type\\":\\"tuple\\"}],\\"stateMutability\\":\\"pure\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"author\\":\\"Connext <support@connext.network>\\",\\"kind\\":\\"dev\\",\\"methods\\":{},\\"title\\":\\"Withdraw\\",\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"notice\\":\\"This contract burns the initiator\'s funds if a mutually signed         withdraw commitment can be generated\\",\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"src.sol/transferDefinitions/Withdraw.sol\\":\\"Withdraw\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\\\n *\\\\n * These functions can be used to verify that a message was signed by the holder\\\\n * of the private keys of a given address.\\\\n */\\\\nlibrary ECDSA {\\\\n    /**\\\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\\\n     * `signature`. This address can then be used for verification purposes.\\\\n     *\\\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\\\n     * this function rejects them by requiring the `s` value to be in the lower\\\\n     * half order, and the `v` value to be either 27 or 28.\\\\n     *\\\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\\\n     * verification to be secure: it is possible to craft signatures that\\\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\\\n     * this is by receiving a hash of the original message (which may otherwise\\\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\\\n     */\\\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\\\n        // Check the signature length\\\\n        if (signature.length != 65) {\\\\n            revert(\\\\\\"ECDSA: invalid signature length\\\\\\");\\\\n        }\\\\n\\\\n        // Divide the signature in r, s and v variables\\\\n        bytes32 r;\\\\n        bytes32 s;\\\\n        uint8 v;\\\\n\\\\n        // ecrecover takes the signature parameters, and the only way to get them\\\\n        // currently is to use assembly.\\\\n        // solhint-disable-next-line no-inline-assembly\\\\n        assembly {\\\\n            r := mload(add(signature, 0x20))\\\\n            s := mload(add(signature, 0x40))\\\\n            v := byte(0, mload(add(signature, 0x60)))\\\\n        }\\\\n\\\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\\\n        // the valid range for s in (281): 0 < s < secp256k1n \\\\u00f7 2 + 1, and for v in (282): v \\\\u2208 {27, 28}. Most\\\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\\\n        //\\\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\\\n        // these malleable signatures as well.\\\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\\\n            revert(\\\\\\"ECDSA: invalid signature \'s\' value\\\\\\");\\\\n        }\\\\n\\\\n        if (v != 27 && v != 28) {\\\\n            revert(\\\\\\"ECDSA: invalid signature \'v\' value\\\\\\");\\\\n        }\\\\n\\\\n        // If the signature is valid (and not malleable), return the signer address\\\\n        address signer = ecrecover(hash, v, r, s);\\\\n        require(signer != address(0), \\\\\\"ECDSA: invalid signature\\\\\\");\\\\n\\\\n        return signer;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\\\n     * replicates the behavior of the\\\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\\\n     * JSON-RPC method.\\\\n     *\\\\n     * See {recover}.\\\\n     */\\\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\\\n        // 32 is the length in bytes of hash,\\\\n        // enforced by the type signature above\\\\n        return keccak256(abi.encodePacked(\\\\\\"\\\\\\\\x19Ethereum Signed Message:\\\\\\\\n32\\\\\\", hash));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf25c49d2be2d28918ae6de7e9724238367dabe50631ec8fd23d1cdae2cb70262\\",\\"license\\":\\"MIT\\"},\\"src.sol/interfaces/ITransferDefinition.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./ITransferRegistry.sol\\\\\\";\\\\nimport \\\\\\"./Types.sol\\\\\\";\\\\n\\\\ninterface ITransferDefinition {\\\\n    // Validates the initial state of the transfer.\\\\n    // Called by validator.ts during `create` updates.\\\\n    function create(bytes calldata encodedBalance, bytes calldata)\\\\n        external\\\\n        view\\\\n        returns (bool);\\\\n\\\\n    // Performs a state transition to resolve a transfer and returns final balances.\\\\n    // Called by validator.ts during `resolve` updates.\\\\n    function resolve(\\\\n        bytes calldata encodedBalance,\\\\n        bytes calldata,\\\\n        bytes calldata\\\\n    ) external view returns (Balance memory);\\\\n\\\\n    // Should also have the following properties:\\\\n    // string public constant override Name = \\\\\\"...\\\\\\";\\\\n    // string public constant override StateEncoding = \\\\\\"...\\\\\\";\\\\n    // string public constant override ResolverEncoding = \\\\\\"...\\\\\\";\\\\n    // These properties are included on the transfer specifically\\\\n    // to make it easier for implementers to add new transfers by\\\\n    // only include a `.sol` file\\\\n    function Name() external view returns (string memory);\\\\n\\\\n    function StateEncoding() external view returns (string memory);\\\\n\\\\n    function ResolverEncoding() external view returns (string memory);\\\\n\\\\n    function EncodedCancel() external view returns (bytes memory);\\\\n\\\\n    function getRegistryInformation()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd8eef575aa791b187397c9096e6cf40431b590d3999f0a80e38f3e59f4cf4764\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ITransferRegistry.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental \\\\\\"ABIEncoderV2\\\\\\";\\\\n\\\\nstruct RegisteredTransfer {\\\\n    string name;\\\\n    address definition;\\\\n    string stateEncoding;\\\\n    string resolverEncoding;\\\\n    bytes encodedCancel;\\\\n}\\\\n\\\\ninterface ITransferRegistry {\\\\n    event TransferAdded(RegisteredTransfer transfer);\\\\n\\\\n    event TransferRemoved(RegisteredTransfer transfer);\\\\n\\\\n    // Should add a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function addTransferDefinition(RegisteredTransfer memory transfer) external;\\\\n\\\\n    // Should remove a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function removeTransferDefinition(string memory name) external;\\\\n\\\\n    // Should return all transfer defintions in registry\\\\n    function getTransferDefinitions()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer[] memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd13be6d976c64e381a0d9df10c621cd964454b6916f25df4ea6c1b4cd873a58a\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/Types.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nstruct Balance {\\\\n    uint256[2] amount; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n    address payable[2] to; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf8c71b155b630cde965f5d1db5f0d2751a9763f5a797f15d946613e9224f1046\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibChannelCrypto.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\\\\\";\\\\n\\\\t\\\\t\\\\n/// @author Connext <support@connext.network>\\\\t\\\\t\\\\n/// @notice This library contains helpers for recovering signatures from a\\\\t\\\\t\\\\n///         Vector commitments. Channels do not allow for arbitrary signing of\\\\t\\\\t\\\\n///         messages to prevent misuse of private keys by injected providers,\\\\t\\\\t\\\\n///         and instead only sign messages with a Vector channel prefix.\\\\nlibrary LibChannelCrypto {\\\\n    function checkSignature(\\\\n        bytes32 hash,\\\\n        bytes memory signature,\\\\n        address allegedSigner\\\\n    ) internal pure returns (bool) {\\\\n        return recoverChannelMessageSigner(hash, signature) == allegedSigner;\\\\n    }\\\\n\\\\n    function recoverChannelMessageSigner(bytes32 hash, bytes memory signature)\\\\n        internal\\\\n        pure\\\\n        returns (address)\\\\n    {\\\\n        bytes32 digest = toChannelSignedMessage(hash);\\\\n        return ECDSA.recover(digest, signature);\\\\n    }\\\\n\\\\n    function toChannelSignedMessage(bytes32 hash)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        // 32 is the length in bytes of hash,\\\\n        // enforced by the type signature above\\\\n        return\\\\n            keccak256(abi.encodePacked(\\\\\\"\\\\\\\\x16Vector Signed Message:\\\\\\\\n32\\\\\\", hash));\\\\n    }\\\\n\\\\n    function checkUtilitySignature(\\\\n        bytes32 hash,\\\\n        bytes memory signature,\\\\n        address allegedSigner\\\\n    ) internal pure returns (bool) {\\\\n        return recoverChannelMessageSigner(hash, signature) == allegedSigner;\\\\n    }\\\\n\\\\n    function recoverUtilityMessageSigner(bytes32 hash, bytes memory signature)\\\\n        internal\\\\n        pure\\\\n        returns (address)\\\\n    {\\\\n        bytes32 digest = toUtilitySignedMessage(hash);\\\\n        return ECDSA.recover(digest, signature);\\\\n    }\\\\n\\\\n    function toUtilitySignedMessage(bytes32 hash)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        // 32 is the length in bytes of hash,\\\\n        // enforced by the type signature above\\\\n        return\\\\n            keccak256(abi.encodePacked(\\\\\\"\\\\\\\\x17Utility Signed Message:\\\\\\\\n32\\\\\\", hash));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xb8aa3679b75f2a1a5785f614f5dff9a76a689c18caa56a8df1f4e3c3167d6ece\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/transferDefinitions/TransferDefinition.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"../interfaces/ITransferDefinition.sol\\\\\\";\\\\nimport \\\\\\"../interfaces/ITransferRegistry.sol\\\\\\";\\\\n\\\\n/// @title TransferDefinition\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This contract helps reduce boilerplate needed when creating\\\\n///         new transfer definitions by providing an implementation of\\\\n///         the required getter\\\\n\\\\nabstract contract TransferDefinition is ITransferDefinition {\\\\n    function getRegistryInformation()\\\\n        external\\\\n        view\\\\n        override\\\\n        returns (RegisteredTransfer memory)\\\\n    {\\\\n        return\\\\n            RegisteredTransfer({\\\\n                name: this.Name(),\\\\n                stateEncoding: this.StateEncoding(),\\\\n                resolverEncoding: this.ResolverEncoding(),\\\\n                definition: address(this),\\\\n                encodedCancel: this.EncodedCancel()\\\\n            });\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xdb8bcb3fadd5c514bc6585b0a48d66952570bbb1a62f18b9dc9a4f693dc11c5e\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/transferDefinitions/Withdraw.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./TransferDefinition.sol\\\\\\";\\\\nimport \\\\\\"../lib/LibChannelCrypto.sol\\\\\\";\\\\n\\\\n/// @title Withdraw\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This contract burns the initiator\'s funds if a mutually signed\\\\n///         withdraw commitment can be generated\\\\n\\\\ncontract Withdraw is TransferDefinition {\\\\n    using LibChannelCrypto for bytes32;\\\\n\\\\n    struct TransferState {\\\\n        bytes initiatorSignature;\\\\n        address initiator;\\\\n        address responder;\\\\n        bytes32 data;\\\\n        uint256 nonce; // included so that each withdraw commitment has a unique hash\\\\n        uint256 fee;\\\\n        address callTo;\\\\n        bytes callData;\\\\n    }\\\\n\\\\n    struct TransferResolver {\\\\n        bytes responderSignature;\\\\n    }\\\\n\\\\n    // Provide registry information\\\\n    string public constant override Name = \\\\\\"Withdraw\\\\\\";\\\\n    string public constant override StateEncoding =\\\\n        \\\\\\"tuple(bytes initiatorSignature, address initiator, address responder, bytes32 data, uint256 nonce, uint256 fee, address callTo, bytes callData)\\\\\\";\\\\n    string public constant override ResolverEncoding =\\\\n        \\\\\\"tuple(bytes responderSignature)\\\\\\";\\\\n\\\\n    function EncodedCancel() external pure override returns(bytes memory) {\\\\n      TransferResolver memory resolver;\\\\n      resolver.responderSignature = new bytes(65);\\\\n      return abi.encode(resolver);\\\\n    }\\\\n\\\\n    function create(bytes calldata encodedBalance, bytes calldata encodedState)\\\\n        external\\\\n        pure\\\\n        override\\\\n        returns (bool)\\\\n    {\\\\n        // Get unencoded information\\\\n        TransferState memory state = abi.decode(encodedState, (TransferState));\\\\n        Balance memory balance = abi.decode(encodedBalance, (Balance));\\\\n\\\\n        require(balance.amount[1] == 0, \\\\\\"Withdraw: NONZERO_RECIPIENT_BALANCE\\\\\\");\\\\n        require(\\\\n            state.initiator != address(0) && state.responder != address(0),\\\\n            \\\\\\"Withdraw: EMPTY_SIGNERS\\\\\\"\\\\n        );\\\\n        require(state.data != bytes32(0), \\\\\\"Withdraw: EMPTY_DATA\\\\\\");\\\\n        require(state.nonce != uint256(0), \\\\\\"Withdraw: EMPTY_NONCE\\\\\\");\\\\n        require(\\\\n            state.fee <= balance.amount[0],\\\\n            \\\\\\"Withdraw: INSUFFICIENT_BALANCE\\\\\\"\\\\n        );\\\\n        require(\\\\n            state.data.checkSignature(\\\\n                state.initiatorSignature,\\\\n                state.initiator\\\\n            ),\\\\n            \\\\\\"Withdraw: INVALID_INITIATOR_SIG\\\\\\"\\\\n        );\\\\n        \\\\n        // Valid initial transfer state\\\\n        return true;\\\\n    }\\\\n\\\\n    function resolve(\\\\n        bytes calldata encodedBalance,\\\\n        bytes calldata encodedState,\\\\n        bytes calldata encodedResolver\\\\n    ) external pure override returns (Balance memory) {\\\\n        TransferState memory state = abi.decode(encodedState, (TransferState));\\\\n        TransferResolver memory resolver =\\\\n            abi.decode(encodedResolver, (TransferResolver));\\\\n        Balance memory balance = abi.decode(encodedBalance, (Balance));\\\\n\\\\n        // Allow for a withdrawal to be canceled if an empty signature is \\\\n        // passed in. Should have *specific* cancellation action, not just\\\\n        // any invalid sig\\\\n        bytes memory b = new bytes(65);\\\\n        if (keccak256(resolver.responderSignature) == keccak256(b)) {\\\\n            // Withdraw should be cancelled, no state manipulation needed\\\\n        } else {\\\\n            require(\\\\n                state.data.checkSignature(\\\\n                    resolver.responderSignature,\\\\n                    state.responder\\\\n                ),\\\\n                \\\\\\"Withdraw: INVALID_RESPONDER_SIG\\\\\\"\\\\n            );\\\\n            // Reduce withdraw amount by optional fee\\\\n            // It\'s up to the offchain validators to ensure that the withdraw commitment takes this fee into account\\\\n            balance.amount[1] = state.fee;\\\\n            balance.amount[0] = 0;\\\\n        }\\\\n\\\\n        return balance;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x012e5deb93a2d67452884dff9179274801a30abf2455833eb4c59a42a87c50b0\\",\\"license\\":\\"UNLICENSED\\"}},\\"version\\":1}","bytecode":"0x608060405234801561001057600080fd5b50611263806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638052474d1161005b5780638052474d146100bd5780638de8b77e146100c55780638ef98a7e146100cd57806394184ba9146100ed5761007d565b80630528aa1c14610082578063206162be146100a05780633722aff9146100b5575b600080fd5b61008a61010d565b6040516100979190610d6e565b60405180910390f35b6100a861015c565b6040516100979190611060565b61008a610368565b61008a6103a1565b61008a6103c5565b6100e06100db3660046109fc565b6103e1565b6040516100979190610ff6565b6101006100fb366004610993565b6104ca565b6040516100979190610d45565b60606101176107b0565b604080516041808252608082019092529060208201818036833750505081526040516101479082906020016110f0565b60405160208183030381529060405291505090565b6101646107c3565b6040518060a00160405280306001600160a01b0316638052474d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156101a857600080fd5b505afa1580156101bc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101e49190810190610a92565b8152602001306001600160a01b03168152602001306001600160a01b0316638de8b77e6040518163ffffffff1660e01b815260040160006040518083038186803b15801561023157600080fd5b505afa158015610245573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261026d9190810190610a92565b8152602001306001600160a01b0316633722aff96040518163ffffffff1660e01b815260040160006040518083038186803b1580156102ab57600080fd5b505afa1580156102bf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102e79190810190610a92565b8152602001306001600160a01b0316630528aa1c6040518163ffffffff1660e01b815260040160006040518083038186803b15801561032557600080fd5b505afa158015610339573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103619190810190610a92565b9052905090565b6040518060400160405280601f81526020017f7475706c6528627974657320726573706f6e6465725369676e6174757265290081525081565b60405180604001604052806008815260200167576974686472617760c01b81525081565b6040518060c00160405280608f815260200161119f608f913981565b6103e96107fb565b6103f1610820565b6103fd85870187610c02565b90506104076107b0565b61041384860186610b97565b905061041d6107fb565b610429898b018b610ac5565b60408051604180825260808201909252919250606091906020820181803683370190505090508080519060200120836000015180519060200120141561046e576104bc565b825160408501516060860151610485929091610608565b6104aa5760405162461bcd60e51b81526004016104a190610fbf565b60405180910390fd5b60a08401518251602001528151600090525b509998505050505050505050565b60006104d4610820565b6104e083850185610c02565b90506104ea6107fb565b6104f686880188610ac5565b8051602001519091501561051c5760405162461bcd60e51b81526004016104a190610f1f565b60208201516001600160a01b031615801590610544575060408201516001600160a01b031615155b6105605760405162461bcd60e51b81526004016104a190610df6565b60608201516105815760405162461bcd60e51b81526004016104a190610f62565b60808201516105a25760405162461bcd60e51b81526004016104a190610f90565b80515160a083015111156105c85760405162461bcd60e51b81526004016104a190610ea6565b8151602083015160608401516105df929091610608565b6105fb5760405162461bcd60e51b81526004016104a190610e6f565b5060019695505050505050565b6000816001600160a01b031661061e8585610630565b6001600160a01b031614949350505050565b60008061063c84610652565b90506106488184610682565b9150505b92915050565b6000816040516020016106659190610d14565b604051602081830303815290604052805190602001209050919050565b600081516041146106a55760405162461bcd60e51b81526004016104a190610dbf565b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156106f75760405162461bcd60e51b81526004016104a190610e2d565b8060ff16601b1415801561070f57508060ff16601c14155b1561072c5760405162461bcd60e51b81526004016104a190610edd565b6000600187838686604051600081526020016040526040516107519493929190610d50565b6020604051602081039080840390855afa158015610773573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166107a65760405162461bcd60e51b81526004016104a190610d88565b9695505050505050565b6040518060200160405280606081525090565b6040518060a001604052806060815260200160006001600160a01b031681526020016060815260200160608152602001606081525090565b604051806040016040528061080e610883565b815260200161081b610883565b905290565b6040518061010001604052806060815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008019168152602001600081526020016000815260200160006001600160a01b03168152602001606081525090565b60405180604001604052806002906020820280368337509192915050565b803561064c81611186565b60008083601f8401126108bd578182fd5b50813567ffffffffffffffff8111156108d4578182fd5b6020830191508360208285010111156108ec57600080fd5b9250929050565b600082601f830112610903578081fd5b813561091661091182611132565b61110b565b915080825283602082850101111561092d57600080fd5b8060208401602084013760009082016020015292915050565b600082601f830112610956578081fd5b815161096461091182611132565b915080825283602082850101111561097b57600080fd5b61098c816020840160208601611156565b5092915050565b600080600080604085870312156109a8578384fd5b843567ffffffffffffffff808211156109bf578586fd5b6109cb888389016108ac565b909650945060208701359150808211156109e3578384fd5b506109f0878288016108ac565b95989497509550505050565b60008060008060008060608789031215610a14578182fd5b863567ffffffffffffffff80821115610a2b578384fd5b610a378a838b016108ac565b90985096506020890135915080821115610a4f578384fd5b610a5b8a838b016108ac565b90965094506040890135915080821115610a73578384fd5b50610a8089828a016108ac565b979a9699509497509295939492505050565b600060208284031215610aa3578081fd5b815167ffffffffffffffff811115610ab9578182fd5b61064884828501610946565b600060808284031215610ad6578081fd5b610ae0604061110b565b83601f840112610aee578182fd5b610af8604061110b565b80846040860187811115610b0a578586fd5b855b6002811015610b2b578235855260209485019490920191600101610b0c565b5082855287605f880112610b3d578586fd5b610b47604061110b565b9350839250905060808601871015610b5d578485fd5b845b6002811015610b88578135610b7381611186565b84526020938401939190910190600101610b5f565b50506020830152509392505050565b600060208284031215610ba8578081fd5b813567ffffffffffffffff80821115610bbf578283fd5b9083019060208286031215610bd2578283fd5b610bdc602061110b565b823582811115610bea578485fd5b610bf6878286016108f3565b82525095945050505050565b600060208284031215610c13578081fd5b813567ffffffffffffffff80821115610c2a578283fd5b8184019150610100808387031215610c40578384fd5b610c498161110b565b9050823582811115610c59578485fd5b610c65878286016108f3565b825250610c7586602085016108a1565b6020820152610c8786604085016108a1565b6040820152606083013560608201526080830135608082015260a083013560a0820152610cb78660c085016108a1565b60c082015260e083013582811115610ccd578485fd5b610cd9878286016108f3565b60e08301525095945050505050565b60008151808452610d00816020860160208601611156565b601f01601f19169290920160200192915050565b7f16566563746f72205369676e6564204d6573736167653a0a33320000000000008152601a810191909152603a0190565b901515815260200190565b93845260ff9290921660208401526040830152606082015260800190565b600060208252610d816020830184610ce8565b9392505050565b60208082526018908201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604082015260600190565b6020808252601f908201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604082015260600190565b60208082526017908201527f57697468647261773a20454d5054595f5349474e455253000000000000000000604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604082015261756560f01b606082015260800190565b6020808252601f908201527f57697468647261773a20494e56414c49445f494e49544941544f525f53494700604082015260600190565b6020808252601e908201527f57697468647261773a20494e53554646494349454e545f42414c414e43450000604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604082015261756560f01b606082015260800190565b60208082526023908201527f57697468647261773a204e4f4e5a45524f5f524543495049454e545f42414c416040820152624e434560e81b606082015260800190565b60208082526014908201527357697468647261773a20454d5054595f4441544160601b604082015260600190565b60208082526015908201527457697468647261773a20454d5054595f4e4f4e434560581b604082015260600190565b6020808252601f908201527f57697468647261773a20494e56414c49445f524553504f4e4445525f53494700604082015260600190565b815160808201908260005b6002811015611020578251825260209283019290910190600101611001565b5050506020808401516040840160005b60028110156110565782516001600160a01b031682529183019190830190600101611030565b5050505092915050565b600060208252825160a0602084015261107c60c0840182610ce8565b905060018060a01b0360208501511660408401526040840151601f19808584030160608601526110ac8383610ce8565b925060608601519150808584030160808601526110c98383610ce8565b925060808601519150808584030160a0860152506110e78282610ce8565b95945050505050565b60006020825282516020808401526106486040840182610ce8565b60405181810167ffffffffffffffff8111828210171561112a57600080fd5b604052919050565b600067ffffffffffffffff821115611148578081fd5b50601f01601f191660200190565b60005b83811015611171578181015183820152602001611159565b83811115611180576000848401525b50505050565b6001600160a01b038116811461119b57600080fd5b5056fe7475706c6528627974657320696e69746961746f725369676e61747572652c206164647265737320696e69746961746f722c206164647265737320726573706f6e6465722c206279746573333220646174612c2075696e74323536206e6f6e63652c2075696e74323536206665652c20616464726573732063616c6c546f2c2062797465732063616c6c4461746129a2646970667358221220e6c29ec66c4575ed5816330cc0372206a95865e0e0b591d5a21001f4a374293764736f6c63430007010033","deployedBytecode":"0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80638052474d1161005b5780638052474d146100bd5780638de8b77e146100c55780638ef98a7e146100cd57806394184ba9146100ed5761007d565b80630528aa1c14610082578063206162be146100a05780633722aff9146100b5575b600080fd5b61008a61010d565b6040516100979190610d6e565b60405180910390f35b6100a861015c565b6040516100979190611060565b61008a610368565b61008a6103a1565b61008a6103c5565b6100e06100db3660046109fc565b6103e1565b6040516100979190610ff6565b6101006100fb366004610993565b6104ca565b6040516100979190610d45565b60606101176107b0565b604080516041808252608082019092529060208201818036833750505081526040516101479082906020016110f0565b60405160208183030381529060405291505090565b6101646107c3565b6040518060a00160405280306001600160a01b0316638052474d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156101a857600080fd5b505afa1580156101bc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101e49190810190610a92565b8152602001306001600160a01b03168152602001306001600160a01b0316638de8b77e6040518163ffffffff1660e01b815260040160006040518083038186803b15801561023157600080fd5b505afa158015610245573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261026d9190810190610a92565b8152602001306001600160a01b0316633722aff96040518163ffffffff1660e01b815260040160006040518083038186803b1580156102ab57600080fd5b505afa1580156102bf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102e79190810190610a92565b8152602001306001600160a01b0316630528aa1c6040518163ffffffff1660e01b815260040160006040518083038186803b15801561032557600080fd5b505afa158015610339573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103619190810190610a92565b9052905090565b6040518060400160405280601f81526020017f7475706c6528627974657320726573706f6e6465725369676e6174757265290081525081565b60405180604001604052806008815260200167576974686472617760c01b81525081565b6040518060c00160405280608f815260200161119f608f913981565b6103e96107fb565b6103f1610820565b6103fd85870187610c02565b90506104076107b0565b61041384860186610b97565b905061041d6107fb565b610429898b018b610ac5565b60408051604180825260808201909252919250606091906020820181803683370190505090508080519060200120836000015180519060200120141561046e576104bc565b825160408501516060860151610485929091610608565b6104aa5760405162461bcd60e51b81526004016104a190610fbf565b60405180910390fd5b60a08401518251602001528151600090525b509998505050505050505050565b60006104d4610820565b6104e083850185610c02565b90506104ea6107fb565b6104f686880188610ac5565b8051602001519091501561051c5760405162461bcd60e51b81526004016104a190610f1f565b60208201516001600160a01b031615801590610544575060408201516001600160a01b031615155b6105605760405162461bcd60e51b81526004016104a190610df6565b60608201516105815760405162461bcd60e51b81526004016104a190610f62565b60808201516105a25760405162461bcd60e51b81526004016104a190610f90565b80515160a083015111156105c85760405162461bcd60e51b81526004016104a190610ea6565b8151602083015160608401516105df929091610608565b6105fb5760405162461bcd60e51b81526004016104a190610e6f565b5060019695505050505050565b6000816001600160a01b031661061e8585610630565b6001600160a01b031614949350505050565b60008061063c84610652565b90506106488184610682565b9150505b92915050565b6000816040516020016106659190610d14565b604051602081830303815290604052805190602001209050919050565b600081516041146106a55760405162461bcd60e51b81526004016104a190610dbf565b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156106f75760405162461bcd60e51b81526004016104a190610e2d565b8060ff16601b1415801561070f57508060ff16601c14155b1561072c5760405162461bcd60e51b81526004016104a190610edd565b6000600187838686604051600081526020016040526040516107519493929190610d50565b6020604051602081039080840390855afa158015610773573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166107a65760405162461bcd60e51b81526004016104a190610d88565b9695505050505050565b6040518060200160405280606081525090565b6040518060a001604052806060815260200160006001600160a01b031681526020016060815260200160608152602001606081525090565b604051806040016040528061080e610883565b815260200161081b610883565b905290565b6040518061010001604052806060815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008019168152602001600081526020016000815260200160006001600160a01b03168152602001606081525090565b60405180604001604052806002906020820280368337509192915050565b803561064c81611186565b60008083601f8401126108bd578182fd5b50813567ffffffffffffffff8111156108d4578182fd5b6020830191508360208285010111156108ec57600080fd5b9250929050565b600082601f830112610903578081fd5b813561091661091182611132565b61110b565b915080825283602082850101111561092d57600080fd5b8060208401602084013760009082016020015292915050565b600082601f830112610956578081fd5b815161096461091182611132565b915080825283602082850101111561097b57600080fd5b61098c816020840160208601611156565b5092915050565b600080600080604085870312156109a8578384fd5b843567ffffffffffffffff808211156109bf578586fd5b6109cb888389016108ac565b909650945060208701359150808211156109e3578384fd5b506109f0878288016108ac565b95989497509550505050565b60008060008060008060608789031215610a14578182fd5b863567ffffffffffffffff80821115610a2b578384fd5b610a378a838b016108ac565b90985096506020890135915080821115610a4f578384fd5b610a5b8a838b016108ac565b90965094506040890135915080821115610a73578384fd5b50610a8089828a016108ac565b979a9699509497509295939492505050565b600060208284031215610aa3578081fd5b815167ffffffffffffffff811115610ab9578182fd5b61064884828501610946565b600060808284031215610ad6578081fd5b610ae0604061110b565b83601f840112610aee578182fd5b610af8604061110b565b80846040860187811115610b0a578586fd5b855b6002811015610b2b578235855260209485019490920191600101610b0c565b5082855287605f880112610b3d578586fd5b610b47604061110b565b9350839250905060808601871015610b5d578485fd5b845b6002811015610b88578135610b7381611186565b84526020938401939190910190600101610b5f565b50506020830152509392505050565b600060208284031215610ba8578081fd5b813567ffffffffffffffff80821115610bbf578283fd5b9083019060208286031215610bd2578283fd5b610bdc602061110b565b823582811115610bea578485fd5b610bf6878286016108f3565b82525095945050505050565b600060208284031215610c13578081fd5b813567ffffffffffffffff80821115610c2a578283fd5b8184019150610100808387031215610c40578384fd5b610c498161110b565b9050823582811115610c59578485fd5b610c65878286016108f3565b825250610c7586602085016108a1565b6020820152610c8786604085016108a1565b6040820152606083013560608201526080830135608082015260a083013560a0820152610cb78660c085016108a1565b60c082015260e083013582811115610ccd578485fd5b610cd9878286016108f3565b60e08301525095945050505050565b60008151808452610d00816020860160208601611156565b601f01601f19169290920160200192915050565b7f16566563746f72205369676e6564204d6573736167653a0a33320000000000008152601a810191909152603a0190565b901515815260200190565b93845260ff9290921660208401526040830152606082015260800190565b600060208252610d816020830184610ce8565b9392505050565b60208082526018908201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604082015260600190565b6020808252601f908201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604082015260600190565b60208082526017908201527f57697468647261773a20454d5054595f5349474e455253000000000000000000604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604082015261756560f01b606082015260800190565b6020808252601f908201527f57697468647261773a20494e56414c49445f494e49544941544f525f53494700604082015260600190565b6020808252601e908201527f57697468647261773a20494e53554646494349454e545f42414c414e43450000604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604082015261756560f01b606082015260800190565b60208082526023908201527f57697468647261773a204e4f4e5a45524f5f524543495049454e545f42414c416040820152624e434560e81b606082015260800190565b60208082526014908201527357697468647261773a20454d5054595f4441544160601b604082015260600190565b60208082526015908201527457697468647261773a20454d5054595f4e4f4e434560581b604082015260600190565b6020808252601f908201527f57697468647261773a20494e56414c49445f524553504f4e4445525f53494700604082015260600190565b815160808201908260005b6002811015611020578251825260209283019290910190600101611001565b5050506020808401516040840160005b60028110156110565782516001600160a01b031682529183019190830190600101611030565b5050505092915050565b600060208252825160a0602084015261107c60c0840182610ce8565b905060018060a01b0360208501511660408401526040840151601f19808584030160608601526110ac8383610ce8565b925060608601519150808584030160808601526110c98383610ce8565b925060808601519150808584030160a0860152506110e78282610ce8565b95945050505050565b60006020825282516020808401526106486040840182610ce8565b60405181810167ffffffffffffffff8111828210171561112a57600080fd5b604052919050565b600067ffffffffffffffff821115611148578081fd5b50601f01601f191660200190565b60005b83811015611171578181015183820152602001611159565b83811115611180576000848401525b50505050565b6001600160a01b038116811461119b57600080fd5b5056fe7475706c6528627974657320696e69746961746f725369676e61747572652c206164647265737320696e69746961746f722c206164647265737320726573706f6e6465722c206279746573333220646174612c2075696e74323536206e6f6e63652c2075696e74323536206665652c20616464726573732063616c6c546f2c2062797465732063616c6c4461746129a2646970667358221220e6c29ec66c4575ed5816330cc0372206a95865e0e0b591d5a21001f4a374293764736f6c63430007010033","devdoc":{"author":"Connext <support@connext.network>","kind":"dev","methods":{},"title":"Withdraw","version":1},"userdoc":{"kind":"user","methods":{},"notice":"This contract burns the initiator\'s funds if a mutually signed         withdraw commitment can be generated","version":1},"storageLayout":{"storage":[],"types":null}}')},2818:function(e){e.exports=JSON.parse('{"address":"0xe561583d3A0dba55569Da8ff2e51a74d435eF372","abi":[{"inputs":[{"internalType":"address","name":"_mastercopy","type":"address"},{"internalType":"uint256","name":"_chainId","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"channel","type":"address"}],"name":"ChannelCreation","type":"event"},{"inputs":[{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"}],"name":"createChannel","outputs":[{"internalType":"address","name":"channel","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"createChannelAndDepositAlice","outputs":[{"internalType":"address","name":"channel","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"getChainId","outputs":[{"internalType":"uint256","name":"_chainId","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"}],"name":"getChannelAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMastercopy","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getProxyCreationCode","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStoredChainId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"transactionHash":"0x5620dfd01d5835a1dfacce356cb751b60732e104c48aac013658c82efcbf2799","receipt":{"to":null,"from":"0xd4b33434Cb36df9286Ef5132FCFb8062c96aC56E","contractAddress":"0xe561583d3A0dba55569Da8ff2e51a74d435eF372","transactionIndex":0,"gasUsed":"677184","logsBloom":"0xblockHash":"0xfc456e3aec884ddf729a310b107caf45caba8286aa761ca24d2607854b3a7ced","transactionHash":"0x5620dfd01d5835a1dfacce356cb751b60732e104c48aac013658c82efcbf2799","logs":[{"transactionIndex":0,"blockNumber":8930722,"transactionHash":"0x5620dfd01d5835a1dfacce356cb751b60732e104c48aac013658c82efcbf2799","address":"0x0000000000000000000000000000000000001010","topics":["0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63","0x0000000000000000000000000000000000000000000000000000000000001010","0x000000000000000000000000d4b33434cb36df9286ef5132fcfb8062c96ac56e","0x0000000000000000000000001ca971963bdb4ba2bf337c90660674acff5beb3f"],"data":"0x000000000000000000000000000000000000000000000000000267e52fc480000000000000000000000000000000000000000000000000a2a1504c6b8cea7800000000000000000000000000000000000000000000000000063dfc37616d0de40000000000000000000000000000000000000000000000a2a14de4865d25f8000000000000000000000000000000000000000000000000000640641c91318de4","logIndex":0,"blockHash":"0xfc456e3aec884ddf729a310b107caf45caba8286aa761ca24d2607854b3a7ced"}],"blockNumber":8930722,"cumulativeGasUsed":"677184","status":1,"byzantium":true},"args":["0xd105b6B42206dfA6Db00E6a4823bC88eFAC00476","0"],"solcInputHash":"89c55d5a88f10637860a9ea31a1daad3","metadata":"{\\"compiler\\":{\\"version\\":\\"0.7.1+commit.f4a555be\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_mastercopy\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_chainId\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"channel\\",\\"type\\":\\"address\\"}],\\"name\\":\\"ChannelCreation\\",\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"}],\\"name\\":\\"createChannel\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channel\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"createChannelAndDepositAlice\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channel\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"payable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getChainId\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_chainId\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getChannelAddress\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getMastercopy\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getProxyCreationCode\\",\\"outputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"\\",\\"type\\":\\"bytes\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getStoredChainId\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"author\\":\\"Connext <support@connext.network>\\",\\"kind\\":\\"dev\\",\\"methods\\":{\\"constructor\\":{\\"details\\":\\"Creates a new `ChannelFactory`\\",\\"params\\":{\\"_chainId\\":\\"the chain identifier when generating the CREATE2 salt. If zero, the chain identifier used in the proxy salt will be the result of the opcode\\",\\"_mastercopy\\":\\"the address of the `ChannelMastercopy` (channel logic)\\"}},\\"createChannel(address,address)\\":{\\"details\\":\\"Allows us to create new channel contract and get it all set up in one transaction\\",\\"params\\":{\\"alice\\":\\"address of the high fidelity channel participant\\",\\"bob\\":\\"address of the other channel participant\\"}},\\"createChannelAndDepositAlice(address,address,address,uint256)\\":{\\"details\\":\\"Allows us to create a new channel contract and fund it in one transaction\\",\\"params\\":{\\"bob\\":\\"address of the other channel participant\\"}},\\"getChainId()\\":{\\"details\\":\\"Allows us to get the chainId that this factory will use in the create2 salt\\"},\\"getChannelAddress(address,address)\\":{\\"details\\":\\"Allows us to get the address for a new channel contract created via `createChannel`\\",\\"params\\":{\\"alice\\":\\"address of the igh fidelity channel participant\\",\\"bob\\":\\"address of the other channel participant\\"}},\\"getMastercopy()\\":{\\"details\\":\\"Allows us to get the mastercopy that this factory will deploy channels against\\"},\\"getProxyCreationCode()\\":{\\"details\\":\\"Returns the proxy code used to both calculate the CREATE2 address and deploy the channel proxy pointed to the `ChannelMastercopy`\\"},\\"getStoredChainId()\\":{\\"details\\":\\"Allows us to get the chainId that this factory has stored\\"}},\\"title\\":\\"ChannelFactory\\",\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"notice\\":\\"Creates and sets up a new channel proxy contract\\",\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"src.sol/ChannelFactory.sol\\":\\"ChannelFactory\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Returns the amount of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender\'s allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\\\n     * allowance mechanism. `amount` is then deducted from the caller\'s\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Address.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Collection of functions related to the address type\\\\n */\\\\nlibrary Address {\\\\n    /**\\\\n     * @dev Returns true if `account` is a contract.\\\\n     *\\\\n     * [IMPORTANT]\\\\n     * ====\\\\n     * It is unsafe to assume that an address for which this function returns\\\\n     * false is an externally-owned account (EOA) and not a contract.\\\\n     *\\\\n     * Among others, `isContract` will return false for the following\\\\n     * types of addresses:\\\\n     *\\\\n     *  - an externally-owned account\\\\n     *  - a contract in construction\\\\n     *  - an address where a contract will be created\\\\n     *  - an address where a contract lived, but was destroyed\\\\n     * ====\\\\n     */\\\\n    function isContract(address account) internal view returns (bool) {\\\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\\\n        // for accounts without code, i.e. `keccak256(\'\')`\\\\n        bytes32 codehash;\\\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\\\n        // solhint-disable-next-line no-inline-assembly\\\\n        assembly { codehash := extcodehash(account) }\\\\n        return (codehash != accountHash && codehash != 0x0);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\\\\n     * `recipient`, forwarding all available gas and reverting on errors.\\\\n     *\\\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\\\n     * imposed by `transfer`, making them unable to receive funds via\\\\n     * `transfer`. {sendValue} removes this limitation.\\\\n     *\\\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\\\n     *\\\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\\\n     * taken to not create reentrancy vulnerabilities. Consider using\\\\n     * {ReentrancyGuard} or the\\\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\\\n     */\\\\n    function sendValue(address payable recipient, uint256 amount) internal {\\\\n        require(address(this).balance >= amount, \\\\\\"Address: insufficient balance\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\\\n        (bool success, ) = recipient.call{ value: amount }(\\\\\\"\\\\\\");\\\\n        require(success, \\\\\\"Address: unable to send value, recipient may have reverted\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Performs a Solidity function call using a low level `call`. A\\\\n     * plain`call` is an unsafe replacement for a function call: use this\\\\n     * function instead.\\\\n     *\\\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\\\n     * function (like regular Solidity function calls).\\\\n     *\\\\n     * Returns the raw returned data. To convert to the expected return value,\\\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `target` must be a contract.\\\\n     * - calling `target` with `data` must not revert.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n      return functionCall(target, data, \\\\\\"Address: low-level call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but also transferring `value` wei to `target`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the calling contract must have an ETH balance of at least `value`.\\\\n     * - the called Solidity function must be `payable`.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, value, \\\\\\"Address: low-level call with value failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\\\n        require(address(this).balance >= value, \\\\\\"Address: insufficient balance for call\\\\\\");\\\\n        return _functionCallWithValue(target, data, value, errorMessage);\\\\n    }\\\\n\\\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: call to non-contract\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls\\\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\\\n        if (success) {\\\\n            return returndata;\\\\n        } else {\\\\n            // Look for revert reason and bubble it up if present\\\\n            if (returndata.length > 0) {\\\\n                // The easiest way to bubble the revert reason is using memory via assembly\\\\n\\\\n                // solhint-disable-next-line no-inline-assembly\\\\n                assembly {\\\\n                    let returndata_size := mload(returndata)\\\\n                    revert(add(32, returndata), returndata_size)\\\\n                }\\\\n            } else {\\\\n                revert(errorMessage);\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x698f929f1097637d051976b322a2d532c27df022b09010e8d091e2888a5ebdf8\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Create2.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\\\n * `CREATE2` can be used to compute in advance the address where a smart\\\\n * contract will be deployed, which allows for interesting new mechanisms known\\\\n * as \'counterfactual interactions\'.\\\\n *\\\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\\\n * information.\\\\n */\\\\nlibrary Create2 {\\\\n    /**\\\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\\\n     * will be deployed can be known in advance via {computeAddress}.\\\\n     *\\\\n     * The bytecode for a contract can be obtained from Solidity with\\\\n     * `type(contractName).creationCode`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `bytecode` must not be empty.\\\\n     * - `salt` must have not been used for `bytecode` already.\\\\n     * - the factory must have a balance of at least `amount`.\\\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\\\n     */\\\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\\\\n        address addr;\\\\n        require(address(this).balance >= amount, \\\\\\"Create2: insufficient balance\\\\\\");\\\\n        require(bytecode.length != 0, \\\\\\"Create2: bytecode length is zero\\\\\\");\\\\n        // solhint-disable-next-line no-inline-assembly\\\\n        assembly {\\\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\\\n        }\\\\n        require(addr != address(0), \\\\\\"Create2: Failed on deploy\\\\\\");\\\\n        return addr;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\\\n     */\\\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\\\n        return computeAddress(salt, bytecodeHash, address(this));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\\\n     * `deployer`. If `deployer` is this contract\'s address, returns the same value as {computeAddress}.\\\\n     */\\\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\\\\n        bytes32 _data = keccak256(\\\\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\\\\n        );\\\\n        return address(uint256(_data));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x539295edd21ad514c0b1a0d1c89ada0831942f379ea83b6eb85769211fc7937e\\",\\"license\\":\\"MIT\\"},\\"src.sol/ChannelFactory.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Create2.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./interfaces/IChannelFactory.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/IVectorChannel.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibAsset.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibERC20.sol\\\\\\";\\\\n\\\\n/// @title ChannelFactory\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Creates and sets up a new channel proxy contract\\\\ncontract ChannelFactory is IChannelFactory {\\\\n    // Creation code constants taken from EIP1167\\\\n    bytes private constant proxyCreationCodePrefix =\\\\n        hex\\\\\\"3d602d80600a3d3981f3_363d3d373d3d3d363d73\\\\\\";\\\\n    bytes private constant proxyCreationCodeSuffix =\\\\n        hex\\\\\\"5af43d82803e903d91602b57fd5bf3\\\\\\";\\\\n\\\\n    bytes32 private creationCodeHash;\\\\n    address private immutable mastercopy;\\\\n    uint256 private immutable chainId;\\\\n\\\\n    /// @dev Creates a new `ChannelFactory`\\\\n    /// @param _mastercopy the address of the `ChannelMastercopy` (channel logic)\\\\n    /// @param _chainId the chain identifier when generating the CREATE2 salt. If zero, the chain identifier used in the proxy salt will be the result of the opcode\\\\n    constructor(address _mastercopy, uint256 _chainId) {\\\\n        mastercopy = _mastercopy;\\\\n        chainId = _chainId;\\\\n        creationCodeHash = keccak256(_getProxyCreationCode(_mastercopy));\\\\n    }\\\\n\\\\n    ////////////////////////////////////////\\\\n    // Public Methods\\\\n\\\\n    /// @dev Allows us to get the mastercopy that this factory will deploy channels against\\\\n    function getMastercopy() external view override returns (address) {\\\\n        return mastercopy;\\\\n    }\\\\n\\\\n    /// @dev Allows us to get the chainId that this factory will use in the create2 salt\\\\n    function getChainId() public view override returns (uint256 _chainId) {\\\\n        // Hold in memory to reduce sload calls\\\\n        uint256 chain = chainId;\\\\n        if (chain == 0) {\\\\n            assembly {\\\\n                _chainId := chainid()\\\\n            }\\\\n        } else {\\\\n            _chainId = chain;\\\\n        }\\\\n    }\\\\n\\\\n    /// @dev Allows us to get the chainId that this factory has stored\\\\n    function getStoredChainId() external view override returns (uint256) {\\\\n        return chainId;\\\\n    }\\\\n\\\\n    /// @dev Returns the proxy code used to both calculate the CREATE2 address and deploy the channel proxy pointed to the `ChannelMastercopy`\\\\n    function getProxyCreationCode()\\\\n        public\\\\n        view\\\\n        override\\\\n        returns (bytes memory)\\\\n    {\\\\n        return _getProxyCreationCode(mastercopy);\\\\n    }\\\\n\\\\n    /// @dev Allows us to get the address for a new channel contract created via `createChannel`\\\\n    /// @param alice address of the igh fidelity channel participant\\\\n    /// @param bob address of the other channel participant\\\\n    function getChannelAddress(address alice, address bob)\\\\n        external\\\\n        view\\\\n        override\\\\n        returns (address)\\\\n    {\\\\n        return\\\\n            Create2.computeAddress(\\\\n                generateSalt(alice, bob),\\\\n                creationCodeHash\\\\n            );\\\\n    }\\\\n\\\\n    /// @dev Allows us to create new channel contract and get it all set up in one transaction\\\\n    /// @param alice address of the high fidelity channel participant\\\\n    /// @param bob address of the other channel participant\\\\n    function createChannel(address alice, address bob)\\\\n        public\\\\n        override\\\\n        returns (address channel)\\\\n    {\\\\n        channel = deployChannelProxy(alice, bob);\\\\n        IVectorChannel(channel).setup(alice, bob);\\\\n        emit ChannelCreation(channel);\\\\n    }\\\\n\\\\n    /// @dev Allows us to create a new channel contract and fund it in one transaction\\\\n    /// @param bob address of the other channel participant\\\\n    function createChannelAndDepositAlice(\\\\n        address alice,\\\\n        address bob,\\\\n        address assetId,\\\\n        uint256 amount\\\\n    ) external payable override returns (address channel) {\\\\n        channel = createChannel(alice, bob);\\\\n        // Deposit funds (if a token) must be approved for the\\\\n        // `ChannelFactory`, which then claims the funds and transfers\\\\n        // to the channel address. While this is inefficient, this is\\\\n        // the safest/clearest way to transfer funds\\\\n        if (!LibAsset.isEther(assetId)) {\\\\n            require(\\\\n                LibERC20.transferFrom(\\\\n                    assetId,\\\\n                    msg.sender,\\\\n                    address(this),\\\\n                    amount\\\\n                ),\\\\n                \\\\\\"ChannelFactory: ERC20_TRANSFER_FAILED\\\\\\"\\\\n            );\\\\n            require(\\\\n                LibERC20.approve(assetId, address(channel), amount),\\\\n                \\\\\\"ChannelFactory: ERC20_APPROVE_FAILED\\\\\\"\\\\n            );\\\\n        }\\\\n        IVectorChannel(channel).depositAlice{value: msg.value}(assetId, amount);\\\\n    }\\\\n\\\\n    ////////////////////////////////////////\\\\n    // Internal Methods\\\\n\\\\n    function _getProxyCreationCode(address _mastercopy) internal pure returns (bytes memory) {\\\\n      return abi.encodePacked(\\\\n                proxyCreationCodePrefix,\\\\n                _mastercopy,\\\\n                proxyCreationCodeSuffix\\\\n            );\\\\n    }\\\\n\\\\n    /// @dev Allows us to create new channel contact using CREATE2\\\\n    /// @param alice address of the high fidelity participant in the channel\\\\n    /// @param bob address of the other channel participant\\\\n    function deployChannelProxy(address alice, address bob)\\\\n        internal\\\\n        returns (address)\\\\n    {\\\\n        bytes32 salt = generateSalt(alice, bob);\\\\n        return Create2.deploy(0, salt, getProxyCreationCode());\\\\n    }\\\\n\\\\n    /// @dev Generates the unique salt for calculating the CREATE2 address of the channel proxy\\\\n    function generateSalt(address alice, address bob)\\\\n        internal\\\\n        view\\\\n        returns (bytes32)\\\\n    {\\\\n        return keccak256(abi.encodePacked(alice, bob, getChainId()));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x9b30b13dd79eea72eadd2bec3eba0f515929259a21d2ece6b982703c280e532a\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCAdjudicator.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./Types.sol\\\\\\";\\\\n\\\\ninterface ICMCAdjudicator {\\\\n    struct CoreChannelState {\\\\n        address channelAddress;\\\\n        address alice;\\\\n        address bob;\\\\n        address[] assetIds;\\\\n        Balance[] balances;\\\\n        uint256[] processedDepositsA;\\\\n        uint256[] processedDepositsB;\\\\n        uint256[] defundNonces;\\\\n        uint256 timeout;\\\\n        uint256 nonce;\\\\n        bytes32 merkleRoot;\\\\n    }\\\\n\\\\n    struct CoreTransferState {\\\\n        address channelAddress;\\\\n        bytes32 transferId;\\\\n        address transferDefinition;\\\\n        address initiator;\\\\n        address responder;\\\\n        address assetId;\\\\n        Balance balance;\\\\n        uint256 transferTimeout;\\\\n        bytes32 initialStateHash;\\\\n    }\\\\n\\\\n    struct ChannelDispute {\\\\n        bytes32 channelStateHash;\\\\n        uint256 nonce;\\\\n        bytes32 merkleRoot;\\\\n        uint256 consensusExpiry;\\\\n        uint256 defundExpiry;\\\\n    }\\\\n\\\\n    struct TransferDispute {\\\\n        bytes32 transferStateHash;\\\\n        uint256 transferDisputeExpiry;\\\\n        bool isDefunded;\\\\n    }\\\\n\\\\n    event ChannelDisputed(\\\\n        address disputer,\\\\n        CoreChannelState state,\\\\n        ChannelDispute dispute\\\\n    );\\\\n\\\\n    event ChannelDefunded(\\\\n        address defunder,\\\\n        CoreChannelState state,\\\\n        ChannelDispute dispute,\\\\n        address[] assetIds\\\\n    );\\\\n\\\\n    event TransferDisputed(\\\\n        address disputer,\\\\n        CoreTransferState state,\\\\n        TransferDispute dispute\\\\n    );\\\\n\\\\n    event TransferDefunded(\\\\n        address defunder,\\\\n        CoreTransferState state,\\\\n        TransferDispute dispute,\\\\n        bytes encodedInitialState,\\\\n        bytes encodedResolver,\\\\n        Balance balance\\\\n    );\\\\n\\\\n    function getChannelDispute() external view returns (ChannelDispute memory);\\\\n\\\\n    function getDefundNonce(address assetId) external view returns (uint256);\\\\n\\\\n    function getTransferDispute(bytes32 transferId)\\\\n        external\\\\n        view\\\\n        returns (TransferDispute memory);\\\\n\\\\n    function disputeChannel(\\\\n        CoreChannelState calldata ccs,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) external;\\\\n\\\\n    function defundChannel(\\\\n        CoreChannelState calldata ccs,\\\\n        address[] calldata assetIds,\\\\n        uint256[] calldata indices\\\\n    ) external;\\\\n\\\\n    function disputeTransfer(\\\\n        CoreTransferState calldata cts,\\\\n        bytes32[] calldata merkleProofData\\\\n    ) external;\\\\n\\\\n    function defundTransfer(\\\\n        CoreTransferState calldata cts,\\\\n        bytes calldata encodedInitialTransferState,\\\\n        bytes calldata encodedTransferResolver,\\\\n        bytes calldata responderSignature\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x88522bb51c2b9991b24ef33a3c776ac76d96060ebbc33cd5b2b14513fb21d237\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCAsset.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface ICMCAsset {\\\\n    function getTotalTransferred(address assetId)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function getExitableAmount(address assetId, address owner)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function exit(\\\\n        address assetId,\\\\n        address owner,\\\\n        address payable recipient\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x895d89536e8ca469afe642b7001f0dfff497ce29d5d73f862b07a1cdc483f3f7\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCCore.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface ICMCCore {\\\\n    function setup(address _alice, address _bob) external;\\\\n\\\\n    function getAlice() external view returns (address);\\\\n\\\\n    function getBob() external view returns (address);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x8e8da2d8fb5198441ba6cdff018dff9e4145b07d575647c990659adad637ec8c\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCDeposit.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface ICMCDeposit {\\\\n    event AliceDeposited(address assetId, uint256 amount);\\\\n    \\\\n    function getTotalDepositsAlice(address assetId)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function getTotalDepositsBob(address assetId)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function depositAlice(address assetId, uint256 amount) external payable;\\\\n}\\\\n\\",\\"keccak256\\":\\"0xdf6f284e44d88013cf9d51220315fb37e63086e470442685891c90aadd138295\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCWithdraw.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nstruct WithdrawData {\\\\n    address channelAddress;\\\\n    address assetId;\\\\n    address payable recipient;\\\\n    uint256 amount;\\\\n    uint256 nonce;\\\\n    address callTo;\\\\n    bytes callData;\\\\n}\\\\n\\\\ninterface ICMCWithdraw {\\\\n    function getWithdrawalTransactionRecord(WithdrawData calldata wd)\\\\n        external\\\\n        view\\\\n        returns (bool);\\\\n\\\\n    function withdraw(\\\\n        WithdrawData calldata wd,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x097dfe95ad19096f9a3dd0138b4a51680c26e665d1639278a7c0a5c9f7fc5c78\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/IChannelFactory.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface IChannelFactory {\\\\n    event ChannelCreation(address channel);\\\\n\\\\n    function getMastercopy() external view returns (address);\\\\n\\\\n    function getChainId() external view returns (uint256);\\\\n\\\\n    function getStoredChainId() external view returns (uint256);\\\\n\\\\n    function getProxyCreationCode() external view returns (bytes memory);\\\\n\\\\n    function getChannelAddress(address alice, address bob)\\\\n        external\\\\n        view\\\\n        returns (address);\\\\n\\\\n    function createChannel(address alice, address bob)\\\\n        external\\\\n        returns (address);\\\\n\\\\n    function createChannelAndDepositAlice(\\\\n        address alice,\\\\n        address bob,\\\\n        address assetId,\\\\n        uint256 amount\\\\n    ) external payable returns (address);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x2330bd554f878feb2494fb9dd830a1707865b63cfd6471a8dad1e5912ebf72ea\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/IVectorChannel.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./ICMCCore.sol\\\\\\";\\\\nimport \\\\\\"./ICMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./ICMCDeposit.sol\\\\\\";\\\\nimport \\\\\\"./ICMCWithdraw.sol\\\\\\";\\\\nimport \\\\\\"./ICMCAdjudicator.sol\\\\\\";\\\\n\\\\ninterface IVectorChannel is\\\\n    ICMCCore,\\\\n    ICMCAsset,\\\\n    ICMCDeposit,\\\\n    ICMCWithdraw,\\\\n    ICMCAdjudicator\\\\n{}\\\\n\\",\\"keccak256\\":\\"0x9e21e3b6510bb5aecab999bfcbefe6184bd2be5a80179ef8ecadb63ddd2c8d53\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/Types.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nstruct Balance {\\\\n    uint256[2] amount; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n    address payable[2] to; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf8c71b155b630cde965f5d1db5f0d2751a9763f5a797f15d946613e9224f1046\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibAsset.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./LibERC20.sol\\\\\\";\\\\nimport \\\\\\"./LibUtils.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\\\\";\\\\n\\\\n\\\\n/// @title LibAsset\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This library contains helpers for dealing with onchain transfers\\\\n///         of in-channel assets. It is designed to safely handle all asset\\\\n///         transfers out of channel in the event of an onchain dispute. Also\\\\n///         safely handles ERC20 transfers that may be non-compliant\\\\nlibrary LibAsset {\\\\n    address constant ETHER_ASSETID = address(0);\\\\n\\\\n    function isEther(address assetId) internal pure returns (bool) {\\\\n        return assetId == ETHER_ASSETID;\\\\n    }\\\\n\\\\n    function getOwnBalance(address assetId) internal view returns (uint256) {\\\\n        return\\\\n            isEther(assetId)\\\\n                ? address(this).balance\\\\n                : IERC20(assetId).balanceOf(address(this));\\\\n    }\\\\n\\\\n    function transferEther(address payable recipient, uint256 amount)\\\\n        internal\\\\n        returns (bool)\\\\n    {\\\\n        (bool success, bytes memory returnData) =\\\\n            recipient.call{value: amount}(\\\\\\"\\\\\\");\\\\n        LibUtils.revertIfCallFailed(success, returnData);\\\\n        return true;\\\\n    }\\\\n\\\\n    function transferERC20(\\\\n        address assetId,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return LibERC20.transfer(assetId, recipient, amount);\\\\n    }\\\\n\\\\n    // This function is a wrapper for transfers of Ether or ERC20 tokens,\\\\n    // both standard-compliant ones as well as tokens that exhibit the\\\\n    // missing-return-value bug.\\\\n    // Although it behaves very much like Solidity\'s `transfer` function\\\\n    // or the ERC20 `transfer` and is, in fact, designed to replace direct\\\\n    // usage of those, it is deliberately named `unregisteredTransfer`,\\\\n    // because we need to register every transfer out of the channel.\\\\n    // Therefore, it should normally not be used directly, with the single\\\\n    // exception of the `transferAsset` function in `CMCAsset.sol`,\\\\n    // which combines the \\\\\\"naked\\\\\\" unregistered transfer given below\\\\n    // with a registration.\\\\n    // USING THIS FUNCTION SOMEWHERE ELSE IS PROBABLY WRONG!\\\\n    function unregisteredTransfer(\\\\n        address assetId,\\\\n        address payable recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            isEther(assetId)\\\\n                ? transferEther(recipient, amount)\\\\n                : transferERC20(assetId, recipient, amount);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x02e7b660846ad2f56f8005f786e0e2eb1d625c83f4cfcf9fc07a9566ca86195c\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./LibUtils.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Address.sol\\\\\\";\\\\n\\\\n/// @title LibERC20\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This library provides several functions to safely handle\\\\n///         noncompliant tokens (i.e. does not return a boolean from\\\\n///         the transfer function)\\\\n\\\\nlibrary LibERC20 {\\\\n    function wrapCall(address assetId, bytes memory callData)\\\\n        internal\\\\n        returns (bool)\\\\n    {\\\\n        require(Address.isContract(assetId), \\\\\\"LibERC20: NO_CODE\\\\\\");\\\\n        (bool success, bytes memory returnData) = assetId.call(callData);\\\\n        LibUtils.revertIfCallFailed(success, returnData);\\\\n        return returnData.length == 0 || abi.decode(returnData, (bool));\\\\n    }\\\\n\\\\n    function approve(\\\\n        address assetId,\\\\n        address spender,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            wrapCall(\\\\n                assetId,\\\\n                abi.encodeWithSignature(\\\\n                    \\\\\\"approve(address,uint256)\\\\\\",\\\\n                    spender,\\\\n                    amount\\\\n                )\\\\n            );\\\\n    }\\\\n\\\\n    function transferFrom(\\\\n        address assetId,\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            wrapCall(\\\\n                assetId,\\\\n                abi.encodeWithSignature(\\\\n                    \\\\\\"transferFrom(address,address,uint256)\\\\\\",\\\\n                    sender,\\\\n                    recipient,\\\\n                    amount\\\\n                )\\\\n            );\\\\n    }\\\\n\\\\n    function transfer(\\\\n        address assetId,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            wrapCall(\\\\n                assetId,\\\\n                abi.encodeWithSignature(\\\\n                    \\\\\\"transfer(address,uint256)\\\\\\",\\\\n                    recipient,\\\\n                    amount\\\\n                )\\\\n            );\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x5bad1474c93a295939c23f976786f0d086abc063f19ff9c8c1d069759c4a7ff5\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibUtils.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\n/// @title LibUtils\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains a helper to revert if a call was not successfully\\\\n///         made\\\\nlibrary LibUtils {\\\\n    // If success is false, reverts and passes on the revert string.\\\\n    function revertIfCallFailed(bool success, bytes memory returnData)\\\\n        internal\\\\n        pure\\\\n    {\\\\n        if (!success) {\\\\n            assembly {\\\\n                revert(add(returnData, 0x20), mload(returnData))\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf31897ed92b88739ca9c6e74d089e01c5dbf432183d2ab0b959b539842374ccd\\",\\"license\\":\\"UNLICENSED\\"}},\\"version\\":1}","bytecode":"0x60c060405234801561001057600080fd5b50604051610c8f380380610c8f83398101604081905261002f916100eb565b6001600160601b0319606083901b1660805260a081905261004f82610062565b8051602090910120600055506101909050565b60606040518060400160405280601481526020017f3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000815250826040518060400160405280600f81526020016e5af43d82803e903d91602b57fd5bf360881b8152506040516020016100d59392919061015c565b6040516020818303038152906040529050919050565b600080604083850312156100fd578182fd5b82516001600160a01b0381168114610113578283fd5b6020939093015192949293505050565b60008151815b818110156101435760208185018101518683015201610129565b818111156101515782828601525b509290920192915050565b60006101688286610123565b606085901b6001600160601b03191681526101866014820185610123565b9695505050505050565b60805160601c60a051610acf6101c06000398061017e52806101a452508061015352806102a65250610acf6000f3fe6080604052600436106100705760003560e01c806335a1ba6f1161004e57806335a1ba6f146100d7578063e617aaac14610104578063efe4369314610124578063fe4545011461013957610070565b806315727e911461007557806332a130c9146100a05780633408e470146100c2575b600080fd5b34801561008157600080fd5b5061008a61014c565b60405161009791906108d6565b60405180910390f35b3480156100ac57600080fd5b506100b561017c565b6040516100979190610a60565b3480156100ce57600080fd5b506100b56101a0565b3480156100e357600080fd5b506100f76100f2366004610703565b6101d8565b604051610097919061086b565b34801561011057600080fd5b506100f761011f366004610703565b610284565b34801561013057600080fd5b506100f76102a4565b6100f7610147366004610737565b6102c8565b60606101777f00000000000000000000000000000000000000000000000000000000000000006103a5565b905090565b7f000000000000000000000000000000000000000000000000000000000000000090565b60007f0000000000000000000000000000000000000000000000000000000000000000806101d0574691506101d4565b8091505b5090565b60006101e48383610425565b604051632d34ba7960e01b81529091506001600160a01b03821690632d34ba7990610215908690869060040161087f565b600060405180830381600087803b15801561022f57600080fd5b505af1158015610243573d6000803e3d6000fd5b505050507fa79ba8cc5fdc29196c8d65701a02433c92328f38f0ffbea3908335b80d81409d81604051610276919061086b565b60405180910390a192915050565b600061029b610293848461044f565b60005461048b565b90505b92915050565b7f000000000000000000000000000000000000000000000000000000000000000090565b60006102d485856101d8565b90506102df83610498565b61033b576102ef833330856104a5565b6103145760405162461bcd60e51b815260040161030b906109e4565b60405180910390fd5b61031f8382846104f8565b61033b5760405162461bcd60e51b815260040161030b906109a0565b60405163635ae90160e01b81526001600160a01b0382169063635ae90190349061036b90879087906004016108bd565b6000604051808303818588803b15801561038457600080fd5b505af1158015610398573d6000803e3d6000fd5b5050505050949350505050565b6060604051806040016040528060148152602001733d602d80600a3d3981f3363d3d373d3d3d363d7360601b815250826040518060400160405280600f81526020016e5af43d82803e903d91602b57fd5bf360881b81525060405160200161040f93929190610824565b6040516020818303038152906040529050919050565b600080610432848461044f565b905061044760008261044261014c565b610540565b949350505050565b6000828261045b6101a0565b60405160200161046d939291906107ab565b60405160208183030381529060405280519060200120905092915050565b600061029b8383306105b2565b6001600160a01b03161590565b60006104ef858585856040516024016104c093929190610899565b60408051601f198184030181529190526020810180516001600160e01b03166323b872dd60e01b1790526105f1565b95945050505050565b60006104478484846040516024016105119291906108bd565b60408051601f198184030181529190526020810180516001600160e01b031663095ea7b360e01b1790526105f1565b600080844710156105635760405162461bcd60e51b815260040161030b90610a29565b82516105815760405162461bcd60e51b815260040161030b90610909565b8383516020850187f590506001600160a01b0381166104475760405162461bcd60e51b815260040161030b9061093e565b60008060ff60f81b8386866040516020016105d094939291906107d4565b60408051808303601f19018152919052805160209091012095945050505050565b60006105fc836106a2565b6106185760405162461bcd60e51b815260040161030b90610975565b60006060846001600160a01b0316846040516106349190610808565b6000604051808303816000865af19150503d8060008114610671576040519150601f19603f3d011682016040523d82523d6000602084013e610676565b606091505b509150915061068582826106db565b805115806104ef5750808060200190518101906104ef9190610784565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610447575050151592915050565b816106e857805160208201fd5b5050565b80356001600160a01b038116811461029e57600080fd5b60008060408385031215610715578182fd5b61071f84846106ec565b915061072e84602085016106ec565b90509250929050565b6000806000806080858703121561074c578182fd5b61075686866106ec565b935061076586602087016106ec565b925061077486604087016106ec565b9396929550929360600135925050565b600060208284031215610795578081fd5b815180151581146107a4578182fd5b9392505050565b6001600160601b0319606094851b811682529290931b9091166014830152602882015260480190565b6001600160f81b031994909416845260609290921b6001600160601b03191660018401526015830152603582015260550190565b6000825161081a818460208701610a69565b9190910192915050565b60008451610836818460208901610a69565b606085901b6001600160601b031916908301908152835161085e816014840160208801610a69565b0160140195945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b60006020825282518060208401526108f5816040850160208701610a69565b601f01601f19169190910160400192915050565b6020808252818101527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604082015260600190565b60208082526019908201527f437265617465323a204661696c6564206f6e206465706c6f7900000000000000604082015260600190565b6020808252601190820152704c696245524332303a204e4f5f434f444560781b604082015260600190565b60208082526024908201527f4368616e6e656c466163746f72793a2045524332305f415050524f56455f46416040820152631253115160e21b606082015260800190565b60208082526025908201527f4368616e6e656c466163746f72793a2045524332305f5452414e534645525f46604082015264105253115160da1b606082015260800190565b6020808252601d908201527f437265617465323a20696e73756666696369656e742062616c616e6365000000604082015260600190565b90815260200190565b60005b83811015610a84578181015183820152602001610a6c565b83811115610a93576000848401525b5050505056fea26469706673582212206b46714e4e157ca4fcef5f14f882cae62cdcfb5e301602c8361ab37a1daaf2ab64736f6c63430007010033","deployedBytecode":"0x6080604052600436106100705760003560e01c806335a1ba6f1161004e57806335a1ba6f146100d7578063e617aaac14610104578063efe4369314610124578063fe4545011461013957610070565b806315727e911461007557806332a130c9146100a05780633408e470146100c2575b600080fd5b34801561008157600080fd5b5061008a61014c565b60405161009791906108d6565b60405180910390f35b3480156100ac57600080fd5b506100b561017c565b6040516100979190610a60565b3480156100ce57600080fd5b506100b56101a0565b3480156100e357600080fd5b506100f76100f2366004610703565b6101d8565b604051610097919061086b565b34801561011057600080fd5b506100f761011f366004610703565b610284565b34801561013057600080fd5b506100f76102a4565b6100f7610147366004610737565b6102c8565b60606101777f00000000000000000000000000000000000000000000000000000000000000006103a5565b905090565b7f000000000000000000000000000000000000000000000000000000000000000090565b60007f0000000000000000000000000000000000000000000000000000000000000000806101d0574691506101d4565b8091505b5090565b60006101e48383610425565b604051632d34ba7960e01b81529091506001600160a01b03821690632d34ba7990610215908690869060040161087f565b600060405180830381600087803b15801561022f57600080fd5b505af1158015610243573d6000803e3d6000fd5b505050507fa79ba8cc5fdc29196c8d65701a02433c92328f38f0ffbea3908335b80d81409d81604051610276919061086b565b60405180910390a192915050565b600061029b610293848461044f565b60005461048b565b90505b92915050565b7f000000000000000000000000000000000000000000000000000000000000000090565b60006102d485856101d8565b90506102df83610498565b61033b576102ef833330856104a5565b6103145760405162461bcd60e51b815260040161030b906109e4565b60405180910390fd5b61031f8382846104f8565b61033b5760405162461bcd60e51b815260040161030b906109a0565b60405163635ae90160e01b81526001600160a01b0382169063635ae90190349061036b90879087906004016108bd565b6000604051808303818588803b15801561038457600080fd5b505af1158015610398573d6000803e3d6000fd5b5050505050949350505050565b6060604051806040016040528060148152602001733d602d80600a3d3981f3363d3d373d3d3d363d7360601b815250826040518060400160405280600f81526020016e5af43d82803e903d91602b57fd5bf360881b81525060405160200161040f93929190610824565b6040516020818303038152906040529050919050565b600080610432848461044f565b905061044760008261044261014c565b610540565b949350505050565b6000828261045b6101a0565b60405160200161046d939291906107ab565b60405160208183030381529060405280519060200120905092915050565b600061029b8383306105b2565b6001600160a01b03161590565b60006104ef858585856040516024016104c093929190610899565b60408051601f198184030181529190526020810180516001600160e01b03166323b872dd60e01b1790526105f1565b95945050505050565b60006104478484846040516024016105119291906108bd565b60408051601f198184030181529190526020810180516001600160e01b031663095ea7b360e01b1790526105f1565b600080844710156105635760405162461bcd60e51b815260040161030b90610a29565b82516105815760405162461bcd60e51b815260040161030b90610909565b8383516020850187f590506001600160a01b0381166104475760405162461bcd60e51b815260040161030b9061093e565b60008060ff60f81b8386866040516020016105d094939291906107d4565b60408051808303601f19018152919052805160209091012095945050505050565b60006105fc836106a2565b6106185760405162461bcd60e51b815260040161030b90610975565b60006060846001600160a01b0316846040516106349190610808565b6000604051808303816000865af19150503d8060008114610671576040519150601f19603f3d011682016040523d82523d6000602084013e610676565b606091505b509150915061068582826106db565b805115806104ef5750808060200190518101906104ef9190610784565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610447575050151592915050565b816106e857805160208201fd5b5050565b80356001600160a01b038116811461029e57600080fd5b60008060408385031215610715578182fd5b61071f84846106ec565b915061072e84602085016106ec565b90509250929050565b6000806000806080858703121561074c578182fd5b61075686866106ec565b935061076586602087016106ec565b925061077486604087016106ec565b9396929550929360600135925050565b600060208284031215610795578081fd5b815180151581146107a4578182fd5b9392505050565b6001600160601b0319606094851b811682529290931b9091166014830152602882015260480190565b6001600160f81b031994909416845260609290921b6001600160601b03191660018401526015830152603582015260550190565b6000825161081a818460208701610a69565b9190910192915050565b60008451610836818460208901610a69565b606085901b6001600160601b031916908301908152835161085e816014840160208801610a69565b0160140195945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b60006020825282518060208401526108f5816040850160208701610a69565b601f01601f19169190910160400192915050565b6020808252818101527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604082015260600190565b60208082526019908201527f437265617465323a204661696c6564206f6e206465706c6f7900000000000000604082015260600190565b6020808252601190820152704c696245524332303a204e4f5f434f444560781b604082015260600190565b60208082526024908201527f4368616e6e656c466163746f72793a2045524332305f415050524f56455f46416040820152631253115160e21b606082015260800190565b60208082526025908201527f4368616e6e656c466163746f72793a2045524332305f5452414e534645525f46604082015264105253115160da1b606082015260800190565b6020808252601d908201527f437265617465323a20696e73756666696369656e742062616c616e6365000000604082015260600190565b90815260200190565b60005b83811015610a84578181015183820152602001610a6c565b83811115610a93576000848401525b5050505056fea26469706673582212206b46714e4e157ca4fcef5f14f882cae62cdcfb5e301602c8361ab37a1daaf2ab64736f6c63430007010033","devdoc":{"author":"Connext <support@connext.network>","kind":"dev","methods":{"constructor":{"details":"Creates a new `ChannelFactory`","params":{"_chainId":"the chain identifier when generating the CREATE2 salt. If zero, the chain identifier used in the proxy salt will be the result of the opcode","_mastercopy":"the address of the `ChannelMastercopy` (channel logic)"}},"createChannel(address,address)":{"details":"Allows us to create new channel contract and get it all set up in one transaction","params":{"alice":"address of the high fidelity channel participant","bob":"address of the other channel participant"}},"createChannelAndDepositAlice(address,address,address,uint256)":{"details":"Allows us to create a new channel contract and fund it in one transaction","params":{"bob":"address of the other channel participant"}},"getChainId()":{"details":"Allows us to get the chainId that this factory will use in the create2 salt"},"getChannelAddress(address,address)":{"details":"Allows us to get the address for a new channel contract created via `createChannel`","params":{"alice":"address of the igh fidelity channel participant","bob":"address of the other channel participant"}},"getMastercopy()":{"details":"Allows us to get the mastercopy that this factory will deploy channels against"},"getProxyCreationCode()":{"details":"Returns the proxy code used to both calculate the CREATE2 address and deploy the channel proxy pointed to the `ChannelMastercopy`"},"getStoredChainId()":{"details":"Allows us to get the chainId that this factory has stored"}},"title":"ChannelFactory","version":1},"userdoc":{"kind":"user","methods":{},"notice":"Creates and sets up a new channel proxy contract","version":1},"storageLayout":{"storage":[{"astId":3100,"contract":"src.sol/ChannelFactory.sol:ChannelFactory","label":"creationCodeHash","offset":0,"slot":"0","type":"t_bytes32"}],"types":{"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"}}}}')},2819:function(e){e.exports=JSON.parse('{"address":"0xd105b6B42206dfA6Db00E6a4823bC88eFAC00476","abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"assetId","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"AliceDeposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"defunder","type":"address"},{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"},{"internalType":"address[]","name":"assetIds","type":"address[]"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance[]","name":"balances","type":"tuple[]"},{"internalType":"uint256[]","name":"processedDepositsA","type":"uint256[]"},{"internalType":"uint256[]","name":"processedDepositsB","type":"uint256[]"},{"internalType":"uint256[]","name":"defundNonces","type":"uint256[]"},{"internalType":"uint256","name":"timeout","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"indexed":false,"internalType":"struct ICMCAdjudicator.CoreChannelState","name":"state","type":"tuple"},{"components":[{"internalType":"bytes32","name":"channelStateHash","type":"bytes32"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"consensusExpiry","type":"uint256"},{"internalType":"uint256","name":"defundExpiry","type":"uint256"}],"indexed":false,"internalType":"struct ICMCAdjudicator.ChannelDispute","name":"dispute","type":"tuple"},{"indexed":false,"internalType":"address[]","name":"assetIds","type":"address[]"}],"name":"ChannelDefunded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"disputer","type":"address"},{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"},{"internalType":"address[]","name":"assetIds","type":"address[]"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance[]","name":"balances","type":"tuple[]"},{"internalType":"uint256[]","name":"processedDepositsA","type":"uint256[]"},{"internalType":"uint256[]","name":"processedDepositsB","type":"uint256[]"},{"internalType":"uint256[]","name":"defundNonces","type":"uint256[]"},{"internalType":"uint256","name":"timeout","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"indexed":false,"internalType":"struct ICMCAdjudicator.CoreChannelState","name":"state","type":"tuple"},{"components":[{"internalType":"bytes32","name":"channelStateHash","type":"bytes32"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"consensusExpiry","type":"uint256"},{"internalType":"uint256","name":"defundExpiry","type":"uint256"}],"indexed":false,"internalType":"struct ICMCAdjudicator.ChannelDispute","name":"dispute","type":"tuple"}],"name":"ChannelDisputed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"defunder","type":"address"},{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"bytes32","name":"transferId","type":"bytes32"},{"internalType":"address","name":"transferDefinition","type":"address"},{"internalType":"address","name":"initiator","type":"address"},{"internalType":"address","name":"responder","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance","name":"balance","type":"tuple"},{"internalType":"uint256","name":"transferTimeout","type":"uint256"},{"internalType":"bytes32","name":"initialStateHash","type":"bytes32"}],"indexed":false,"internalType":"struct ICMCAdjudicator.CoreTransferState","name":"state","type":"tuple"},{"components":[{"internalType":"bytes32","name":"transferStateHash","type":"bytes32"},{"internalType":"uint256","name":"transferDisputeExpiry","type":"uint256"},{"internalType":"bool","name":"isDefunded","type":"bool"}],"indexed":false,"internalType":"struct ICMCAdjudicator.TransferDispute","name":"dispute","type":"tuple"},{"indexed":false,"internalType":"bytes","name":"encodedInitialState","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"encodedResolver","type":"bytes"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"indexed":false,"internalType":"struct Balance","name":"balance","type":"tuple"}],"name":"TransferDefunded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"disputer","type":"address"},{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"bytes32","name":"transferId","type":"bytes32"},{"internalType":"address","name":"transferDefinition","type":"address"},{"internalType":"address","name":"initiator","type":"address"},{"internalType":"address","name":"responder","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance","name":"balance","type":"tuple"},{"internalType":"uint256","name":"transferTimeout","type":"uint256"},{"internalType":"bytes32","name":"initialStateHash","type":"bytes32"}],"indexed":false,"internalType":"struct ICMCAdjudicator.CoreTransferState","name":"state","type":"tuple"},{"components":[{"internalType":"bytes32","name":"transferStateHash","type":"bytes32"},{"internalType":"uint256","name":"transferDisputeExpiry","type":"uint256"},{"internalType":"bool","name":"isDefunded","type":"bool"}],"indexed":false,"internalType":"struct ICMCAdjudicator.TransferDispute","name":"dispute","type":"tuple"}],"name":"TransferDisputed","type":"event"},{"inputs":[{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"},{"internalType":"address[]","name":"assetIds","type":"address[]"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance[]","name":"balances","type":"tuple[]"},{"internalType":"uint256[]","name":"processedDepositsA","type":"uint256[]"},{"internalType":"uint256[]","name":"processedDepositsB","type":"uint256[]"},{"internalType":"uint256[]","name":"defundNonces","type":"uint256[]"},{"internalType":"uint256","name":"timeout","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"internalType":"struct ICMCAdjudicator.CoreChannelState","name":"ccs","type":"tuple"},{"internalType":"address[]","name":"assetIds","type":"address[]"},{"internalType":"uint256[]","name":"indices","type":"uint256[]"}],"name":"defundChannel","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"bytes32","name":"transferId","type":"bytes32"},{"internalType":"address","name":"transferDefinition","type":"address"},{"internalType":"address","name":"initiator","type":"address"},{"internalType":"address","name":"responder","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance","name":"balance","type":"tuple"},{"internalType":"uint256","name":"transferTimeout","type":"uint256"},{"internalType":"bytes32","name":"initialStateHash","type":"bytes32"}],"internalType":"struct ICMCAdjudicator.CoreTransferState","name":"cts","type":"tuple"},{"internalType":"bytes","name":"encodedInitialTransferState","type":"bytes"},{"internalType":"bytes","name":"encodedTransferResolver","type":"bytes"},{"internalType":"bytes","name":"responderSignature","type":"bytes"}],"name":"defundTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"depositAlice","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"},{"internalType":"address[]","name":"assetIds","type":"address[]"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance[]","name":"balances","type":"tuple[]"},{"internalType":"uint256[]","name":"processedDepositsA","type":"uint256[]"},{"internalType":"uint256[]","name":"processedDepositsB","type":"uint256[]"},{"internalType":"uint256[]","name":"defundNonces","type":"uint256[]"},{"internalType":"uint256","name":"timeout","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"internalType":"struct ICMCAdjudicator.CoreChannelState","name":"ccs","type":"tuple"},{"internalType":"bytes","name":"aliceSignature","type":"bytes"},{"internalType":"bytes","name":"bobSignature","type":"bytes"}],"name":"disputeChannel","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"bytes32","name":"transferId","type":"bytes32"},{"internalType":"address","name":"transferDefinition","type":"address"},{"internalType":"address","name":"initiator","type":"address"},{"internalType":"address","name":"responder","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance","name":"balance","type":"tuple"},{"internalType":"uint256","name":"transferTimeout","type":"uint256"},{"internalType":"bytes32","name":"initialStateHash","type":"bytes32"}],"internalType":"struct ICMCAdjudicator.CoreTransferState","name":"cts","type":"tuple"},{"internalType":"bytes32[]","name":"merkleProofData","type":"bytes32[]"}],"name":"disputeTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address payable","name":"recipient","type":"address"}],"name":"exit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getAlice","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBob","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getChannelDispute","outputs":[{"components":[{"internalType":"bytes32","name":"channelStateHash","type":"bytes32"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"consensusExpiry","type":"uint256"},{"internalType":"uint256","name":"defundExpiry","type":"uint256"}],"internalType":"struct ICMCAdjudicator.ChannelDispute","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"}],"name":"getDefundNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"getExitableAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"}],"name":"getTotalDepositsAlice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"}],"name":"getTotalDepositsBob","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"}],"name":"getTotalTransferred","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"transferId","type":"bytes32"}],"name":"getTransferDispute","outputs":[{"components":[{"internalType":"bytes32","name":"transferStateHash","type":"bytes32"},{"internalType":"uint256","name":"transferDisputeExpiry","type":"uint256"},{"internalType":"bool","name":"isDefunded","type":"bool"}],"internalType":"struct ICMCAdjudicator.TransferDispute","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"internalType":"address payable","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"address","name":"callTo","type":"address"},{"internalType":"bytes","name":"callData","type":"bytes"}],"internalType":"struct WithdrawData","name":"wd","type":"tuple"}],"name":"getWithdrawalTransactionRecord","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_alice","type":"address"},{"internalType":"address","name":"_bob","type":"address"}],"name":"setup","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"internalType":"address payable","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"address","name":"callTo","type":"address"},{"internalType":"bytes","name":"callData","type":"bytes"}],"internalType":"struct WithdrawData","name":"wd","type":"tuple"},{"internalType":"bytes","name":"aliceSignature","type":"bytes"},{"internalType":"bytes","name":"bobSignature","type":"bytes"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"transactionHash":"0x4e36e3d5d5fbfb3375a060fb7b292a80b28cfeeca06bf7d4cee506fa68186a87","receipt":{"to":null,"from":"0xd4b33434Cb36df9286Ef5132FCFb8062c96aC56E","contractAddress":"0xd105b6B42206dfA6Db00E6a4823bC88eFAC00476","transactionIndex":0,"gasUsed":"3585396","logsBloom":"0xblockHash":"0x6c6929a9a820fd0c9b06a6daf369f4f600dff37bffb6459ffca6cb062060e17b","transactionHash":"0x4e36e3d5d5fbfb3375a060fb7b292a80b28cfeeca06bf7d4cee506fa68186a87","logs":[{"transactionIndex":0,"blockNumber":8930715,"transactionHash":"0x4e36e3d5d5fbfb3375a060fb7b292a80b28cfeeca06bf7d4cee506fa68186a87","address":"0x0000000000000000000000000000000000001010","topics":["0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63","0x0000000000000000000000000000000000000000000000000000000000001010","0x000000000000000000000000d4b33434cb36df9286ef5132fcfb8062c96ac56e","0x0000000000000000000000001ca971963bdb4ba2bf337c90660674acff5beb3f"],"data":"0x000000000000000000000000000000000000000000000000000cbce60ef588000000000000000000000000000000000000000000000000a2a15d09519be00000000000000000000000000000000000000000000000000000062eade463ce0fe40000000000000000000000000000000000000000000000a2a1504c6b8cea7800000000000000000000000000000000000000000000000000063b6aca72c397e4","logIndex":0,"blockHash":"0x6c6929a9a820fd0c9b06a6daf369f4f600dff37bffb6459ffca6cb062060e17b"}],"blockNumber":8930715,"cumulativeGasUsed":"3585396","status":1,"byzantium":true},"args":[],"solcInputHash":"89c55d5a88f10637860a9ea31a1daad3","metadata":"{\\"compiler\\":{\\"version\\":\\"0.7.1+commit.f4a555be\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"AliceDeposited\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"defunder\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address[]\\",\\"name\\":\\"assetIds\\",\\"type\\":\\"address[]\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance[]\\",\\"name\\":\\"balances\\",\\"type\\":\\"tuple[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsA\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsB\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"defundNonces\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"timeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.CoreChannelState\\",\\"name\\":\\"state\\",\\"type\\":\\"tuple\\"},{\\"components\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"channelStateHash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"consensusExpiry\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"defundExpiry\\",\\"type\\":\\"uint256\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.ChannelDispute\\",\\"name\\":\\"dispute\\",\\"type\\":\\"tuple\\"},{\\"indexed\\":false,\\"internalType\\":\\"address[]\\",\\"name\\":\\"assetIds\\",\\"type\\":\\"address[]\\"}],\\"name\\":\\"ChannelDefunded\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"disputer\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address[]\\",\\"name\\":\\"assetIds\\",\\"type\\":\\"address[]\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance[]\\",\\"name\\":\\"balances\\",\\"type\\":\\"tuple[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsA\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsB\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"defundNonces\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"timeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.CoreChannelState\\",\\"name\\":\\"state\\",\\"type\\":\\"tuple\\"},{\\"components\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"channelStateHash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"consensusExpiry\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"defundExpiry\\",\\"type\\":\\"uint256\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.ChannelDispute\\",\\"name\\":\\"dispute\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"ChannelDisputed\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"defunder\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferId\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"transferDefinition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"initiator\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"responder\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"balance\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferTimeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"initialStateHash\\",\\"type\\":\\"bytes32\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.CoreTransferState\\",\\"name\\":\\"state\\",\\"type\\":\\"tuple\\"},{\\"components\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferStateHash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferDisputeExpiry\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"isDefunded\\",\\"type\\":\\"bool\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.TransferDispute\\",\\"name\\":\\"dispute\\",\\"type\\":\\"tuple\\"},{\\"indexed\\":false,\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedInitialState\\",\\"type\\":\\"bytes\\"},{\\"indexed\\":false,\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedResolver\\",\\"type\\":\\"bytes\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"balance\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"TransferDefunded\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"disputer\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferId\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"transferDefinition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"initiator\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"responder\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"balance\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferTimeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"initialStateHash\\",\\"type\\":\\"bytes32\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.CoreTransferState\\",\\"name\\":\\"state\\",\\"type\\":\\"tuple\\"},{\\"components\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferStateHash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferDisputeExpiry\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"isDefunded\\",\\"type\\":\\"bool\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.TransferDispute\\",\\"name\\":\\"dispute\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"TransferDisputed\\",\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address[]\\",\\"name\\":\\"assetIds\\",\\"type\\":\\"address[]\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance[]\\",\\"name\\":\\"balances\\",\\"type\\":\\"tuple[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsA\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsB\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"defundNonces\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"timeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"}],\\"internalType\\":\\"struct ICMCAdjudicator.CoreChannelState\\",\\"name\\":\\"ccs\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"address[]\\",\\"name\\":\\"assetIds\\",\\"type\\":\\"address[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"indices\\",\\"type\\":\\"uint256[]\\"}],\\"name\\":\\"defundChannel\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferId\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"transferDefinition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"initiator\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"responder\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"balance\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferTimeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"initialStateHash\\",\\"type\\":\\"bytes32\\"}],\\"internalType\\":\\"struct ICMCAdjudicator.CoreTransferState\\",\\"name\\":\\"cts\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedInitialTransferState\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedTransferResolver\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"responderSignature\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"defundTransfer\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"depositAlice\\",\\"outputs\\":[],\\"stateMutability\\":\\"payable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address[]\\",\\"name\\":\\"assetIds\\",\\"type\\":\\"address[]\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance[]\\",\\"name\\":\\"balances\\",\\"type\\":\\"tuple[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsA\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsB\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"defundNonces\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"timeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"}],\\"internalType\\":\\"struct ICMCAdjudicator.CoreChannelState\\",\\"name\\":\\"ccs\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"aliceSignature\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"bobSignature\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"disputeChannel\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferId\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"transferDefinition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"initiator\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"responder\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"balance\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferTimeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"initialStateHash\\",\\"type\\":\\"bytes32\\"}],\\"internalType\\":\\"struct ICMCAdjudicator.CoreTransferState\\",\\"name\\":\\"cts\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"bytes32[]\\",\\"name\\":\\"merkleProofData\\",\\"type\\":\\"bytes32[]\\"}],\\"name\\":\\"disputeTransfer\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address payable\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"}],\\"name\\":\\"exit\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getAlice\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getBob\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getChannelDispute\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"channelStateHash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"consensusExpiry\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"defundExpiry\\",\\"type\\":\\"uint256\\"}],\\"internalType\\":\\"struct ICMCAdjudicator.ChannelDispute\\",\\"name\\":\\"\\",\\"type\\":\\"tuple\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getDefundNonce\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getExitableAmount\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getTotalDepositsAlice\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getTotalDepositsBob\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getTotalTransferred\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferId\\",\\"type\\":\\"bytes32\\"}],\\"name\\":\\"getTransferDispute\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferStateHash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferDisputeExpiry\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"isDefunded\\",\\"type\\":\\"bool\\"}],\\"internalType\\":\\"struct ICMCAdjudicator.TransferDispute\\",\\"name\\":\\"\\",\\"type\\":\\"tuple\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address payable\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"callTo\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"callData\\",\\"type\\":\\"bytes\\"}],\\"internalType\\":\\"struct WithdrawData\\",\\"name\\":\\"wd\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"getWithdrawalTransactionRecord\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"lock\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"_bob\\",\\"type\\":\\"address\\"}],\\"name\\":\\"setup\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address payable\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"callTo\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"callData\\",\\"type\\":\\"bytes\\"}],\\"internalType\\":\\"struct WithdrawData\\",\\"name\\":\\"wd\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"aliceSignature\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"bobSignature\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"withdraw\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"stateMutability\\":\\"payable\\",\\"type\\":\\"receive\\"}],\\"devdoc\\":{\\"author\\":\\"Connext <support@connext.network>\\",\\"kind\\":\\"dev\\",\\"methods\\":{\\"getAlice()\\":{\\"returns\\":{\\"_0\\":\\"Bob\'s signer address\\"}},\\"getBob()\\":{\\"returns\\":{\\"_0\\":\\"Alice\'s signer address\\"}},\\"setup(address,address)\\":{\\"params\\":{\\"_alice\\":\\": Address representing user with function deposit\\",\\"_bob\\":\\": Address representing user with multisig deposit\\"}},\\"withdraw((address,address,address,uint256,uint256,address,bytes),bytes,bytes)\\":{\\"params\\":{\\"aliceSignature\\":\\"Signature of owner a\\",\\"bobSignature\\":\\"Signature of owner b\\",\\"wd\\":\\"The withdraw data consisting of semantic withdraw information, i.e. assetId, recipient, and amount; information to make an optional call in addition to the actual transfer, i.e. target address for the call and call payload; additional information, i.e. channel address and nonce.\\"}}},\\"title\\":\\"ChannelMastercopy\\",\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{\\"getAlice()\\":{\\"notice\\":\\"A getter function for the bob of the multisig\\"},\\"getBob()\\":{\\"notice\\":\\"A getter function for the bob of the multisig\\"},\\"setup(address,address)\\":{\\"notice\\":\\"Contract constructor for Proxied copies\\"}},\\"notice\\":\\"Contains the logic used by all Vector multisigs. A proxy to this         contract is deployed per-channel using the ChannelFactory.sol.         Supports channel adjudication logic, deposit logic, and arbitrary         calls when a commitment is double-signed.\\",\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"src.sol/ChannelMastercopy.sol\\":\\"ChannelMastercopy\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\\\n *\\\\n * These functions can be used to verify that a message was signed by the holder\\\\n * of the private keys of a given address.\\\\n */\\\\nlibrary ECDSA {\\\\n    /**\\\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\\\n     * `signature`. This address can then be used for verification purposes.\\\\n     *\\\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\\\n     * this function rejects them by requiring the `s` value to be in the lower\\\\n     * half order, and the `v` value to be either 27 or 28.\\\\n     *\\\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\\\n     * verification to be secure: it is possible to craft signatures that\\\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\\\n     * this is by receiving a hash of the original message (which may otherwise\\\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\\\n     */\\\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\\\n        // Check the signature length\\\\n        if (signature.length != 65) {\\\\n            revert(\\\\\\"ECDSA: invalid signature length\\\\\\");\\\\n        }\\\\n\\\\n        // Divide the signature in r, s and v variables\\\\n        bytes32 r;\\\\n        bytes32 s;\\\\n        uint8 v;\\\\n\\\\n        // ecrecover takes the signature parameters, and the only way to get them\\\\n        // currently is to use assembly.\\\\n        // solhint-disable-next-line no-inline-assembly\\\\n        assembly {\\\\n            r := mload(add(signature, 0x20))\\\\n            s := mload(add(signature, 0x40))\\\\n            v := byte(0, mload(add(signature, 0x60)))\\\\n        }\\\\n\\\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\\\n        // the valid range for s in (281): 0 < s < secp256k1n \\\\u00f7 2 + 1, and for v in (282): v \\\\u2208 {27, 28}. Most\\\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\\\n        //\\\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\\\n        // these malleable signatures as well.\\\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\\\n            revert(\\\\\\"ECDSA: invalid signature \'s\' value\\\\\\");\\\\n        }\\\\n\\\\n        if (v != 27 && v != 28) {\\\\n            revert(\\\\\\"ECDSA: invalid signature \'v\' value\\\\\\");\\\\n        }\\\\n\\\\n        // If the signature is valid (and not malleable), return the signer address\\\\n        address signer = ecrecover(hash, v, r, s);\\\\n        require(signer != address(0), \\\\\\"ECDSA: invalid signature\\\\\\");\\\\n\\\\n        return signer;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\\\n     * replicates the behavior of the\\\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\\\n     * JSON-RPC method.\\\\n     *\\\\n     * See {recover}.\\\\n     */\\\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\\\n        // 32 is the length in bytes of hash,\\\\n        // enforced by the type signature above\\\\n        return keccak256(abi.encodePacked(\\\\\\"\\\\\\\\x19Ethereum Signed Message:\\\\\\\\n32\\\\\\", hash));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf25c49d2be2d28918ae6de7e9724238367dabe50631ec8fd23d1cdae2cb70262\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/cryptography/MerkleProof.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev These functions deal with verification of Merkle trees (hash trees),\\\\n */\\\\nlibrary MerkleProof {\\\\n    /**\\\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\\\n     * defined by `root`. For this, a `proof` must be provided, containing\\\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\\\n     */\\\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\\\n        bytes32 computedHash = leaf;\\\\n\\\\n        for (uint256 i = 0; i < proof.length; i++) {\\\\n            bytes32 proofElement = proof[i];\\\\n\\\\n            if (computedHash <= proofElement) {\\\\n                // Hash(current computed hash + current element of the proof)\\\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\\\n            } else {\\\\n                // Hash(current element of the proof + current computed hash)\\\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\\\n            }\\\\n        }\\\\n\\\\n        // Check if the computed hash (root) is equal to the provided root\\\\n        return computedHash == root;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x4959be2683e7af3439cb94f06aa6c40cb42ca9336747d0c7dce54f07196489bc\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/math/Math.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Standard math utilities missing in the Solidity language.\\\\n */\\\\nlibrary Math {\\\\n    /**\\\\n     * @dev Returns the largest of two numbers.\\\\n     */\\\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a >= b ? a : b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the smallest of two numbers.\\\\n     */\\\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a < b ? a : b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the average of two numbers. The result is rounded towards\\\\n     * zero.\\\\n     */\\\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        // (a + b) / 2 can overflow, so we distribute\\\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xa4fdec0ea7d943692cac780111ff2ff9d89848cad0494a59cfaed63a705054b4\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/math/SafeMath.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Wrappers over Solidity\'s arithmetic operations with added overflow\\\\n * checks.\\\\n *\\\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\\\n * in bugs, because programmers usually assume that an overflow raises an\\\\n * error, which is the standard behavior in high level programming languages.\\\\n * `SafeMath` restores this intuition by reverting the transaction when an\\\\n * operation overflows.\\\\n *\\\\n * Using this library instead of the unchecked operations eliminates an entire\\\\n * class of bugs, so it\'s recommended to use it always.\\\\n */\\\\nlibrary SafeMath {\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `+` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Addition cannot overflow.\\\\n     */\\\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        uint256 c = a + b;\\\\n        require(c >= a, \\\\\\"SafeMath: addition overflow\\\\\\");\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return sub(a, b, \\\\\\"SafeMath: subtraction overflow\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        require(b <= a, errorMessage);\\\\n        uint256 c = a - b;\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `*` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Multiplication cannot overflow.\\\\n     */\\\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\\\\n        // benefit is lost if \'b\' is also tested.\\\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\\\n        if (a == 0) {\\\\n            return 0;\\\\n        }\\\\n\\\\n        uint256 c = a * b;\\\\n        require(c / a == b, \\\\\\"SafeMath: multiplication overflow\\\\\\");\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return div(a, b, \\\\\\"SafeMath: division by zero\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        require(b > 0, errorMessage);\\\\n        uint256 c = a / b;\\\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * Reverts when dividing by zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return mod(a, b, \\\\\\"SafeMath: modulo by zero\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * Reverts with custom message when dividing by zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        require(b != 0, errorMessage);\\\\n        return a % b;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Returns the amount of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender\'s allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\\\n     * allowance mechanism. `amount` is then deducted from the caller\'s\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Address.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Collection of functions related to the address type\\\\n */\\\\nlibrary Address {\\\\n    /**\\\\n     * @dev Returns true if `account` is a contract.\\\\n     *\\\\n     * [IMPORTANT]\\\\n     * ====\\\\n     * It is unsafe to assume that an address for which this function returns\\\\n     * false is an externally-owned account (EOA) and not a contract.\\\\n     *\\\\n     * Among others, `isContract` will return false for the following\\\\n     * types of addresses:\\\\n     *\\\\n     *  - an externally-owned account\\\\n     *  - a contract in construction\\\\n     *  - an address where a contract will be created\\\\n     *  - an address where a contract lived, but was destroyed\\\\n     * ====\\\\n     */\\\\n    function isContract(address account) internal view returns (bool) {\\\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\\\n        // for accounts without code, i.e. `keccak256(\'\')`\\\\n        bytes32 codehash;\\\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\\\n        // solhint-disable-next-line no-inline-assembly\\\\n        assembly { codehash := extcodehash(account) }\\\\n        return (codehash != accountHash && codehash != 0x0);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\\\\n     * `recipient`, forwarding all available gas and reverting on errors.\\\\n     *\\\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\\\n     * imposed by `transfer`, making them unable to receive funds via\\\\n     * `transfer`. {sendValue} removes this limitation.\\\\n     *\\\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\\\n     *\\\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\\\n     * taken to not create reentrancy vulnerabilities. Consider using\\\\n     * {ReentrancyGuard} or the\\\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\\\n     */\\\\n    function sendValue(address payable recipient, uint256 amount) internal {\\\\n        require(address(this).balance >= amount, \\\\\\"Address: insufficient balance\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\\\n        (bool success, ) = recipient.call{ value: amount }(\\\\\\"\\\\\\");\\\\n        require(success, \\\\\\"Address: unable to send value, recipient may have reverted\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Performs a Solidity function call using a low level `call`. A\\\\n     * plain`call` is an unsafe replacement for a function call: use this\\\\n     * function instead.\\\\n     *\\\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\\\n     * function (like regular Solidity function calls).\\\\n     *\\\\n     * Returns the raw returned data. To convert to the expected return value,\\\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `target` must be a contract.\\\\n     * - calling `target` with `data` must not revert.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n      return functionCall(target, data, \\\\\\"Address: low-level call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but also transferring `value` wei to `target`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the calling contract must have an ETH balance of at least `value`.\\\\n     * - the called Solidity function must be `payable`.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, value, \\\\\\"Address: low-level call with value failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\\\n        require(address(this).balance >= value, \\\\\\"Address: insufficient balance for call\\\\\\");\\\\n        return _functionCallWithValue(target, data, value, errorMessage);\\\\n    }\\\\n\\\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: call to non-contract\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls\\\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\\\n        if (success) {\\\\n            return returndata;\\\\n        } else {\\\\n            // Look for revert reason and bubble it up if present\\\\n            if (returndata.length > 0) {\\\\n                // The easiest way to bubble the revert reason is using memory via assembly\\\\n\\\\n                // solhint-disable-next-line no-inline-assembly\\\\n                assembly {\\\\n                    let returndata_size := mload(returndata)\\\\n                    revert(add(32, returndata), returndata_size)\\\\n                }\\\\n            } else {\\\\n                revert(errorMessage);\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x698f929f1097637d051976b322a2d532c27df022b09010e8d091e2888a5ebdf8\\",\\"license\\":\\"MIT\\"},\\"src.sol/CMCAdjudicator.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/Commitment.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/ICMCAdjudicator.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/ITransferDefinition.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/Types.sol\\\\\\";\\\\nimport \\\\\\"./CMCCore.sol\\\\\\";\\\\nimport \\\\\\"./CMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./CMCDeposit.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibChannelCrypto.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibMath.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/cryptography/MerkleProof.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/math/SafeMath.sol\\\\\\";\\\\n\\\\n/// @title CMCAdjudicator\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains logic for disputing a single channel and all active\\\\n///         transfers associated with the channel. Contains two major phases:\\\\n///         (1) consensus: settle on latest channel state\\\\n///         (2) defund: remove assets and dispute active transfers\\\\ncontract CMCAdjudicator is CMCCore, CMCAsset, CMCDeposit, ICMCAdjudicator {\\\\n    using LibChannelCrypto for bytes32;\\\\n    using LibMath for uint256;\\\\n    using SafeMath for uint256;\\\\n\\\\n    uint256 private constant INITIAL_DEFUND_NONCE = 1;\\\\n\\\\n    ChannelDispute private channelDispute;\\\\n    mapping(address => uint256) private defundNonces;\\\\n    mapping(bytes32 => TransferDispute) private transferDisputes;\\\\n\\\\n    modifier validateChannel(CoreChannelState calldata ccs) {\\\\n        require(\\\\n            ccs.channelAddress == address(this) &&\\\\n                ccs.alice == alice &&\\\\n                ccs.bob == bob,\\\\n            \\\\\\"CMCAdjudicator: INVALID_CHANNEL\\\\\\"\\\\n        );\\\\n        _;\\\\n    }\\\\n\\\\n    modifier validateTransfer(CoreTransferState calldata cts) {\\\\n        require(\\\\n            cts.channelAddress == address(this),\\\\n            \\\\\\"CMCAdjudicator: INVALID_TRANSFER\\\\\\"\\\\n        );\\\\n        _;\\\\n    }\\\\n\\\\n    function getChannelDispute()\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (ChannelDispute memory)\\\\n    {\\\\n        return channelDispute;\\\\n    }\\\\n\\\\n    function getDefundNonce(address assetId)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (uint256)\\\\n    {\\\\n        return defundNonces[assetId];\\\\n    }\\\\n\\\\n    function getTransferDispute(bytes32 transferId)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (TransferDispute memory)\\\\n    {\\\\n        return transferDisputes[transferId];\\\\n    }\\\\n\\\\n    function disputeChannel(\\\\n        CoreChannelState calldata ccs,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) external override onlyViaProxy nonReentrant validateChannel(ccs) {\\\\n        // Generate hash\\\\n        bytes32 ccsHash = hashChannelState(ccs);\\\\n\\\\n        // Verify Alice\'s and Bob\'s signature on the channel state\\\\n        verifySignaturesOnChannelStateHash(ccs, ccsHash, aliceSignature, bobSignature);\\\\n\\\\n        // We cannot dispute a channel in its defund phase\\\\n        require(!inDefundPhase(), \\\\\\"CMCAdjudicator: INVALID_PHASE\\\\\\");\\\\n\\\\n        // New nonce must be strictly greater than the stored one\\\\n        require(\\\\n            channelDispute.nonce < ccs.nonce,\\\\n            \\\\\\"CMCAdjudicator: INVALID_NONCE\\\\\\"\\\\n        );\\\\n\\\\n        if (!inConsensusPhase()) {\\\\n            // We are not already in a dispute\\\\n            // Set expiries\\\\n            // TODO: offchain-ensure that there can\'t be an overflow\\\\n            channelDispute.consensusExpiry = block.timestamp.add(ccs.timeout);\\\\n            channelDispute.defundExpiry = block.timestamp.add(\\\\n                ccs.timeout.mul(2)\\\\n            );\\\\n        }\\\\n\\\\n        // Store newer state\\\\n        channelDispute.channelStateHash = ccsHash;\\\\n        channelDispute.nonce = ccs.nonce;\\\\n        channelDispute.merkleRoot = ccs.merkleRoot;\\\\n\\\\n        // Emit event\\\\n        emit ChannelDisputed(msg.sender, ccs, channelDispute);\\\\n    }\\\\n\\\\n    function defundChannel(\\\\n        CoreChannelState calldata ccs,\\\\n        address[] calldata assetIds,\\\\n        uint256[] calldata indices\\\\n    ) external override onlyViaProxy nonReentrant validateChannel(ccs) {\\\\n        // These checks are not strictly necessary, but it\'s a bit cleaner this way\\\\n        require(assetIds.length > 0, \\\\\\"CMCAdjudicator: NO_ASSETS_GIVEN\\\\\\");\\\\n        require(\\\\n            indices.length <= assetIds.length,\\\\n            \\\\\\"CMCAdjudicator: WRONG_ARRAY_LENGTHS\\\\\\"\\\\n        );\\\\n\\\\n        // Verify that the given channel state matches the stored one\\\\n        require(\\\\n            hashChannelState(ccs) == channelDispute.channelStateHash,\\\\n            \\\\\\"CMCAdjudicator: INVALID_CHANNEL_HASH\\\\\\"\\\\n        );\\\\n\\\\n        // We need to be in defund phase for that\\\\n        require(inDefundPhase(), \\\\\\"CMCAdjudicator: INVALID_PHASE\\\\\\");\\\\n\\\\n        // TODO SECURITY: Beware of reentrancy\\\\n        // TODO: offchain-ensure that all arrays have the same length:\\\\n        // assetIds, balances, processedDepositsA, processedDepositsB, defundNonces\\\\n        // Make sure there are no duplicates in the assetIds -- duplicates are often a source of double-spends\\\\n\\\\n        // Defund all assets given\\\\n        for (uint256 i = 0; i < assetIds.length; i++) {\\\\n            address assetId = assetIds[i];\\\\n\\\\n            // Verify or find the index of the assetId in the ccs.assetIds\\\\n            uint256 index;\\\\n            if (i < indices.length) {\\\\n                // The index was supposedly given -- we verify\\\\n                index = indices[i];\\\\n                require(\\\\n                    assetId == ccs.assetIds[index],\\\\n                    \\\\\\"CMCAdjudicator: INDEX_MISMATCH\\\\\\"\\\\n                );\\\\n            } else {\\\\n                // we search through the assets in ccs\\\\n                for (index = 0; index < ccs.assetIds.length; index++) {\\\\n                    if (assetId == ccs.assetIds[index]) {\\\\n                        break;\\\\n                    }\\\\n                }\\\\n            }\\\\n\\\\n            // Now, if `index`  is equal to the number of assets in ccs,\\\\n            // then the current asset is not in ccs;\\\\n            // otherwise, `index` is the index in ccs for the current asset\\\\n\\\\n            // Check the assets haven\'t already been defunded + update the\\\\n            // defundNonce for that asset\\\\n            {\\\\n                // Open a new block to avoid \\\\\\"stack too deep\\\\\\" error\\\\n                uint256 defundNonce =\\\\n                    (index == ccs.assetIds.length)\\\\n                        ? INITIAL_DEFUND_NONCE\\\\n                        : ccs.defundNonces[index];\\\\n                require(\\\\n                    defundNonces[assetId] < defundNonce,\\\\n                    \\\\\\"CMCAdjudicator: CHANNEL_ALREADY_DEFUNDED\\\\\\"\\\\n                );\\\\n                defundNonces[assetId] = defundNonce;\\\\n            }\\\\n\\\\n            // Get total deposits\\\\n            uint256 tdAlice = _getTotalDepositsAlice(assetId);\\\\n            uint256 tdBob = _getTotalDepositsBob(assetId);\\\\n\\\\n            Balance memory balance;\\\\n\\\\n            if (index == ccs.assetIds.length) {\\\\n                // The current asset is not a part of ccs; refund what has been deposited\\\\n                balance = Balance({\\\\n                    amount: [tdAlice, tdBob],\\\\n                    to: [payable(ccs.alice), payable(ccs.bob)]\\\\n                });\\\\n            } else {\\\\n                // Start with the final balances in ccs\\\\n                balance = ccs.balances[index];\\\\n                // Add unprocessed deposits\\\\n                balance.amount[0] = balance.amount[0].satAdd(\\\\n                    tdAlice - ccs.processedDepositsA[index]\\\\n                );\\\\n                balance.amount[1] = balance.amount[1].satAdd(\\\\n                    tdBob - ccs.processedDepositsB[index]\\\\n                );\\\\n            }\\\\n\\\\n            // Add result to exitable amounts\\\\n            makeBalanceExitable(assetId, balance);\\\\n        }\\\\n\\\\n        emit ChannelDefunded(\\\\n            msg.sender,\\\\n            ccs,\\\\n            channelDispute,\\\\n            assetIds\\\\n        );\\\\n    }\\\\n\\\\n    function disputeTransfer(\\\\n        CoreTransferState calldata cts,\\\\n        bytes32[] calldata merkleProofData\\\\n    ) external override onlyViaProxy nonReentrant validateTransfer(cts) {\\\\n        // Verify that the given transfer state is included in the \\\\\\"finalized\\\\\\" channel state\\\\n        bytes32 transferStateHash = hashTransferState(cts);\\\\n        verifyMerkleProof(\\\\n            merkleProofData,\\\\n            channelDispute.merkleRoot,\\\\n            transferStateHash\\\\n        );\\\\n\\\\n        // The channel needs to be in defund phase for that, i.e. channel state is \\\\\\"finalized\\\\\\"\\\\n        require(inDefundPhase(), \\\\\\"CMCAdjudicator: INVALID_PHASE\\\\\\");\\\\n\\\\n        // Get stored dispute for this transfer\\\\n        TransferDispute storage transferDispute =\\\\n            transferDisputes[cts.transferId];\\\\n\\\\n        // Verify that this transfer has not been disputed before\\\\n        require(\\\\n            transferDispute.transferDisputeExpiry == 0,\\\\n            \\\\\\"CMCAdjudicator: TRANSFER_ALREADY_DISPUTED\\\\\\"\\\\n        );\\\\n\\\\n        // Store transfer state and set expiry\\\\n        transferDispute.transferStateHash = transferStateHash;\\\\n        // TODO: offchain-ensure that there can\'t be an overflow\\\\n        transferDispute.transferDisputeExpiry = block.timestamp.add(\\\\n            cts.transferTimeout\\\\n        );\\\\n\\\\n        emit TransferDisputed(\\\\n            msg.sender,\\\\n            cts,\\\\n            transferDispute\\\\n        );\\\\n    }\\\\n\\\\n    function defundTransfer(\\\\n        CoreTransferState calldata cts,\\\\n        bytes calldata encodedInitialTransferState,\\\\n        bytes calldata encodedTransferResolver,\\\\n        bytes calldata responderSignature\\\\n    ) external override onlyViaProxy nonReentrant validateTransfer(cts) {\\\\n        // Get stored dispute for this transfer\\\\n        TransferDispute storage transferDispute =\\\\n            transferDisputes[cts.transferId];\\\\n\\\\n        // Verify that a dispute for this transfer has already been started\\\\n        require(\\\\n            transferDispute.transferDisputeExpiry != 0,\\\\n            \\\\\\"CMCAdjudicator: TRANSFER_NOT_DISPUTED\\\\\\"\\\\n        );\\\\n\\\\n        // Verify that the given transfer state matches the stored one\\\\n        require(\\\\n            hashTransferState(cts) == transferDispute.transferStateHash,\\\\n            \\\\\\"CMCAdjudicator: INVALID_TRANSFER_HASH\\\\\\"\\\\n        );\\\\n\\\\n        // We can\'t defund twice\\\\n        require(\\\\n            !transferDispute.isDefunded,\\\\n            \\\\\\"CMCAdjudicator: TRANSFER_ALREADY_DEFUNDED\\\\\\"\\\\n        );\\\\n        transferDispute.isDefunded = true;\\\\n\\\\n        Balance memory balance;\\\\n\\\\n        if (block.timestamp < transferDispute.transferDisputeExpiry) {\\\\n            // Ensure the correct hash is provided\\\\n            require(\\\\n                keccak256(encodedInitialTransferState) == cts.initialStateHash,\\\\n                \\\\\\"CMCAdjudicator: INVALID_TRANSFER_HASH\\\\\\"\\\\n            );\\\\n            \\\\n            // Before dispute expiry, responder or responder-authorized\\\\n            // agent (i.e. watchtower) can resolve\\\\n            require(\\\\n                msg.sender == cts.responder || cts.initialStateHash.checkSignature(responderSignature, cts.responder),\\\\n                \\\\\\"CMCAdjudicator: INVALID_RESOLVER\\\\\\"\\\\n            );\\\\n            \\\\n            ITransferDefinition transferDefinition =\\\\n                ITransferDefinition(cts.transferDefinition);\\\\n            balance = transferDefinition.resolve(\\\\n                abi.encode(cts.balance),\\\\n                encodedInitialTransferState,\\\\n                encodedTransferResolver\\\\n            );\\\\n            // Verify that returned balances don\'t exceed initial balances\\\\n            require(\\\\n                balance.amount[0].add(balance.amount[1]) <=\\\\n                    cts.balance.amount[0].add(cts.balance.amount[1]),\\\\n                \\\\\\"CMCAdjudicator: INVALID_BALANCES\\\\\\"\\\\n            );\\\\n        } else {\\\\n            // After dispute expiry, if the responder hasn\'t resolved, we defund the initial balance\\\\n            balance = cts.balance;\\\\n        }\\\\n\\\\n        // Depending on previous code path, defund either resolved or initial balance\\\\n        makeBalanceExitable(cts.assetId, balance);\\\\n\\\\n        // Emit event\\\\n        emit TransferDefunded(\\\\n            msg.sender,\\\\n            cts,\\\\n            transferDispute,\\\\n            encodedInitialTransferState,\\\\n            encodedTransferResolver,\\\\n            balance\\\\n        );\\\\n    }\\\\n\\\\n    function verifySignaturesOnChannelStateHash(\\\\n        CoreChannelState calldata ccs,\\\\n        bytes32 ccsHash,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) internal pure {\\\\n        bytes32 commitment =\\\\n            keccak256(abi.encode(CommitmentType.ChannelState, ccsHash));\\\\n        require(\\\\n            commitment.checkSignature(aliceSignature, ccs.alice),\\\\n            \\\\\\"CMCAdjudicator: INVALID_ALICE_SIG\\\\\\"\\\\n        );\\\\n        require(\\\\n            commitment.checkSignature(bobSignature, ccs.bob),\\\\n            \\\\\\"CMCAdjudicator: INVALID_BOB_SIG\\\\\\"\\\\n        );\\\\n    }\\\\n\\\\n    function verifyMerkleProof(\\\\n        bytes32[] calldata proof,\\\\n        bytes32 root,\\\\n        bytes32 leaf\\\\n    ) internal pure {\\\\n        require(\\\\n            MerkleProof.verify(proof, root, leaf),\\\\n            \\\\\\"CMCAdjudicator: INVALID_MERKLE_PROOF\\\\\\"\\\\n        );\\\\n    }\\\\n\\\\n    function inConsensusPhase() internal view returns (bool) {\\\\n        return block.timestamp < channelDispute.consensusExpiry;\\\\n    }\\\\n\\\\n    function inDefundPhase() internal view returns (bool) {\\\\n        return\\\\n            channelDispute.consensusExpiry <= block.timestamp &&\\\\n            block.timestamp < channelDispute.defundExpiry;\\\\n    }\\\\n\\\\n    function hashChannelState(CoreChannelState calldata ccs)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        return keccak256(abi.encode(ccs));\\\\n    }\\\\n\\\\n    function hashTransferState(CoreTransferState calldata cts)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        return keccak256(abi.encode(cts));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x351fb7770cbb6fbb6f3470e63d5a9e93c817722f9c8e2e5c62e38ebf8c6e389b\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/CMCAsset.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/ICMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/Types.sol\\\\\\";\\\\nimport \\\\\\"./CMCCore.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibAsset.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibMath.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/math/Math.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/math/SafeMath.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\\\\";\\\\n\\\\n/// @title CMCAsset\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains logic to safely transfer channel assets (even if they are\\\\n///         noncompliant). During adjudication, balances from defunding the\\\\n///         channel or defunding transfers are registered as withdrawable. Once\\\\n///         they are registered, the owner (or a watchtower on behalf of the\\\\n///         owner), may call `exit` to reclaim funds from the multisig.\\\\n\\\\ncontract CMCAsset is CMCCore, ICMCAsset {\\\\n    using SafeMath for uint256;\\\\n    using LibMath for uint256;\\\\n\\\\n    mapping(address => uint256) internal totalTransferred;\\\\n    mapping(address => mapping(address => uint256))\\\\n        private exitableAmount;\\\\n\\\\n    function registerTransfer(address assetId, uint256 amount) internal {\\\\n        totalTransferred[assetId] += amount;\\\\n    }\\\\n\\\\n    function getTotalTransferred(address assetId)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (uint256)\\\\n    {\\\\n        return totalTransferred[assetId];\\\\n    }\\\\n\\\\n    function makeExitable(\\\\n        address assetId,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal {\\\\n        exitableAmount[assetId][\\\\n            recipient\\\\n        ] = exitableAmount[assetId][recipient].satAdd(amount);\\\\n    }\\\\n\\\\n    function makeBalanceExitable(\\\\n        address assetId,\\\\n        Balance memory balance\\\\n    ) internal {\\\\n        for (uint256 i = 0; i < 2; i++) {\\\\n            uint256 amount = balance.amount[i];\\\\n            if (amount > 0) {\\\\n                makeExitable(assetId, balance.to[i], amount);\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n    function getExitableAmount(address assetId, address owner)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (uint256)\\\\n    {\\\\n        return exitableAmount[assetId][owner];\\\\n    }\\\\n\\\\n    function getAvailableAmount(address assetId, uint256 maxAmount)\\\\n        internal\\\\n        view\\\\n        returns (uint256)\\\\n    {\\\\n        // Taking the min protects against the case where the multisig\\\\n        // holds less than the amount that is trying to be withdrawn\\\\n        // while still allowing the total of the funds to be removed\\\\n        // without the transaction reverting.\\\\n        return Math.min(maxAmount, LibAsset.getOwnBalance(assetId));\\\\n    }\\\\n\\\\n    function transferAsset(\\\\n        address assetId,\\\\n        address payable recipient,\\\\n        uint256 amount\\\\n    ) internal {\\\\n        registerTransfer(assetId, amount);\\\\n        require(\\\\n            LibAsset.unregisteredTransfer(assetId, recipient, amount),\\\\n            \\\\\\"CMCAsset: TRANSFER_FAILED\\\\\\"\\\\n        );\\\\n    }\\\\n\\\\n    function exit(\\\\n        address assetId,\\\\n        address owner,\\\\n        address payable recipient\\\\n    ) external override onlyViaProxy nonReentrant {\\\\n        // Either the owner must be the recipient, or in control\\\\n        // of setting the recipient of the funds to whomever they\\\\n        // choose\\\\n        require(\\\\n            msg.sender == owner || owner == recipient,\\\\n            \\\\\\"CMCAsset: OWNER_MISMATCH\\\\\\"\\\\n        );\\\\n\\\\n        uint256 amount =\\\\n            getAvailableAmount(\\\\n                assetId,\\\\n                exitableAmount[assetId][owner]\\\\n            );\\\\n\\\\n        // Revert if amount is 0\\\\n        require(amount > 0, \\\\\\"CMCAsset: NO_OP\\\\\\");\\\\n\\\\n        // Reduce the amount claimable from the multisig by the owner\\\\n        exitableAmount[assetId][\\\\n            owner\\\\n        ] = exitableAmount[assetId][owner].sub(amount);\\\\n\\\\n        // Perform transfer\\\\n        transferAsset(assetId, recipient, amount);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x39c1bd81d8ec2a0fa7c23aad683017f5e2ec28a2db43643020649f935b5b74bf\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/CMCCore.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/ICMCCore.sol\\\\\\";\\\\nimport \\\\\\"./ReentrancyGuard.sol\\\\\\";\\\\n\\\\n/// @title CMCCore\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains logic pertaining to the participants of a channel,\\\\n///         including setting and retrieving the participants and the\\\\n///         mastercopy.\\\\n\\\\ncontract CMCCore is ReentrancyGuard, ICMCCore {\\\\n    address private immutable mastercopyAddress;\\\\n\\\\n    address internal alice;\\\\n    address internal bob;\\\\n\\\\n    /// @notice Set invalid participants to block the mastercopy from being used directly\\\\n    ///         Nonzero address also prevents the mastercopy from being setup\\\\n    ///         Only setting alice is sufficient, setting bob too wouldn\'t change anything\\\\n    constructor() {\\\\n        mastercopyAddress = address(this);\\\\n    }\\\\n\\\\n    // Prevents us from calling methods directly from the mastercopy contract\\\\n    modifier onlyViaProxy {\\\\n        require(\\\\n            address(this) != mastercopyAddress,\\\\n            \\\\\\"Mastercopy: ONLY_VIA_PROXY\\\\\\"\\\\n        );\\\\n        _;\\\\n    }\\\\n\\\\n    /// @notice Contract constructor for Proxied copies\\\\n    /// @param _alice: Address representing user with function deposit\\\\n    /// @param _bob: Address representing user with multisig deposit\\\\n    function setup(address _alice, address _bob)\\\\n        external\\\\n        override\\\\n        onlyViaProxy\\\\n    {\\\\n        require(alice == address(0), \\\\\\"CMCCore: ALREADY_SETUP\\\\\\");\\\\n        require(\\\\n            _alice != address(0) && _bob != address(0),\\\\n            \\\\\\"CMCCore: INVALID_PARTICIPANT\\\\\\"\\\\n        );\\\\n        require(_alice != _bob, \\\\\\"CMCCore: IDENTICAL_PARTICIPANTS\\\\\\");\\\\n        ReentrancyGuard.setup();\\\\n        alice = _alice;\\\\n        bob = _bob;\\\\n    }\\\\n\\\\n    /// @notice A getter function for the bob of the multisig\\\\n    /// @return Bob\'s signer address\\\\n    function getAlice()\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (address)\\\\n    {\\\\n        return alice;\\\\n    }\\\\n\\\\n    /// @notice A getter function for the bob of the multisig\\\\n    /// @return Alice\'s signer address\\\\n    function getBob()\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (address)\\\\n    {\\\\n        return bob;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x37324d80a19f1feb6e413fe6a41d82b5dba38bca62e0e05ae6f420000dd93c53\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/CMCDeposit.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/ICMCDeposit.sol\\\\\\";\\\\nimport \\\\\\"./CMCCore.sol\\\\\\";\\\\nimport \\\\\\"./CMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibAsset.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibERC20.sol\\\\\\";\\\\n\\\\n/// @title CMCDeposit\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains logic supporting channel multisig deposits. Channel\\\\n///         funding is asymmetric, with `alice` having to call a deposit\\\\n///         function which tracks the total amount she has deposited so far,\\\\n///         and any other funds in the multisig being attributed to `bob`.\\\\n\\\\ncontract CMCDeposit is CMCCore, CMCAsset, ICMCDeposit {\\\\n    mapping(address => uint256) private depositsAlice;\\\\n\\\\n    receive() external payable onlyViaProxy nonReentrant {}\\\\n\\\\n    function getTotalDepositsAlice(address assetId)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (uint256)\\\\n    {\\\\n        return _getTotalDepositsAlice(assetId);\\\\n    }\\\\n\\\\n    function _getTotalDepositsAlice(address assetId)\\\\n        internal\\\\n        view\\\\n        returns (uint256)\\\\n    {\\\\n        return depositsAlice[assetId];\\\\n    }\\\\n\\\\n    function getTotalDepositsBob(address assetId)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (uint256)\\\\n    {\\\\n        return _getTotalDepositsBob(assetId);\\\\n    }\\\\n\\\\n    // Calculated using invariant onchain properties. Note we DONT use safemath here\\\\n    function _getTotalDepositsBob(address assetId)\\\\n        internal\\\\n        view\\\\n        returns (uint256)\\\\n    {\\\\n        return\\\\n            LibAsset.getOwnBalance(assetId) +\\\\n            totalTransferred[assetId] -\\\\n            depositsAlice[assetId];\\\\n    }\\\\n\\\\n    function depositAlice(address assetId, uint256 amount)\\\\n        external\\\\n        payable\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrant\\\\n    {\\\\n        if (LibAsset.isEther(assetId)) {\\\\n            require(msg.value == amount, \\\\\\"CMCDeposit: VALUE_MISMATCH\\\\\\");\\\\n        } else {\\\\n            // If ETH is sent along, it will be attributed to bob\\\\n            require(msg.value == 0, \\\\\\"CMCDeposit: ETH_WITH_ERC_TRANSFER\\\\\\");\\\\n            require(\\\\n                LibERC20.transferFrom(\\\\n                    assetId,\\\\n                    msg.sender,\\\\n                    address(this),\\\\n                    amount\\\\n                ),\\\\n                \\\\\\"CMCDeposit: ERC20_TRANSFER_FAILED\\\\\\"\\\\n            );\\\\n        }\\\\n        // NOTE: explicitly do NOT use safemath here\\\\n        depositsAlice[assetId] += amount;\\\\n        emit AliceDeposited(assetId, amount);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x4d3dd828158289df93d6b5a6419bc5e8d95888aba81e62cd913af1e4c540bece\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/CMCWithdraw.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/Commitment.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/ICMCWithdraw.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/WithdrawHelper.sol\\\\\\";\\\\nimport \\\\\\"./CMCCore.sol\\\\\\";\\\\nimport \\\\\\"./CMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibAsset.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibChannelCrypto.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibUtils.sol\\\\\\";\\\\n\\\\n/// @title CMCWithdraw\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains logic for all cooperative channel multisig withdrawals.\\\\n///         Cooperative withdrawal commitments must be signed by both channel\\\\n///         participants. As part of the channel withdrawals, an arbitrary\\\\n///         call can be made, which is extracted from the withdraw data.\\\\n\\\\ncontract CMCWithdraw is CMCCore, CMCAsset, ICMCWithdraw {\\\\n    using LibChannelCrypto for bytes32;\\\\n\\\\n    mapping(bytes32 => bool) private isExecuted;\\\\n\\\\n    modifier validateWithdrawData(WithdrawData calldata wd) {\\\\n        require(\\\\n            wd.channelAddress == address(this),\\\\n            \\\\\\"CMCWithdraw: CHANNEL_MISMATCH\\\\\\"\\\\n        );\\\\n        _;\\\\n    }\\\\n\\\\n    function getWithdrawalTransactionRecord(WithdrawData calldata wd)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (bool)\\\\n    {\\\\n        return isExecuted[hashWithdrawData(wd)];\\\\n    }\\\\n\\\\n    /// @param wd The withdraw data consisting of\\\\n    /// semantic withdraw information, i.e. assetId, recipient, and amount;\\\\n    /// information to make an optional call in addition to the actual transfer,\\\\n    /// i.e. target address for the call and call payload;\\\\n    /// additional information, i.e. channel address and nonce.\\\\n    /// @param aliceSignature Signature of owner a\\\\n    /// @param bobSignature Signature of owner b\\\\n    function withdraw(\\\\n        WithdrawData calldata wd,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) external override onlyViaProxy nonReentrant validateWithdrawData(wd) {\\\\n        // Generate hash\\\\n        bytes32 wdHash = hashWithdrawData(wd);\\\\n\\\\n        // Verify Alice\'s and Bob\'s signature on the withdraw data\\\\n        verifySignaturesOnWithdrawDataHash(wdHash, aliceSignature, bobSignature);\\\\n\\\\n        // Replay protection\\\\n        require(!isExecuted[wdHash], \\\\\\"CMCWithdraw: ALREADY_EXECUTED\\\\\\");\\\\n        isExecuted[wdHash] = true;\\\\n\\\\n        // Determine actually transferable amount\\\\n        uint256 actualAmount = getAvailableAmount(wd.assetId, wd.amount);\\\\n\\\\n        // Revert if actualAmount is zero && callTo is 0\\\\n        require(\\\\n            actualAmount > 0 || wd.callTo != address(0),\\\\n            \\\\\\"CMCWithdraw: NO_OP\\\\\\"\\\\n        );\\\\n\\\\n        // Register and execute the transfer\\\\n        transferAsset(wd.assetId, wd.recipient, actualAmount);\\\\n\\\\n        // Do we have to make a call in addition to the actual transfer?\\\\n        if (wd.callTo != address(0)) {\\\\n            WithdrawHelper(wd.callTo).execute(wd, actualAmount);\\\\n        }\\\\n    }\\\\n\\\\n    function verifySignaturesOnWithdrawDataHash(\\\\n        bytes32 wdHash,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) internal view {\\\\n        bytes32 commitment =\\\\n            keccak256(abi.encode(CommitmentType.WithdrawData, wdHash));\\\\n        require(\\\\n            commitment.checkSignature(aliceSignature, alice),\\\\n            \\\\\\"CMCWithdraw: INVALID_ALICE_SIG\\\\\\"\\\\n        );\\\\n        require(\\\\n            commitment.checkSignature(bobSignature, bob),\\\\n            \\\\\\"CMCWithdraw: INVALID_BOB_SIG\\\\\\"\\\\n        );\\\\n    }\\\\n\\\\n    function hashWithdrawData(WithdrawData calldata wd)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        return keccak256(abi.encode(wd));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x7fde93a55cab8b4a9497471af1f8321a6d9463a93c3c6b11cf6d5ada26326beb\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/ChannelMastercopy.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/IVectorChannel.sol\\\\\\";\\\\nimport \\\\\\"./CMCCore.sol\\\\\\";\\\\nimport \\\\\\"./CMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./CMCDeposit.sol\\\\\\";\\\\nimport \\\\\\"./CMCWithdraw.sol\\\\\\";\\\\nimport \\\\\\"./CMCAdjudicator.sol\\\\\\";\\\\n\\\\n/// @title ChannelMastercopy\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains the logic used by all Vector multisigs. A proxy to this\\\\n///         contract is deployed per-channel using the ChannelFactory.sol.\\\\n///         Supports channel adjudication logic, deposit logic, and arbitrary\\\\n///         calls when a commitment is double-signed.\\\\ncontract ChannelMastercopy is\\\\n    CMCCore,\\\\n    CMCAsset,\\\\n    CMCDeposit,\\\\n    CMCWithdraw,\\\\n    CMCAdjudicator,\\\\n    IVectorChannel\\\\n{\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x96d68c908eb39a0002b574c423306ef1b9991da56087cb8f5e2d8b908676b3c7\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/ReentrancyGuard.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\n/// @title CMCWithdraw\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice A \\\\\\"mutex\\\\\\" reentrancy guard, heavily influenced by OpenZeppelin.\\\\n\\\\ncontract ReentrancyGuard {\\\\n    uint256 private constant OPEN = 1;\\\\n    uint256 private constant LOCKED = 2;\\\\n\\\\n    uint256 public lock;\\\\n\\\\n    function setup() internal {\\\\n        lock = OPEN;\\\\n    }\\\\n\\\\n    modifier nonReentrant() {\\\\n        require(lock == OPEN, \\\\\\"ReentrancyGuard: REENTRANT_CALL\\\\\\");\\\\n        lock = LOCKED;\\\\n        _;\\\\n        lock = OPEN;\\\\n    }\\\\n\\\\n    modifier nonReentrantView() {\\\\n        require(lock == OPEN, \\\\\\"ReentrancyGuard: REENTRANT_CALL\\\\\\");\\\\n        _;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf7adf3f05703e0176d892051633e6ca3291e5a3d7ab769f880c03a0d0849dfa7\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/Commitment.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nenum CommitmentType {ChannelState, WithdrawData}\\\\n\\",\\"keccak256\\":\\"0xabfb62d2dbe45e307fc08742f87d2ff5d6faa9ab065f0c2395dc4adcbe0a9c20\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCAdjudicator.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./Types.sol\\\\\\";\\\\n\\\\ninterface ICMCAdjudicator {\\\\n    struct CoreChannelState {\\\\n        address channelAddress;\\\\n        address alice;\\\\n        address bob;\\\\n        address[] assetIds;\\\\n        Balance[] balances;\\\\n        uint256[] processedDepositsA;\\\\n        uint256[] processedDepositsB;\\\\n        uint256[] defundNonces;\\\\n        uint256 timeout;\\\\n        uint256 nonce;\\\\n        bytes32 merkleRoot;\\\\n    }\\\\n\\\\n    struct CoreTransferState {\\\\n        address channelAddress;\\\\n        bytes32 transferId;\\\\n        address transferDefinition;\\\\n        address initiator;\\\\n        address responder;\\\\n        address assetId;\\\\n        Balance balance;\\\\n        uint256 transferTimeout;\\\\n        bytes32 initialStateHash;\\\\n    }\\\\n\\\\n    struct ChannelDispute {\\\\n        bytes32 channelStateHash;\\\\n        uint256 nonce;\\\\n        bytes32 merkleRoot;\\\\n        uint256 consensusExpiry;\\\\n        uint256 defundExpiry;\\\\n    }\\\\n\\\\n    struct TransferDispute {\\\\n        bytes32 transferStateHash;\\\\n        uint256 transferDisputeExpiry;\\\\n        bool isDefunded;\\\\n    }\\\\n\\\\n    event ChannelDisputed(\\\\n        address disputer,\\\\n        CoreChannelState state,\\\\n        ChannelDispute dispute\\\\n    );\\\\n\\\\n    event ChannelDefunded(\\\\n        address defunder,\\\\n        CoreChannelState state,\\\\n        ChannelDispute dispute,\\\\n        address[] assetIds\\\\n    );\\\\n\\\\n    event TransferDisputed(\\\\n        address disputer,\\\\n        CoreTransferState state,\\\\n        TransferDispute dispute\\\\n    );\\\\n\\\\n    event TransferDefunded(\\\\n        address defunder,\\\\n        CoreTransferState state,\\\\n        TransferDispute dispute,\\\\n        bytes encodedInitialState,\\\\n        bytes encodedResolver,\\\\n        Balance balance\\\\n    );\\\\n\\\\n    function getChannelDispute() external view returns (ChannelDispute memory);\\\\n\\\\n    function getDefundNonce(address assetId) external view returns (uint256);\\\\n\\\\n    function getTransferDispute(bytes32 transferId)\\\\n        external\\\\n        view\\\\n        returns (TransferDispute memory);\\\\n\\\\n    function disputeChannel(\\\\n        CoreChannelState calldata ccs,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) external;\\\\n\\\\n    function defundChannel(\\\\n        CoreChannelState calldata ccs,\\\\n        address[] calldata assetIds,\\\\n        uint256[] calldata indices\\\\n    ) external;\\\\n\\\\n    function disputeTransfer(\\\\n        CoreTransferState calldata cts,\\\\n        bytes32[] calldata merkleProofData\\\\n    ) external;\\\\n\\\\n    function defundTransfer(\\\\n        CoreTransferState calldata cts,\\\\n        bytes calldata encodedInitialTransferState,\\\\n        bytes calldata encodedTransferResolver,\\\\n        bytes calldata responderSignature\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x88522bb51c2b9991b24ef33a3c776ac76d96060ebbc33cd5b2b14513fb21d237\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCAsset.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface ICMCAsset {\\\\n    function getTotalTransferred(address assetId)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function getExitableAmount(address assetId, address owner)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function exit(\\\\n        address assetId,\\\\n        address owner,\\\\n        address payable recipient\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x895d89536e8ca469afe642b7001f0dfff497ce29d5d73f862b07a1cdc483f3f7\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCCore.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface ICMCCore {\\\\n    function setup(address _alice, address _bob) external;\\\\n\\\\n    function getAlice() external view returns (address);\\\\n\\\\n    function getBob() external view returns (address);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x8e8da2d8fb5198441ba6cdff018dff9e4145b07d575647c990659adad637ec8c\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCDeposit.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface ICMCDeposit {\\\\n    event AliceDeposited(address assetId, uint256 amount);\\\\n    \\\\n    function getTotalDepositsAlice(address assetId)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function getTotalDepositsBob(address assetId)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function depositAlice(address assetId, uint256 amount) external payable;\\\\n}\\\\n\\",\\"keccak256\\":\\"0xdf6f284e44d88013cf9d51220315fb37e63086e470442685891c90aadd138295\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCWithdraw.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nstruct WithdrawData {\\\\n    address channelAddress;\\\\n    address assetId;\\\\n    address payable recipient;\\\\n    uint256 amount;\\\\n    uint256 nonce;\\\\n    address callTo;\\\\n    bytes callData;\\\\n}\\\\n\\\\ninterface ICMCWithdraw {\\\\n    function getWithdrawalTransactionRecord(WithdrawData calldata wd)\\\\n        external\\\\n        view\\\\n        returns (bool);\\\\n\\\\n    function withdraw(\\\\n        WithdrawData calldata wd,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x097dfe95ad19096f9a3dd0138b4a51680c26e665d1639278a7c0a5c9f7fc5c78\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ITransferDefinition.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./ITransferRegistry.sol\\\\\\";\\\\nimport \\\\\\"./Types.sol\\\\\\";\\\\n\\\\ninterface ITransferDefinition {\\\\n    // Validates the initial state of the transfer.\\\\n    // Called by validator.ts during `create` updates.\\\\n    function create(bytes calldata encodedBalance, bytes calldata)\\\\n        external\\\\n        view\\\\n        returns (bool);\\\\n\\\\n    // Performs a state transition to resolve a transfer and returns final balances.\\\\n    // Called by validator.ts during `resolve` updates.\\\\n    function resolve(\\\\n        bytes calldata encodedBalance,\\\\n        bytes calldata,\\\\n        bytes calldata\\\\n    ) external view returns (Balance memory);\\\\n\\\\n    // Should also have the following properties:\\\\n    // string public constant override Name = \\\\\\"...\\\\\\";\\\\n    // string public constant override StateEncoding = \\\\\\"...\\\\\\";\\\\n    // string public constant override ResolverEncoding = \\\\\\"...\\\\\\";\\\\n    // These properties are included on the transfer specifically\\\\n    // to make it easier for implementers to add new transfers by\\\\n    // only include a `.sol` file\\\\n    function Name() external view returns (string memory);\\\\n\\\\n    function StateEncoding() external view returns (string memory);\\\\n\\\\n    function ResolverEncoding() external view returns (string memory);\\\\n\\\\n    function EncodedCancel() external view returns (bytes memory);\\\\n\\\\n    function getRegistryInformation()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd8eef575aa791b187397c9096e6cf40431b590d3999f0a80e38f3e59f4cf4764\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ITransferRegistry.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental \\\\\\"ABIEncoderV2\\\\\\";\\\\n\\\\nstruct RegisteredTransfer {\\\\n    string name;\\\\n    address definition;\\\\n    string stateEncoding;\\\\n    string resolverEncoding;\\\\n    bytes encodedCancel;\\\\n}\\\\n\\\\ninterface ITransferRegistry {\\\\n    event TransferAdded(RegisteredTransfer transfer);\\\\n\\\\n    event TransferRemoved(RegisteredTransfer transfer);\\\\n\\\\n    // Should add a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function addTransferDefinition(RegisteredTransfer memory transfer) external;\\\\n\\\\n    // Should remove a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function removeTransferDefinition(string memory name) external;\\\\n\\\\n    // Should return all transfer defintions in registry\\\\n    function getTransferDefinitions()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer[] memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd13be6d976c64e381a0d9df10c621cd964454b6916f25df4ea6c1b4cd873a58a\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/IVectorChannel.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./ICMCCore.sol\\\\\\";\\\\nimport \\\\\\"./ICMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./ICMCDeposit.sol\\\\\\";\\\\nimport \\\\\\"./ICMCWithdraw.sol\\\\\\";\\\\nimport \\\\\\"./ICMCAdjudicator.sol\\\\\\";\\\\n\\\\ninterface IVectorChannel is\\\\n    ICMCCore,\\\\n    ICMCAsset,\\\\n    ICMCDeposit,\\\\n    ICMCWithdraw,\\\\n    ICMCAdjudicator\\\\n{}\\\\n\\",\\"keccak256\\":\\"0x9e21e3b6510bb5aecab999bfcbefe6184bd2be5a80179ef8ecadb63ddd2c8d53\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/Types.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nstruct Balance {\\\\n    uint256[2] amount; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n    address payable[2] to; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf8c71b155b630cde965f5d1db5f0d2751a9763f5a797f15d946613e9224f1046\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/WithdrawHelper.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./ICMCWithdraw.sol\\\\\\";\\\\n\\\\ninterface WithdrawHelper {\\\\n    function execute(WithdrawData calldata wd, uint256 actualAmount) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x45bd70363bc7a45001589d55d8d068a3baa321c50382c0c73f1ffae45adfc4bb\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibAsset.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./LibERC20.sol\\\\\\";\\\\nimport \\\\\\"./LibUtils.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\\\\";\\\\n\\\\n\\\\n/// @title LibAsset\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This library contains helpers for dealing with onchain transfers\\\\n///         of in-channel assets. It is designed to safely handle all asset\\\\n///         transfers out of channel in the event of an onchain dispute. Also\\\\n///         safely handles ERC20 transfers that may be non-compliant\\\\nlibrary LibAsset {\\\\n    address constant ETHER_ASSETID = address(0);\\\\n\\\\n    function isEther(address assetId) internal pure returns (bool) {\\\\n        return assetId == ETHER_ASSETID;\\\\n    }\\\\n\\\\n    function getOwnBalance(address assetId) internal view returns (uint256) {\\\\n        return\\\\n            isEther(assetId)\\\\n                ? address(this).balance\\\\n                : IERC20(assetId).balanceOf(address(this));\\\\n    }\\\\n\\\\n    function transferEther(address payable recipient, uint256 amount)\\\\n        internal\\\\n        returns (bool)\\\\n    {\\\\n        (bool success, bytes memory returnData) =\\\\n            recipient.call{value: amount}(\\\\\\"\\\\\\");\\\\n        LibUtils.revertIfCallFailed(success, returnData);\\\\n        return true;\\\\n    }\\\\n\\\\n    function transferERC20(\\\\n        address assetId,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return LibERC20.transfer(assetId, recipient, amount);\\\\n    }\\\\n\\\\n    // This function is a wrapper for transfers of Ether or ERC20 tokens,\\\\n    // both standard-compliant ones as well as tokens that exhibit the\\\\n    // missing-return-value bug.\\\\n    // Although it behaves very much like Solidity\'s `transfer` function\\\\n    // or the ERC20 `transfer` and is, in fact, designed to replace direct\\\\n    // usage of those, it is deliberately named `unregisteredTransfer`,\\\\n    // because we need to register every transfer out of the channel.\\\\n    // Therefore, it should normally not be used directly, with the single\\\\n    // exception of the `transferAsset` function in `CMCAsset.sol`,\\\\n    // which combines the \\\\\\"naked\\\\\\" unregistered transfer given below\\\\n    // with a registration.\\\\n    // USING THIS FUNCTION SOMEWHERE ELSE IS PROBABLY WRONG!\\\\n    function unregisteredTransfer(\\\\n        address assetId,\\\\n        address payable recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            isEther(assetId)\\\\n                ? transferEther(recipient, amount)\\\\n                : transferERC20(assetId, recipient, amount);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x02e7b660846ad2f56f8005f786e0e2eb1d625c83f4cfcf9fc07a9566ca86195c\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibChannelCrypto.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\\\\\";\\\\n\\\\t\\\\t\\\\n/// @author Connext <support@connext.network>\\\\t\\\\t\\\\n/// @notice This library contains helpers for recovering signatures from a\\\\t\\\\t\\\\n///         Vector commitments. Channels do not allow for arbitrary signing of\\\\t\\\\t\\\\n///         messages to prevent misuse of private keys by injected providers,\\\\t\\\\t\\\\n///         and instead only sign messages with a Vector channel prefix.\\\\nlibrary LibChannelCrypto {\\\\n    function checkSignature(\\\\n        bytes32 hash,\\\\n        bytes memory signature,\\\\n        address allegedSigner\\\\n    ) internal pure returns (bool) {\\\\n        return recoverChannelMessageSigner(hash, signature) == allegedSigner;\\\\n    }\\\\n\\\\n    function recoverChannelMessageSigner(bytes32 hash, bytes memory signature)\\\\n        internal\\\\n        pure\\\\n        returns (address)\\\\n    {\\\\n        bytes32 digest = toChannelSignedMessage(hash);\\\\n        return ECDSA.recover(digest, signature);\\\\n    }\\\\n\\\\n    function toChannelSignedMessage(bytes32 hash)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        // 32 is the length in bytes of hash,\\\\n        // enforced by the type signature above\\\\n        return\\\\n            keccak256(abi.encodePacked(\\\\\\"\\\\\\\\x16Vector Signed Message:\\\\\\\\n32\\\\\\", hash));\\\\n    }\\\\n\\\\n    function checkUtilitySignature(\\\\n        bytes32 hash,\\\\n        bytes memory signature,\\\\n        address allegedSigner\\\\n    ) internal pure returns (bool) {\\\\n        return recoverChannelMessageSigner(hash, signature) == allegedSigner;\\\\n    }\\\\n\\\\n    function recoverUtilityMessageSigner(bytes32 hash, bytes memory signature)\\\\n        internal\\\\n        pure\\\\n        returns (address)\\\\n    {\\\\n        bytes32 digest = toUtilitySignedMessage(hash);\\\\n        return ECDSA.recover(digest, signature);\\\\n    }\\\\n\\\\n    function toUtilitySignedMessage(bytes32 hash)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        // 32 is the length in bytes of hash,\\\\n        // enforced by the type signature above\\\\n        return\\\\n            keccak256(abi.encodePacked(\\\\\\"\\\\\\\\x17Utility Signed Message:\\\\\\\\n32\\\\\\", hash));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xb8aa3679b75f2a1a5785f614f5dff9a76a689c18caa56a8df1f4e3c3167d6ece\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./LibUtils.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Address.sol\\\\\\";\\\\n\\\\n/// @title LibERC20\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This library provides several functions to safely handle\\\\n///         noncompliant tokens (i.e. does not return a boolean from\\\\n///         the transfer function)\\\\n\\\\nlibrary LibERC20 {\\\\n    function wrapCall(address assetId, bytes memory callData)\\\\n        internal\\\\n        returns (bool)\\\\n    {\\\\n        require(Address.isContract(assetId), \\\\\\"LibERC20: NO_CODE\\\\\\");\\\\n        (bool success, bytes memory returnData) = assetId.call(callData);\\\\n        LibUtils.revertIfCallFailed(success, returnData);\\\\n        return returnData.length == 0 || abi.decode(returnData, (bool));\\\\n    }\\\\n\\\\n    function approve(\\\\n        address assetId,\\\\n        address spender,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            wrapCall(\\\\n                assetId,\\\\n                abi.encodeWithSignature(\\\\n                    \\\\\\"approve(address,uint256)\\\\\\",\\\\n                    spender,\\\\n                    amount\\\\n                )\\\\n            );\\\\n    }\\\\n\\\\n    function transferFrom(\\\\n        address assetId,\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            wrapCall(\\\\n                assetId,\\\\n                abi.encodeWithSignature(\\\\n                    \\\\\\"transferFrom(address,address,uint256)\\\\\\",\\\\n                    sender,\\\\n                    recipient,\\\\n                    amount\\\\n                )\\\\n            );\\\\n    }\\\\n\\\\n    function transfer(\\\\n        address assetId,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            wrapCall(\\\\n                assetId,\\\\n                abi.encodeWithSignature(\\\\n                    \\\\\\"transfer(address,uint256)\\\\\\",\\\\n                    recipient,\\\\n                    amount\\\\n                )\\\\n            );\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x5bad1474c93a295939c23f976786f0d086abc063f19ff9c8c1d069759c4a7ff5\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibMath.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\n/// @title LibMath\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This library allows functions that would otherwise overflow and\\\\n///         revert if SafeMath was used to instead return the UINT_MAX. In the\\\\n///         adjudicator, this is used to ensure you can get the majority of\\\\n///         funds out in the event your balance > UINT_MAX and there is an\\\\n///         onchain dispute.\\\\nlibrary LibMath {\\\\n    /// @dev Returns the maximum uint256 for an addition that would overflow\\\\n    ///      (saturation arithmetic)\\\\n    function satAdd(uint256 x, uint256 y) internal pure returns (uint256) {\\\\n        uint256 sum = x + y;\\\\n        return sum >= x ? sum : type(uint256).max;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x1e6307538bfdb12a0f5234db5b9b22365b6abe2b96baa37f2e4b5d2d3f6683b8\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibUtils.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\n/// @title LibUtils\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains a helper to revert if a call was not successfully\\\\n///         made\\\\nlibrary LibUtils {\\\\n    // If success is false, reverts and passes on the revert string.\\\\n    function revertIfCallFailed(bool success, bytes memory returnData)\\\\n        internal\\\\n        pure\\\\n    {\\\\n        if (!success) {\\\\n            assembly {\\\\n                revert(add(returnData, 0x20), mload(returnData))\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf31897ed92b88739ca9c6e74d089e01c5dbf432183d2ab0b959b539842374ccd\\",\\"license\\":\\"UNLICENSED\\"}},\\"version\\":1}","bytecode":"","deployedBytecode":"","devdoc":{"author":"Connext <support@connext.network>","kind":"dev","methods":{"getAlice()":{"returns":{"_0":"Bob\'s signer address"}},"getBob()":{"returns":{"_0":"Alice\'s signer address"}},"setup(address,address)":{"params":{"_alice":": Address representing user with function deposit","_bob":": Address representing user with multisig deposit"}},"withdraw((address,address,address,uint256,uint256,address,bytes),bytes,bytes)":{"params":{"aliceSignature":"Signature of owner a","bobSignature":"Signature of owner b","wd":"The withdraw data consisting of semantic withdraw information, i.e. assetId, recipient, and amount; information to make an optional call in addition to the actual transfer, i.e. target address for the call and call payload; additional information, i.e. channel address and nonce."}}},"title":"ChannelMastercopy","version":1},"userdoc":{"kind":"user","methods":{"getAlice()":{"notice":"A getter function for the bob of the multisig"},"getBob()":{"notice":"A getter function for the bob of the multisig"},"setup(address,address)":{"notice":"Contract constructor for Proxied copies"}},"notice":"Contains the logic used by all Vector multisigs. A proxy to this         contract is deployed per-channel using the ChannelFactory.sol.         Supports channel adjudication logic, deposit logic, and arbitrary         calls when a commitment is double-signed.","version":1},"storageLayout":{"storage":[{"astId":3403,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"lock","offset":0,"slot":"0","type":"t_uint256"},{"astId":2597,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"alice","offset":0,"slot":"1","type":"t_address"},{"astId":2599,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"bob","offset":0,"slot":"2","type":"t_address"},{"astId":2348,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"totalTransferred","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":2354,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"exitableAmount","offset":0,"slot":"4","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":2732,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"depositsAlice","offset":0,"slot":"5","type":"t_mapping(t_address,t_uint256)"},{"astId":2895,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"isExecuted","offset":0,"slot":"6","type":"t_mapping(t_bytes32,t_bool)"},{"astId":1503,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"channelDispute","offset":0,"slot":"7","type":"t_struct(ChannelDispute)3596_storage"},{"astId":1507,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"defundNonces","offset":0,"slot":"12","type":"t_mapping(t_address,t_uint256)"},{"astId":1511,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"transferDisputes","offset":0,"slot":"13","type":"t_mapping(t_bytes32,t_struct(TransferDispute)3603_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_bool)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(TransferDispute)3603_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct ICMCAdjudicator.TransferDispute)","numberOfBytes":"32","value":"t_struct(TransferDispute)3603_storage"},"t_struct(ChannelDispute)3596_storage":{"encoding":"inplace","label":"struct ICMCAdjudicator.ChannelDispute","members":[{"astId":3587,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"channelStateHash","offset":0,"slot":"0","type":"t_bytes32"},{"astId":3589,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"nonce","offset":0,"slot":"1","type":"t_uint256"},{"astId":3591,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"merkleRoot","offset":0,"slot":"2","type":"t_bytes32"},{"astId":3593,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"consensusExpiry","offset":0,"slot":"3","type":"t_uint256"},{"astId":3595,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"defundExpiry","offset":0,"slot":"4","type":"t_uint256"}],"numberOfBytes":"160"},"t_struct(TransferDispute)3603_storage":{"encoding":"inplace","label":"struct ICMCAdjudicator.TransferDispute","members":[{"astId":3598,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"transferStateHash","offset":0,"slot":"0","type":"t_bytes32"},{"astId":3600,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"transferDisputeExpiry","offset":0,"slot":"1","type":"t_uint256"},{"astId":3602,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"isDefunded","offset":0,"slot":"2","type":"t_bool"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}}}')},2820:function(e){e.exports=JSON.parse('{"address":"0x4CA2F568B46f9d94Bb68940F187a1573a4AF23d5","abi":[{"inputs":[],"name":"EncodedCancel","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"Name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ResolverEncoding","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"StateEncoding","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"encodedBalance","type":"bytes"},{"internalType":"bytes","name":"encodedState","type":"bytes"}],"name":"create","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRegistryInformation","outputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"address","name":"definition","type":"address"},{"internalType":"string","name":"stateEncoding","type":"string"},{"internalType":"string","name":"resolverEncoding","type":"string"},{"internalType":"bytes","name":"encodedCancel","type":"bytes"}],"internalType":"struct RegisteredTransfer","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"encodedBalance","type":"bytes"},{"internalType":"bytes","name":"encodedState","type":"bytes"},{"internalType":"bytes","name":"encodedResolver","type":"bytes"}],"name":"resolve","outputs":[{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance","name":"","type":"tuple"}],"stateMutability":"view","type":"function"}],"transactionHash":"0x5bf9b925bd733674c7106ad9ff4f3b1f692d217ca6ded96ddd9eaba44b6edefe","receipt":{"to":null,"from":"0xd4b33434Cb36df9286Ef5132FCFb8062c96aC56E","contractAddress":"0x4CA2F568B46f9d94Bb68940F187a1573a4AF23d5","transactionIndex":0,"gasUsed":"795245","logsBloom":"0xblockHash":"0x5bc129bbfecb5b048293de03218b496e56ca77af811b66e390b582967a5580c2","transactionHash":"0x5bf9b925bd733674c7106ad9ff4f3b1f692d217ca6ded96ddd9eaba44b6edefe","logs":[{"transactionIndex":0,"blockNumber":8930728,"transactionHash":"0x5bf9b925bd733674c7106ad9ff4f3b1f692d217ca6ded96ddd9eaba44b6edefe","address":"0x0000000000000000000000000000000000001010","topics":["0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63","0x0000000000000000000000000000000000000000000000000000000000001010","0x000000000000000000000000d4b33434cb36df9286ef5132fcfb8062c96ac56e","0x0000000000000000000000001ca971963bdb4ba2bf337c90660674acff5beb3f"],"data":"0x0000000000000000000000000000000000000000000000000002d34567bc02000000000000000000000000000000000000000000000000a2a14de4865d25f8000000000000000000000000000000000000000000000000000641ec6892a5d3e40000000000000000000000000000000000000000000000a2a14b1140f569f6000000000000000000000000000000000000000000000000000644bfadfa61d5e4","logIndex":0,"blockHash":"0x5bc129bbfecb5b048293de03218b496e56ca77af811b66e390b582967a5580c2"}],"blockNumber":8930728,"cumulativeGasUsed":"795245","status":1,"byzantium":true},"args":[],"solcInputHash":"89c55d5a88f10637860a9ea31a1daad3","metadata":"{\\"compiler\\":{\\"version\\":\\"0.7.1+commit.f4a555be\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[],\\"name\\":\\"EncodedCancel\\",\\"outputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"\\",\\"type\\":\\"bytes\\"}],\\"stateMutability\\":\\"pure\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"Name\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"ResolverEncoding\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"StateEncoding\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedBalance\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedState\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"create\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getRegistryInformation\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"definition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"stateEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"resolverEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedCancel\\",\\"type\\":\\"bytes\\"}],\\"internalType\\":\\"struct RegisteredTransfer\\",\\"name\\":\\"\\",\\"type\\":\\"tuple\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedBalance\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedState\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedResolver\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"resolve\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"\\",\\"type\\":\\"tuple\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"author\\":\\"Connext <support@connext.network>\\",\\"kind\\":\\"dev\\",\\"methods\\":{},\\"title\\":\\"HashlockTransfer\\",\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"notice\\":\\"This contract allows users to claim a payment locked in         the application if they provide the correct preImage. The payment is         reverted if not unlocked by the timelock if one is provided.\\",\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"src.sol/transferDefinitions/HashlockTransfer.sol\\":\\"HashlockTransfer\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"src.sol/interfaces/ITransferDefinition.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./ITransferRegistry.sol\\\\\\";\\\\nimport \\\\\\"./Types.sol\\\\\\";\\\\n\\\\ninterface ITransferDefinition {\\\\n    // Validates the initial state of the transfer.\\\\n    // Called by validator.ts during `create` updates.\\\\n    function create(bytes calldata encodedBalance, bytes calldata)\\\\n        external\\\\n        view\\\\n        returns (bool);\\\\n\\\\n    // Performs a state transition to resolve a transfer and returns final balances.\\\\n    // Called by validator.ts during `resolve` updates.\\\\n    function resolve(\\\\n        bytes calldata encodedBalance,\\\\n        bytes calldata,\\\\n        bytes calldata\\\\n    ) external view returns (Balance memory);\\\\n\\\\n    // Should also have the following properties:\\\\n    // string public constant override Name = \\\\\\"...\\\\\\";\\\\n    // string public constant override StateEncoding = \\\\\\"...\\\\\\";\\\\n    // string public constant override ResolverEncoding = \\\\\\"...\\\\\\";\\\\n    // These properties are included on the transfer specifically\\\\n    // to make it easier for implementers to add new transfers by\\\\n    // only include a `.sol` file\\\\n    function Name() external view returns (string memory);\\\\n\\\\n    function StateEncoding() external view returns (string memory);\\\\n\\\\n    function ResolverEncoding() external view returns (string memory);\\\\n\\\\n    function EncodedCancel() external view returns (bytes memory);\\\\n\\\\n    function getRegistryInformation()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd8eef575aa791b187397c9096e6cf40431b590d3999f0a80e38f3e59f4cf4764\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ITransferRegistry.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental \\\\\\"ABIEncoderV2\\\\\\";\\\\n\\\\nstruct RegisteredTransfer {\\\\n    string name;\\\\n    address definition;\\\\n    string stateEncoding;\\\\n    string resolverEncoding;\\\\n    bytes encodedCancel;\\\\n}\\\\n\\\\ninterface ITransferRegistry {\\\\n    event TransferAdded(RegisteredTransfer transfer);\\\\n\\\\n    event TransferRemoved(RegisteredTransfer transfer);\\\\n\\\\n    // Should add a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function addTransferDefinition(RegisteredTransfer memory transfer) external;\\\\n\\\\n    // Should remove a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function removeTransferDefinition(string memory name) external;\\\\n\\\\n    // Should return all transfer defintions in registry\\\\n    function getTransferDefinitions()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer[] memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd13be6d976c64e381a0d9df10c621cd964454b6916f25df4ea6c1b4cd873a58a\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/Types.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nstruct Balance {\\\\n    uint256[2] amount; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n    address payable[2] to; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf8c71b155b630cde965f5d1db5f0d2751a9763f5a797f15d946613e9224f1046\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/transferDefinitions/HashlockTransfer.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./TransferDefinition.sol\\\\\\";\\\\n\\\\n/// @title HashlockTransfer\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This contract allows users to claim a payment locked in\\\\n///         the application if they provide the correct preImage. The payment is\\\\n///         reverted if not unlocked by the timelock if one is provided.\\\\n\\\\ncontract HashlockTransfer is TransferDefinition {\\\\n    struct TransferState {\\\\n        bytes32 lockHash;\\\\n        uint256 expiry; // If 0, then no timelock is enforced\\\\n    }\\\\n\\\\n    struct TransferResolver {\\\\n        bytes32 preImage;\\\\n    }\\\\n\\\\n    // Provide registry information\\\\n    string public constant override Name = \\\\\\"HashlockTransfer\\\\\\";\\\\n    string public constant override StateEncoding =\\\\n        \\\\\\"tuple(bytes32 lockHash, uint256 expiry)\\\\\\";\\\\n    string public constant override ResolverEncoding =\\\\n        \\\\\\"tuple(bytes32 preImage)\\\\\\";\\\\n\\\\n    function EncodedCancel() external pure override returns(bytes memory) {\\\\n      TransferResolver memory resolver;\\\\n      resolver.preImage = bytes32(0);\\\\n      return abi.encode(resolver);\\\\n    } \\\\n\\\\n    function create(bytes calldata encodedBalance, bytes calldata encodedState)\\\\n        external\\\\n        view\\\\n        override\\\\n        returns (bool)\\\\n    {\\\\n        // Decode parameters\\\\n        TransferState memory state = abi.decode(encodedState, (TransferState));\\\\n        Balance memory balance = abi.decode(encodedBalance, (Balance));\\\\n\\\\n        require(\\\\n            balance.amount[0] > 0,\\\\n            \\\\\\"HashlockTransfer: ZER0_SENDER_BALANCE\\\\\\"\\\\n        );\\\\n\\\\n        require(\\\\n            balance.amount[1] == 0,\\\\n            \\\\\\"HashlockTransfer: NONZERO_RECIPIENT_BALANCE\\\\\\"\\\\n        );\\\\n        require(\\\\n            state.lockHash != bytes32(0),\\\\n            \\\\\\"HashlockTransfer: EMPTY_LOCKHASH\\\\\\"\\\\n        );\\\\n        require(\\\\n            state.expiry == 0 || state.expiry > block.timestamp,\\\\n            \\\\\\"HashlockTransfer: EXPIRED_TIMELOCK\\\\\\"\\\\n        );\\\\n\\\\n        // Valid transfer state\\\\n        return true;\\\\n    }\\\\n\\\\n    function resolve(\\\\n        bytes calldata encodedBalance,\\\\n        bytes calldata encodedState,\\\\n        bytes calldata encodedResolver\\\\n    ) external view override returns (Balance memory) {\\\\n        TransferState memory state = abi.decode(encodedState, (TransferState));\\\\n        TransferResolver memory resolver =\\\\n            abi.decode(encodedResolver, (TransferResolver));\\\\n        Balance memory balance = abi.decode(encodedBalance, (Balance));\\\\n\\\\n        // If you pass in bytes32(0), payment is canceled\\\\n        // If timelock is nonzero and has expired, payment must be canceled\\\\n        // otherwise resolve will revert\\\\n        if (resolver.preImage != bytes32(0)) {\\\\n            // Payment must not be expired\\\\n            require(state.expiry == 0 || state.expiry > block.timestamp, \\\\\\"HashlockTransfer: PAYMENT_EXPIRED\\\\\\");\\\\n\\\\n            // Check hash for normal payment unlock\\\\n            bytes32 generatedHash = sha256(abi.encode(resolver.preImage));\\\\n            require(\\\\n                state.lockHash == generatedHash,\\\\n                \\\\\\"HashlockTransfer: INVALID_PREIMAGE\\\\\\"\\\\n            );\\\\n\\\\n            // Update state\\\\n            balance.amount[1] = balance.amount[0];\\\\n            balance.amount[0] = 0;\\\\n        }\\\\n        // To cancel, the preImage must be empty (not simply incorrect)\\\\n        // There are no additional state mutations, and the preImage is\\\\n        // asserted by the `if` statement\\\\n\\\\n        return balance;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x0c403a415e87408f8f7be80d9ec3e4415189d5e85fb58e9ddef5730e4a2ae98e\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/transferDefinitions/TransferDefinition.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"../interfaces/ITransferDefinition.sol\\\\\\";\\\\nimport \\\\\\"../interfaces/ITransferRegistry.sol\\\\\\";\\\\n\\\\n/// @title TransferDefinition\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This contract helps reduce boilerplate needed when creating\\\\n///         new transfer definitions by providing an implementation of\\\\n///         the required getter\\\\n\\\\nabstract contract TransferDefinition is ITransferDefinition {\\\\n    function getRegistryInformation()\\\\n        external\\\\n        view\\\\n        override\\\\n        returns (RegisteredTransfer memory)\\\\n    {\\\\n        return\\\\n            RegisteredTransfer({\\\\n                name: this.Name(),\\\\n                stateEncoding: this.StateEncoding(),\\\\n                resolverEncoding: this.ResolverEncoding(),\\\\n                definition: address(this),\\\\n                encodedCancel: this.EncodedCancel()\\\\n            });\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xdb8bcb3fadd5c514bc6585b0a48d66952570bbb1a62f18b9dc9a4f693dc11c5e\\",\\"license\\":\\"UNLICENSED\\"}},\\"version\\":1}","bytecode":"0x608060405234801561001057600080fd5b50610d6c806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638052474d1161005b5780638052474d146100bd5780638de8b77e146100c55780638ef98a7e146100cd57806394184ba9146100ed5761007d565b80630528aa1c14610082578063206162be146100a05780633722aff9146100b5575b600080fd5b61008a61010d565b6040516100979190610a10565b60405180910390f35b6100a8610141565b6040516100979190610c1e565b61008a61034d565b61008a610386565b61008a6103b2565b6100e06100db3660046107ae565b6103ce565b6040516100979190610bb4565b6101006100fb366004610745565b61050e565b60405161009791906109fc565b60606101176105da565b6000815260405161012c908290602001610cae565b60405160208183030381529060405291505090565b6101496105ec565b6040518060a00160405280306001600160a01b0316638052474d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561018d57600080fd5b505afa1580156101a1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101c99190810190610844565b8152602001306001600160a01b03168152602001306001600160a01b0316638de8b77e6040518163ffffffff1660e01b815260040160006040518083038186803b15801561021657600080fd5b505afa15801561022a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102529190810190610844565b8152602001306001600160a01b0316633722aff96040518163ffffffff1660e01b815260040160006040518083038186803b15801561029057600080fd5b505afa1580156102a4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102cc9190810190610844565b8152602001306001600160a01b0316630528aa1c6040518163ffffffff1660e01b815260040160006040518083038186803b15801561030a57600080fd5b505afa15801561031e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103469190810190610844565b9052905090565b6040518060400160405280601781526020017f7475706c65286279746573333220707265496d6167652900000000000000000081525081565b6040518060400160405280601081526020016f2430b9b43637b1b5aa3930b739b332b960811b81525081565b604051806060016040528060278152602001610d106027913981565b6103d6610624565b6103de610649565b6103ea85870187610981565b90506103f46105da565b6104008486018661095c565b905061040a610624565b610416898b018b61087f565b82519091501561050157602083015115806104345750428360200151115b6104595760405162461bcd60e51b815260040161045090610b3e565b60405180910390fd5b6000600283600001516040516020016104729190610a07565b60408051601f198184030181529082905261048c916109e0565b602060405180830381855afa1580156104a9573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906104cc919061072d565b845190915081146104ef5760405162461bcd60e51b815260040161045090610a75565b50805180516020909101528051600090525b9998505050505050505050565b6000610518610649565b61052483850185610981565b905061052e610624565b61053a8688018861087f565b80515190915061055c5760405162461bcd60e51b815260040161045090610ab7565b8051602001511561057f5760405162461bcd60e51b815260040161045090610a2a565b815161059d5760405162461bcd60e51b815260040161045090610b7f565b602082015115806105b15750428260200151115b6105cd5760405162461bcd60e51b815260040161045090610afc565b5060019695505050505050565b60408051602081019091526000815290565b6040518060a001604052806060815260200160006001600160a01b031681526020016060815260200160608152602001606081525090565b6040518060400160405280610637610660565b8152602001610644610660565b905290565b604080518082019091526000808252602082015290565b60405180604001604052806002906020820280368337509192915050565b60008083601f84011261068f578182fd5b50813567ffffffffffffffff8111156106a6578182fd5b6020830191508360208285010111156106be57600080fd5b9250929050565b600082601f8301126106d5578081fd5b815167ffffffffffffffff8111156106eb578182fd5b6106fe601f8201601f1916602001610cb8565b915080825283602082850101111561071557600080fd5b610726816020840160208601610cdf565b5092915050565b60006020828403121561073e578081fd5b5051919050565b6000806000806040858703121561075a578283fd5b843567ffffffffffffffff80821115610771578485fd5b61077d8883890161067e565b90965094506020870135915080821115610795578384fd5b506107a28782880161067e565b95989497509550505050565b600080600080600080606087890312156107c6578182fd5b863567ffffffffffffffff808211156107dd578384fd5b6107e98a838b0161067e565b90985096506020890135915080821115610801578384fd5b61080d8a838b0161067e565b90965094506040890135915080821115610825578384fd5b5061083289828a0161067e565b979a9699509497509295939492505050565b600060208284031215610855578081fd5b815167ffffffffffffffff81111561086b578182fd5b610877848285016106c5565b949350505050565b600060808284031215610890578081fd5b61089a6040610cb8565b83601f8401126108a8578182fd5b6108b26040610cb8565b808460408601878111156108c4578586fd5b855b60028110156108e55782358552602094850194909201916001016108c6565b5082855287605f8801126108f7578586fd5b6109016040610cb8565b9350839250905060808601871015610917578485fd5b845b600281101561094d5781356001600160a01b0381168114610938578687fd5b84526020938401939190910190600101610919565b50506020830152509392505050565b60006020828403121561096d578081fd5b6109776020610cb8565b9135825250919050565b600060408284031215610992578081fd5b61099c6040610cb8565b82358152602083013560208201528091505092915050565b600081518084526109cc816020860160208601610cdf565b601f01601f19169290920160200192915050565b600082516109f2818460208701610cdf565b9190910192915050565b901515815260200190565b90815260200190565b600060208252610a2360208301846109b4565b9392505050565b6020808252602b908201527f486173686c6f636b5472616e736665723a204e4f4e5a45524f5f52454349504960408201526a454e545f42414c414e434560a81b606082015260800190565b60208082526022908201527f486173686c6f636b5472616e736665723a20494e56414c49445f505245494d41604082015261474560f01b606082015260800190565b60208082526025908201527f486173686c6f636b5472616e736665723a205a4552305f53454e4445525f42416040820152644c414e434560d81b606082015260800190565b60208082526022908201527f486173686c6f636b5472616e736665723a20455850495245445f54494d454c4f604082015261434b60f01b606082015260800190565b60208082526021908201527f486173686c6f636b5472616e736665723a205041594d454e545f4558504952456040820152601160fa1b606082015260800190565b6020808252818101527f486173686c6f636b5472616e736665723a20454d5054595f4c4f434b48415348604082015260600190565b815160808201908260005b6002811015610bde578251825260209283019290910190600101610bbf565b5050506020808401516040840160005b6002811015610c145782516001600160a01b031682529183019190830190600101610bee565b5050505092915050565b600060208252825160a06020840152610c3a60c08401826109b4565b905060018060a01b0360208501511660408401526040840151601f1980858403016060860152610c6a83836109b4565b92506060860151915080858403016080860152610c8783836109b4565b925060808601519150808584030160a086015250610ca582826109b4565b95945050505050565b9051815260200190565b60405181810167ffffffffffffffff81118282101715610cd757600080fd5b604052919050565b60005b83811015610cfa578181015183820152602001610ce2565b83811115610d09576000848401525b5050505056fe7475706c652862797465733332206c6f636b486173682c2075696e743235362065787069727929a2646970667358221220f7a1aad5efbe0de5a92ccb20170dbe8d594d5a4ccb943cb48fbcd3fcbc98e24c64736f6c63430007010033","deployedBytecode":"0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80638052474d1161005b5780638052474d146100bd5780638de8b77e146100c55780638ef98a7e146100cd57806394184ba9146100ed5761007d565b80630528aa1c14610082578063206162be146100a05780633722aff9146100b5575b600080fd5b61008a61010d565b6040516100979190610a10565b60405180910390f35b6100a8610141565b6040516100979190610c1e565b61008a61034d565b61008a610386565b61008a6103b2565b6100e06100db3660046107ae565b6103ce565b6040516100979190610bb4565b6101006100fb366004610745565b61050e565b60405161009791906109fc565b60606101176105da565b6000815260405161012c908290602001610cae565b60405160208183030381529060405291505090565b6101496105ec565b6040518060a00160405280306001600160a01b0316638052474d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561018d57600080fd5b505afa1580156101a1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101c99190810190610844565b8152602001306001600160a01b03168152602001306001600160a01b0316638de8b77e6040518163ffffffff1660e01b815260040160006040518083038186803b15801561021657600080fd5b505afa15801561022a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102529190810190610844565b8152602001306001600160a01b0316633722aff96040518163ffffffff1660e01b815260040160006040518083038186803b15801561029057600080fd5b505afa1580156102a4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102cc9190810190610844565b8152602001306001600160a01b0316630528aa1c6040518163ffffffff1660e01b815260040160006040518083038186803b15801561030a57600080fd5b505afa15801561031e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103469190810190610844565b9052905090565b6040518060400160405280601781526020017f7475706c65286279746573333220707265496d6167652900000000000000000081525081565b6040518060400160405280601081526020016f2430b9b43637b1b5aa3930b739b332b960811b81525081565b604051806060016040528060278152602001610d106027913981565b6103d6610624565b6103de610649565b6103ea85870187610981565b90506103f46105da565b6104008486018661095c565b905061040a610624565b610416898b018b61087f565b82519091501561050157602083015115806104345750428360200151115b6104595760405162461bcd60e51b815260040161045090610b3e565b60405180910390fd5b6000600283600001516040516020016104729190610a07565b60408051601f198184030181529082905261048c916109e0565b602060405180830381855afa1580156104a9573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906104cc919061072d565b845190915081146104ef5760405162461bcd60e51b815260040161045090610a75565b50805180516020909101528051600090525b9998505050505050505050565b6000610518610649565b61052483850185610981565b905061052e610624565b61053a8688018861087f565b80515190915061055c5760405162461bcd60e51b815260040161045090610ab7565b8051602001511561057f5760405162461bcd60e51b815260040161045090610a2a565b815161059d5760405162461bcd60e51b815260040161045090610b7f565b602082015115806105b15750428260200151115b6105cd5760405162461bcd60e51b815260040161045090610afc565b5060019695505050505050565b60408051602081019091526000815290565b6040518060a001604052806060815260200160006001600160a01b031681526020016060815260200160608152602001606081525090565b6040518060400160405280610637610660565b8152602001610644610660565b905290565b604080518082019091526000808252602082015290565b60405180604001604052806002906020820280368337509192915050565b60008083601f84011261068f578182fd5b50813567ffffffffffffffff8111156106a6578182fd5b6020830191508360208285010111156106be57600080fd5b9250929050565b600082601f8301126106d5578081fd5b815167ffffffffffffffff8111156106eb578182fd5b6106fe601f8201601f1916602001610cb8565b915080825283602082850101111561071557600080fd5b610726816020840160208601610cdf565b5092915050565b60006020828403121561073e578081fd5b5051919050565b6000806000806040858703121561075a578283fd5b843567ffffffffffffffff80821115610771578485fd5b61077d8883890161067e565b90965094506020870135915080821115610795578384fd5b506107a28782880161067e565b95989497509550505050565b600080600080600080606087890312156107c6578182fd5b863567ffffffffffffffff808211156107dd578384fd5b6107e98a838b0161067e565b90985096506020890135915080821115610801578384fd5b61080d8a838b0161067e565b90965094506040890135915080821115610825578384fd5b5061083289828a0161067e565b979a9699509497509295939492505050565b600060208284031215610855578081fd5b815167ffffffffffffffff81111561086b578182fd5b610877848285016106c5565b949350505050565b600060808284031215610890578081fd5b61089a6040610cb8565b83601f8401126108a8578182fd5b6108b26040610cb8565b808460408601878111156108c4578586fd5b855b60028110156108e55782358552602094850194909201916001016108c6565b5082855287605f8801126108f7578586fd5b6109016040610cb8565b9350839250905060808601871015610917578485fd5b845b600281101561094d5781356001600160a01b0381168114610938578687fd5b84526020938401939190910190600101610919565b50506020830152509392505050565b60006020828403121561096d578081fd5b6109776020610cb8565b9135825250919050565b600060408284031215610992578081fd5b61099c6040610cb8565b82358152602083013560208201528091505092915050565b600081518084526109cc816020860160208601610cdf565b601f01601f19169290920160200192915050565b600082516109f2818460208701610cdf565b9190910192915050565b901515815260200190565b90815260200190565b600060208252610a2360208301846109b4565b9392505050565b6020808252602b908201527f486173686c6f636b5472616e736665723a204e4f4e5a45524f5f52454349504960408201526a454e545f42414c414e434560a81b606082015260800190565b60208082526022908201527f486173686c6f636b5472616e736665723a20494e56414c49445f505245494d41604082015261474560f01b606082015260800190565b60208082526025908201527f486173686c6f636b5472616e736665723a205a4552305f53454e4445525f42416040820152644c414e434560d81b606082015260800190565b60208082526022908201527f486173686c6f636b5472616e736665723a20455850495245445f54494d454c4f604082015261434b60f01b606082015260800190565b60208082526021908201527f486173686c6f636b5472616e736665723a205041594d454e545f4558504952456040820152601160fa1b606082015260800190565b6020808252818101527f486173686c6f636b5472616e736665723a20454d5054595f4c4f434b48415348604082015260600190565b815160808201908260005b6002811015610bde578251825260209283019290910190600101610bbf565b5050506020808401516040840160005b6002811015610c145782516001600160a01b031682529183019190830190600101610bee565b5050505092915050565b600060208252825160a06020840152610c3a60c08401826109b4565b905060018060a01b0360208501511660408401526040840151601f1980858403016060860152610c6a83836109b4565b92506060860151915080858403016080860152610c8783836109b4565b925060808601519150808584030160a086015250610ca582826109b4565b95945050505050565b9051815260200190565b60405181810167ffffffffffffffff81118282101715610cd757600080fd5b604052919050565b60005b83811015610cfa578181015183820152602001610ce2565b83811115610d09576000848401525b5050505056fe7475706c652862797465733332206c6f636b486173682c2075696e743235362065787069727929a2646970667358221220f7a1aad5efbe0de5a92ccb20170dbe8d594d5a4ccb943cb48fbcd3fcbc98e24c64736f6c63430007010033","devdoc":{"author":"Connext <support@connext.network>","kind":"dev","methods":{},"title":"HashlockTransfer","version":1},"userdoc":{"kind":"user","methods":{},"notice":"This contract allows users to claim a payment locked in         the application if they provide the correct preImage. The payment is         reverted if not unlocked by the timelock if one is provided.","version":1},"storageLayout":{"storage":[],"types":null}}')},2821:function(e){e.exports=JSON.parse('{"address":"0x9E86dd60e0B1e7e142F033d1BdEf734c6b3224Bb","abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"transactionHash":"0x044fdd98a9f551911a7917cd1359d61148c0b124184169b052a1785c226f2529","receipt":{"to":null,"from":"0xd4b33434Cb36df9286Ef5132FCFb8062c96aC56E","contractAddress":"0x9E86dd60e0B1e7e142F033d1BdEf734c6b3224Bb","transactionIndex":0,"gasUsed":"888397","logsBloom":"0x000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000040080000000100000000000000000000000000000000000000000080000008000000200000000000001000000000000000000800a0000000000000000200800000000000000000080000010000000000000000000002000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000004000000002000000000001000000000000000000000000000000100000000020000000000000000000000000000000000000000000000000000008000000100000","blockHash":"0x542f2d38a44e01aa0ab682b520b54968eea0351356a2929e5294d8aeb2ef8946","transactionHash":"0x044fdd98a9f551911a7917cd1359d61148c0b124184169b052a1785c226f2529","logs":[{"transactionIndex":0,"blockNumber":8930743,"transactionHash":"0x044fdd98a9f551911a7917cd1359d61148c0b124184169b052a1785c226f2529","address":"0x9E86dd60e0B1e7e142F033d1BdEf734c6b3224Bb","topics":["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","0x0000000000000000000000000000000000000000000000000000000000000000","0x000000000000000000000000d4b33434cb36df9286ef5132fcfb8062c96ac56e"],"data":"0x00000000000000000000000000000000000000000000d3c21bcecceda1000000","logIndex":0,"blockHash":"0x542f2d38a44e01aa0ab682b520b54968eea0351356a2929e5294d8aeb2ef8946"},{"transactionIndex":0,"blockNumber":8930743,"transactionHash":"0x044fdd98a9f551911a7917cd1359d61148c0b124184169b052a1785c226f2529","address":"0x0000000000000000000000000000000000001010","topics":["0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63","0x0000000000000000000000000000000000000000000000000000000000001010","0x000000000000000000000000d4b33434cb36df9286ef5132fcfb8062c96ac56e","0x0000000000000000000000001ca971963bdb4ba2bf337c90660674acff5beb3f"],"data":"0x000000000000000000000000000000000000000000000000000327fe0b9ac2000000000000000000000000000000000000000000000000a2a142dd338d4766000000000000000000000000000000000000000000000000000655b20fe5a271e40000000000000000000000000000000000000000000000a2a13fb53581aca4000000000000000000000000000000000000000000000000000658da0df13d33e4","logIndex":1,"blockHash":"0x542f2d38a44e01aa0ab682b520b54968eea0351356a2929e5294d8aeb2ef8946"}],"blockNumber":8930743,"cumulativeGasUsed":"888397","status":1,"byzantium":true},"args":[],"solcInputHash":"89c55d5a88f10637860a9ea31a1daad3","metadata":"{\\"compiler\\":{\\"version\\":\\"0.7.1+commit.f4a555be\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"value\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Approval\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"from\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"value\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Transfer\\",\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"}],\\"name\\":\\"allowance\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"approve\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"balanceOf\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"burn\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"decimals\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"subtractedValue\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"decreaseAllowance\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"addedValue\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"increaseAllowance\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"mint\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"name\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"symbol\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"totalSupply\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"transfer\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"sender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"transferFrom\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{\\"allowance(address,address)\\":{\\"details\\":\\"See {IERC20-allowance}.\\"},\\"approve(address,uint256)\\":{\\"details\\":\\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\\"},\\"balanceOf(address)\\":{\\"details\\":\\"See {IERC20-balanceOf}.\\"},\\"decimals()\\":{\\"details\\":\\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\\"},\\"decreaseAllowance(address,uint256)\\":{\\"details\\":\\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\\"},\\"increaseAllowance(address,uint256)\\":{\\"details\\":\\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\\"},\\"name()\\":{\\"details\\":\\"Returns the name of the token.\\"},\\"symbol()\\":{\\"details\\":\\"Returns the symbol of the token, usually a shorter version of the name.\\"},\\"totalSupply()\\":{\\"details\\":\\"See {IERC20-totalSupply}.\\"},\\"transfer(address,uint256)\\":{\\"details\\":\\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\\"},\\"transferFrom(address,address,uint256)\\":{\\"details\\":\\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``\'s tokens of at least `amount`.\\"}},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"src.sol/testing/TestToken.sol\\":\\"TestToken\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/GSN/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/*\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with GSN meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address payable) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes memory) {\\\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x910a2e625b71168563edf9eeef55a50d6d699acfe27ceba3921f291829a8f938\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/math/SafeMath.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Wrappers over Solidity\'s arithmetic operations with added overflow\\\\n * checks.\\\\n *\\\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\\\n * in bugs, because programmers usually assume that an overflow raises an\\\\n * error, which is the standard behavior in high level programming languages.\\\\n * `SafeMath` restores this intuition by reverting the transaction when an\\\\n * operation overflows.\\\\n *\\\\n * Using this library instead of the unchecked operations eliminates an entire\\\\n * class of bugs, so it\'s recommended to use it always.\\\\n */\\\\nlibrary SafeMath {\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `+` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Addition cannot overflow.\\\\n     */\\\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        uint256 c = a + b;\\\\n        require(c >= a, \\\\\\"SafeMath: addition overflow\\\\\\");\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return sub(a, b, \\\\\\"SafeMath: subtraction overflow\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        require(b <= a, errorMessage);\\\\n        uint256 c = a - b;\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `*` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Multiplication cannot overflow.\\\\n     */\\\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\\\\n        // benefit is lost if \'b\' is also tested.\\\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\\\n        if (a == 0) {\\\\n            return 0;\\\\n        }\\\\n\\\\n        uint256 c = a * b;\\\\n        require(c / a == b, \\\\\\"SafeMath: multiplication overflow\\\\\\");\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return div(a, b, \\\\\\"SafeMath: division by zero\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        require(b > 0, errorMessage);\\\\n        uint256 c = a / b;\\\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * Reverts when dividing by zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return mod(a, b, \\\\\\"SafeMath: modulo by zero\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * Reverts with custom message when dividing by zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        require(b != 0, errorMessage);\\\\n        return a % b;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\nimport \\\\\\"../../GSN/Context.sol\\\\\\";\\\\nimport \\\\\\"./IERC20.sol\\\\\\";\\\\nimport \\\\\\"../../math/SafeMath.sol\\\\\\";\\\\nimport \\\\\\"../../utils/Address.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Implementation of the {IERC20} interface.\\\\n *\\\\n * This implementation is agnostic to the way tokens are created. This means\\\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\\\n *\\\\n * TIP: For a detailed writeup see our guide\\\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\\\n * to implement supply mechanisms].\\\\n *\\\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\\\n * of returning `false` on failure. This behavior is nonetheless conventional\\\\n * and does not conflict with the expectations of ERC20 applications.\\\\n *\\\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\\\n * This allows applications to reconstruct the allowance for all accounts just\\\\n * by listening to said events. Other implementations of the EIP may not emit\\\\n * these events, as it isn\'t required by the specification.\\\\n *\\\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\\\n * functions have been added to mitigate the well-known issues around setting\\\\n * allowances. See {IERC20-approve}.\\\\n */\\\\ncontract ERC20 is Context, IERC20 {\\\\n    using SafeMath for uint256;\\\\n    using Address for address;\\\\n\\\\n    mapping (address => uint256) private _balances;\\\\n\\\\n    mapping (address => mapping (address => uint256)) private _allowances;\\\\n\\\\n    uint256 private _totalSupply;\\\\n\\\\n    string private _name;\\\\n    string private _symbol;\\\\n    uint8 private _decimals;\\\\n\\\\n    /**\\\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\\\n     * a default value of 18.\\\\n     *\\\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\\\n     *\\\\n     * All three of these values are immutable: they can only be set once during\\\\n     * construction.\\\\n     */\\\\n    constructor (string memory name, string memory symbol) {\\\\n        _name = name;\\\\n        _symbol = symbol;\\\\n        _decimals = 18;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the name of the token.\\\\n     */\\\\n    function name() public view returns (string memory) {\\\\n        return _name;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\\\n     * name.\\\\n     */\\\\n    function symbol() public view returns (string memory) {\\\\n        return _symbol;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the number of decimals used to get its user representation.\\\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\\\n     *\\\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\\\n     * called.\\\\n     *\\\\n     * NOTE: This information is only used for _display_ purposes: it in\\\\n     * no way affects any of the arithmetic of the contract, including\\\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\\\n     */\\\\n    function decimals() public view returns (uint8) {\\\\n        return _decimals;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-totalSupply}.\\\\n     */\\\\n    function totalSupply() public view override returns (uint256) {\\\\n        return _totalSupply;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-balanceOf}.\\\\n     */\\\\n    function balanceOf(address account) public view override returns (uint256) {\\\\n        return _balances[account];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-transfer}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `recipient` cannot be the zero address.\\\\n     * - the caller must have a balance of at least `amount`.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\\\n        _transfer(_msgSender(), recipient, amount);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-allowance}.\\\\n     */\\\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\\\n        return _allowances[owner][spender];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-approve}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\\\n        _approve(_msgSender(), spender, amount);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-transferFrom}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\\\n     * required by the EIP. See the note at the beginning of {ERC20};\\\\n     *\\\\n     * Requirements:\\\\n     * - `sender` and `recipient` cannot be the zero address.\\\\n     * - `sender` must have a balance of at least `amount`.\\\\n     * - the caller must have allowance for ``sender``\'s tokens of at least\\\\n     * `amount`.\\\\n     */\\\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\\\n        _transfer(sender, recipient, amount);\\\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\\\\"ERC20: transfer amount exceeds allowance\\\\\\"));\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\\\n     *\\\\n     * This is an alternative to {approve} that can be used as a mitigation for\\\\n     * problems described in {IERC20-approve}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\\\n     *\\\\n     * This is an alternative to {approve} that can be used as a mitigation for\\\\n     * problems described in {IERC20-approve}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     * - `spender` must have allowance for the caller of at least\\\\n     * `subtractedValue`.\\\\n     */\\\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\\\\"ERC20: decreased allowance below zero\\\\\\"));\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\\\n     *\\\\n     * This is internal function is equivalent to {transfer}, and can be used to\\\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `sender` cannot be the zero address.\\\\n     * - `recipient` cannot be the zero address.\\\\n     * - `sender` must have a balance of at least `amount`.\\\\n     */\\\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\\\n        require(sender != address(0), \\\\\\"ERC20: transfer from the zero address\\\\\\");\\\\n        require(recipient != address(0), \\\\\\"ERC20: transfer to the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(sender, recipient, amount);\\\\n\\\\n        _balances[sender] = _balances[sender].sub(amount, \\\\\\"ERC20: transfer amount exceeds balance\\\\\\");\\\\n        _balances[recipient] = _balances[recipient].add(amount);\\\\n        emit Transfer(sender, recipient, amount);\\\\n    }\\\\n\\\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\\\n     * the total supply.\\\\n     *\\\\n     * Emits a {Transfer} event with `from` set to the zero address.\\\\n     *\\\\n     * Requirements\\\\n     *\\\\n     * - `to` cannot be the zero address.\\\\n     */\\\\n    function _mint(address account, uint256 amount) internal virtual {\\\\n        require(account != address(0), \\\\\\"ERC20: mint to the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(address(0), account, amount);\\\\n\\\\n        _totalSupply = _totalSupply.add(amount);\\\\n        _balances[account] = _balances[account].add(amount);\\\\n        emit Transfer(address(0), account, amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\\\n     * total supply.\\\\n     *\\\\n     * Emits a {Transfer} event with `to` set to the zero address.\\\\n     *\\\\n     * Requirements\\\\n     *\\\\n     * - `account` cannot be the zero address.\\\\n     * - `account` must have at least `amount` tokens.\\\\n     */\\\\n    function _burn(address account, uint256 amount) internal virtual {\\\\n        require(account != address(0), \\\\\\"ERC20: burn from the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(account, address(0), amount);\\\\n\\\\n        _balances[account] = _balances[account].sub(amount, \\\\\\"ERC20: burn amount exceeds balance\\\\\\");\\\\n        _totalSupply = _totalSupply.sub(amount);\\\\n        emit Transfer(account, address(0), amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\\\n     *\\\\n     * This internal function is equivalent to `approve`, and can be used to\\\\n     * e.g. set automatic allowances for certain subsystems, etc.\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `owner` cannot be the zero address.\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\\\n        require(owner != address(0), \\\\\\"ERC20: approve from the zero address\\\\\\");\\\\n        require(spender != address(0), \\\\\\"ERC20: approve to the zero address\\\\\\");\\\\n\\\\n        _allowances[owner][spender] = amount;\\\\n        emit Approval(owner, spender, amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\\\n     *\\\\n     * WARNING: This function should only be called from the constructor. Most\\\\n     * applications that interact with token contracts will not expect\\\\n     * {decimals} to ever change, and may work incorrectly if it does.\\\\n     */\\\\n    function _setupDecimals(uint8 decimals_) internal {\\\\n        _decimals = decimals_;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Hook that is called before any transfer of tokens. This includes\\\\n     * minting and burning.\\\\n     *\\\\n     * Calling conditions:\\\\n     *\\\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\'s tokens\\\\n     * will be to transferred to `to`.\\\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\\\n     * - when `to` is zero, `amount` of ``from``\'s tokens will be burned.\\\\n     * - `from` and `to` are never both zero.\\\\n     *\\\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\\\n     */\\\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf1ac0ee2ca2b36f90574d3b2b37422ced4fa829741d80794c62f5958a2d8f474\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Returns the amount of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender\'s allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\\\n     * allowance mechanism. `amount` is then deducted from the caller\'s\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Address.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Collection of functions related to the address type\\\\n */\\\\nlibrary Address {\\\\n    /**\\\\n     * @dev Returns true if `account` is a contract.\\\\n     *\\\\n     * [IMPORTANT]\\\\n     * ====\\\\n     * It is unsafe to assume that an address for which this function returns\\\\n     * false is an externally-owned account (EOA) and not a contract.\\\\n     *\\\\n     * Among others, `isContract` will return false for the following\\\\n     * types of addresses:\\\\n     *\\\\n     *  - an externally-owned account\\\\n     *  - a contract in construction\\\\n     *  - an address where a contract will be created\\\\n     *  - an address where a contract lived, but was destroyed\\\\n     * ====\\\\n     */\\\\n    function isContract(address account) internal view returns (bool) {\\\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\\\n        // for accounts without code, i.e. `keccak256(\'\')`\\\\n        bytes32 codehash;\\\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\\\n        // solhint-disable-next-line no-inline-assembly\\\\n        assembly { codehash := extcodehash(account) }\\\\n        return (codehash != accountHash && codehash != 0x0);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\\\\n     * `recipient`, forwarding all available gas and reverting on errors.\\\\n     *\\\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\\\n     * imposed by `transfer`, making them unable to receive funds via\\\\n     * `transfer`. {sendValue} removes this limitation.\\\\n     *\\\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\\\n     *\\\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\\\n     * taken to not create reentrancy vulnerabilities. Consider using\\\\n     * {ReentrancyGuard} or the\\\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\\\n     */\\\\n    function sendValue(address payable recipient, uint256 amount) internal {\\\\n        require(address(this).balance >= amount, \\\\\\"Address: insufficient balance\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\\\n        (bool success, ) = recipient.call{ value: amount }(\\\\\\"\\\\\\");\\\\n        require(success, \\\\\\"Address: unable to send value, recipient may have reverted\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Performs a Solidity function call using a low level `call`. A\\\\n     * plain`call` is an unsafe replacement for a function call: use this\\\\n     * function instead.\\\\n     *\\\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\\\n     * function (like regular Solidity function calls).\\\\n     *\\\\n     * Returns the raw returned data. To convert to the expected return value,\\\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `target` must be a contract.\\\\n     * - calling `target` with `data` must not revert.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n      return functionCall(target, data, \\\\\\"Address: low-level call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but also transferring `value` wei to `target`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the calling contract must have an ETH balance of at least `value`.\\\\n     * - the called Solidity function must be `payable`.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, value, \\\\\\"Address: low-level call with value failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\\\n        require(address(this).balance >= value, \\\\\\"Address: insufficient balance for call\\\\\\");\\\\n        return _functionCallWithValue(target, data, value, errorMessage);\\\\n    }\\\\n\\\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: call to non-contract\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls\\\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\\\n        if (success) {\\\\n            return returndata;\\\\n        } else {\\\\n            // Look for revert reason and bubble it up if present\\\\n            if (returndata.length > 0) {\\\\n                // The easiest way to bubble the revert reason is using memory via assembly\\\\n\\\\n                // solhint-disable-next-line no-inline-assembly\\\\n                assembly {\\\\n                    let returndata_size := mload(returndata)\\\\n                    revert(add(32, returndata), returndata_size)\\\\n                }\\\\n            } else {\\\\n                revert(errorMessage);\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x698f929f1097637d051976b322a2d532c27df022b09010e8d091e2888a5ebdf8\\",\\"license\\":\\"MIT\\"},\\"src.sol/testing/TestToken.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.1;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\\\\";\\\\n\\\\n/* This token is ONLY useful for testing\\\\n * Anybody can mint as many tokens as they like\\\\n * Anybody can burn anyone else\'s tokens\\\\n */\\\\ncontract TestToken is ERC20 {\\\\n    constructor() ERC20(\\\\\\"Test Token\\\\\\", \\\\\\"TEST\\\\\\") {\\\\n        _mint(msg.sender, 1000000 ether);\\\\n    }\\\\n\\\\n    function mint(address account, uint256 amount) external {\\\\n        _mint(account, amount);\\\\n    }\\\\n\\\\n    function burn(address account, uint256 amount) external {\\\\n        _burn(account, amount);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe879a63f0b107705dc9405af3efc7adc2f6425da2c5ec571c72f91db2a059876\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"0x60806040523480156200001157600080fd5b50604080518082018252600a8152692a32b9ba102a37b5b2b760b11b602080830191825283518085019094526004845263151154d560e21b908401528151919291620000609160039162000218565b5080516200007690600490602084019062000218565b50506005805460ff19166012179055506200009c3369d3c21bcecceda1000000620000a2565b620002b4565b6001600160a01b038216620000fe576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6200010c60008383620001b1565b6200012881600254620001b660201b6200060b1790919060201c565b6002556001600160a01b038216600090815260208181526040909120546200015b9183906200060b620001b6821b17901c565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b505050565b60008282018381101562000211576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200025b57805160ff19168380011785556200028b565b828001600101855582156200028b579182015b828111156200028b5782518255916020019190600101906200026e565b50620002999291506200029d565b5090565b5b808211156200029957600081556001016200029e565b610cfb80620002c46000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806340c10f191161008c5780639dc29fac116100665780639dc29fac14610287578063a457c2d7146102b3578063a9059cbb146102df578063dd62ed3e1461030b576100cf565b806340c10f191461022b57806370a082311461025957806395d89b411461027f576100cf565b806306fdde03146100d4578063095ea7b31461015157806318160ddd1461019157806323b872dd146101ab578063313ce567146101e157806339509351146101ff575b600080fd5b6100dc610339565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101165781810151838201526020016100fe565b50505050905090810190601f1680156101435780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561016757600080fd5b506001600160a01b0381351690602001356103cf565b604080519115158252519081900360200190f35b6101996103ec565b60408051918252519081900360200190f35b61017d600480360360608110156101c157600080fd5b506001600160a01b038135811691602081013590911690604001356103f2565b6101e9610479565b6040805160ff9092168252519081900360200190f35b61017d6004803603604081101561021557600080fd5b506001600160a01b038135169060200135610482565b6102576004803603604081101561024157600080fd5b506001600160a01b0381351690602001356104d0565b005b6101996004803603602081101561026f57600080fd5b50356001600160a01b03166104de565b6100dc6104f9565b6102576004803603604081101561029d57600080fd5b506001600160a01b03813516906020013561055a565b61017d600480360360408110156102c957600080fd5b506001600160a01b038135169060200135610564565b61017d600480360360408110156102f557600080fd5b506001600160a01b0381351690602001356105cc565b6101996004803603604081101561032157600080fd5b506001600160a01b03813581169160200135166105e0565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103c55780601f1061039a576101008083540402835291602001916103c5565b820191906000526020600020905b8154815290600101906020018083116103a857829003601f168201915b5050505050905090565b60006103e36103dc61066c565b8484610670565b50600192915050565b60025490565b60006103ff84848461075c565b61046f8461040b61066c565b61046a85604051806060016040528060288152602001610c0f602891396001600160a01b038a1660009081526001602052604081209061044961066c565b6001600160a01b0316815260208101919091526040016000205491906108b7565b610670565b5060019392505050565b60055460ff1690565b60006103e361048f61066c565b8461046a85600160006104a061066c565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549061060b565b6104da828261094e565b5050565b6001600160a01b031660009081526020819052604090205490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103c55780601f1061039a576101008083540402835291602001916103c5565b6104da8282610a3e565b60006103e361057161066c565b8461046a85604051806060016040528060258152602001610ca1602591396001600061059b61066c565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906108b7565b60006103e36105d961066c565b848461075c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600082820183811015610665576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b3390565b6001600160a01b0383166106b55760405162461bcd60e51b8152600401808060200182810382526024815260200180610c7d6024913960400191505060405180910390fd5b6001600160a01b0382166106fa5760405162461bcd60e51b8152600401808060200182810382526022815260200180610bc76022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166107a15760405162461bcd60e51b8152600401808060200182810382526025815260200180610c586025913960400191505060405180910390fd5b6001600160a01b0382166107e65760405162461bcd60e51b8152600401808060200182810382526023815260200180610b826023913960400191505060405180910390fd5b6107f1838383610b3a565b61082e81604051806060016040528060268152602001610be9602691396001600160a01b03861660009081526020819052604090205491906108b7565b6001600160a01b03808516600090815260208190526040808220939093559084168152205461085d908261060b565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600081848411156109465760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561090b5781810151838201526020016108f3565b50505050905090810190601f1680156109385780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b0382166109a9576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6109b560008383610b3a565b6002546109c2908261060b565b6002556001600160a01b0382166000908152602081905260409020546109e8908261060b565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b038216610a835760405162461bcd60e51b8152600401808060200182810382526021815260200180610c376021913960400191505060405180910390fd5b610a8f82600083610b3a565b610acc81604051806060016040528060228152602001610ba5602291396001600160a01b03851660009081526020819052604090205491906108b7565b6001600160a01b038316600090815260208190526040902055600254610af29082610b3f565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b505050565b600061066583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506108b756fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220ab9dcafdcf3d12155ca9697d505d71261c7afcb9c777a043bc5bb39f7a2d72ab64736f6c63430007010033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806340c10f191161008c5780639dc29fac116100665780639dc29fac14610287578063a457c2d7146102b3578063a9059cbb146102df578063dd62ed3e1461030b576100cf565b806340c10f191461022b57806370a082311461025957806395d89b411461027f576100cf565b806306fdde03146100d4578063095ea7b31461015157806318160ddd1461019157806323b872dd146101ab578063313ce567146101e157806339509351146101ff575b600080fd5b6100dc610339565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101165781810151838201526020016100fe565b50505050905090810190601f1680156101435780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561016757600080fd5b506001600160a01b0381351690602001356103cf565b604080519115158252519081900360200190f35b6101996103ec565b60408051918252519081900360200190f35b61017d600480360360608110156101c157600080fd5b506001600160a01b038135811691602081013590911690604001356103f2565b6101e9610479565b6040805160ff9092168252519081900360200190f35b61017d6004803603604081101561021557600080fd5b506001600160a01b038135169060200135610482565b6102576004803603604081101561024157600080fd5b506001600160a01b0381351690602001356104d0565b005b6101996004803603602081101561026f57600080fd5b50356001600160a01b03166104de565b6100dc6104f9565b6102576004803603604081101561029d57600080fd5b506001600160a01b03813516906020013561055a565b61017d600480360360408110156102c957600080fd5b506001600160a01b038135169060200135610564565b61017d600480360360408110156102f557600080fd5b506001600160a01b0381351690602001356105cc565b6101996004803603604081101561032157600080fd5b506001600160a01b03813581169160200135166105e0565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103c55780601f1061039a576101008083540402835291602001916103c5565b820191906000526020600020905b8154815290600101906020018083116103a857829003601f168201915b5050505050905090565b60006103e36103dc61066c565b8484610670565b50600192915050565b60025490565b60006103ff84848461075c565b61046f8461040b61066c565b61046a85604051806060016040528060288152602001610c0f602891396001600160a01b038a1660009081526001602052604081209061044961066c565b6001600160a01b0316815260208101919091526040016000205491906108b7565b610670565b5060019392505050565b60055460ff1690565b60006103e361048f61066c565b8461046a85600160006104a061066c565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549061060b565b6104da828261094e565b5050565b6001600160a01b031660009081526020819052604090205490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103c55780601f1061039a576101008083540402835291602001916103c5565b6104da8282610a3e565b60006103e361057161066c565b8461046a85604051806060016040528060258152602001610ca1602591396001600061059b61066c565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906108b7565b60006103e36105d961066c565b848461075c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600082820183811015610665576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b3390565b6001600160a01b0383166106b55760405162461bcd60e51b8152600401808060200182810382526024815260200180610c7d6024913960400191505060405180910390fd5b6001600160a01b0382166106fa5760405162461bcd60e51b8152600401808060200182810382526022815260200180610bc76022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166107a15760405162461bcd60e51b8152600401808060200182810382526025815260200180610c586025913960400191505060405180910390fd5b6001600160a01b0382166107e65760405162461bcd60e51b8152600401808060200182810382526023815260200180610b826023913960400191505060405180910390fd5b6107f1838383610b3a565b61082e81604051806060016040528060268152602001610be9602691396001600160a01b03861660009081526020819052604090205491906108b7565b6001600160a01b03808516600090815260208190526040808220939093559084168152205461085d908261060b565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600081848411156109465760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561090b5781810151838201526020016108f3565b50505050905090810190601f1680156109385780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b0382166109a9576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6109b560008383610b3a565b6002546109c2908261060b565b6002556001600160a01b0382166000908152602081905260409020546109e8908261060b565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b038216610a835760405162461bcd60e51b8152600401808060200182810382526021815260200180610c376021913960400191505060405180910390fd5b610a8f82600083610b3a565b610acc81604051806060016040528060228152602001610ba5602291396001600160a01b03851660009081526020819052604090205491906108b7565b6001600160a01b038316600090815260208190526040902055600254610af29082610b3f565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b505050565b600061066583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506108b756fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220ab9dcafdcf3d12155ca9697d505d71261c7afcb9c777a043bc5bb39f7a2d72ab64736f6c63430007010033","devdoc":{"kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``\'s tokens of at least `amount`."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1},"storageLayout":{"storage":[{"astId":590,"contract":"src.sol/testing/TestToken.sol:TestToken","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":596,"contract":"src.sol/testing/TestToken.sol:TestToken","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":598,"contract":"src.sol/testing/TestToken.sol:TestToken","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":600,"contract":"src.sol/testing/TestToken.sol:TestToken","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":602,"contract":"src.sol/testing/TestToken.sol:TestToken","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"},{"astId":604,"contract":"src.sol/testing/TestToken.sol:TestToken","label":"_decimals","offset":0,"slot":"5","type":"t_uint8"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}}}')},2822:function(e){e.exports=JSON.parse('{"address":"0x5FAe7F15Ae20A10053CCca1DcFce0E2Bb4D50A7d","abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"address","name":"definition","type":"address"},{"internalType":"string","name":"stateEncoding","type":"string"},{"internalType":"string","name":"resolverEncoding","type":"string"},{"internalType":"bytes","name":"encodedCancel","type":"bytes"}],"indexed":false,"internalType":"struct RegisteredTransfer","name":"transfer","type":"tuple"}],"name":"TransferAdded","type":"event"},{"anonymous":false,"inputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"address","name":"definition","type":"address"},{"internalType":"string","name":"stateEncoding","type":"string"},{"internalType":"string","name":"resolverEncoding","type":"string"},{"internalType":"bytes","name":"encodedCancel","type":"bytes"}],"indexed":false,"internalType":"struct RegisteredTransfer","name":"transfer","type":"tuple"}],"name":"TransferRemoved","type":"event"},{"inputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"address","name":"definition","type":"address"},{"internalType":"string","name":"stateEncoding","type":"string"},{"internalType":"string","name":"resolverEncoding","type":"string"},{"internalType":"bytes","name":"encodedCancel","type":"bytes"}],"internalType":"struct RegisteredTransfer","name":"definition","type":"tuple"}],"name":"addTransferDefinition","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getTransferDefinitions","outputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"address","name":"definition","type":"address"},{"internalType":"string","name":"stateEncoding","type":"string"},{"internalType":"string","name":"resolverEncoding","type":"string"},{"internalType":"bytes","name":"encodedCancel","type":"bytes"}],"internalType":"struct RegisteredTransfer[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"name","type":"string"}],"name":"removeTransferDefinition","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"transactionHash":"0xf626d2f031abc97865e4c0cb5c054a09ff271491797f805337424a45fdc7fed1","receipt":{"to":null,"from":"0xd4b33434Cb36df9286Ef5132FCFb8062c96aC56E","contractAddress":"0x5FAe7F15Ae20A10053CCca1DcFce0E2Bb4D50A7d","transactionIndex":0,"gasUsed":"1239411","logsBloom":"0x000000000000000000000000000000000000000000000200008000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000008000010200000000000001000000000000000000800a0000200000000000200800000000000000000080000000000000400000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000004000000000000010000001000000000000000000000000000000100000000020000000001000000000000000000000000000000000000000000008000000100000","blockHash":"0x110e7fc1eff612338889151273fcdf1a88355096f9a023f20fca9cf1410a34f6","transactionHash":"0xf626d2f031abc97865e4c0cb5c054a09ff271491797f805337424a45fdc7fed1","logs":[{"transactionIndex":0,"blockNumber":8930738,"transactionHash":"0xf626d2f031abc97865e4c0cb5c054a09ff271491797f805337424a45fdc7fed1","address":"0x5FAe7F15Ae20A10053CCca1DcFce0E2Bb4D50A7d","topics":["0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","0x0000000000000000000000000000000000000000000000000000000000000000","0x000000000000000000000000d4b33434cb36df9286ef5132fcfb8062c96ac56e"],"data":"0x","logIndex":0,"blockHash":"0x110e7fc1eff612338889151273fcdf1a88355096f9a023f20fca9cf1410a34f6"},{"transactionIndex":0,"blockNumber":8930738,"transactionHash":"0xf626d2f031abc97865e4c0cb5c054a09ff271491797f805337424a45fdc7fed1","address":"0x0000000000000000000000000000000000001010","topics":["0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63","0x0000000000000000000000000000000000000000000000000000000000001010","0x000000000000000000000000d4b33434cb36df9286ef5132fcfb8062c96ac56e","0x0000000000000000000000001ca971963bdb4ba2bf337c90660674acff5beb3f"],"data":"0x0000000000000000000000000000000000000000000000000004673cdc62be000000000000000000000000000000000000000000000000a2a147447069aa2400000000000000000000000000000000000000000000000000064f6ce7308323e40000000000000000000000000000000000000000000000a2a142dd338d4766000000000000000000000000000000000000000000000000000653d4240ce5e1e4","logIndex":1,"blockHash":"0x110e7fc1eff612338889151273fcdf1a88355096f9a023f20fca9cf1410a34f6"}],"blockNumber":8930738,"cumulativeGasUsed":"1239411","status":1,"byzantium":true},"args":[],"solcInputHash":"89c55d5a88f10637860a9ea31a1daad3","metadata":"{\\"compiler\\":{\\"version\\":\\"0.7.1+commit.f4a555be\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"previousOwner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"OwnershipTransferred\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"definition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"stateEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"resolverEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedCancel\\",\\"type\\":\\"bytes\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct RegisteredTransfer\\",\\"name\\":\\"transfer\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"TransferAdded\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"definition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"stateEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"resolverEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedCancel\\",\\"type\\":\\"bytes\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct RegisteredTransfer\\",\\"name\\":\\"transfer\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"TransferRemoved\\",\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"definition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"stateEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"resolverEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedCancel\\",\\"type\\":\\"bytes\\"}],\\"internalType\\":\\"struct RegisteredTransfer\\",\\"name\\":\\"definition\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"addTransferDefinition\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getTransferDefinitions\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"definition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"stateEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"resolverEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedCancel\\",\\"type\\":\\"bytes\\"}],\\"internalType\\":\\"struct RegisteredTransfer[]\\",\\"name\\":\\"\\",\\"type\\":\\"tuple[]\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"owner\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"}],\\"name\\":\\"removeTransferDefinition\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"renounceOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"transferOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"author\\":\\"Connext <support@connext.network>\\",\\"kind\\":\\"dev\\",\\"methods\\":{\\"addTransferDefinition((string,address,string,string,bytes))\\":{\\"details\\":\\"Should add a transfer definition to the registry\\"},\\"getTransferDefinitions()\\":{\\"details\\":\\"Should return all transfer defintions in registry\\"},\\"owner()\\":{\\"details\\":\\"Returns the address of the current owner.\\"},\\"removeTransferDefinition(string)\\":{\\"details\\":\\"Should remove a transfer definition from the registry\\"},\\"renounceOwnership()\\":{\\"details\\":\\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\\"},\\"transferOwnership(address)\\":{\\"details\\":\\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\\"}},\\"title\\":\\"TransferRegistry\\",\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"notice\\":\\"The TransferRegistry maintains an onchain record of all         supported transfers (specifically holds the registry information         defined within the contracts). The offchain protocol uses         this information to get the correct encodings when generating         signatures. The information stored here can only be updated         by the owner of the contract\\",\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"src.sol/TransferRegistry.sol\\":\\"TransferRegistry\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/GSN/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/*\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with GSN meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address payable) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes memory) {\\\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x910a2e625b71168563edf9eeef55a50d6d699acfe27ceba3921f291829a8f938\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/access/Ownable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\nimport \\\\\\"../GSN/Context.sol\\\\\\";\\\\n/**\\\\n * @dev Contract module which provides a basic access control mechanism, where\\\\n * there is an account (an owner) that can be granted exclusive access to\\\\n * specific functions.\\\\n *\\\\n * By default, the owner account will be the one that deploys the contract. This\\\\n * can later be changed with {transferOwnership}.\\\\n *\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\\\n * the owner.\\\\n */\\\\ncontract Ownable is Context {\\\\n    address private _owner;\\\\n\\\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\\\n\\\\n    /**\\\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\\\n     */\\\\n    constructor () {\\\\n        address msgSender = _msgSender();\\\\n        _owner = msgSender;\\\\n        emit OwnershipTransferred(address(0), msgSender);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the address of the current owner.\\\\n     */\\\\n    function owner() public view returns (address) {\\\\n        return _owner;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the owner.\\\\n     */\\\\n    modifier onlyOwner() {\\\\n        require(_owner == _msgSender(), \\\\\\"Ownable: caller is not the owner\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Leaves the contract without owner. It will not be possible to call\\\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\\\n     *\\\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\\\n     * thereby removing any functionality that is only available to the owner.\\\\n     */\\\\n    function renounceOwnership() public virtual onlyOwner {\\\\n        emit OwnershipTransferred(_owner, address(0));\\\\n        _owner = address(0);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\\\n     * Can only be called by the current owner.\\\\n     */\\\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\\\n        require(newOwner != address(0), \\\\\\"Ownable: new owner is the zero address\\\\\\");\\\\n        emit OwnershipTransferred(_owner, newOwner);\\\\n        _owner = newOwner;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x74b0525c81e47810f1bd795755962bdb84de3a4f71cfcb063f4c4d4999a3e96b\\",\\"license\\":\\"MIT\\"},\\"src.sol/TransferRegistry.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/ITransferRegistry.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibIterableMapping.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/access/Ownable.sol\\\\\\";\\\\n\\\\n/// @title TransferRegistry\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice The TransferRegistry maintains an onchain record of all\\\\n///         supported transfers (specifically holds the registry information\\\\n///         defined within the contracts). The offchain protocol uses\\\\n///         this information to get the correct encodings when generating\\\\n///         signatures. The information stored here can only be updated\\\\n///         by the owner of the contract\\\\n\\\\ncontract TransferRegistry is Ownable, ITransferRegistry {\\\\n    using LibIterableMapping for LibIterableMapping.IterableMapping;\\\\n\\\\n    LibIterableMapping.IterableMapping transfers;\\\\n\\\\n    /// @dev Should add a transfer definition to the registry\\\\n    function addTransferDefinition(RegisteredTransfer memory definition)\\\\n        external\\\\n        override\\\\n        onlyOwner\\\\n    {\\\\n        // Get index transfer will be added at\\\\n        uint256 idx = transfers.length();\\\\n        \\\\n        // Add registered transfer\\\\n        transfers.addTransferDefinition(definition);\\\\n\\\\n        // Emit event\\\\n        emit TransferAdded(transfers.getTransferDefinitionByIndex(idx));\\\\n    }\\\\n\\\\n    /// @dev Should remove a transfer definition from the registry\\\\n    function removeTransferDefinition(string memory name)\\\\n        external\\\\n        override\\\\n        onlyOwner\\\\n    {\\\\n        // Get transfer from library to remove for event\\\\n        RegisteredTransfer memory transfer = transfers.getTransferDefinitionByName(name);\\\\n\\\\n        // Remove transfer\\\\n        transfers.removeTransferDefinition(name);\\\\n\\\\n        // Emit event\\\\n        emit TransferRemoved(transfer);\\\\n    }\\\\n\\\\n    /// @dev Should return all transfer defintions in registry\\\\n    function getTransferDefinitions()\\\\n        external\\\\n        view\\\\n        override\\\\n        returns (RegisteredTransfer[] memory)\\\\n    {\\\\n        return transfers.getTransferDefinitions();\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe0bbdc74c5635a2b21ab1a0f2b4ebb377af048f05cc2bab70f645ac826984382\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ITransferRegistry.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental \\\\\\"ABIEncoderV2\\\\\\";\\\\n\\\\nstruct RegisteredTransfer {\\\\n    string name;\\\\n    address definition;\\\\n    string stateEncoding;\\\\n    string resolverEncoding;\\\\n    bytes encodedCancel;\\\\n}\\\\n\\\\ninterface ITransferRegistry {\\\\n    event TransferAdded(RegisteredTransfer transfer);\\\\n\\\\n    event TransferRemoved(RegisteredTransfer transfer);\\\\n\\\\n    // Should add a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function addTransferDefinition(RegisteredTransfer memory transfer) external;\\\\n\\\\n    // Should remove a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function removeTransferDefinition(string memory name) external;\\\\n\\\\n    // Should return all transfer defintions in registry\\\\n    function getTransferDefinitions()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer[] memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd13be6d976c64e381a0d9df10c621cd964454b6916f25df4ea6c1b4cd873a58a\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibIterableMapping.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"../interfaces/ITransferRegistry.sol\\\\\\";\\\\n\\\\n/// @title LibIterableMapping\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This library provides an efficient way to store and retrieve\\\\n///         RegisteredTransfers. This contract is used to manage the transfers\\\\n///         stored by `TransferRegistry.sol`\\\\nlibrary LibIterableMapping {\\\\n    struct TransferDefinitionWithIndex {\\\\n        RegisteredTransfer transfer;\\\\n        uint256 index;\\\\n    }\\\\n\\\\n    struct IterableMapping {\\\\n        mapping(string => TransferDefinitionWithIndex) transfers;\\\\n        string[] names;\\\\n    }\\\\n\\\\n    function stringEqual(string memory s, string memory t)\\\\n        internal\\\\n        pure\\\\n        returns (bool)\\\\n    {\\\\n        return keccak256(abi.encodePacked(s)) == keccak256(abi.encodePacked(t));\\\\n    }\\\\n\\\\n    function isEmptyString(string memory s) internal pure returns (bool) {\\\\n        return stringEqual(s, \\\\\\"\\\\\\");\\\\n    }\\\\n\\\\n    function nameExists(IterableMapping storage self, string memory name)\\\\n        internal\\\\n        view\\\\n        returns (bool)\\\\n    {\\\\n        return\\\\n            !isEmptyString(name) &&\\\\n            self.names.length != 0 &&\\\\n            stringEqual(self.names[self.transfers[name].index], name);\\\\n    }\\\\n\\\\n    function length(IterableMapping storage self)\\\\n        internal\\\\n        view\\\\n        returns (uint256)\\\\n    {\\\\n        return self.names.length;\\\\n    }\\\\n\\\\n    function getTransferDefinitionByName(\\\\n        IterableMapping storage self,\\\\n        string memory name\\\\n    ) internal view returns (RegisteredTransfer memory) {\\\\n        require(nameExists(self, name), \\\\\\"LibIterableMapping: NAME_NOT_FOUND\\\\\\");\\\\n        return self.transfers[name].transfer;\\\\n    }\\\\n\\\\n    function getTransferDefinitionByIndex(\\\\n        IterableMapping storage self,\\\\n        uint256 index\\\\n    ) internal view returns (RegisteredTransfer memory) {\\\\n        require(index < self.names.length, \\\\\\"LibIterableMapping: INVALID_INDEX\\\\\\");\\\\n        return self.transfers[self.names[index]].transfer;\\\\n    }\\\\n\\\\n    function getTransferDefinitions(IterableMapping storage self)\\\\n        internal\\\\n        view\\\\n        returns (RegisteredTransfer[] memory)\\\\n    {\\\\n        uint256 l = self.names.length;\\\\n        RegisteredTransfer[] memory transfers = new RegisteredTransfer[](l);\\\\n        for (uint256 i = 0; i < l; i++) {\\\\n            transfers[i] = self.transfers[self.names[i]].transfer;\\\\n        }\\\\n        return transfers;\\\\n    }\\\\n\\\\n    function addTransferDefinition(\\\\n        IterableMapping storage self,\\\\n        RegisteredTransfer memory transfer\\\\n    ) internal {\\\\n        string memory name = transfer.name;\\\\n        require(!isEmptyString(name), \\\\\\"LibIterableMapping: EMPTY_NAME\\\\\\");\\\\n        require(!nameExists(self, name), \\\\\\"LibIterableMapping: NAME_ALREADY_ADDED\\\\\\");\\\\n        self.transfers[name] = TransferDefinitionWithIndex({\\\\n            transfer: transfer,\\\\n            index: self.names.length\\\\n        });\\\\n        self.names.push(name);\\\\n    }\\\\n\\\\n    function removeTransferDefinition(\\\\n        IterableMapping storage self,\\\\n        string memory name\\\\n    ) internal {\\\\n        require(!isEmptyString(name), \\\\\\"LibIterableMapping: EMPTY_NAME\\\\\\");\\\\n        require(nameExists(self, name), \\\\\\"LibIterableMapping: NAME_NOT_FOUND\\\\\\");\\\\n        uint256 index = self.transfers[name].index;\\\\n        string memory lastName = self.names[self.names.length - 1];\\\\n        self.transfers[lastName].index = index;\\\\n        self.names[index] = lastName;\\\\n        delete self.transfers[name];\\\\n        self.names.pop();\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x52d4a240bb76e9892af1ecbf6cf72995890db0b115a36a54e1b0115f0f47ce8a\\",\\"license\\":\\"UNLICENSED\\"}},\\"version\\":1}","bytecode":"0x608060405234801561001057600080fd5b50600061001b61006a565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35061006e565b3390565b6115078061007d6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806355304c3f14610067578063715018a61461007c5780638da5cb5b14610084578063961bf9b1146100a2578063c9ff4d25146100b5578063f2fde38b146100ca575b600080fd5b61007a610075366004611061565b6100dd565b005b61007a610179565b61008c6101f8565b604051610099919061127c565b60405180910390f35b61007a6100b0366004611026565b610207565b6100bd61028b565b6040516100999190611290565b61007a6100d836600461100b565b61029c565b6100e5610352565b6000546001600160a01b0390811691161461011b5760405162461bcd60e51b81526004016101129061137c565b60405180910390fd5b60006101276001610356565b905061013460018361035d565b7fcdbba5dd6bffbe47d5f74dbed3cf4a2174815c7186eaa49b32f97af4c47543bf6101606001836104af565b60405161016d919061146b565b60405180910390a15050565b610181610352565b6000546001600160a01b039081169116146101ae5760405162461bcd60e51b81526004016101129061137c565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b61020f610352565b6000546001600160a01b0390811691161461023c5760405162461bcd60e51b81526004016101129061137c565b610244610e79565b61024f600183610783565b905061025c6001836107c1565b7fdc44d9d985df00268149ae57add485c612e57109279f8485035dbe2b2251222b8160405161016d919061146b565b606061029760016109df565b905090565b6102a4610352565b6000546001600160a01b039081169116146102d15760405162461bcd60e51b81526004016101129061137c565b6001600160a01b0381166102f75760405162461bcd60e51b8152600401610112906112f0565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6001015490565b805161036881610d0e565b156103855760405162461bcd60e51b8152600401610112906113b1565b61038f8382610d29565b156103ac5760405162461bcd60e51b815260040161011290611336565b60408051808201825283815260018501546020820152905184906103d19084906111f0565b908152604051602091819003820190208251805180519293919284926103fb928492910190610eb1565b506020828101516001830180546001600160a01b0319166001600160a01b039092169190911790556040830151805161043a9260028501920190610eb1565b5060608201518051610456916003840191602090910190610eb1565b5060808201518051610472916004840191602090910190610eb1565b505050602091820151600590910155600180850180549182018155600090815282902083516104a993919092019190840190610eb1565b50505050565b6104b7610e79565b600183015482106104da5760405162461bcd60e51b8152600401610112906113e8565b826000018360010183815481106104ed57fe5b90600052602060002001604051610504919061120c565b9081526040805160209281900383018120805460026001821615610100026000190190911604601f8101859004909402820160c090810190935260a0820184815291939092849291849184018282801561059f5780601f106105745761010080835404028352916020019161059f565b820191906000526020600020905b81548152906001019060200180831161058257829003601f168201915b50505091835250506001828101546001600160a01b0316602080840191909152600280850180546040805161010096831615969096026000190190911692909204601f810184900484028501840183528085529190940193918301828280156106495780601f1061061e57610100808354040283529160200191610649565b820191906000526020600020905b81548152906001019060200180831161062c57829003601f168201915b505050918352505060038201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156106dd5780601f106106b2576101008083540402835291602001916106dd565b820191906000526020600020905b8154815290600101906020018083116106c057829003601f168201915b505050918352505060048201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156107715780601f1061074657610100808354040283529160200191610771565b820191906000526020600020905b81548152906001019060200180831161075457829003601f168201915b50505050508152505090505b92915050565b61078b610e79565b6107958383610d29565b6107b15760405162461bcd60e51b815260040161011290611429565b60405183906105049084906111f0565b6107ca81610d0e565b156107e75760405162461bcd60e51b8152600401610112906113b1565b6107f18282610d29565b61080d5760405162461bcd60e51b815260040161011290611429565b6000826000018260405161082191906111f0565b90815260405190819003602001902060050154600184018054919250606091600019810190811061084e57fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156108dc5780601f106108b1576101008083540402835291602001916108dc565b820191906000526020600020905b8154815290600101906020018083116108bf57829003601f168201915b505050505090508184600001826040516108f691906111f0565b9081526020016040518091039020600501819055508084600101838154811061091b57fe5b906000526020600020019080519060200190610938929190610eb1565b5060405184906109499085906111f0565b908152604051908190036020019020600081816109668282610f2f565b6001820180546001600160a01b0319169055610986600283016000610f2f565b610994600383016000610f2f565b6109a2600483016000610f2f565b505060058201600090555050836001018054806109bb57fe5b6001900381819060005260206000200160006109d79190610f2f565b905550505050565b6001810154606090818167ffffffffffffffff811180156109ff57600080fd5b50604051908082528060200260200182016040528015610a3957816020015b610a26610e79565b815260200190600190039081610a1e5790505b50905060005b82811015610d065784600001856001018281548110610a5a57fe5b90600052602060002001604051610a71919061120c565b9081526040805160209281900383018120805460026001821615610100026000190190911604601f8101859004909402820160c090810190935260a08201848152919390928492918491840182828015610b0c5780601f10610ae157610100808354040283529160200191610b0c565b820191906000526020600020905b815481529060010190602001808311610aef57829003601f168201915b50505091835250506001828101546001600160a01b0316602080840191909152600280850180546040805161010096831615969096026000190190911692909204601f81018490048402850184018352808552919094019391830182828015610bb65780601f10610b8b57610100808354040283529160200191610bb6565b820191906000526020600020905b815481529060010190602001808311610b9957829003601f168201915b505050918352505060038201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015610c4a5780601f10610c1f57610100808354040283529160200191610c4a565b820191906000526020600020905b815481529060010190602001808311610c2d57829003601f168201915b505050918352505060048201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015610cde5780601f10610cb357610100808354040283529160200191610cde565b820191906000526020600020905b815481529060010190602001808311610cc157829003601f168201915b505050505081525050828281518110610cf357fe5b6020908102919091010152600101610a3f565b509392505050565b600061077d8260405180602001604052806000815250610e20565b6000610d3482610d0e565b158015610d445750600183015415155b8015610e195750610e19836001018460000184604051610d6491906111f0565b90815260200160405180910390206005015481548110610d8057fe5b600091825260209182902001805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015610e0e5780601f10610de357610100808354040283529160200191610e0e565b820191906000526020600020905b815481529060010190602001808311610df157829003601f168201915b505050505083610e20565b9392505050565b600081604051602001610e3391906111f0565b6040516020818303038152906040528051906020012083604051602001610e5a91906111f0565b6040516020818303038152906040528051906020012014905092915050565b6040518060a001604052806060815260200160006001600160a01b031681526020016060815260200160608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610ef257805160ff1916838001178555610f1f565b82800160010185558215610f1f579182015b82811115610f1f578251825591602001919060010190610f04565b50610f2b929150610f76565b5090565b50805460018160011615610100020316600290046000825580601f10610f555750610f73565b601f016020900490600052602060002090810190610f739190610f76565b50565b5b80821115610f2b5760008155600101610f77565b80356001600160a01b038116811461077d57600080fd5b600082601f830112610fb2578081fd5b813567ffffffffffffffff811115610fc8578182fd5b610fdb601f8201601f191660200161147e565b9150808252836020828501011115610ff257600080fd5b8060208401602084013760009082016020015292915050565b60006020828403121561101c578081fd5b610e198383610f8b565b600060208284031215611037578081fd5b813567ffffffffffffffff81111561104d578182fd5b61105984828501610fa2565b949350505050565b600060208284031215611072578081fd5b813567ffffffffffffffff80821115611089578283fd5b9083019060a0828603121561109c578283fd5b6110a660a061147e565b8235828111156110b4578485fd5b6110c087828601610fa2565b8252506110d08660208501610f8b565b60208201526040830135828111156110e6578485fd5b6110f287828601610fa2565b604083015250606083013582811115611109578485fd5b61111587828601610fa2565b60608301525060808301358281111561112c578485fd5b61113887828601610fa2565b60808301525095945050505050565b6000815180845261115f8160208601602086016114a5565b601f01601f19169290920160200192915050565b6000815160a0845261118860a0850182611147565b905060018060a01b036020840151166020850152604083015184820360408601526111b38282611147565b915050606083015184820360608601526111cd8282611147565b915050608083015184820360808601526111e78282611147565b95945050505050565b600082516112028184602087016114a5565b9190910192915050565b600080835460018082166000811461122b576001811461124257611271565b60ff198316865260028304607f1686019350611271565b600283048786526020808720875b838110156112695781548a820152908501908201611250565b505050860193505b509195945050505050565b6001600160a01b0391909116815260200190565b6000602080830181845280855180835260408601915060408482028701019250838701855b828110156112e357603f198886030184526112d1858351611173565b945092850192908501906001016112b5565b5092979650505050505050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526026908201527f4c69624974657261626c654d617070696e673a204e414d455f414c524541445960408201526517d05111115160d21b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601e908201527f4c69624974657261626c654d617070696e673a20454d5054595f4e414d450000604082015260600190565b60208082526021908201527f4c69624974657261626c654d617070696e673a20494e56414c49445f494e44456040820152600b60fb1b606082015260800190565b60208082526022908201527f4c69624974657261626c654d617070696e673a204e414d455f4e4f545f464f55604082015261139160f21b606082015260800190565b600060208252610e196020830184611173565b60405181810167ffffffffffffffff8111828210171561149d57600080fd5b604052919050565b60005b838110156114c05781810151838201526020016114a8565b838111156104a9575050600091015256fea26469706673582212207ffce686b133899c962d2392c37d7cc417bfb49017cb433d19d525b065f0f46d64736f6c63430007010033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106100625760003560e01c806355304c3f14610067578063715018a61461007c5780638da5cb5b14610084578063961bf9b1146100a2578063c9ff4d25146100b5578063f2fde38b146100ca575b600080fd5b61007a610075366004611061565b6100dd565b005b61007a610179565b61008c6101f8565b604051610099919061127c565b60405180910390f35b61007a6100b0366004611026565b610207565b6100bd61028b565b6040516100999190611290565b61007a6100d836600461100b565b61029c565b6100e5610352565b6000546001600160a01b0390811691161461011b5760405162461bcd60e51b81526004016101129061137c565b60405180910390fd5b60006101276001610356565b905061013460018361035d565b7fcdbba5dd6bffbe47d5f74dbed3cf4a2174815c7186eaa49b32f97af4c47543bf6101606001836104af565b60405161016d919061146b565b60405180910390a15050565b610181610352565b6000546001600160a01b039081169116146101ae5760405162461bcd60e51b81526004016101129061137c565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b61020f610352565b6000546001600160a01b0390811691161461023c5760405162461bcd60e51b81526004016101129061137c565b610244610e79565b61024f600183610783565b905061025c6001836107c1565b7fdc44d9d985df00268149ae57add485c612e57109279f8485035dbe2b2251222b8160405161016d919061146b565b606061029760016109df565b905090565b6102a4610352565b6000546001600160a01b039081169116146102d15760405162461bcd60e51b81526004016101129061137c565b6001600160a01b0381166102f75760405162461bcd60e51b8152600401610112906112f0565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6001015490565b805161036881610d0e565b156103855760405162461bcd60e51b8152600401610112906113b1565b61038f8382610d29565b156103ac5760405162461bcd60e51b815260040161011290611336565b60408051808201825283815260018501546020820152905184906103d19084906111f0565b908152604051602091819003820190208251805180519293919284926103fb928492910190610eb1565b506020828101516001830180546001600160a01b0319166001600160a01b039092169190911790556040830151805161043a9260028501920190610eb1565b5060608201518051610456916003840191602090910190610eb1565b5060808201518051610472916004840191602090910190610eb1565b505050602091820151600590910155600180850180549182018155600090815282902083516104a993919092019190840190610eb1565b50505050565b6104b7610e79565b600183015482106104da5760405162461bcd60e51b8152600401610112906113e8565b826000018360010183815481106104ed57fe5b90600052602060002001604051610504919061120c565b9081526040805160209281900383018120805460026001821615610100026000190190911604601f8101859004909402820160c090810190935260a0820184815291939092849291849184018282801561059f5780601f106105745761010080835404028352916020019161059f565b820191906000526020600020905b81548152906001019060200180831161058257829003601f168201915b50505091835250506001828101546001600160a01b0316602080840191909152600280850180546040805161010096831615969096026000190190911692909204601f810184900484028501840183528085529190940193918301828280156106495780601f1061061e57610100808354040283529160200191610649565b820191906000526020600020905b81548152906001019060200180831161062c57829003601f168201915b505050918352505060038201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156106dd5780601f106106b2576101008083540402835291602001916106dd565b820191906000526020600020905b8154815290600101906020018083116106c057829003601f168201915b505050918352505060048201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156107715780601f1061074657610100808354040283529160200191610771565b820191906000526020600020905b81548152906001019060200180831161075457829003601f168201915b50505050508152505090505b92915050565b61078b610e79565b6107958383610d29565b6107b15760405162461bcd60e51b815260040161011290611429565b60405183906105049084906111f0565b6107ca81610d0e565b156107e75760405162461bcd60e51b8152600401610112906113b1565b6107f18282610d29565b61080d5760405162461bcd60e51b815260040161011290611429565b6000826000018260405161082191906111f0565b90815260405190819003602001902060050154600184018054919250606091600019810190811061084e57fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156108dc5780601f106108b1576101008083540402835291602001916108dc565b820191906000526020600020905b8154815290600101906020018083116108bf57829003601f168201915b505050505090508184600001826040516108f691906111f0565b9081526020016040518091039020600501819055508084600101838154811061091b57fe5b906000526020600020019080519060200190610938929190610eb1565b5060405184906109499085906111f0565b908152604051908190036020019020600081816109668282610f2f565b6001820180546001600160a01b0319169055610986600283016000610f2f565b610994600383016000610f2f565b6109a2600483016000610f2f565b505060058201600090555050836001018054806109bb57fe5b6001900381819060005260206000200160006109d79190610f2f565b905550505050565b6001810154606090818167ffffffffffffffff811180156109ff57600080fd5b50604051908082528060200260200182016040528015610a3957816020015b610a26610e79565b815260200190600190039081610a1e5790505b50905060005b82811015610d065784600001856001018281548110610a5a57fe5b90600052602060002001604051610a71919061120c565b9081526040805160209281900383018120805460026001821615610100026000190190911604601f8101859004909402820160c090810190935260a08201848152919390928492918491840182828015610b0c5780601f10610ae157610100808354040283529160200191610b0c565b820191906000526020600020905b815481529060010190602001808311610aef57829003601f168201915b50505091835250506001828101546001600160a01b0316602080840191909152600280850180546040805161010096831615969096026000190190911692909204601f81018490048402850184018352808552919094019391830182828015610bb65780601f10610b8b57610100808354040283529160200191610bb6565b820191906000526020600020905b815481529060010190602001808311610b9957829003601f168201915b505050918352505060038201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015610c4a5780601f10610c1f57610100808354040283529160200191610c4a565b820191906000526020600020905b815481529060010190602001808311610c2d57829003601f168201915b505050918352505060048201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015610cde5780601f10610cb357610100808354040283529160200191610cde565b820191906000526020600020905b815481529060010190602001808311610cc157829003601f168201915b505050505081525050828281518110610cf357fe5b6020908102919091010152600101610a3f565b509392505050565b600061077d8260405180602001604052806000815250610e20565b6000610d3482610d0e565b158015610d445750600183015415155b8015610e195750610e19836001018460000184604051610d6491906111f0565b90815260200160405180910390206005015481548110610d8057fe5b600091825260209182902001805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015610e0e5780601f10610de357610100808354040283529160200191610e0e565b820191906000526020600020905b815481529060010190602001808311610df157829003601f168201915b505050505083610e20565b9392505050565b600081604051602001610e3391906111f0565b6040516020818303038152906040528051906020012083604051602001610e5a91906111f0565b6040516020818303038152906040528051906020012014905092915050565b6040518060a001604052806060815260200160006001600160a01b031681526020016060815260200160608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610ef257805160ff1916838001178555610f1f565b82800160010185558215610f1f579182015b82811115610f1f578251825591602001919060010190610f04565b50610f2b929150610f76565b5090565b50805460018160011615610100020316600290046000825580601f10610f555750610f73565b601f016020900490600052602060002090810190610f739190610f76565b50565b5b80821115610f2b5760008155600101610f77565b80356001600160a01b038116811461077d57600080fd5b600082601f830112610fb2578081fd5b813567ffffffffffffffff811115610fc8578182fd5b610fdb601f8201601f191660200161147e565b9150808252836020828501011115610ff257600080fd5b8060208401602084013760009082016020015292915050565b60006020828403121561101c578081fd5b610e198383610f8b565b600060208284031215611037578081fd5b813567ffffffffffffffff81111561104d578182fd5b61105984828501610fa2565b949350505050565b600060208284031215611072578081fd5b813567ffffffffffffffff80821115611089578283fd5b9083019060a0828603121561109c578283fd5b6110a660a061147e565b8235828111156110b4578485fd5b6110c087828601610fa2565b8252506110d08660208501610f8b565b60208201526040830135828111156110e6578485fd5b6110f287828601610fa2565b604083015250606083013582811115611109578485fd5b61111587828601610fa2565b60608301525060808301358281111561112c578485fd5b61113887828601610fa2565b60808301525095945050505050565b6000815180845261115f8160208601602086016114a5565b601f01601f19169290920160200192915050565b6000815160a0845261118860a0850182611147565b905060018060a01b036020840151166020850152604083015184820360408601526111b38282611147565b915050606083015184820360608601526111cd8282611147565b915050608083015184820360808601526111e78282611147565b95945050505050565b600082516112028184602087016114a5565b9190910192915050565b600080835460018082166000811461122b576001811461124257611271565b60ff198316865260028304607f1686019350611271565b600283048786526020808720875b838110156112695781548a820152908501908201611250565b505050860193505b509195945050505050565b6001600160a01b0391909116815260200190565b6000602080830181845280855180835260408601915060408482028701019250838701855b828110156112e357603f198886030184526112d1858351611173565b945092850192908501906001016112b5565b5092979650505050505050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526026908201527f4c69624974657261626c654d617070696e673a204e414d455f414c524541445960408201526517d05111115160d21b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601e908201527f4c69624974657261626c654d617070696e673a20454d5054595f4e414d450000604082015260600190565b60208082526021908201527f4c69624974657261626c654d617070696e673a20494e56414c49445f494e44456040820152600b60fb1b606082015260800190565b60208082526022908201527f4c69624974657261626c654d617070696e673a204e414d455f4e4f545f464f55604082015261139160f21b606082015260800190565b600060208252610e196020830184611173565b60405181810167ffffffffffffffff8111828210171561149d57600080fd5b604052919050565b60005b838110156114c05781810151838201526020016114a8565b838111156104a9575050600091015256fea26469706673582212207ffce686b133899c962d2392c37d7cc417bfb49017cb433d19d525b065f0f46d64736f6c63430007010033","devdoc":{"author":"Connext <support@connext.network>","kind":"dev","methods":{"addTransferDefinition((string,address,string,string,bytes))":{"details":"Should add a transfer definition to the registry"},"getTransferDefinitions()":{"details":"Should return all transfer defintions in registry"},"owner()":{"details":"Returns the address of the current owner."},"removeTransferDefinition(string)":{"details":"Should remove a transfer definition from the registry"},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"title":"TransferRegistry","version":1},"userdoc":{"kind":"user","methods":{},"notice":"The TransferRegistry maintains an onchain record of all         supported transfers (specifically holds the registry information         defined within the contracts). The offchain protocol uses         this information to get the correct encodings when generating         signatures. The information stored here can only be updated         by the owner of the contract","version":1},"storageLayout":{"storage":[{"astId":30,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":3458,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"transfers","offset":0,"slot":"1","type":"t_struct(IterableMapping)4424_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_string_storage)dyn_storage":{"base":"t_string_storage","encoding":"dynamic_array","label":"string[]","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_mapping(t_string_memory_ptr,t_struct(TransferDefinitionWithIndex)4416_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => struct LibIterableMapping.TransferDefinitionWithIndex)","numberOfBytes":"32","value":"t_struct(TransferDefinitionWithIndex)4416_storage"},"t_string_memory_ptr":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(IterableMapping)4424_storage":{"encoding":"inplace","label":"struct LibIterableMapping.IterableMapping","members":[{"astId":4420,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"transfers","offset":0,"slot":"0","type":"t_mapping(t_string_memory_ptr,t_struct(TransferDefinitionWithIndex)4416_storage)"},{"astId":4423,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"names","offset":0,"slot":"1","type":"t_array(t_string_storage)dyn_storage"}],"numberOfBytes":"64"},"t_struct(RegisteredTransfer)3967_storage":{"encoding":"inplace","label":"struct RegisteredTransfer","members":[{"astId":3958,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":3960,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"definition","offset":0,"slot":"1","type":"t_address"},{"astId":3962,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"stateEncoding","offset":0,"slot":"2","type":"t_string_storage"},{"astId":3964,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"resolverEncoding","offset":0,"slot":"3","type":"t_string_storage"},{"astId":3966,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"encodedCancel","offset":0,"slot":"4","type":"t_bytes_storage"}],"numberOfBytes":"160"},"t_struct(TransferDefinitionWithIndex)4416_storage":{"encoding":"inplace","label":"struct LibIterableMapping.TransferDefinitionWithIndex","members":[{"astId":4413,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"transfer","offset":0,"slot":"0","type":"t_struct(RegisteredTransfer)3967_storage"},{"astId":4415,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"index","offset":0,"slot":"5","type":"t_uint256"}],"numberOfBytes":"192"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}}}')},2823:function(e){e.exports=JSON.parse('{"address":"0xed911640fd86f92fD1337526010adda8F3Eb8344","abi":[{"inputs":[],"name":"EncodedCancel","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"Name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ResolverEncoding","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"StateEncoding","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"encodedBalance","type":"bytes"},{"internalType":"bytes","name":"encodedState","type":"bytes"}],"name":"create","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"getRegistryInformation","outputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"address","name":"definition","type":"address"},{"internalType":"string","name":"stateEncoding","type":"string"},{"internalType":"string","name":"resolverEncoding","type":"string"},{"internalType":"bytes","name":"encodedCancel","type":"bytes"}],"internalType":"struct RegisteredTransfer","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"encodedBalance","type":"bytes"},{"internalType":"bytes","name":"encodedState","type":"bytes"},{"internalType":"bytes","name":"encodedResolver","type":"bytes"}],"name":"resolve","outputs":[{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"}],"transactionHash":"0x660dc9d8c6d580eae622897de56c24ee2d1b123d27575a3b005585ea2ed53c6a","receipt":{"to":null,"from":"0xd4b33434Cb36df9286Ef5132FCFb8062c96aC56E","contractAddress":"0xed911640fd86f92fD1337526010adda8F3Eb8344","transactionIndex":0,"gasUsed":"1069621","logsBloom":"0xblockHash":"0xa5201a35c9027a4782b93196925aa929b581208e6fa7e9d308a7e36b1f450350","transactionHash":"0x660dc9d8c6d580eae622897de56c24ee2d1b123d27575a3b005585ea2ed53c6a","logs":[{"transactionIndex":0,"blockNumber":8930733,"transactionHash":"0x660dc9d8c6d580eae622897de56c24ee2d1b123d27575a3b005585ea2ed53c6a","address":"0x0000000000000000000000000000000000001010","topics":["0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63","0x0000000000000000000000000000000000000000000000000000000000001010","0x000000000000000000000000d4b33434cb36df9286ef5132fcfb8062c96ac56e","0x0000000000000000000000001ca971963bdb4ba2bf337c90660674acff5beb3f"],"data":"0x0000000000000000000000000000000000000000000000000003ccd08bbfd2000000000000000000000000000000000000000000000000a2a14b1140f569f60000000000000000000000000000000000000000000000000006490f4413fb01e40000000000000000000000000000000000000000000000a2a147447069aa2400000000000000000000000000000000000000000000000000064cdc149fbad3e4","logIndex":0,"blockHash":"0xa5201a35c9027a4782b93196925aa929b581208e6fa7e9d308a7e36b1f450350"}],"blockNumber":8930733,"cumulativeGasUsed":"1069621","status":1,"byzantium":true},"args":[],"solcInputHash":"89c55d5a88f10637860a9ea31a1daad3","metadata":"{\\"compiler\\":{\\"version\\":\\"0.7.1+commit.f4a555be\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[],\\"name\\":\\"EncodedCancel\\",\\"outputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"\\",\\"type\\":\\"bytes\\"}],\\"stateMutability\\":\\"pure\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"Name\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"ResolverEncoding\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"StateEncoding\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedBalance\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedState\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"create\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"pure\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getRegistryInformation\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"definition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"stateEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"resolverEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedCancel\\",\\"type\\":\\"bytes\\"}],\\"internalType\\":\\"struct RegisteredTransfer\\",\\"name\\":\\"\\",\\"type\\":\\"tuple\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedBalance\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedState\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedResolver\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"resolve\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"\\",\\"type\\":\\"tuple\\"}],\\"stateMutability\\":\\"pure\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"author\\":\\"Connext <support@connext.network>\\",\\"kind\\":\\"dev\\",\\"methods\\":{},\\"title\\":\\"Withdraw\\",\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"notice\\":\\"This contract burns the initiator\'s funds if a mutually signed         withdraw commitment can be generated\\",\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"src.sol/transferDefinitions/Withdraw.sol\\":\\"Withdraw\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\\\n *\\\\n * These functions can be used to verify that a message was signed by the holder\\\\n * of the private keys of a given address.\\\\n */\\\\nlibrary ECDSA {\\\\n    /**\\\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\\\n     * `signature`. This address can then be used for verification purposes.\\\\n     *\\\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\\\n     * this function rejects them by requiring the `s` value to be in the lower\\\\n     * half order, and the `v` value to be either 27 or 28.\\\\n     *\\\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\\\n     * verification to be secure: it is possible to craft signatures that\\\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\\\n     * this is by receiving a hash of the original message (which may otherwise\\\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\\\n     */\\\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\\\n        // Check the signature length\\\\n        if (signature.length != 65) {\\\\n            revert(\\\\\\"ECDSA: invalid signature length\\\\\\");\\\\n        }\\\\n\\\\n        // Divide the signature in r, s and v variables\\\\n        bytes32 r;\\\\n        bytes32 s;\\\\n        uint8 v;\\\\n\\\\n        // ecrecover takes the signature parameters, and the only way to get them\\\\n        // currently is to use assembly.\\\\n        // solhint-disable-next-line no-inline-assembly\\\\n        assembly {\\\\n            r := mload(add(signature, 0x20))\\\\n            s := mload(add(signature, 0x40))\\\\n            v := byte(0, mload(add(signature, 0x60)))\\\\n        }\\\\n\\\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\\\n        // the valid range for s in (281): 0 < s < secp256k1n \\\\u00f7 2 + 1, and for v in (282): v \\\\u2208 {27, 28}. Most\\\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\\\n        //\\\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\\\n        // these malleable signatures as well.\\\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\\\n            revert(\\\\\\"ECDSA: invalid signature \'s\' value\\\\\\");\\\\n        }\\\\n\\\\n        if (v != 27 && v != 28) {\\\\n            revert(\\\\\\"ECDSA: invalid signature \'v\' value\\\\\\");\\\\n        }\\\\n\\\\n        // If the signature is valid (and not malleable), return the signer address\\\\n        address signer = ecrecover(hash, v, r, s);\\\\n        require(signer != address(0), \\\\\\"ECDSA: invalid signature\\\\\\");\\\\n\\\\n        return signer;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\\\n     * replicates the behavior of the\\\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\\\n     * JSON-RPC method.\\\\n     *\\\\n     * See {recover}.\\\\n     */\\\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\\\n        // 32 is the length in bytes of hash,\\\\n        // enforced by the type signature above\\\\n        return keccak256(abi.encodePacked(\\\\\\"\\\\\\\\x19Ethereum Signed Message:\\\\\\\\n32\\\\\\", hash));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf25c49d2be2d28918ae6de7e9724238367dabe50631ec8fd23d1cdae2cb70262\\",\\"license\\":\\"MIT\\"},\\"src.sol/interfaces/ITransferDefinition.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./ITransferRegistry.sol\\\\\\";\\\\nimport \\\\\\"./Types.sol\\\\\\";\\\\n\\\\ninterface ITransferDefinition {\\\\n    // Validates the initial state of the transfer.\\\\n    // Called by validator.ts during `create` updates.\\\\n    function create(bytes calldata encodedBalance, bytes calldata)\\\\n        external\\\\n        view\\\\n        returns (bool);\\\\n\\\\n    // Performs a state transition to resolve a transfer and returns final balances.\\\\n    // Called by validator.ts during `resolve` updates.\\\\n    function resolve(\\\\n        bytes calldata encodedBalance,\\\\n        bytes calldata,\\\\n        bytes calldata\\\\n    ) external view returns (Balance memory);\\\\n\\\\n    // Should also have the following properties:\\\\n    // string public constant override Name = \\\\\\"...\\\\\\";\\\\n    // string public constant override StateEncoding = \\\\\\"...\\\\\\";\\\\n    // string public constant override ResolverEncoding = \\\\\\"...\\\\\\";\\\\n    // These properties are included on the transfer specifically\\\\n    // to make it easier for implementers to add new transfers by\\\\n    // only include a `.sol` file\\\\n    function Name() external view returns (string memory);\\\\n\\\\n    function StateEncoding() external view returns (string memory);\\\\n\\\\n    function ResolverEncoding() external view returns (string memory);\\\\n\\\\n    function EncodedCancel() external view returns (bytes memory);\\\\n\\\\n    function getRegistryInformation()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd8eef575aa791b187397c9096e6cf40431b590d3999f0a80e38f3e59f4cf4764\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ITransferRegistry.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental \\\\\\"ABIEncoderV2\\\\\\";\\\\n\\\\nstruct RegisteredTransfer {\\\\n    string name;\\\\n    address definition;\\\\n    string stateEncoding;\\\\n    string resolverEncoding;\\\\n    bytes encodedCancel;\\\\n}\\\\n\\\\ninterface ITransferRegistry {\\\\n    event TransferAdded(RegisteredTransfer transfer);\\\\n\\\\n    event TransferRemoved(RegisteredTransfer transfer);\\\\n\\\\n    // Should add a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function addTransferDefinition(RegisteredTransfer memory transfer) external;\\\\n\\\\n    // Should remove a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function removeTransferDefinition(string memory name) external;\\\\n\\\\n    // Should return all transfer defintions in registry\\\\n    function getTransferDefinitions()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer[] memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd13be6d976c64e381a0d9df10c621cd964454b6916f25df4ea6c1b4cd873a58a\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/Types.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nstruct Balance {\\\\n    uint256[2] amount; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n    address payable[2] to; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf8c71b155b630cde965f5d1db5f0d2751a9763f5a797f15d946613e9224f1046\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibChannelCrypto.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\\\\\";\\\\n\\\\t\\\\t\\\\n/// @author Connext <support@connext.network>\\\\t\\\\t\\\\n/// @notice This library contains helpers for recovering signatures from a\\\\t\\\\t\\\\n///         Vector commitments. Channels do not allow for arbitrary signing of\\\\t\\\\t\\\\n///         messages to prevent misuse of private keys by injected providers,\\\\t\\\\t\\\\n///         and instead only sign messages with a Vector channel prefix.\\\\nlibrary LibChannelCrypto {\\\\n    function checkSignature(\\\\n        bytes32 hash,\\\\n        bytes memory signature,\\\\n        address allegedSigner\\\\n    ) internal pure returns (bool) {\\\\n        return recoverChannelMessageSigner(hash, signature) == allegedSigner;\\\\n    }\\\\n\\\\n    function recoverChannelMessageSigner(bytes32 hash, bytes memory signature)\\\\n        internal\\\\n        pure\\\\n        returns (address)\\\\n    {\\\\n        bytes32 digest = toChannelSignedMessage(hash);\\\\n        return ECDSA.recover(digest, signature);\\\\n    }\\\\n\\\\n    function toChannelSignedMessage(bytes32 hash)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        // 32 is the length in bytes of hash,\\\\n        // enforced by the type signature above\\\\n        return\\\\n            keccak256(abi.encodePacked(\\\\\\"\\\\\\\\x16Vector Signed Message:\\\\\\\\n32\\\\\\", hash));\\\\n    }\\\\n\\\\n    function checkUtilitySignature(\\\\n        bytes32 hash,\\\\n        bytes memory signature,\\\\n        address allegedSigner\\\\n    ) internal pure returns (bool) {\\\\n        return recoverChannelMessageSigner(hash, signature) == allegedSigner;\\\\n    }\\\\n\\\\n    function recoverUtilityMessageSigner(bytes32 hash, bytes memory signature)\\\\n        internal\\\\n        pure\\\\n        returns (address)\\\\n    {\\\\n        bytes32 digest = toUtilitySignedMessage(hash);\\\\n        return ECDSA.recover(digest, signature);\\\\n    }\\\\n\\\\n    function toUtilitySignedMessage(bytes32 hash)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        // 32 is the length in bytes of hash,\\\\n        // enforced by the type signature above\\\\n        return\\\\n            keccak256(abi.encodePacked(\\\\\\"\\\\\\\\x17Utility Signed Message:\\\\\\\\n32\\\\\\", hash));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xb8aa3679b75f2a1a5785f614f5dff9a76a689c18caa56a8df1f4e3c3167d6ece\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/transferDefinitions/TransferDefinition.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"../interfaces/ITransferDefinition.sol\\\\\\";\\\\nimport \\\\\\"../interfaces/ITransferRegistry.sol\\\\\\";\\\\n\\\\n/// @title TransferDefinition\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This contract helps reduce boilerplate needed when creating\\\\n///         new transfer definitions by providing an implementation of\\\\n///         the required getter\\\\n\\\\nabstract contract TransferDefinition is ITransferDefinition {\\\\n    function getRegistryInformation()\\\\n        external\\\\n        view\\\\n        override\\\\n        returns (RegisteredTransfer memory)\\\\n    {\\\\n        return\\\\n            RegisteredTransfer({\\\\n                name: this.Name(),\\\\n                stateEncoding: this.StateEncoding(),\\\\n                resolverEncoding: this.ResolverEncoding(),\\\\n                definition: address(this),\\\\n                encodedCancel: this.EncodedCancel()\\\\n            });\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xdb8bcb3fadd5c514bc6585b0a48d66952570bbb1a62f18b9dc9a4f693dc11c5e\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/transferDefinitions/Withdraw.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./TransferDefinition.sol\\\\\\";\\\\nimport \\\\\\"../lib/LibChannelCrypto.sol\\\\\\";\\\\n\\\\n/// @title Withdraw\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This contract burns the initiator\'s funds if a mutually signed\\\\n///         withdraw commitment can be generated\\\\n\\\\ncontract Withdraw is TransferDefinition {\\\\n    using LibChannelCrypto for bytes32;\\\\n\\\\n    struct TransferState {\\\\n        bytes initiatorSignature;\\\\n        address initiator;\\\\n        address responder;\\\\n        bytes32 data;\\\\n        uint256 nonce; // included so that each withdraw commitment has a unique hash\\\\n        uint256 fee;\\\\n        address callTo;\\\\n        bytes callData;\\\\n    }\\\\n\\\\n    struct TransferResolver {\\\\n        bytes responderSignature;\\\\n    }\\\\n\\\\n    // Provide registry information\\\\n    string public constant override Name = \\\\\\"Withdraw\\\\\\";\\\\n    string public constant override StateEncoding =\\\\n        \\\\\\"tuple(bytes initiatorSignature, address initiator, address responder, bytes32 data, uint256 nonce, uint256 fee, address callTo, bytes callData)\\\\\\";\\\\n    string public constant override ResolverEncoding =\\\\n        \\\\\\"tuple(bytes responderSignature)\\\\\\";\\\\n\\\\n    function EncodedCancel() external pure override returns(bytes memory) {\\\\n      TransferResolver memory resolver;\\\\n      resolver.responderSignature = new bytes(65);\\\\n      return abi.encode(resolver);\\\\n    }\\\\n\\\\n    function create(bytes calldata encodedBalance, bytes calldata encodedState)\\\\n        external\\\\n        pure\\\\n        override\\\\n        returns (bool)\\\\n    {\\\\n        // Get unencoded information\\\\n        TransferState memory state = abi.decode(encodedState, (TransferState));\\\\n        Balance memory balance = abi.decode(encodedBalance, (Balance));\\\\n\\\\n        require(balance.amount[1] == 0, \\\\\\"Withdraw: NONZERO_RECIPIENT_BALANCE\\\\\\");\\\\n        require(\\\\n            state.initiator != address(0) && state.responder != address(0),\\\\n            \\\\\\"Withdraw: EMPTY_SIGNERS\\\\\\"\\\\n        );\\\\n        require(state.data != bytes32(0), \\\\\\"Withdraw: EMPTY_DATA\\\\\\");\\\\n        require(state.nonce != uint256(0), \\\\\\"Withdraw: EMPTY_NONCE\\\\\\");\\\\n        require(\\\\n            state.fee <= balance.amount[0],\\\\n            \\\\\\"Withdraw: INSUFFICIENT_BALANCE\\\\\\"\\\\n        );\\\\n        require(\\\\n            state.data.checkSignature(\\\\n                state.initiatorSignature,\\\\n                state.initiator\\\\n            ),\\\\n            \\\\\\"Withdraw: INVALID_INITIATOR_SIG\\\\\\"\\\\n        );\\\\n        \\\\n        // Valid initial transfer state\\\\n        return true;\\\\n    }\\\\n\\\\n    function resolve(\\\\n        bytes calldata encodedBalance,\\\\n        bytes calldata encodedState,\\\\n        bytes calldata encodedResolver\\\\n    ) external pure override returns (Balance memory) {\\\\n        TransferState memory state = abi.decode(encodedState, (TransferState));\\\\n        TransferResolver memory resolver =\\\\n            abi.decode(encodedResolver, (TransferResolver));\\\\n        Balance memory balance = abi.decode(encodedBalance, (Balance));\\\\n\\\\n        // Allow for a withdrawal to be canceled if an empty signature is \\\\n        // passed in. Should have *specific* cancellation action, not just\\\\n        // any invalid sig\\\\n        bytes memory b = new bytes(65);\\\\n        if (keccak256(resolver.responderSignature) == keccak256(b)) {\\\\n            // Withdraw should be cancelled, no state manipulation needed\\\\n        } else {\\\\n            require(\\\\n                state.data.checkSignature(\\\\n                    resolver.responderSignature,\\\\n                    state.responder\\\\n                ),\\\\n                \\\\\\"Withdraw: INVALID_RESPONDER_SIG\\\\\\"\\\\n            );\\\\n            // Reduce withdraw amount by optional fee\\\\n            // It\'s up to the offchain validators to ensure that the withdraw commitment takes this fee into account\\\\n            balance.amount[1] = state.fee;\\\\n            balance.amount[0] = 0;\\\\n        }\\\\n\\\\n        return balance;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x012e5deb93a2d67452884dff9179274801a30abf2455833eb4c59a42a87c50b0\\",\\"license\\":\\"UNLICENSED\\"}},\\"version\\":1}","bytecode":"0x608060405234801561001057600080fd5b50611263806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638052474d1161005b5780638052474d146100bd5780638de8b77e146100c55780638ef98a7e146100cd57806394184ba9146100ed5761007d565b80630528aa1c14610082578063206162be146100a05780633722aff9146100b5575b600080fd5b61008a61010d565b6040516100979190610d6e565b60405180910390f35b6100a861015c565b6040516100979190611060565b61008a610368565b61008a6103a1565b61008a6103c5565b6100e06100db3660046109fc565b6103e1565b6040516100979190610ff6565b6101006100fb366004610993565b6104ca565b6040516100979190610d45565b60606101176107b0565b604080516041808252608082019092529060208201818036833750505081526040516101479082906020016110f0565b60405160208183030381529060405291505090565b6101646107c3565b6040518060a00160405280306001600160a01b0316638052474d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156101a857600080fd5b505afa1580156101bc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101e49190810190610a92565b8152602001306001600160a01b03168152602001306001600160a01b0316638de8b77e6040518163ffffffff1660e01b815260040160006040518083038186803b15801561023157600080fd5b505afa158015610245573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261026d9190810190610a92565b8152602001306001600160a01b0316633722aff96040518163ffffffff1660e01b815260040160006040518083038186803b1580156102ab57600080fd5b505afa1580156102bf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102e79190810190610a92565b8152602001306001600160a01b0316630528aa1c6040518163ffffffff1660e01b815260040160006040518083038186803b15801561032557600080fd5b505afa158015610339573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103619190810190610a92565b9052905090565b6040518060400160405280601f81526020017f7475706c6528627974657320726573706f6e6465725369676e6174757265290081525081565b60405180604001604052806008815260200167576974686472617760c01b81525081565b6040518060c00160405280608f815260200161119f608f913981565b6103e96107fb565b6103f1610820565b6103fd85870187610c02565b90506104076107b0565b61041384860186610b97565b905061041d6107fb565b610429898b018b610ac5565b60408051604180825260808201909252919250606091906020820181803683370190505090508080519060200120836000015180519060200120141561046e576104bc565b825160408501516060860151610485929091610608565b6104aa5760405162461bcd60e51b81526004016104a190610fbf565b60405180910390fd5b60a08401518251602001528151600090525b509998505050505050505050565b60006104d4610820565b6104e083850185610c02565b90506104ea6107fb565b6104f686880188610ac5565b8051602001519091501561051c5760405162461bcd60e51b81526004016104a190610f1f565b60208201516001600160a01b031615801590610544575060408201516001600160a01b031615155b6105605760405162461bcd60e51b81526004016104a190610df6565b60608201516105815760405162461bcd60e51b81526004016104a190610f62565b60808201516105a25760405162461bcd60e51b81526004016104a190610f90565b80515160a083015111156105c85760405162461bcd60e51b81526004016104a190610ea6565b8151602083015160608401516105df929091610608565b6105fb5760405162461bcd60e51b81526004016104a190610e6f565b5060019695505050505050565b6000816001600160a01b031661061e8585610630565b6001600160a01b031614949350505050565b60008061063c84610652565b90506106488184610682565b9150505b92915050565b6000816040516020016106659190610d14565b604051602081830303815290604052805190602001209050919050565b600081516041146106a55760405162461bcd60e51b81526004016104a190610dbf565b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156106f75760405162461bcd60e51b81526004016104a190610e2d565b8060ff16601b1415801561070f57508060ff16601c14155b1561072c5760405162461bcd60e51b81526004016104a190610edd565b6000600187838686604051600081526020016040526040516107519493929190610d50565b6020604051602081039080840390855afa158015610773573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166107a65760405162461bcd60e51b81526004016104a190610d88565b9695505050505050565b6040518060200160405280606081525090565b6040518060a001604052806060815260200160006001600160a01b031681526020016060815260200160608152602001606081525090565b604051806040016040528061080e610883565b815260200161081b610883565b905290565b6040518061010001604052806060815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008019168152602001600081526020016000815260200160006001600160a01b03168152602001606081525090565b60405180604001604052806002906020820280368337509192915050565b803561064c81611186565b60008083601f8401126108bd578182fd5b50813567ffffffffffffffff8111156108d4578182fd5b6020830191508360208285010111156108ec57600080fd5b9250929050565b600082601f830112610903578081fd5b813561091661091182611132565b61110b565b915080825283602082850101111561092d57600080fd5b8060208401602084013760009082016020015292915050565b600082601f830112610956578081fd5b815161096461091182611132565b915080825283602082850101111561097b57600080fd5b61098c816020840160208601611156565b5092915050565b600080600080604085870312156109a8578384fd5b843567ffffffffffffffff808211156109bf578586fd5b6109cb888389016108ac565b909650945060208701359150808211156109e3578384fd5b506109f0878288016108ac565b95989497509550505050565b60008060008060008060608789031215610a14578182fd5b863567ffffffffffffffff80821115610a2b578384fd5b610a378a838b016108ac565b90985096506020890135915080821115610a4f578384fd5b610a5b8a838b016108ac565b90965094506040890135915080821115610a73578384fd5b50610a8089828a016108ac565b979a9699509497509295939492505050565b600060208284031215610aa3578081fd5b815167ffffffffffffffff811115610ab9578182fd5b61064884828501610946565b600060808284031215610ad6578081fd5b610ae0604061110b565b83601f840112610aee578182fd5b610af8604061110b565b80846040860187811115610b0a578586fd5b855b6002811015610b2b578235855260209485019490920191600101610b0c565b5082855287605f880112610b3d578586fd5b610b47604061110b565b9350839250905060808601871015610b5d578485fd5b845b6002811015610b88578135610b7381611186565b84526020938401939190910190600101610b5f565b50506020830152509392505050565b600060208284031215610ba8578081fd5b813567ffffffffffffffff80821115610bbf578283fd5b9083019060208286031215610bd2578283fd5b610bdc602061110b565b823582811115610bea578485fd5b610bf6878286016108f3565b82525095945050505050565b600060208284031215610c13578081fd5b813567ffffffffffffffff80821115610c2a578283fd5b8184019150610100808387031215610c40578384fd5b610c498161110b565b9050823582811115610c59578485fd5b610c65878286016108f3565b825250610c7586602085016108a1565b6020820152610c8786604085016108a1565b6040820152606083013560608201526080830135608082015260a083013560a0820152610cb78660c085016108a1565b60c082015260e083013582811115610ccd578485fd5b610cd9878286016108f3565b60e08301525095945050505050565b60008151808452610d00816020860160208601611156565b601f01601f19169290920160200192915050565b7f16566563746f72205369676e6564204d6573736167653a0a33320000000000008152601a810191909152603a0190565b901515815260200190565b93845260ff9290921660208401526040830152606082015260800190565b600060208252610d816020830184610ce8565b9392505050565b60208082526018908201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604082015260600190565b6020808252601f908201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604082015260600190565b60208082526017908201527f57697468647261773a20454d5054595f5349474e455253000000000000000000604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604082015261756560f01b606082015260800190565b6020808252601f908201527f57697468647261773a20494e56414c49445f494e49544941544f525f53494700604082015260600190565b6020808252601e908201527f57697468647261773a20494e53554646494349454e545f42414c414e43450000604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604082015261756560f01b606082015260800190565b60208082526023908201527f57697468647261773a204e4f4e5a45524f5f524543495049454e545f42414c416040820152624e434560e81b606082015260800190565b60208082526014908201527357697468647261773a20454d5054595f4441544160601b604082015260600190565b60208082526015908201527457697468647261773a20454d5054595f4e4f4e434560581b604082015260600190565b6020808252601f908201527f57697468647261773a20494e56414c49445f524553504f4e4445525f53494700604082015260600190565b815160808201908260005b6002811015611020578251825260209283019290910190600101611001565b5050506020808401516040840160005b60028110156110565782516001600160a01b031682529183019190830190600101611030565b5050505092915050565b600060208252825160a0602084015261107c60c0840182610ce8565b905060018060a01b0360208501511660408401526040840151601f19808584030160608601526110ac8383610ce8565b925060608601519150808584030160808601526110c98383610ce8565b925060808601519150808584030160a0860152506110e78282610ce8565b95945050505050565b60006020825282516020808401526106486040840182610ce8565b60405181810167ffffffffffffffff8111828210171561112a57600080fd5b604052919050565b600067ffffffffffffffff821115611148578081fd5b50601f01601f191660200190565b60005b83811015611171578181015183820152602001611159565b83811115611180576000848401525b50505050565b6001600160a01b038116811461119b57600080fd5b5056fe7475706c6528627974657320696e69746961746f725369676e61747572652c206164647265737320696e69746961746f722c206164647265737320726573706f6e6465722c206279746573333220646174612c2075696e74323536206e6f6e63652c2075696e74323536206665652c20616464726573732063616c6c546f2c2062797465732063616c6c4461746129a2646970667358221220e6c29ec66c4575ed5816330cc0372206a95865e0e0b591d5a21001f4a374293764736f6c63430007010033","deployedBytecode":"0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80638052474d1161005b5780638052474d146100bd5780638de8b77e146100c55780638ef98a7e146100cd57806394184ba9146100ed5761007d565b80630528aa1c14610082578063206162be146100a05780633722aff9146100b5575b600080fd5b61008a61010d565b6040516100979190610d6e565b60405180910390f35b6100a861015c565b6040516100979190611060565b61008a610368565b61008a6103a1565b61008a6103c5565b6100e06100db3660046109fc565b6103e1565b6040516100979190610ff6565b6101006100fb366004610993565b6104ca565b6040516100979190610d45565b60606101176107b0565b604080516041808252608082019092529060208201818036833750505081526040516101479082906020016110f0565b60405160208183030381529060405291505090565b6101646107c3565b6040518060a00160405280306001600160a01b0316638052474d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156101a857600080fd5b505afa1580156101bc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101e49190810190610a92565b8152602001306001600160a01b03168152602001306001600160a01b0316638de8b77e6040518163ffffffff1660e01b815260040160006040518083038186803b15801561023157600080fd5b505afa158015610245573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261026d9190810190610a92565b8152602001306001600160a01b0316633722aff96040518163ffffffff1660e01b815260040160006040518083038186803b1580156102ab57600080fd5b505afa1580156102bf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102e79190810190610a92565b8152602001306001600160a01b0316630528aa1c6040518163ffffffff1660e01b815260040160006040518083038186803b15801561032557600080fd5b505afa158015610339573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103619190810190610a92565b9052905090565b6040518060400160405280601f81526020017f7475706c6528627974657320726573706f6e6465725369676e6174757265290081525081565b60405180604001604052806008815260200167576974686472617760c01b81525081565b6040518060c00160405280608f815260200161119f608f913981565b6103e96107fb565b6103f1610820565b6103fd85870187610c02565b90506104076107b0565b61041384860186610b97565b905061041d6107fb565b610429898b018b610ac5565b60408051604180825260808201909252919250606091906020820181803683370190505090508080519060200120836000015180519060200120141561046e576104bc565b825160408501516060860151610485929091610608565b6104aa5760405162461bcd60e51b81526004016104a190610fbf565b60405180910390fd5b60a08401518251602001528151600090525b509998505050505050505050565b60006104d4610820565b6104e083850185610c02565b90506104ea6107fb565b6104f686880188610ac5565b8051602001519091501561051c5760405162461bcd60e51b81526004016104a190610f1f565b60208201516001600160a01b031615801590610544575060408201516001600160a01b031615155b6105605760405162461bcd60e51b81526004016104a190610df6565b60608201516105815760405162461bcd60e51b81526004016104a190610f62565b60808201516105a25760405162461bcd60e51b81526004016104a190610f90565b80515160a083015111156105c85760405162461bcd60e51b81526004016104a190610ea6565b8151602083015160608401516105df929091610608565b6105fb5760405162461bcd60e51b81526004016104a190610e6f565b5060019695505050505050565b6000816001600160a01b031661061e8585610630565b6001600160a01b031614949350505050565b60008061063c84610652565b90506106488184610682565b9150505b92915050565b6000816040516020016106659190610d14565b604051602081830303815290604052805190602001209050919050565b600081516041146106a55760405162461bcd60e51b81526004016104a190610dbf565b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156106f75760405162461bcd60e51b81526004016104a190610e2d565b8060ff16601b1415801561070f57508060ff16601c14155b1561072c5760405162461bcd60e51b81526004016104a190610edd565b6000600187838686604051600081526020016040526040516107519493929190610d50565b6020604051602081039080840390855afa158015610773573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166107a65760405162461bcd60e51b81526004016104a190610d88565b9695505050505050565b6040518060200160405280606081525090565b6040518060a001604052806060815260200160006001600160a01b031681526020016060815260200160608152602001606081525090565b604051806040016040528061080e610883565b815260200161081b610883565b905290565b6040518061010001604052806060815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008019168152602001600081526020016000815260200160006001600160a01b03168152602001606081525090565b60405180604001604052806002906020820280368337509192915050565b803561064c81611186565b60008083601f8401126108bd578182fd5b50813567ffffffffffffffff8111156108d4578182fd5b6020830191508360208285010111156108ec57600080fd5b9250929050565b600082601f830112610903578081fd5b813561091661091182611132565b61110b565b915080825283602082850101111561092d57600080fd5b8060208401602084013760009082016020015292915050565b600082601f830112610956578081fd5b815161096461091182611132565b915080825283602082850101111561097b57600080fd5b61098c816020840160208601611156565b5092915050565b600080600080604085870312156109a8578384fd5b843567ffffffffffffffff808211156109bf578586fd5b6109cb888389016108ac565b909650945060208701359150808211156109e3578384fd5b506109f0878288016108ac565b95989497509550505050565b60008060008060008060608789031215610a14578182fd5b863567ffffffffffffffff80821115610a2b578384fd5b610a378a838b016108ac565b90985096506020890135915080821115610a4f578384fd5b610a5b8a838b016108ac565b90965094506040890135915080821115610a73578384fd5b50610a8089828a016108ac565b979a9699509497509295939492505050565b600060208284031215610aa3578081fd5b815167ffffffffffffffff811115610ab9578182fd5b61064884828501610946565b600060808284031215610ad6578081fd5b610ae0604061110b565b83601f840112610aee578182fd5b610af8604061110b565b80846040860187811115610b0a578586fd5b855b6002811015610b2b578235855260209485019490920191600101610b0c565b5082855287605f880112610b3d578586fd5b610b47604061110b565b9350839250905060808601871015610b5d578485fd5b845b6002811015610b88578135610b7381611186565b84526020938401939190910190600101610b5f565b50506020830152509392505050565b600060208284031215610ba8578081fd5b813567ffffffffffffffff80821115610bbf578283fd5b9083019060208286031215610bd2578283fd5b610bdc602061110b565b823582811115610bea578485fd5b610bf6878286016108f3565b82525095945050505050565b600060208284031215610c13578081fd5b813567ffffffffffffffff80821115610c2a578283fd5b8184019150610100808387031215610c40578384fd5b610c498161110b565b9050823582811115610c59578485fd5b610c65878286016108f3565b825250610c7586602085016108a1565b6020820152610c8786604085016108a1565b6040820152606083013560608201526080830135608082015260a083013560a0820152610cb78660c085016108a1565b60c082015260e083013582811115610ccd578485fd5b610cd9878286016108f3565b60e08301525095945050505050565b60008151808452610d00816020860160208601611156565b601f01601f19169290920160200192915050565b7f16566563746f72205369676e6564204d6573736167653a0a33320000000000008152601a810191909152603a0190565b901515815260200190565b93845260ff9290921660208401526040830152606082015260800190565b600060208252610d816020830184610ce8565b9392505050565b60208082526018908201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604082015260600190565b6020808252601f908201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604082015260600190565b60208082526017908201527f57697468647261773a20454d5054595f5349474e455253000000000000000000604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604082015261756560f01b606082015260800190565b6020808252601f908201527f57697468647261773a20494e56414c49445f494e49544941544f525f53494700604082015260600190565b6020808252601e908201527f57697468647261773a20494e53554646494349454e545f42414c414e43450000604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604082015261756560f01b606082015260800190565b60208082526023908201527f57697468647261773a204e4f4e5a45524f5f524543495049454e545f42414c416040820152624e434560e81b606082015260800190565b60208082526014908201527357697468647261773a20454d5054595f4441544160601b604082015260600190565b60208082526015908201527457697468647261773a20454d5054595f4e4f4e434560581b604082015260600190565b6020808252601f908201527f57697468647261773a20494e56414c49445f524553504f4e4445525f53494700604082015260600190565b815160808201908260005b6002811015611020578251825260209283019290910190600101611001565b5050506020808401516040840160005b60028110156110565782516001600160a01b031682529183019190830190600101611030565b5050505092915050565b600060208252825160a0602084015261107c60c0840182610ce8565b905060018060a01b0360208501511660408401526040840151601f19808584030160608601526110ac8383610ce8565b925060608601519150808584030160808601526110c98383610ce8565b925060808601519150808584030160a0860152506110e78282610ce8565b95945050505050565b60006020825282516020808401526106486040840182610ce8565b60405181810167ffffffffffffffff8111828210171561112a57600080fd5b604052919050565b600067ffffffffffffffff821115611148578081fd5b50601f01601f191660200190565b60005b83811015611171578181015183820152602001611159565b83811115611180576000848401525b50505050565b6001600160a01b038116811461119b57600080fd5b5056fe7475706c6528627974657320696e69746961746f725369676e61747572652c206164647265737320696e69746961746f722c206164647265737320726573706f6e6465722c206279746573333220646174612c2075696e74323536206e6f6e63652c2075696e74323536206665652c20616464726573732063616c6c546f2c2062797465732063616c6c4461746129a2646970667358221220e6c29ec66c4575ed5816330cc0372206a95865e0e0b591d5a21001f4a374293764736f6c63430007010033","devdoc":{"author":"Connext <support@connext.network>","kind":"dev","methods":{},"title":"Withdraw","version":1},"userdoc":{"kind":"user","methods":{},"notice":"This contract burns the initiator\'s funds if a mutually signed         withdraw commitment can be generated","version":1},"storageLayout":{"storage":[],"types":null}}')},2824:function(e){e.exports=JSON.parse('{"address":"0x2CE30B4A2aD3f988AdE3fF2996c9A69baE4339B8","abi":[{"inputs":[{"internalType":"address","name":"_mastercopy","type":"address"},{"internalType":"uint256","name":"_chainId","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"channel","type":"address"}],"name":"ChannelCreation","type":"event"},{"inputs":[{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"}],"name":"createChannel","outputs":[{"internalType":"address","name":"channel","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"createChannelAndDepositAlice","outputs":[{"internalType":"address","name":"channel","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"getChainId","outputs":[{"internalType":"uint256","name":"_chainId","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"}],"name":"getChannelAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMastercopy","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getProxyCreationCode","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStoredChainId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"transactionHash":"0xa68edda5c715d6d3bd92eb176e88b66a42d6fd3e0f84f673a2e3970e9e250f43","receipt":{"to":null,"from":"0x627306090abaB3A6e1400e9345bC60c78a8BEf57","contractAddress":"0x2CE30B4A2aD3f988AdE3fF2996c9A69baE4339B8","transactionIndex":0,"gasUsed":"677196","logsBloom":"0xblockHash":"0x41661915da1614df314ef2e02e7a90ef2b60ee0750e2de24362c46d34f24a2b4","transactionHash":"0xa68edda5c715d6d3bd92eb176e88b66a42d6fd3e0f84f673a2e3970e9e250f43","logs":[{"transactionIndex":0,"blockNumber":8439278,"transactionHash":"0xa68edda5c715d6d3bd92eb176e88b66a42d6fd3e0f84f673a2e3970e9e250f43","address":"0x0000000000000000000000000000000000001010","topics":["0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63","0x0000000000000000000000000000000000000000000000000000000000001010","0x000000000000000000000000627306090abab3a6e1400e9345bc60c78a8bef57","0x000000000000000000000000928ed6a3e94437bbd316ccad78479f1d163a6a8c"],"data":"0x000000000000000000000000000000000000000000000000000267e7fb05f80000000000000000000000000000000000000000000000000001c99cbd4066c870000000000000000000000000000000000000000000000020891b4bc5fec2732100000000000000000000000000000000000000000000000001c734d54560d070000000000000000000000000000000000000000000000020891db3adf9c86b21","logIndex":0,"blockHash":"0x41661915da1614df314ef2e02e7a90ef2b60ee0750e2de24362c46d34f24a2b4"}],"blockNumber":8439278,"cumulativeGasUsed":"677196","status":1,"byzantium":true},"args":["0x4b71fA2E9613ABc9e5E05148106a5fFf448956Dd","0"],"solcInputHash":"89c55d5a88f10637860a9ea31a1daad3","metadata":"{\\"compiler\\":{\\"version\\":\\"0.7.1+commit.f4a555be\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_mastercopy\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_chainId\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"channel\\",\\"type\\":\\"address\\"}],\\"name\\":\\"ChannelCreation\\",\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"}],\\"name\\":\\"createChannel\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channel\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"createChannelAndDepositAlice\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channel\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"payable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getChainId\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_chainId\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getChannelAddress\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getMastercopy\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getProxyCreationCode\\",\\"outputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"\\",\\"type\\":\\"bytes\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getStoredChainId\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"author\\":\\"Connext <support@connext.network>\\",\\"kind\\":\\"dev\\",\\"methods\\":{\\"constructor\\":{\\"details\\":\\"Creates a new `ChannelFactory`\\",\\"params\\":{\\"_chainId\\":\\"the chain identifier when generating the CREATE2 salt. If zero, the chain identifier used in the proxy salt will be the result of the opcode\\",\\"_mastercopy\\":\\"the address of the `ChannelMastercopy` (channel logic)\\"}},\\"createChannel(address,address)\\":{\\"details\\":\\"Allows us to create new channel contract and get it all set up in one transaction\\",\\"params\\":{\\"alice\\":\\"address of the high fidelity channel participant\\",\\"bob\\":\\"address of the other channel participant\\"}},\\"createChannelAndDepositAlice(address,address,address,uint256)\\":{\\"details\\":\\"Allows us to create a new channel contract and fund it in one transaction\\",\\"params\\":{\\"bob\\":\\"address of the other channel participant\\"}},\\"getChainId()\\":{\\"details\\":\\"Allows us to get the chainId that this factory will use in the create2 salt\\"},\\"getChannelAddress(address,address)\\":{\\"details\\":\\"Allows us to get the address for a new channel contract created via `createChannel`\\",\\"params\\":{\\"alice\\":\\"address of the igh fidelity channel participant\\",\\"bob\\":\\"address of the other channel participant\\"}},\\"getMastercopy()\\":{\\"details\\":\\"Allows us to get the mastercopy that this factory will deploy channels against\\"},\\"getProxyCreationCode()\\":{\\"details\\":\\"Returns the proxy code used to both calculate the CREATE2 address and deploy the channel proxy pointed to the `ChannelMastercopy`\\"},\\"getStoredChainId()\\":{\\"details\\":\\"Allows us to get the chainId that this factory has stored\\"}},\\"title\\":\\"ChannelFactory\\",\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"notice\\":\\"Creates and sets up a new channel proxy contract\\",\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"src.sol/ChannelFactory.sol\\":\\"ChannelFactory\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Returns the amount of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender\'s allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\\\n     * allowance mechanism. `amount` is then deducted from the caller\'s\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Address.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Collection of functions related to the address type\\\\n */\\\\nlibrary Address {\\\\n    /**\\\\n     * @dev Returns true if `account` is a contract.\\\\n     *\\\\n     * [IMPORTANT]\\\\n     * ====\\\\n     * It is unsafe to assume that an address for which this function returns\\\\n     * false is an externally-owned account (EOA) and not a contract.\\\\n     *\\\\n     * Among others, `isContract` will return false for the following\\\\n     * types of addresses:\\\\n     *\\\\n     *  - an externally-owned account\\\\n     *  - a contract in construction\\\\n     *  - an address where a contract will be created\\\\n     *  - an address where a contract lived, but was destroyed\\\\n     * ====\\\\n     */\\\\n    function isContract(address account) internal view returns (bool) {\\\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\\\n        // for accounts without code, i.e. `keccak256(\'\')`\\\\n        bytes32 codehash;\\\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\\\n        // solhint-disable-next-line no-inline-assembly\\\\n        assembly { codehash := extcodehash(account) }\\\\n        return (codehash != accountHash && codehash != 0x0);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\\\\n     * `recipient`, forwarding all available gas and reverting on errors.\\\\n     *\\\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\\\n     * imposed by `transfer`, making them unable to receive funds via\\\\n     * `transfer`. {sendValue} removes this limitation.\\\\n     *\\\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\\\n     *\\\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\\\n     * taken to not create reentrancy vulnerabilities. Consider using\\\\n     * {ReentrancyGuard} or the\\\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\\\n     */\\\\n    function sendValue(address payable recipient, uint256 amount) internal {\\\\n        require(address(this).balance >= amount, \\\\\\"Address: insufficient balance\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\\\n        (bool success, ) = recipient.call{ value: amount }(\\\\\\"\\\\\\");\\\\n        require(success, \\\\\\"Address: unable to send value, recipient may have reverted\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Performs a Solidity function call using a low level `call`. A\\\\n     * plain`call` is an unsafe replacement for a function call: use this\\\\n     * function instead.\\\\n     *\\\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\\\n     * function (like regular Solidity function calls).\\\\n     *\\\\n     * Returns the raw returned data. To convert to the expected return value,\\\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `target` must be a contract.\\\\n     * - calling `target` with `data` must not revert.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n      return functionCall(target, data, \\\\\\"Address: low-level call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but also transferring `value` wei to `target`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the calling contract must have an ETH balance of at least `value`.\\\\n     * - the called Solidity function must be `payable`.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, value, \\\\\\"Address: low-level call with value failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\\\n        require(address(this).balance >= value, \\\\\\"Address: insufficient balance for call\\\\\\");\\\\n        return _functionCallWithValue(target, data, value, errorMessage);\\\\n    }\\\\n\\\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: call to non-contract\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls\\\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\\\n        if (success) {\\\\n            return returndata;\\\\n        } else {\\\\n            // Look for revert reason and bubble it up if present\\\\n            if (returndata.length > 0) {\\\\n                // The easiest way to bubble the revert reason is using memory via assembly\\\\n\\\\n                // solhint-disable-next-line no-inline-assembly\\\\n                assembly {\\\\n                    let returndata_size := mload(returndata)\\\\n                    revert(add(32, returndata), returndata_size)\\\\n                }\\\\n            } else {\\\\n                revert(errorMessage);\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x698f929f1097637d051976b322a2d532c27df022b09010e8d091e2888a5ebdf8\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Create2.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\\\n * `CREATE2` can be used to compute in advance the address where a smart\\\\n * contract will be deployed, which allows for interesting new mechanisms known\\\\n * as \'counterfactual interactions\'.\\\\n *\\\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\\\n * information.\\\\n */\\\\nlibrary Create2 {\\\\n    /**\\\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\\\n     * will be deployed can be known in advance via {computeAddress}.\\\\n     *\\\\n     * The bytecode for a contract can be obtained from Solidity with\\\\n     * `type(contractName).creationCode`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `bytecode` must not be empty.\\\\n     * - `salt` must have not been used for `bytecode` already.\\\\n     * - the factory must have a balance of at least `amount`.\\\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\\\n     */\\\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\\\\n        address addr;\\\\n        require(address(this).balance >= amount, \\\\\\"Create2: insufficient balance\\\\\\");\\\\n        require(bytecode.length != 0, \\\\\\"Create2: bytecode length is zero\\\\\\");\\\\n        // solhint-disable-next-line no-inline-assembly\\\\n        assembly {\\\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\\\n        }\\\\n        require(addr != address(0), \\\\\\"Create2: Failed on deploy\\\\\\");\\\\n        return addr;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\\\n     */\\\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\\\n        return computeAddress(salt, bytecodeHash, address(this));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\\\n     * `deployer`. If `deployer` is this contract\'s address, returns the same value as {computeAddress}.\\\\n     */\\\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\\\\n        bytes32 _data = keccak256(\\\\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\\\\n        );\\\\n        return address(uint256(_data));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x539295edd21ad514c0b1a0d1c89ada0831942f379ea83b6eb85769211fc7937e\\",\\"license\\":\\"MIT\\"},\\"src.sol/ChannelFactory.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Create2.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./interfaces/IChannelFactory.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/IVectorChannel.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibAsset.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibERC20.sol\\\\\\";\\\\n\\\\n/// @title ChannelFactory\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Creates and sets up a new channel proxy contract\\\\ncontract ChannelFactory is IChannelFactory {\\\\n    // Creation code constants taken from EIP1167\\\\n    bytes private constant proxyCreationCodePrefix =\\\\n        hex\\\\\\"3d602d80600a3d3981f3_363d3d373d3d3d363d73\\\\\\";\\\\n    bytes private constant proxyCreationCodeSuffix =\\\\n        hex\\\\\\"5af43d82803e903d91602b57fd5bf3\\\\\\";\\\\n\\\\n    bytes32 private creationCodeHash;\\\\n    address private immutable mastercopy;\\\\n    uint256 private immutable chainId;\\\\n\\\\n    /// @dev Creates a new `ChannelFactory`\\\\n    /// @param _mastercopy the address of the `ChannelMastercopy` (channel logic)\\\\n    /// @param _chainId the chain identifier when generating the CREATE2 salt. If zero, the chain identifier used in the proxy salt will be the result of the opcode\\\\n    constructor(address _mastercopy, uint256 _chainId) {\\\\n        mastercopy = _mastercopy;\\\\n        chainId = _chainId;\\\\n        creationCodeHash = keccak256(_getProxyCreationCode(_mastercopy));\\\\n    }\\\\n\\\\n    ////////////////////////////////////////\\\\n    // Public Methods\\\\n\\\\n    /// @dev Allows us to get the mastercopy that this factory will deploy channels against\\\\n    function getMastercopy() external view override returns (address) {\\\\n        return mastercopy;\\\\n    }\\\\n\\\\n    /// @dev Allows us to get the chainId that this factory will use in the create2 salt\\\\n    function getChainId() public view override returns (uint256 _chainId) {\\\\n        // Hold in memory to reduce sload calls\\\\n        uint256 chain = chainId;\\\\n        if (chain == 0) {\\\\n            assembly {\\\\n                _chainId := chainid()\\\\n            }\\\\n        } else {\\\\n            _chainId = chain;\\\\n        }\\\\n    }\\\\n\\\\n    /// @dev Allows us to get the chainId that this factory has stored\\\\n    function getStoredChainId() external view override returns (uint256) {\\\\n        return chainId;\\\\n    }\\\\n\\\\n    /// @dev Returns the proxy code used to both calculate the CREATE2 address and deploy the channel proxy pointed to the `ChannelMastercopy`\\\\n    function getProxyCreationCode()\\\\n        public\\\\n        view\\\\n        override\\\\n        returns (bytes memory)\\\\n    {\\\\n        return _getProxyCreationCode(mastercopy);\\\\n    }\\\\n\\\\n    /// @dev Allows us to get the address for a new channel contract created via `createChannel`\\\\n    /// @param alice address of the igh fidelity channel participant\\\\n    /// @param bob address of the other channel participant\\\\n    function getChannelAddress(address alice, address bob)\\\\n        external\\\\n        view\\\\n        override\\\\n        returns (address)\\\\n    {\\\\n        return\\\\n            Create2.computeAddress(\\\\n                generateSalt(alice, bob),\\\\n                creationCodeHash\\\\n            );\\\\n    }\\\\n\\\\n    /// @dev Allows us to create new channel contract and get it all set up in one transaction\\\\n    /// @param alice address of the high fidelity channel participant\\\\n    /// @param bob address of the other channel participant\\\\n    function createChannel(address alice, address bob)\\\\n        public\\\\n        override\\\\n        returns (address channel)\\\\n    {\\\\n        channel = deployChannelProxy(alice, bob);\\\\n        IVectorChannel(channel).setup(alice, bob);\\\\n        emit ChannelCreation(channel);\\\\n    }\\\\n\\\\n    /// @dev Allows us to create a new channel contract and fund it in one transaction\\\\n    /// @param bob address of the other channel participant\\\\n    function createChannelAndDepositAlice(\\\\n        address alice,\\\\n        address bob,\\\\n        address assetId,\\\\n        uint256 amount\\\\n    ) external payable override returns (address channel) {\\\\n        channel = createChannel(alice, bob);\\\\n        // Deposit funds (if a token) must be approved for the\\\\n        // `ChannelFactory`, which then claims the funds and transfers\\\\n        // to the channel address. While this is inefficient, this is\\\\n        // the safest/clearest way to transfer funds\\\\n        if (!LibAsset.isEther(assetId)) {\\\\n            require(\\\\n                LibERC20.transferFrom(\\\\n                    assetId,\\\\n                    msg.sender,\\\\n                    address(this),\\\\n                    amount\\\\n                ),\\\\n                \\\\\\"ChannelFactory: ERC20_TRANSFER_FAILED\\\\\\"\\\\n            );\\\\n            require(\\\\n                LibERC20.approve(assetId, address(channel), amount),\\\\n                \\\\\\"ChannelFactory: ERC20_APPROVE_FAILED\\\\\\"\\\\n            );\\\\n        }\\\\n        IVectorChannel(channel).depositAlice{value: msg.value}(assetId, amount);\\\\n    }\\\\n\\\\n    ////////////////////////////////////////\\\\n    // Internal Methods\\\\n\\\\n    function _getProxyCreationCode(address _mastercopy) internal pure returns (bytes memory) {\\\\n      return abi.encodePacked(\\\\n                proxyCreationCodePrefix,\\\\n                _mastercopy,\\\\n                proxyCreationCodeSuffix\\\\n            );\\\\n    }\\\\n\\\\n    /// @dev Allows us to create new channel contact using CREATE2\\\\n    /// @param alice address of the high fidelity participant in the channel\\\\n    /// @param bob address of the other channel participant\\\\n    function deployChannelProxy(address alice, address bob)\\\\n        internal\\\\n        returns (address)\\\\n    {\\\\n        bytes32 salt = generateSalt(alice, bob);\\\\n        return Create2.deploy(0, salt, getProxyCreationCode());\\\\n    }\\\\n\\\\n    /// @dev Generates the unique salt for calculating the CREATE2 address of the channel proxy\\\\n    function generateSalt(address alice, address bob)\\\\n        internal\\\\n        view\\\\n        returns (bytes32)\\\\n    {\\\\n        return keccak256(abi.encodePacked(alice, bob, getChainId()));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x9b30b13dd79eea72eadd2bec3eba0f515929259a21d2ece6b982703c280e532a\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCAdjudicator.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./Types.sol\\\\\\";\\\\n\\\\ninterface ICMCAdjudicator {\\\\n    struct CoreChannelState {\\\\n        address channelAddress;\\\\n        address alice;\\\\n        address bob;\\\\n        address[] assetIds;\\\\n        Balance[] balances;\\\\n        uint256[] processedDepositsA;\\\\n        uint256[] processedDepositsB;\\\\n        uint256[] defundNonces;\\\\n        uint256 timeout;\\\\n        uint256 nonce;\\\\n        bytes32 merkleRoot;\\\\n    }\\\\n\\\\n    struct CoreTransferState {\\\\n        address channelAddress;\\\\n        bytes32 transferId;\\\\n        address transferDefinition;\\\\n        address initiator;\\\\n        address responder;\\\\n        address assetId;\\\\n        Balance balance;\\\\n        uint256 transferTimeout;\\\\n        bytes32 initialStateHash;\\\\n    }\\\\n\\\\n    struct ChannelDispute {\\\\n        bytes32 channelStateHash;\\\\n        uint256 nonce;\\\\n        bytes32 merkleRoot;\\\\n        uint256 consensusExpiry;\\\\n        uint256 defundExpiry;\\\\n    }\\\\n\\\\n    struct TransferDispute {\\\\n        bytes32 transferStateHash;\\\\n        uint256 transferDisputeExpiry;\\\\n        bool isDefunded;\\\\n    }\\\\n\\\\n    event ChannelDisputed(\\\\n        address disputer,\\\\n        CoreChannelState state,\\\\n        ChannelDispute dispute\\\\n    );\\\\n\\\\n    event ChannelDefunded(\\\\n        address defunder,\\\\n        CoreChannelState state,\\\\n        ChannelDispute dispute,\\\\n        address[] assetIds\\\\n    );\\\\n\\\\n    event TransferDisputed(\\\\n        address disputer,\\\\n        CoreTransferState state,\\\\n        TransferDispute dispute\\\\n    );\\\\n\\\\n    event TransferDefunded(\\\\n        address defunder,\\\\n        CoreTransferState state,\\\\n        TransferDispute dispute,\\\\n        bytes encodedInitialState,\\\\n        bytes encodedResolver,\\\\n        Balance balance\\\\n    );\\\\n\\\\n    function getChannelDispute() external view returns (ChannelDispute memory);\\\\n\\\\n    function getDefundNonce(address assetId) external view returns (uint256);\\\\n\\\\n    function getTransferDispute(bytes32 transferId)\\\\n        external\\\\n        view\\\\n        returns (TransferDispute memory);\\\\n\\\\n    function disputeChannel(\\\\n        CoreChannelState calldata ccs,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) external;\\\\n\\\\n    function defundChannel(\\\\n        CoreChannelState calldata ccs,\\\\n        address[] calldata assetIds,\\\\n        uint256[] calldata indices\\\\n    ) external;\\\\n\\\\n    function disputeTransfer(\\\\n        CoreTransferState calldata cts,\\\\n        bytes32[] calldata merkleProofData\\\\n    ) external;\\\\n\\\\n    function defundTransfer(\\\\n        CoreTransferState calldata cts,\\\\n        bytes calldata encodedInitialTransferState,\\\\n        bytes calldata encodedTransferResolver,\\\\n        bytes calldata responderSignature\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x88522bb51c2b9991b24ef33a3c776ac76d96060ebbc33cd5b2b14513fb21d237\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCAsset.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface ICMCAsset {\\\\n    function getTotalTransferred(address assetId)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function getExitableAmount(address assetId, address owner)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function exit(\\\\n        address assetId,\\\\n        address owner,\\\\n        address payable recipient\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x895d89536e8ca469afe642b7001f0dfff497ce29d5d73f862b07a1cdc483f3f7\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCCore.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface ICMCCore {\\\\n    function setup(address _alice, address _bob) external;\\\\n\\\\n    function getAlice() external view returns (address);\\\\n\\\\n    function getBob() external view returns (address);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x8e8da2d8fb5198441ba6cdff018dff9e4145b07d575647c990659adad637ec8c\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCDeposit.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface ICMCDeposit {\\\\n    event AliceDeposited(address assetId, uint256 amount);\\\\n    \\\\n    function getTotalDepositsAlice(address assetId)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function getTotalDepositsBob(address assetId)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function depositAlice(address assetId, uint256 amount) external payable;\\\\n}\\\\n\\",\\"keccak256\\":\\"0xdf6f284e44d88013cf9d51220315fb37e63086e470442685891c90aadd138295\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCWithdraw.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nstruct WithdrawData {\\\\n    address channelAddress;\\\\n    address assetId;\\\\n    address payable recipient;\\\\n    uint256 amount;\\\\n    uint256 nonce;\\\\n    address callTo;\\\\n    bytes callData;\\\\n}\\\\n\\\\ninterface ICMCWithdraw {\\\\n    function getWithdrawalTransactionRecord(WithdrawData calldata wd)\\\\n        external\\\\n        view\\\\n        returns (bool);\\\\n\\\\n    function withdraw(\\\\n        WithdrawData calldata wd,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x097dfe95ad19096f9a3dd0138b4a51680c26e665d1639278a7c0a5c9f7fc5c78\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/IChannelFactory.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface IChannelFactory {\\\\n    event ChannelCreation(address channel);\\\\n\\\\n    function getMastercopy() external view returns (address);\\\\n\\\\n    function getChainId() external view returns (uint256);\\\\n\\\\n    function getStoredChainId() external view returns (uint256);\\\\n\\\\n    function getProxyCreationCode() external view returns (bytes memory);\\\\n\\\\n    function getChannelAddress(address alice, address bob)\\\\n        external\\\\n        view\\\\n        returns (address);\\\\n\\\\n    function createChannel(address alice, address bob)\\\\n        external\\\\n        returns (address);\\\\n\\\\n    function createChannelAndDepositAlice(\\\\n        address alice,\\\\n        address bob,\\\\n        address assetId,\\\\n        uint256 amount\\\\n    ) external payable returns (address);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x2330bd554f878feb2494fb9dd830a1707865b63cfd6471a8dad1e5912ebf72ea\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/IVectorChannel.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./ICMCCore.sol\\\\\\";\\\\nimport \\\\\\"./ICMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./ICMCDeposit.sol\\\\\\";\\\\nimport \\\\\\"./ICMCWithdraw.sol\\\\\\";\\\\nimport \\\\\\"./ICMCAdjudicator.sol\\\\\\";\\\\n\\\\ninterface IVectorChannel is\\\\n    ICMCCore,\\\\n    ICMCAsset,\\\\n    ICMCDeposit,\\\\n    ICMCWithdraw,\\\\n    ICMCAdjudicator\\\\n{}\\\\n\\",\\"keccak256\\":\\"0x9e21e3b6510bb5aecab999bfcbefe6184bd2be5a80179ef8ecadb63ddd2c8d53\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/Types.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nstruct Balance {\\\\n    uint256[2] amount; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n    address payable[2] to; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf8c71b155b630cde965f5d1db5f0d2751a9763f5a797f15d946613e9224f1046\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibAsset.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./LibERC20.sol\\\\\\";\\\\nimport \\\\\\"./LibUtils.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\\\\";\\\\n\\\\n\\\\n/// @title LibAsset\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This library contains helpers for dealing with onchain transfers\\\\n///         of in-channel assets. It is designed to safely handle all asset\\\\n///         transfers out of channel in the event of an onchain dispute. Also\\\\n///         safely handles ERC20 transfers that may be non-compliant\\\\nlibrary LibAsset {\\\\n    address constant ETHER_ASSETID = address(0);\\\\n\\\\n    function isEther(address assetId) internal pure returns (bool) {\\\\n        return assetId == ETHER_ASSETID;\\\\n    }\\\\n\\\\n    function getOwnBalance(address assetId) internal view returns (uint256) {\\\\n        return\\\\n            isEther(assetId)\\\\n                ? address(this).balance\\\\n                : IERC20(assetId).balanceOf(address(this));\\\\n    }\\\\n\\\\n    function transferEther(address payable recipient, uint256 amount)\\\\n        internal\\\\n        returns (bool)\\\\n    {\\\\n        (bool success, bytes memory returnData) =\\\\n            recipient.call{value: amount}(\\\\\\"\\\\\\");\\\\n        LibUtils.revertIfCallFailed(success, returnData);\\\\n        return true;\\\\n    }\\\\n\\\\n    function transferERC20(\\\\n        address assetId,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return LibERC20.transfer(assetId, recipient, amount);\\\\n    }\\\\n\\\\n    // This function is a wrapper for transfers of Ether or ERC20 tokens,\\\\n    // both standard-compliant ones as well as tokens that exhibit the\\\\n    // missing-return-value bug.\\\\n    // Although it behaves very much like Solidity\'s `transfer` function\\\\n    // or the ERC20 `transfer` and is, in fact, designed to replace direct\\\\n    // usage of those, it is deliberately named `unregisteredTransfer`,\\\\n    // because we need to register every transfer out of the channel.\\\\n    // Therefore, it should normally not be used directly, with the single\\\\n    // exception of the `transferAsset` function in `CMCAsset.sol`,\\\\n    // which combines the \\\\\\"naked\\\\\\" unregistered transfer given below\\\\n    // with a registration.\\\\n    // USING THIS FUNCTION SOMEWHERE ELSE IS PROBABLY WRONG!\\\\n    function unregisteredTransfer(\\\\n        address assetId,\\\\n        address payable recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            isEther(assetId)\\\\n                ? transferEther(recipient, amount)\\\\n                : transferERC20(assetId, recipient, amount);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x02e7b660846ad2f56f8005f786e0e2eb1d625c83f4cfcf9fc07a9566ca86195c\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./LibUtils.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Address.sol\\\\\\";\\\\n\\\\n/// @title LibERC20\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This library provides several functions to safely handle\\\\n///         noncompliant tokens (i.e. does not return a boolean from\\\\n///         the transfer function)\\\\n\\\\nlibrary LibERC20 {\\\\n    function wrapCall(address assetId, bytes memory callData)\\\\n        internal\\\\n        returns (bool)\\\\n    {\\\\n        require(Address.isContract(assetId), \\\\\\"LibERC20: NO_CODE\\\\\\");\\\\n        (bool success, bytes memory returnData) = assetId.call(callData);\\\\n        LibUtils.revertIfCallFailed(success, returnData);\\\\n        return returnData.length == 0 || abi.decode(returnData, (bool));\\\\n    }\\\\n\\\\n    function approve(\\\\n        address assetId,\\\\n        address spender,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            wrapCall(\\\\n                assetId,\\\\n                abi.encodeWithSignature(\\\\n                    \\\\\\"approve(address,uint256)\\\\\\",\\\\n                    spender,\\\\n                    amount\\\\n                )\\\\n            );\\\\n    }\\\\n\\\\n    function transferFrom(\\\\n        address assetId,\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            wrapCall(\\\\n                assetId,\\\\n                abi.encodeWithSignature(\\\\n                    \\\\\\"transferFrom(address,address,uint256)\\\\\\",\\\\n                    sender,\\\\n                    recipient,\\\\n                    amount\\\\n                )\\\\n            );\\\\n    }\\\\n\\\\n    function transfer(\\\\n        address assetId,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            wrapCall(\\\\n                assetId,\\\\n                abi.encodeWithSignature(\\\\n                    \\\\\\"transfer(address,uint256)\\\\\\",\\\\n                    recipient,\\\\n                    amount\\\\n                )\\\\n            );\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x5bad1474c93a295939c23f976786f0d086abc063f19ff9c8c1d069759c4a7ff5\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibUtils.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\n/// @title LibUtils\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains a helper to revert if a call was not successfully\\\\n///         made\\\\nlibrary LibUtils {\\\\n    // If success is false, reverts and passes on the revert string.\\\\n    function revertIfCallFailed(bool success, bytes memory returnData)\\\\n        internal\\\\n        pure\\\\n    {\\\\n        if (!success) {\\\\n            assembly {\\\\n                revert(add(returnData, 0x20), mload(returnData))\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf31897ed92b88739ca9c6e74d089e01c5dbf432183d2ab0b959b539842374ccd\\",\\"license\\":\\"UNLICENSED\\"}},\\"version\\":1}","bytecode":"0x60c060405234801561001057600080fd5b50604051610c8f380380610c8f83398101604081905261002f916100eb565b6001600160601b0319606083901b1660805260a081905261004f82610062565b8051602090910120600055506101909050565b60606040518060400160405280601481526020017f3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000815250826040518060400160405280600f81526020016e5af43d82803e903d91602b57fd5bf360881b8152506040516020016100d59392919061015c565b6040516020818303038152906040529050919050565b600080604083850312156100fd578182fd5b82516001600160a01b0381168114610113578283fd5b6020939093015192949293505050565b60008151815b818110156101435760208185018101518683015201610129565b818111156101515782828601525b509290920192915050565b60006101688286610123565b606085901b6001600160601b03191681526101866014820185610123565b9695505050505050565b60805160601c60a051610acf6101c06000398061017e52806101a452508061015352806102a65250610acf6000f3fe6080604052600436106100705760003560e01c806335a1ba6f1161004e57806335a1ba6f146100d7578063e617aaac14610104578063efe4369314610124578063fe4545011461013957610070565b806315727e911461007557806332a130c9146100a05780633408e470146100c2575b600080fd5b34801561008157600080fd5b5061008a61014c565b60405161009791906108d6565b60405180910390f35b3480156100ac57600080fd5b506100b561017c565b6040516100979190610a60565b3480156100ce57600080fd5b506100b56101a0565b3480156100e357600080fd5b506100f76100f2366004610703565b6101d8565b604051610097919061086b565b34801561011057600080fd5b506100f761011f366004610703565b610284565b34801561013057600080fd5b506100f76102a4565b6100f7610147366004610737565b6102c8565b60606101777f00000000000000000000000000000000000000000000000000000000000000006103a5565b905090565b7f000000000000000000000000000000000000000000000000000000000000000090565b60007f0000000000000000000000000000000000000000000000000000000000000000806101d0574691506101d4565b8091505b5090565b60006101e48383610425565b604051632d34ba7960e01b81529091506001600160a01b03821690632d34ba7990610215908690869060040161087f565b600060405180830381600087803b15801561022f57600080fd5b505af1158015610243573d6000803e3d6000fd5b505050507fa79ba8cc5fdc29196c8d65701a02433c92328f38f0ffbea3908335b80d81409d81604051610276919061086b565b60405180910390a192915050565b600061029b610293848461044f565b60005461048b565b90505b92915050565b7f000000000000000000000000000000000000000000000000000000000000000090565b60006102d485856101d8565b90506102df83610498565b61033b576102ef833330856104a5565b6103145760405162461bcd60e51b815260040161030b906109e4565b60405180910390fd5b61031f8382846104f8565b61033b5760405162461bcd60e51b815260040161030b906109a0565b60405163635ae90160e01b81526001600160a01b0382169063635ae90190349061036b90879087906004016108bd565b6000604051808303818588803b15801561038457600080fd5b505af1158015610398573d6000803e3d6000fd5b5050505050949350505050565b6060604051806040016040528060148152602001733d602d80600a3d3981f3363d3d373d3d3d363d7360601b815250826040518060400160405280600f81526020016e5af43d82803e903d91602b57fd5bf360881b81525060405160200161040f93929190610824565b6040516020818303038152906040529050919050565b600080610432848461044f565b905061044760008261044261014c565b610540565b949350505050565b6000828261045b6101a0565b60405160200161046d939291906107ab565b60405160208183030381529060405280519060200120905092915050565b600061029b8383306105b2565b6001600160a01b03161590565b60006104ef858585856040516024016104c093929190610899565b60408051601f198184030181529190526020810180516001600160e01b03166323b872dd60e01b1790526105f1565b95945050505050565b60006104478484846040516024016105119291906108bd565b60408051601f198184030181529190526020810180516001600160e01b031663095ea7b360e01b1790526105f1565b600080844710156105635760405162461bcd60e51b815260040161030b90610a29565b82516105815760405162461bcd60e51b815260040161030b90610909565b8383516020850187f590506001600160a01b0381166104475760405162461bcd60e51b815260040161030b9061093e565b60008060ff60f81b8386866040516020016105d094939291906107d4565b60408051808303601f19018152919052805160209091012095945050505050565b60006105fc836106a2565b6106185760405162461bcd60e51b815260040161030b90610975565b60006060846001600160a01b0316846040516106349190610808565b6000604051808303816000865af19150503d8060008114610671576040519150601f19603f3d011682016040523d82523d6000602084013e610676565b606091505b509150915061068582826106db565b805115806104ef5750808060200190518101906104ef9190610784565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610447575050151592915050565b816106e857805160208201fd5b5050565b80356001600160a01b038116811461029e57600080fd5b60008060408385031215610715578182fd5b61071f84846106ec565b915061072e84602085016106ec565b90509250929050565b6000806000806080858703121561074c578182fd5b61075686866106ec565b935061076586602087016106ec565b925061077486604087016106ec565b9396929550929360600135925050565b600060208284031215610795578081fd5b815180151581146107a4578182fd5b9392505050565b6001600160601b0319606094851b811682529290931b9091166014830152602882015260480190565b6001600160f81b031994909416845260609290921b6001600160601b03191660018401526015830152603582015260550190565b6000825161081a818460208701610a69565b9190910192915050565b60008451610836818460208901610a69565b606085901b6001600160601b031916908301908152835161085e816014840160208801610a69565b0160140195945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b60006020825282518060208401526108f5816040850160208701610a69565b601f01601f19169190910160400192915050565b6020808252818101527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604082015260600190565b60208082526019908201527f437265617465323a204661696c6564206f6e206465706c6f7900000000000000604082015260600190565b6020808252601190820152704c696245524332303a204e4f5f434f444560781b604082015260600190565b60208082526024908201527f4368616e6e656c466163746f72793a2045524332305f415050524f56455f46416040820152631253115160e21b606082015260800190565b60208082526025908201527f4368616e6e656c466163746f72793a2045524332305f5452414e534645525f46604082015264105253115160da1b606082015260800190565b6020808252601d908201527f437265617465323a20696e73756666696369656e742062616c616e6365000000604082015260600190565b90815260200190565b60005b83811015610a84578181015183820152602001610a6c565b83811115610a93576000848401525b5050505056fea26469706673582212206b46714e4e157ca4fcef5f14f882cae62cdcfb5e301602c8361ab37a1daaf2ab64736f6c63430007010033","deployedBytecode":"0x6080604052600436106100705760003560e01c806335a1ba6f1161004e57806335a1ba6f146100d7578063e617aaac14610104578063efe4369314610124578063fe4545011461013957610070565b806315727e911461007557806332a130c9146100a05780633408e470146100c2575b600080fd5b34801561008157600080fd5b5061008a61014c565b60405161009791906108d6565b60405180910390f35b3480156100ac57600080fd5b506100b561017c565b6040516100979190610a60565b3480156100ce57600080fd5b506100b56101a0565b3480156100e357600080fd5b506100f76100f2366004610703565b6101d8565b604051610097919061086b565b34801561011057600080fd5b506100f761011f366004610703565b610284565b34801561013057600080fd5b506100f76102a4565b6100f7610147366004610737565b6102c8565b60606101777f00000000000000000000000000000000000000000000000000000000000000006103a5565b905090565b7f000000000000000000000000000000000000000000000000000000000000000090565b60007f0000000000000000000000000000000000000000000000000000000000000000806101d0574691506101d4565b8091505b5090565b60006101e48383610425565b604051632d34ba7960e01b81529091506001600160a01b03821690632d34ba7990610215908690869060040161087f565b600060405180830381600087803b15801561022f57600080fd5b505af1158015610243573d6000803e3d6000fd5b505050507fa79ba8cc5fdc29196c8d65701a02433c92328f38f0ffbea3908335b80d81409d81604051610276919061086b565b60405180910390a192915050565b600061029b610293848461044f565b60005461048b565b90505b92915050565b7f000000000000000000000000000000000000000000000000000000000000000090565b60006102d485856101d8565b90506102df83610498565b61033b576102ef833330856104a5565b6103145760405162461bcd60e51b815260040161030b906109e4565b60405180910390fd5b61031f8382846104f8565b61033b5760405162461bcd60e51b815260040161030b906109a0565b60405163635ae90160e01b81526001600160a01b0382169063635ae90190349061036b90879087906004016108bd565b6000604051808303818588803b15801561038457600080fd5b505af1158015610398573d6000803e3d6000fd5b5050505050949350505050565b6060604051806040016040528060148152602001733d602d80600a3d3981f3363d3d373d3d3d363d7360601b815250826040518060400160405280600f81526020016e5af43d82803e903d91602b57fd5bf360881b81525060405160200161040f93929190610824565b6040516020818303038152906040529050919050565b600080610432848461044f565b905061044760008261044261014c565b610540565b949350505050565b6000828261045b6101a0565b60405160200161046d939291906107ab565b60405160208183030381529060405280519060200120905092915050565b600061029b8383306105b2565b6001600160a01b03161590565b60006104ef858585856040516024016104c093929190610899565b60408051601f198184030181529190526020810180516001600160e01b03166323b872dd60e01b1790526105f1565b95945050505050565b60006104478484846040516024016105119291906108bd565b60408051601f198184030181529190526020810180516001600160e01b031663095ea7b360e01b1790526105f1565b600080844710156105635760405162461bcd60e51b815260040161030b90610a29565b82516105815760405162461bcd60e51b815260040161030b90610909565b8383516020850187f590506001600160a01b0381166104475760405162461bcd60e51b815260040161030b9061093e565b60008060ff60f81b8386866040516020016105d094939291906107d4565b60408051808303601f19018152919052805160209091012095945050505050565b60006105fc836106a2565b6106185760405162461bcd60e51b815260040161030b90610975565b60006060846001600160a01b0316846040516106349190610808565b6000604051808303816000865af19150503d8060008114610671576040519150601f19603f3d011682016040523d82523d6000602084013e610676565b606091505b509150915061068582826106db565b805115806104ef5750808060200190518101906104ef9190610784565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610447575050151592915050565b816106e857805160208201fd5b5050565b80356001600160a01b038116811461029e57600080fd5b60008060408385031215610715578182fd5b61071f84846106ec565b915061072e84602085016106ec565b90509250929050565b6000806000806080858703121561074c578182fd5b61075686866106ec565b935061076586602087016106ec565b925061077486604087016106ec565b9396929550929360600135925050565b600060208284031215610795578081fd5b815180151581146107a4578182fd5b9392505050565b6001600160601b0319606094851b811682529290931b9091166014830152602882015260480190565b6001600160f81b031994909416845260609290921b6001600160601b03191660018401526015830152603582015260550190565b6000825161081a818460208701610a69565b9190910192915050565b60008451610836818460208901610a69565b606085901b6001600160601b031916908301908152835161085e816014840160208801610a69565b0160140195945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b60006020825282518060208401526108f5816040850160208701610a69565b601f01601f19169190910160400192915050565b6020808252818101527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604082015260600190565b60208082526019908201527f437265617465323a204661696c6564206f6e206465706c6f7900000000000000604082015260600190565b6020808252601190820152704c696245524332303a204e4f5f434f444560781b604082015260600190565b60208082526024908201527f4368616e6e656c466163746f72793a2045524332305f415050524f56455f46416040820152631253115160e21b606082015260800190565b60208082526025908201527f4368616e6e656c466163746f72793a2045524332305f5452414e534645525f46604082015264105253115160da1b606082015260800190565b6020808252601d908201527f437265617465323a20696e73756666696369656e742062616c616e6365000000604082015260600190565b90815260200190565b60005b83811015610a84578181015183820152602001610a6c565b83811115610a93576000848401525b5050505056fea26469706673582212206b46714e4e157ca4fcef5f14f882cae62cdcfb5e301602c8361ab37a1daaf2ab64736f6c63430007010033","devdoc":{"author":"Connext <support@connext.network>","kind":"dev","methods":{"constructor":{"details":"Creates a new `ChannelFactory`","params":{"_chainId":"the chain identifier when generating the CREATE2 salt. If zero, the chain identifier used in the proxy salt will be the result of the opcode","_mastercopy":"the address of the `ChannelMastercopy` (channel logic)"}},"createChannel(address,address)":{"details":"Allows us to create new channel contract and get it all set up in one transaction","params":{"alice":"address of the high fidelity channel participant","bob":"address of the other channel participant"}},"createChannelAndDepositAlice(address,address,address,uint256)":{"details":"Allows us to create a new channel contract and fund it in one transaction","params":{"bob":"address of the other channel participant"}},"getChainId()":{"details":"Allows us to get the chainId that this factory will use in the create2 salt"},"getChannelAddress(address,address)":{"details":"Allows us to get the address for a new channel contract created via `createChannel`","params":{"alice":"address of the igh fidelity channel participant","bob":"address of the other channel participant"}},"getMastercopy()":{"details":"Allows us to get the mastercopy that this factory will deploy channels against"},"getProxyCreationCode()":{"details":"Returns the proxy code used to both calculate the CREATE2 address and deploy the channel proxy pointed to the `ChannelMastercopy`"},"getStoredChainId()":{"details":"Allows us to get the chainId that this factory has stored"}},"title":"ChannelFactory","version":1},"userdoc":{"kind":"user","methods":{},"notice":"Creates and sets up a new channel proxy contract","version":1},"storageLayout":{"storage":[{"astId":3100,"contract":"src.sol/ChannelFactory.sol:ChannelFactory","label":"creationCodeHash","offset":0,"slot":"0","type":"t_bytes32"}],"types":{"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"}}}}')},2825:function(e){e.exports=JSON.parse('{"address":"0x4b71fA2E9613ABc9e5E05148106a5fFf448956Dd","abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"assetId","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"AliceDeposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"defunder","type":"address"},{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"},{"internalType":"address[]","name":"assetIds","type":"address[]"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance[]","name":"balances","type":"tuple[]"},{"internalType":"uint256[]","name":"processedDepositsA","type":"uint256[]"},{"internalType":"uint256[]","name":"processedDepositsB","type":"uint256[]"},{"internalType":"uint256[]","name":"defundNonces","type":"uint256[]"},{"internalType":"uint256","name":"timeout","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"indexed":false,"internalType":"struct ICMCAdjudicator.CoreChannelState","name":"state","type":"tuple"},{"components":[{"internalType":"bytes32","name":"channelStateHash","type":"bytes32"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"consensusExpiry","type":"uint256"},{"internalType":"uint256","name":"defundExpiry","type":"uint256"}],"indexed":false,"internalType":"struct ICMCAdjudicator.ChannelDispute","name":"dispute","type":"tuple"},{"indexed":false,"internalType":"address[]","name":"assetIds","type":"address[]"}],"name":"ChannelDefunded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"disputer","type":"address"},{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"},{"internalType":"address[]","name":"assetIds","type":"address[]"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance[]","name":"balances","type":"tuple[]"},{"internalType":"uint256[]","name":"processedDepositsA","type":"uint256[]"},{"internalType":"uint256[]","name":"processedDepositsB","type":"uint256[]"},{"internalType":"uint256[]","name":"defundNonces","type":"uint256[]"},{"internalType":"uint256","name":"timeout","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"indexed":false,"internalType":"struct ICMCAdjudicator.CoreChannelState","name":"state","type":"tuple"},{"components":[{"internalType":"bytes32","name":"channelStateHash","type":"bytes32"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"consensusExpiry","type":"uint256"},{"internalType":"uint256","name":"defundExpiry","type":"uint256"}],"indexed":false,"internalType":"struct ICMCAdjudicator.ChannelDispute","name":"dispute","type":"tuple"}],"name":"ChannelDisputed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"defunder","type":"address"},{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"bytes32","name":"transferId","type":"bytes32"},{"internalType":"address","name":"transferDefinition","type":"address"},{"internalType":"address","name":"initiator","type":"address"},{"internalType":"address","name":"responder","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance","name":"balance","type":"tuple"},{"internalType":"uint256","name":"transferTimeout","type":"uint256"},{"internalType":"bytes32","name":"initialStateHash","type":"bytes32"}],"indexed":false,"internalType":"struct ICMCAdjudicator.CoreTransferState","name":"state","type":"tuple"},{"components":[{"internalType":"bytes32","name":"transferStateHash","type":"bytes32"},{"internalType":"uint256","name":"transferDisputeExpiry","type":"uint256"},{"internalType":"bool","name":"isDefunded","type":"bool"}],"indexed":false,"internalType":"struct ICMCAdjudicator.TransferDispute","name":"dispute","type":"tuple"},{"indexed":false,"internalType":"bytes","name":"encodedInitialState","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"encodedResolver","type":"bytes"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"indexed":false,"internalType":"struct Balance","name":"balance","type":"tuple"}],"name":"TransferDefunded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"disputer","type":"address"},{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"bytes32","name":"transferId","type":"bytes32"},{"internalType":"address","name":"transferDefinition","type":"address"},{"internalType":"address","name":"initiator","type":"address"},{"internalType":"address","name":"responder","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance","name":"balance","type":"tuple"},{"internalType":"uint256","name":"transferTimeout","type":"uint256"},{"internalType":"bytes32","name":"initialStateHash","type":"bytes32"}],"indexed":false,"internalType":"struct ICMCAdjudicator.CoreTransferState","name":"state","type":"tuple"},{"components":[{"internalType":"bytes32","name":"transferStateHash","type":"bytes32"},{"internalType":"uint256","name":"transferDisputeExpiry","type":"uint256"},{"internalType":"bool","name":"isDefunded","type":"bool"}],"indexed":false,"internalType":"struct ICMCAdjudicator.TransferDispute","name":"dispute","type":"tuple"}],"name":"TransferDisputed","type":"event"},{"inputs":[{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"},{"internalType":"address[]","name":"assetIds","type":"address[]"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance[]","name":"balances","type":"tuple[]"},{"internalType":"uint256[]","name":"processedDepositsA","type":"uint256[]"},{"internalType":"uint256[]","name":"processedDepositsB","type":"uint256[]"},{"internalType":"uint256[]","name":"defundNonces","type":"uint256[]"},{"internalType":"uint256","name":"timeout","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"internalType":"struct ICMCAdjudicator.CoreChannelState","name":"ccs","type":"tuple"},{"internalType":"address[]","name":"assetIds","type":"address[]"},{"internalType":"uint256[]","name":"indices","type":"uint256[]"}],"name":"defundChannel","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"bytes32","name":"transferId","type":"bytes32"},{"internalType":"address","name":"transferDefinition","type":"address"},{"internalType":"address","name":"initiator","type":"address"},{"internalType":"address","name":"responder","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance","name":"balance","type":"tuple"},{"internalType":"uint256","name":"transferTimeout","type":"uint256"},{"internalType":"bytes32","name":"initialStateHash","type":"bytes32"}],"internalType":"struct ICMCAdjudicator.CoreTransferState","name":"cts","type":"tuple"},{"internalType":"bytes","name":"encodedInitialTransferState","type":"bytes"},{"internalType":"bytes","name":"encodedTransferResolver","type":"bytes"},{"internalType":"bytes","name":"responderSignature","type":"bytes"}],"name":"defundTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"depositAlice","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"},{"internalType":"address[]","name":"assetIds","type":"address[]"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance[]","name":"balances","type":"tuple[]"},{"internalType":"uint256[]","name":"processedDepositsA","type":"uint256[]"},{"internalType":"uint256[]","name":"processedDepositsB","type":"uint256[]"},{"internalType":"uint256[]","name":"defundNonces","type":"uint256[]"},{"internalType":"uint256","name":"timeout","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"internalType":"struct ICMCAdjudicator.CoreChannelState","name":"ccs","type":"tuple"},{"internalType":"bytes","name":"aliceSignature","type":"bytes"},{"internalType":"bytes","name":"bobSignature","type":"bytes"}],"name":"disputeChannel","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"bytes32","name":"transferId","type":"bytes32"},{"internalType":"address","name":"transferDefinition","type":"address"},{"internalType":"address","name":"initiator","type":"address"},{"internalType":"address","name":"responder","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance","name":"balance","type":"tuple"},{"internalType":"uint256","name":"transferTimeout","type":"uint256"},{"internalType":"bytes32","name":"initialStateHash","type":"bytes32"}],"internalType":"struct ICMCAdjudicator.CoreTransferState","name":"cts","type":"tuple"},{"internalType":"bytes32[]","name":"merkleProofData","type":"bytes32[]"}],"name":"disputeTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address payable","name":"recipient","type":"address"}],"name":"exit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getAlice","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBob","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getChannelDispute","outputs":[{"components":[{"internalType":"bytes32","name":"channelStateHash","type":"bytes32"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"consensusExpiry","type":"uint256"},{"internalType":"uint256","name":"defundExpiry","type":"uint256"}],"internalType":"struct ICMCAdjudicator.ChannelDispute","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"}],"name":"getDefundNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"getExitableAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"}],"name":"getTotalDepositsAlice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"}],"name":"getTotalDepositsBob","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"}],"name":"getTotalTransferred","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"transferId","type":"bytes32"}],"name":"getTransferDispute","outputs":[{"components":[{"internalType":"bytes32","name":"transferStateHash","type":"bytes32"},{"internalType":"uint256","name":"transferDisputeExpiry","type":"uint256"},{"internalType":"bool","name":"isDefunded","type":"bool"}],"internalType":"struct ICMCAdjudicator.TransferDispute","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"internalType":"address payable","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"address","name":"callTo","type":"address"},{"internalType":"bytes","name":"callData","type":"bytes"}],"internalType":"struct WithdrawData","name":"wd","type":"tuple"}],"name":"getWithdrawalTransactionRecord","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_alice","type":"address"},{"internalType":"address","name":"_bob","type":"address"}],"name":"setup","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"internalType":"address payable","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"address","name":"callTo","type":"address"},{"internalType":"bytes","name":"callData","type":"bytes"}],"internalType":"struct WithdrawData","name":"wd","type":"tuple"},{"internalType":"bytes","name":"aliceSignature","type":"bytes"},{"internalType":"bytes","name":"bobSignature","type":"bytes"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"transactionHash":"0x146e8cf3538bdd3ea7d161862461a1609c3c4aa8b4160f617f1dd53fb00a1790","receipt":{"to":null,"from":"0x627306090abaB3A6e1400e9345bC60c78a8BEf57","contractAddress":"0x4b71fA2E9613ABc9e5E05148106a5fFf448956Dd","transactionIndex":0,"gasUsed":"3585396","logsBloom":"0xblockHash":"0xad6ee8039a4498177ae23ba5c975933558662d66779240cb7fd40cb0e058ddf7","transactionHash":"0x146e8cf3538bdd3ea7d161862461a1609c3c4aa8b4160f617f1dd53fb00a1790","logs":[{"transactionIndex":0,"blockNumber":8439274,"transactionHash":"0x146e8cf3538bdd3ea7d161862461a1609c3c4aa8b4160f617f1dd53fb00a1790","address":"0x0000000000000000000000000000000000001010","topics":["0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63","0x0000000000000000000000000000000000000000000000000000000000001010","0x000000000000000000000000627306090abab3a6e1400e9345bc60c78a8bef57","0x000000000000000000000000928ed6a3e94437bbd316ccad78479f1d163a6a8c"],"data":"0x000000000000000000000000000000000000000000000000000cbce60ef5880000000000000000000000000000000000000000000000000001d659a34f5c5070000000000000000000000000000000000000000000000020890e8edfefcceb2100000000000000000000000000000000000000000000000001c99cbd4066c870000000000000000000000000000000000000000000000020891b4bc5fec27321","logIndex":0,"blockHash":"0xad6ee8039a4498177ae23ba5c975933558662d66779240cb7fd40cb0e058ddf7"}],"blockNumber":8439274,"cumulativeGasUsed":"3585396","status":1,"byzantium":true},"args":[],"solcInputHash":"89c55d5a88f10637860a9ea31a1daad3","metadata":"{\\"compiler\\":{\\"version\\":\\"0.7.1+commit.f4a555be\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"AliceDeposited\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"defunder\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address[]\\",\\"name\\":\\"assetIds\\",\\"type\\":\\"address[]\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance[]\\",\\"name\\":\\"balances\\",\\"type\\":\\"tuple[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsA\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsB\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"defundNonces\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"timeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.CoreChannelState\\",\\"name\\":\\"state\\",\\"type\\":\\"tuple\\"},{\\"components\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"channelStateHash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"consensusExpiry\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"defundExpiry\\",\\"type\\":\\"uint256\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.ChannelDispute\\",\\"name\\":\\"dispute\\",\\"type\\":\\"tuple\\"},{\\"indexed\\":false,\\"internalType\\":\\"address[]\\",\\"name\\":\\"assetIds\\",\\"type\\":\\"address[]\\"}],\\"name\\":\\"ChannelDefunded\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"disputer\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address[]\\",\\"name\\":\\"assetIds\\",\\"type\\":\\"address[]\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance[]\\",\\"name\\":\\"balances\\",\\"type\\":\\"tuple[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsA\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsB\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"defundNonces\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"timeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.CoreChannelState\\",\\"name\\":\\"state\\",\\"type\\":\\"tuple\\"},{\\"components\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"channelStateHash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"consensusExpiry\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"defundExpiry\\",\\"type\\":\\"uint256\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.ChannelDispute\\",\\"name\\":\\"dispute\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"ChannelDisputed\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"defunder\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferId\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"transferDefinition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"initiator\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"responder\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"balance\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferTimeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"initialStateHash\\",\\"type\\":\\"bytes32\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.CoreTransferState\\",\\"name\\":\\"state\\",\\"type\\":\\"tuple\\"},{\\"components\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferStateHash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferDisputeExpiry\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"isDefunded\\",\\"type\\":\\"bool\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.TransferDispute\\",\\"name\\":\\"dispute\\",\\"type\\":\\"tuple\\"},{\\"indexed\\":false,\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedInitialState\\",\\"type\\":\\"bytes\\"},{\\"indexed\\":false,\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedResolver\\",\\"type\\":\\"bytes\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"balance\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"TransferDefunded\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"disputer\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferId\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"transferDefinition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"initiator\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"responder\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"balance\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferTimeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"initialStateHash\\",\\"type\\":\\"bytes32\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.CoreTransferState\\",\\"name\\":\\"state\\",\\"type\\":\\"tuple\\"},{\\"components\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferStateHash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferDisputeExpiry\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"isDefunded\\",\\"type\\":\\"bool\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.TransferDispute\\",\\"name\\":\\"dispute\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"TransferDisputed\\",\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address[]\\",\\"name\\":\\"assetIds\\",\\"type\\":\\"address[]\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance[]\\",\\"name\\":\\"balances\\",\\"type\\":\\"tuple[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsA\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsB\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"defundNonces\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"timeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"}],\\"internalType\\":\\"struct ICMCAdjudicator.CoreChannelState\\",\\"name\\":\\"ccs\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"address[]\\",\\"name\\":\\"assetIds\\",\\"type\\":\\"address[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"indices\\",\\"type\\":\\"uint256[]\\"}],\\"name\\":\\"defundChannel\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferId\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"transferDefinition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"initiator\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"responder\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"balance\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferTimeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"initialStateHash\\",\\"type\\":\\"bytes32\\"}],\\"internalType\\":\\"struct ICMCAdjudicator.CoreTransferState\\",\\"name\\":\\"cts\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedInitialTransferState\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedTransferResolver\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"responderSignature\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"defundTransfer\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"depositAlice\\",\\"outputs\\":[],\\"stateMutability\\":\\"payable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address[]\\",\\"name\\":\\"assetIds\\",\\"type\\":\\"address[]\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance[]\\",\\"name\\":\\"balances\\",\\"type\\":\\"tuple[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsA\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsB\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"defundNonces\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"timeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"}],\\"internalType\\":\\"struct ICMCAdjudicator.CoreChannelState\\",\\"name\\":\\"ccs\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"aliceSignature\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"bobSignature\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"disputeChannel\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferId\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"transferDefinition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"initiator\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"responder\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"balance\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferTimeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"initialStateHash\\",\\"type\\":\\"bytes32\\"}],\\"internalType\\":\\"struct ICMCAdjudicator.CoreTransferState\\",\\"name\\":\\"cts\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"bytes32[]\\",\\"name\\":\\"merkleProofData\\",\\"type\\":\\"bytes32[]\\"}],\\"name\\":\\"disputeTransfer\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address payable\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"}],\\"name\\":\\"exit\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getAlice\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getBob\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getChannelDispute\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"channelStateHash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"consensusExpiry\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"defundExpiry\\",\\"type\\":\\"uint256\\"}],\\"internalType\\":\\"struct ICMCAdjudicator.ChannelDispute\\",\\"name\\":\\"\\",\\"type\\":\\"tuple\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getDefundNonce\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getExitableAmount\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getTotalDepositsAlice\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getTotalDepositsBob\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getTotalTransferred\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferId\\",\\"type\\":\\"bytes32\\"}],\\"name\\":\\"getTransferDispute\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferStateHash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferDisputeExpiry\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"isDefunded\\",\\"type\\":\\"bool\\"}],\\"internalType\\":\\"struct ICMCAdjudicator.TransferDispute\\",\\"name\\":\\"\\",\\"type\\":\\"tuple\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address payable\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"callTo\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"callData\\",\\"type\\":\\"bytes\\"}],\\"internalType\\":\\"struct WithdrawData\\",\\"name\\":\\"wd\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"getWithdrawalTransactionRecord\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"lock\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"_bob\\",\\"type\\":\\"address\\"}],\\"name\\":\\"setup\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address payable\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"callTo\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"callData\\",\\"type\\":\\"bytes\\"}],\\"internalType\\":\\"struct WithdrawData\\",\\"name\\":\\"wd\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"aliceSignature\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"bobSignature\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"withdraw\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"stateMutability\\":\\"payable\\",\\"type\\":\\"receive\\"}],\\"devdoc\\":{\\"author\\":\\"Connext <support@connext.network>\\",\\"kind\\":\\"dev\\",\\"methods\\":{\\"getAlice()\\":{\\"returns\\":{\\"_0\\":\\"Bob\'s signer address\\"}},\\"getBob()\\":{\\"returns\\":{\\"_0\\":\\"Alice\'s signer address\\"}},\\"setup(address,address)\\":{\\"params\\":{\\"_alice\\":\\": Address representing user with function deposit\\",\\"_bob\\":\\": Address representing user with multisig deposit\\"}},\\"withdraw((address,address,address,uint256,uint256,address,bytes),bytes,bytes)\\":{\\"params\\":{\\"aliceSignature\\":\\"Signature of owner a\\",\\"bobSignature\\":\\"Signature of owner b\\",\\"wd\\":\\"The withdraw data consisting of semantic withdraw information, i.e. assetId, recipient, and amount; information to make an optional call in addition to the actual transfer, i.e. target address for the call and call payload; additional information, i.e. channel address and nonce.\\"}}},\\"title\\":\\"ChannelMastercopy\\",\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{\\"getAlice()\\":{\\"notice\\":\\"A getter function for the bob of the multisig\\"},\\"getBob()\\":{\\"notice\\":\\"A getter function for the bob of the multisig\\"},\\"setup(address,address)\\":{\\"notice\\":\\"Contract constructor for Proxied copies\\"}},\\"notice\\":\\"Contains the logic used by all Vector multisigs. A proxy to this         contract is deployed per-channel using the ChannelFactory.sol.         Supports channel adjudication logic, deposit logic, and arbitrary         calls when a commitment is double-signed.\\",\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"src.sol/ChannelMastercopy.sol\\":\\"ChannelMastercopy\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\\\n *\\\\n * These functions can be used to verify that a message was signed by the holder\\\\n * of the private keys of a given address.\\\\n */\\\\nlibrary ECDSA {\\\\n    /**\\\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\\\n     * `signature`. This address can then be used for verification purposes.\\\\n     *\\\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\\\n     * this function rejects them by requiring the `s` value to be in the lower\\\\n     * half order, and the `v` value to be either 27 or 28.\\\\n     *\\\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\\\n     * verification to be secure: it is possible to craft signatures that\\\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\\\n     * this is by receiving a hash of the original message (which may otherwise\\\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\\\n     */\\\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\\\n        // Check the signature length\\\\n        if (signature.length != 65) {\\\\n            revert(\\\\\\"ECDSA: invalid signature length\\\\\\");\\\\n        }\\\\n\\\\n        // Divide the signature in r, s and v variables\\\\n        bytes32 r;\\\\n        bytes32 s;\\\\n        uint8 v;\\\\n\\\\n        // ecrecover takes the signature parameters, and the only way to get them\\\\n        // currently is to use assembly.\\\\n        // solhint-disable-next-line no-inline-assembly\\\\n        assembly {\\\\n            r := mload(add(signature, 0x20))\\\\n            s := mload(add(signature, 0x40))\\\\n            v := byte(0, mload(add(signature, 0x60)))\\\\n        }\\\\n\\\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\\\n        // the valid range for s in (281): 0 < s < secp256k1n \\\\u00f7 2 + 1, and for v in (282): v \\\\u2208 {27, 28}. Most\\\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\\\n        //\\\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\\\n        // these malleable signatures as well.\\\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\\\n            revert(\\\\\\"ECDSA: invalid signature \'s\' value\\\\\\");\\\\n        }\\\\n\\\\n        if (v != 27 && v != 28) {\\\\n            revert(\\\\\\"ECDSA: invalid signature \'v\' value\\\\\\");\\\\n        }\\\\n\\\\n        // If the signature is valid (and not malleable), return the signer address\\\\n        address signer = ecrecover(hash, v, r, s);\\\\n        require(signer != address(0), \\\\\\"ECDSA: invalid signature\\\\\\");\\\\n\\\\n        return signer;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\\\n     * replicates the behavior of the\\\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\\\n     * JSON-RPC method.\\\\n     *\\\\n     * See {recover}.\\\\n     */\\\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\\\n        // 32 is the length in bytes of hash,\\\\n        // enforced by the type signature above\\\\n        return keccak256(abi.encodePacked(\\\\\\"\\\\\\\\x19Ethereum Signed Message:\\\\\\\\n32\\\\\\", hash));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf25c49d2be2d28918ae6de7e9724238367dabe50631ec8fd23d1cdae2cb70262\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/cryptography/MerkleProof.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev These functions deal with verification of Merkle trees (hash trees),\\\\n */\\\\nlibrary MerkleProof {\\\\n    /**\\\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\\\n     * defined by `root`. For this, a `proof` must be provided, containing\\\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\\\n     */\\\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\\\n        bytes32 computedHash = leaf;\\\\n\\\\n        for (uint256 i = 0; i < proof.length; i++) {\\\\n            bytes32 proofElement = proof[i];\\\\n\\\\n            if (computedHash <= proofElement) {\\\\n                // Hash(current computed hash + current element of the proof)\\\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\\\n            } else {\\\\n                // Hash(current element of the proof + current computed hash)\\\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\\\n            }\\\\n        }\\\\n\\\\n        // Check if the computed hash (root) is equal to the provided root\\\\n        return computedHash == root;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x4959be2683e7af3439cb94f06aa6c40cb42ca9336747d0c7dce54f07196489bc\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/math/Math.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Standard math utilities missing in the Solidity language.\\\\n */\\\\nlibrary Math {\\\\n    /**\\\\n     * @dev Returns the largest of two numbers.\\\\n     */\\\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a >= b ? a : b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the smallest of two numbers.\\\\n     */\\\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a < b ? a : b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the average of two numbers. The result is rounded towards\\\\n     * zero.\\\\n     */\\\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        // (a + b) / 2 can overflow, so we distribute\\\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xa4fdec0ea7d943692cac780111ff2ff9d89848cad0494a59cfaed63a705054b4\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/math/SafeMath.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Wrappers over Solidity\'s arithmetic operations with added overflow\\\\n * checks.\\\\n *\\\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\\\n * in bugs, because programmers usually assume that an overflow raises an\\\\n * error, which is the standard behavior in high level programming languages.\\\\n * `SafeMath` restores this intuition by reverting the transaction when an\\\\n * operation overflows.\\\\n *\\\\n * Using this library instead of the unchecked operations eliminates an entire\\\\n * class of bugs, so it\'s recommended to use it always.\\\\n */\\\\nlibrary SafeMath {\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `+` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Addition cannot overflow.\\\\n     */\\\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        uint256 c = a + b;\\\\n        require(c >= a, \\\\\\"SafeMath: addition overflow\\\\\\");\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return sub(a, b, \\\\\\"SafeMath: subtraction overflow\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        require(b <= a, errorMessage);\\\\n        uint256 c = a - b;\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `*` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Multiplication cannot overflow.\\\\n     */\\\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\\\\n        // benefit is lost if \'b\' is also tested.\\\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\\\n        if (a == 0) {\\\\n            return 0;\\\\n        }\\\\n\\\\n        uint256 c = a * b;\\\\n        require(c / a == b, \\\\\\"SafeMath: multiplication overflow\\\\\\");\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return div(a, b, \\\\\\"SafeMath: division by zero\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        require(b > 0, errorMessage);\\\\n        uint256 c = a / b;\\\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * Reverts when dividing by zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return mod(a, b, \\\\\\"SafeMath: modulo by zero\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * Reverts with custom message when dividing by zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        require(b != 0, errorMessage);\\\\n        return a % b;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Returns the amount of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender\'s allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\\\n     * allowance mechanism. `amount` is then deducted from the caller\'s\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Address.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Collection of functions related to the address type\\\\n */\\\\nlibrary Address {\\\\n    /**\\\\n     * @dev Returns true if `account` is a contract.\\\\n     *\\\\n     * [IMPORTANT]\\\\n     * ====\\\\n     * It is unsafe to assume that an address for which this function returns\\\\n     * false is an externally-owned account (EOA) and not a contract.\\\\n     *\\\\n     * Among others, `isContract` will return false for the following\\\\n     * types of addresses:\\\\n     *\\\\n     *  - an externally-owned account\\\\n     *  - a contract in construction\\\\n     *  - an address where a contract will be created\\\\n     *  - an address where a contract lived, but was destroyed\\\\n     * ====\\\\n     */\\\\n    function isContract(address account) internal view returns (bool) {\\\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\\\n        // for accounts without code, i.e. `keccak256(\'\')`\\\\n        bytes32 codehash;\\\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\\\n        // solhint-disable-next-line no-inline-assembly\\\\n        assembly { codehash := extcodehash(account) }\\\\n        return (codehash != accountHash && codehash != 0x0);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\\\\n     * `recipient`, forwarding all available gas and reverting on errors.\\\\n     *\\\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\\\n     * imposed by `transfer`, making them unable to receive funds via\\\\n     * `transfer`. {sendValue} removes this limitation.\\\\n     *\\\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\\\n     *\\\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\\\n     * taken to not create reentrancy vulnerabilities. Consider using\\\\n     * {ReentrancyGuard} or the\\\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\\\n     */\\\\n    function sendValue(address payable recipient, uint256 amount) internal {\\\\n        require(address(this).balance >= amount, \\\\\\"Address: insufficient balance\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\\\n        (bool success, ) = recipient.call{ value: amount }(\\\\\\"\\\\\\");\\\\n        require(success, \\\\\\"Address: unable to send value, recipient may have reverted\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Performs a Solidity function call using a low level `call`. A\\\\n     * plain`call` is an unsafe replacement for a function call: use this\\\\n     * function instead.\\\\n     *\\\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\\\n     * function (like regular Solidity function calls).\\\\n     *\\\\n     * Returns the raw returned data. To convert to the expected return value,\\\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `target` must be a contract.\\\\n     * - calling `target` with `data` must not revert.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n      return functionCall(target, data, \\\\\\"Address: low-level call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but also transferring `value` wei to `target`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the calling contract must have an ETH balance of at least `value`.\\\\n     * - the called Solidity function must be `payable`.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, value, \\\\\\"Address: low-level call with value failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\\\n        require(address(this).balance >= value, \\\\\\"Address: insufficient balance for call\\\\\\");\\\\n        return _functionCallWithValue(target, data, value, errorMessage);\\\\n    }\\\\n\\\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: call to non-contract\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls\\\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\\\n        if (success) {\\\\n            return returndata;\\\\n        } else {\\\\n            // Look for revert reason and bubble it up if present\\\\n            if (returndata.length > 0) {\\\\n                // The easiest way to bubble the revert reason is using memory via assembly\\\\n\\\\n                // solhint-disable-next-line no-inline-assembly\\\\n                assembly {\\\\n                    let returndata_size := mload(returndata)\\\\n                    revert(add(32, returndata), returndata_size)\\\\n                }\\\\n            } else {\\\\n                revert(errorMessage);\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x698f929f1097637d051976b322a2d532c27df022b09010e8d091e2888a5ebdf8\\",\\"license\\":\\"MIT\\"},\\"src.sol/CMCAdjudicator.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/Commitment.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/ICMCAdjudicator.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/ITransferDefinition.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/Types.sol\\\\\\";\\\\nimport \\\\\\"./CMCCore.sol\\\\\\";\\\\nimport \\\\\\"./CMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./CMCDeposit.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibChannelCrypto.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibMath.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/cryptography/MerkleProof.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/math/SafeMath.sol\\\\\\";\\\\n\\\\n/// @title CMCAdjudicator\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains logic for disputing a single channel and all active\\\\n///         transfers associated with the channel. Contains two major phases:\\\\n///         (1) consensus: settle on latest channel state\\\\n///         (2) defund: remove assets and dispute active transfers\\\\ncontract CMCAdjudicator is CMCCore, CMCAsset, CMCDeposit, ICMCAdjudicator {\\\\n    using LibChannelCrypto for bytes32;\\\\n    using LibMath for uint256;\\\\n    using SafeMath for uint256;\\\\n\\\\n    uint256 private constant INITIAL_DEFUND_NONCE = 1;\\\\n\\\\n    ChannelDispute private channelDispute;\\\\n    mapping(address => uint256) private defundNonces;\\\\n    mapping(bytes32 => TransferDispute) private transferDisputes;\\\\n\\\\n    modifier validateChannel(CoreChannelState calldata ccs) {\\\\n        require(\\\\n            ccs.channelAddress == address(this) &&\\\\n                ccs.alice == alice &&\\\\n                ccs.bob == bob,\\\\n            \\\\\\"CMCAdjudicator: INVALID_CHANNEL\\\\\\"\\\\n        );\\\\n        _;\\\\n    }\\\\n\\\\n    modifier validateTransfer(CoreTransferState calldata cts) {\\\\n        require(\\\\n            cts.channelAddress == address(this),\\\\n            \\\\\\"CMCAdjudicator: INVALID_TRANSFER\\\\\\"\\\\n        );\\\\n        _;\\\\n    }\\\\n\\\\n    function getChannelDispute()\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (ChannelDispute memory)\\\\n    {\\\\n        return channelDispute;\\\\n    }\\\\n\\\\n    function getDefundNonce(address assetId)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (uint256)\\\\n    {\\\\n        return defundNonces[assetId];\\\\n    }\\\\n\\\\n    function getTransferDispute(bytes32 transferId)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (TransferDispute memory)\\\\n    {\\\\n        return transferDisputes[transferId];\\\\n    }\\\\n\\\\n    function disputeChannel(\\\\n        CoreChannelState calldata ccs,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) external override onlyViaProxy nonReentrant validateChannel(ccs) {\\\\n        // Generate hash\\\\n        bytes32 ccsHash = hashChannelState(ccs);\\\\n\\\\n        // Verify Alice\'s and Bob\'s signature on the channel state\\\\n        verifySignaturesOnChannelStateHash(ccs, ccsHash, aliceSignature, bobSignature);\\\\n\\\\n        // We cannot dispute a channel in its defund phase\\\\n        require(!inDefundPhase(), \\\\\\"CMCAdjudicator: INVALID_PHASE\\\\\\");\\\\n\\\\n        // New nonce must be strictly greater than the stored one\\\\n        require(\\\\n            channelDispute.nonce < ccs.nonce,\\\\n            \\\\\\"CMCAdjudicator: INVALID_NONCE\\\\\\"\\\\n        );\\\\n\\\\n        if (!inConsensusPhase()) {\\\\n            // We are not already in a dispute\\\\n            // Set expiries\\\\n            // TODO: offchain-ensure that there can\'t be an overflow\\\\n            channelDispute.consensusExpiry = block.timestamp.add(ccs.timeout);\\\\n            channelDispute.defundExpiry = block.timestamp.add(\\\\n                ccs.timeout.mul(2)\\\\n            );\\\\n        }\\\\n\\\\n        // Store newer state\\\\n        channelDispute.channelStateHash = ccsHash;\\\\n        channelDispute.nonce = ccs.nonce;\\\\n        channelDispute.merkleRoot = ccs.merkleRoot;\\\\n\\\\n        // Emit event\\\\n        emit ChannelDisputed(msg.sender, ccs, channelDispute);\\\\n    }\\\\n\\\\n    function defundChannel(\\\\n        CoreChannelState calldata ccs,\\\\n        address[] calldata assetIds,\\\\n        uint256[] calldata indices\\\\n    ) external override onlyViaProxy nonReentrant validateChannel(ccs) {\\\\n        // These checks are not strictly necessary, but it\'s a bit cleaner this way\\\\n        require(assetIds.length > 0, \\\\\\"CMCAdjudicator: NO_ASSETS_GIVEN\\\\\\");\\\\n        require(\\\\n            indices.length <= assetIds.length,\\\\n            \\\\\\"CMCAdjudicator: WRONG_ARRAY_LENGTHS\\\\\\"\\\\n        );\\\\n\\\\n        // Verify that the given channel state matches the stored one\\\\n        require(\\\\n            hashChannelState(ccs) == channelDispute.channelStateHash,\\\\n            \\\\\\"CMCAdjudicator: INVALID_CHANNEL_HASH\\\\\\"\\\\n        );\\\\n\\\\n        // We need to be in defund phase for that\\\\n        require(inDefundPhase(), \\\\\\"CMCAdjudicator: INVALID_PHASE\\\\\\");\\\\n\\\\n        // TODO SECURITY: Beware of reentrancy\\\\n        // TODO: offchain-ensure that all arrays have the same length:\\\\n        // assetIds, balances, processedDepositsA, processedDepositsB, defundNonces\\\\n        // Make sure there are no duplicates in the assetIds -- duplicates are often a source of double-spends\\\\n\\\\n        // Defund all assets given\\\\n        for (uint256 i = 0; i < assetIds.length; i++) {\\\\n            address assetId = assetIds[i];\\\\n\\\\n            // Verify or find the index of the assetId in the ccs.assetIds\\\\n            uint256 index;\\\\n            if (i < indices.length) {\\\\n                // The index was supposedly given -- we verify\\\\n                index = indices[i];\\\\n                require(\\\\n                    assetId == ccs.assetIds[index],\\\\n                    \\\\\\"CMCAdjudicator: INDEX_MISMATCH\\\\\\"\\\\n                );\\\\n            } else {\\\\n                // we search through the assets in ccs\\\\n                for (index = 0; index < ccs.assetIds.length; index++) {\\\\n                    if (assetId == ccs.assetIds[index]) {\\\\n                        break;\\\\n                    }\\\\n                }\\\\n            }\\\\n\\\\n            // Now, if `index`  is equal to the number of assets in ccs,\\\\n            // then the current asset is not in ccs;\\\\n            // otherwise, `index` is the index in ccs for the current asset\\\\n\\\\n            // Check the assets haven\'t already been defunded + update the\\\\n            // defundNonce for that asset\\\\n            {\\\\n                // Open a new block to avoid \\\\\\"stack too deep\\\\\\" error\\\\n                uint256 defundNonce =\\\\n                    (index == ccs.assetIds.length)\\\\n                        ? INITIAL_DEFUND_NONCE\\\\n                        : ccs.defundNonces[index];\\\\n                require(\\\\n                    defundNonces[assetId] < defundNonce,\\\\n                    \\\\\\"CMCAdjudicator: CHANNEL_ALREADY_DEFUNDED\\\\\\"\\\\n                );\\\\n                defundNonces[assetId] = defundNonce;\\\\n            }\\\\n\\\\n            // Get total deposits\\\\n            uint256 tdAlice = _getTotalDepositsAlice(assetId);\\\\n            uint256 tdBob = _getTotalDepositsBob(assetId);\\\\n\\\\n            Balance memory balance;\\\\n\\\\n            if (index == ccs.assetIds.length) {\\\\n                // The current asset is not a part of ccs; refund what has been deposited\\\\n                balance = Balance({\\\\n                    amount: [tdAlice, tdBob],\\\\n                    to: [payable(ccs.alice), payable(ccs.bob)]\\\\n                });\\\\n            } else {\\\\n                // Start with the final balances in ccs\\\\n                balance = ccs.balances[index];\\\\n                // Add unprocessed deposits\\\\n                balance.amount[0] = balance.amount[0].satAdd(\\\\n                    tdAlice - ccs.processedDepositsA[index]\\\\n                );\\\\n                balance.amount[1] = balance.amount[1].satAdd(\\\\n                    tdBob - ccs.processedDepositsB[index]\\\\n                );\\\\n            }\\\\n\\\\n            // Add result to exitable amounts\\\\n            makeBalanceExitable(assetId, balance);\\\\n        }\\\\n\\\\n        emit ChannelDefunded(\\\\n            msg.sender,\\\\n            ccs,\\\\n            channelDispute,\\\\n            assetIds\\\\n        );\\\\n    }\\\\n\\\\n    function disputeTransfer(\\\\n        CoreTransferState calldata cts,\\\\n        bytes32[] calldata merkleProofData\\\\n    ) external override onlyViaProxy nonReentrant validateTransfer(cts) {\\\\n        // Verify that the given transfer state is included in the \\\\\\"finalized\\\\\\" channel state\\\\n        bytes32 transferStateHash = hashTransferState(cts);\\\\n        verifyMerkleProof(\\\\n            merkleProofData,\\\\n            channelDispute.merkleRoot,\\\\n            transferStateHash\\\\n        );\\\\n\\\\n        // The channel needs to be in defund phase for that, i.e. channel state is \\\\\\"finalized\\\\\\"\\\\n        require(inDefundPhase(), \\\\\\"CMCAdjudicator: INVALID_PHASE\\\\\\");\\\\n\\\\n        // Get stored dispute for this transfer\\\\n        TransferDispute storage transferDispute =\\\\n            transferDisputes[cts.transferId];\\\\n\\\\n        // Verify that this transfer has not been disputed before\\\\n        require(\\\\n            transferDispute.transferDisputeExpiry == 0,\\\\n            \\\\\\"CMCAdjudicator: TRANSFER_ALREADY_DISPUTED\\\\\\"\\\\n        );\\\\n\\\\n        // Store transfer state and set expiry\\\\n        transferDispute.transferStateHash = transferStateHash;\\\\n        // TODO: offchain-ensure that there can\'t be an overflow\\\\n        transferDispute.transferDisputeExpiry = block.timestamp.add(\\\\n            cts.transferTimeout\\\\n        );\\\\n\\\\n        emit TransferDisputed(\\\\n            msg.sender,\\\\n            cts,\\\\n            transferDispute\\\\n        );\\\\n    }\\\\n\\\\n    function defundTransfer(\\\\n        CoreTransferState calldata cts,\\\\n        bytes calldata encodedInitialTransferState,\\\\n        bytes calldata encodedTransferResolver,\\\\n        bytes calldata responderSignature\\\\n    ) external override onlyViaProxy nonReentrant validateTransfer(cts) {\\\\n        // Get stored dispute for this transfer\\\\n        TransferDispute storage transferDispute =\\\\n            transferDisputes[cts.transferId];\\\\n\\\\n        // Verify that a dispute for this transfer has already been started\\\\n        require(\\\\n            transferDispute.transferDisputeExpiry != 0,\\\\n            \\\\\\"CMCAdjudicator: TRANSFER_NOT_DISPUTED\\\\\\"\\\\n        );\\\\n\\\\n        // Verify that the given transfer state matches the stored one\\\\n        require(\\\\n            hashTransferState(cts) == transferDispute.transferStateHash,\\\\n            \\\\\\"CMCAdjudicator: INVALID_TRANSFER_HASH\\\\\\"\\\\n        );\\\\n\\\\n        // We can\'t defund twice\\\\n        require(\\\\n            !transferDispute.isDefunded,\\\\n            \\\\\\"CMCAdjudicator: TRANSFER_ALREADY_DEFUNDED\\\\\\"\\\\n        );\\\\n        transferDispute.isDefunded = true;\\\\n\\\\n        Balance memory balance;\\\\n\\\\n        if (block.timestamp < transferDispute.transferDisputeExpiry) {\\\\n            // Ensure the correct hash is provided\\\\n            require(\\\\n                keccak256(encodedInitialTransferState) == cts.initialStateHash,\\\\n                \\\\\\"CMCAdjudicator: INVALID_TRANSFER_HASH\\\\\\"\\\\n            );\\\\n            \\\\n            // Before dispute expiry, responder or responder-authorized\\\\n            // agent (i.e. watchtower) can resolve\\\\n            require(\\\\n                msg.sender == cts.responder || cts.initialStateHash.checkSignature(responderSignature, cts.responder),\\\\n                \\\\\\"CMCAdjudicator: INVALID_RESOLVER\\\\\\"\\\\n            );\\\\n            \\\\n            ITransferDefinition transferDefinition =\\\\n                ITransferDefinition(cts.transferDefinition);\\\\n            balance = transferDefinition.resolve(\\\\n                abi.encode(cts.balance),\\\\n                encodedInitialTransferState,\\\\n                encodedTransferResolver\\\\n            );\\\\n            // Verify that returned balances don\'t exceed initial balances\\\\n            require(\\\\n                balance.amount[0].add(balance.amount[1]) <=\\\\n                    cts.balance.amount[0].add(cts.balance.amount[1]),\\\\n                \\\\\\"CMCAdjudicator: INVALID_BALANCES\\\\\\"\\\\n            );\\\\n        } else {\\\\n            // After dispute expiry, if the responder hasn\'t resolved, we defund the initial balance\\\\n            balance = cts.balance;\\\\n        }\\\\n\\\\n        // Depending on previous code path, defund either resolved or initial balance\\\\n        makeBalanceExitable(cts.assetId, balance);\\\\n\\\\n        // Emit event\\\\n        emit TransferDefunded(\\\\n            msg.sender,\\\\n            cts,\\\\n            transferDispute,\\\\n            encodedInitialTransferState,\\\\n            encodedTransferResolver,\\\\n            balance\\\\n        );\\\\n    }\\\\n\\\\n    function verifySignaturesOnChannelStateHash(\\\\n        CoreChannelState calldata ccs,\\\\n        bytes32 ccsHash,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) internal pure {\\\\n        bytes32 commitment =\\\\n            keccak256(abi.encode(CommitmentType.ChannelState, ccsHash));\\\\n        require(\\\\n            commitment.checkSignature(aliceSignature, ccs.alice),\\\\n            \\\\\\"CMCAdjudicator: INVALID_ALICE_SIG\\\\\\"\\\\n        );\\\\n        require(\\\\n            commitment.checkSignature(bobSignature, ccs.bob),\\\\n            \\\\\\"CMCAdjudicator: INVALID_BOB_SIG\\\\\\"\\\\n        );\\\\n    }\\\\n\\\\n    function verifyMerkleProof(\\\\n        bytes32[] calldata proof,\\\\n        bytes32 root,\\\\n        bytes32 leaf\\\\n    ) internal pure {\\\\n        require(\\\\n            MerkleProof.verify(proof, root, leaf),\\\\n            \\\\\\"CMCAdjudicator: INVALID_MERKLE_PROOF\\\\\\"\\\\n        );\\\\n    }\\\\n\\\\n    function inConsensusPhase() internal view returns (bool) {\\\\n        return block.timestamp < channelDispute.consensusExpiry;\\\\n    }\\\\n\\\\n    function inDefundPhase() internal view returns (bool) {\\\\n        return\\\\n            channelDispute.consensusExpiry <= block.timestamp &&\\\\n            block.timestamp < channelDispute.defundExpiry;\\\\n    }\\\\n\\\\n    function hashChannelState(CoreChannelState calldata ccs)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        return keccak256(abi.encode(ccs));\\\\n    }\\\\n\\\\n    function hashTransferState(CoreTransferState calldata cts)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        return keccak256(abi.encode(cts));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x351fb7770cbb6fbb6f3470e63d5a9e93c817722f9c8e2e5c62e38ebf8c6e389b\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/CMCAsset.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/ICMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/Types.sol\\\\\\";\\\\nimport \\\\\\"./CMCCore.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibAsset.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibMath.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/math/Math.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/math/SafeMath.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\\\\";\\\\n\\\\n/// @title CMCAsset\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains logic to safely transfer channel assets (even if they are\\\\n///         noncompliant). During adjudication, balances from defunding the\\\\n///         channel or defunding transfers are registered as withdrawable. Once\\\\n///         they are registered, the owner (or a watchtower on behalf of the\\\\n///         owner), may call `exit` to reclaim funds from the multisig.\\\\n\\\\ncontract CMCAsset is CMCCore, ICMCAsset {\\\\n    using SafeMath for uint256;\\\\n    using LibMath for uint256;\\\\n\\\\n    mapping(address => uint256) internal totalTransferred;\\\\n    mapping(address => mapping(address => uint256))\\\\n        private exitableAmount;\\\\n\\\\n    function registerTransfer(address assetId, uint256 amount) internal {\\\\n        totalTransferred[assetId] += amount;\\\\n    }\\\\n\\\\n    function getTotalTransferred(address assetId)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (uint256)\\\\n    {\\\\n        return totalTransferred[assetId];\\\\n    }\\\\n\\\\n    function makeExitable(\\\\n        address assetId,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal {\\\\n        exitableAmount[assetId][\\\\n            recipient\\\\n        ] = exitableAmount[assetId][recipient].satAdd(amount);\\\\n    }\\\\n\\\\n    function makeBalanceExitable(\\\\n        address assetId,\\\\n        Balance memory balance\\\\n    ) internal {\\\\n        for (uint256 i = 0; i < 2; i++) {\\\\n            uint256 amount = balance.amount[i];\\\\n            if (amount > 0) {\\\\n                makeExitable(assetId, balance.to[i], amount);\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n    function getExitableAmount(address assetId, address owner)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (uint256)\\\\n    {\\\\n        return exitableAmount[assetId][owner];\\\\n    }\\\\n\\\\n    function getAvailableAmount(address assetId, uint256 maxAmount)\\\\n        internal\\\\n        view\\\\n        returns (uint256)\\\\n    {\\\\n        // Taking the min protects against the case where the multisig\\\\n        // holds less than the amount that is trying to be withdrawn\\\\n        // while still allowing the total of the funds to be removed\\\\n        // without the transaction reverting.\\\\n        return Math.min(maxAmount, LibAsset.getOwnBalance(assetId));\\\\n    }\\\\n\\\\n    function transferAsset(\\\\n        address assetId,\\\\n        address payable recipient,\\\\n        uint256 amount\\\\n    ) internal {\\\\n        registerTransfer(assetId, amount);\\\\n        require(\\\\n            LibAsset.unregisteredTransfer(assetId, recipient, amount),\\\\n            \\\\\\"CMCAsset: TRANSFER_FAILED\\\\\\"\\\\n        );\\\\n    }\\\\n\\\\n    function exit(\\\\n        address assetId,\\\\n        address owner,\\\\n        address payable recipient\\\\n    ) external override onlyViaProxy nonReentrant {\\\\n        // Either the owner must be the recipient, or in control\\\\n        // of setting the recipient of the funds to whomever they\\\\n        // choose\\\\n        require(\\\\n            msg.sender == owner || owner == recipient,\\\\n            \\\\\\"CMCAsset: OWNER_MISMATCH\\\\\\"\\\\n        );\\\\n\\\\n        uint256 amount =\\\\n            getAvailableAmount(\\\\n                assetId,\\\\n                exitableAmount[assetId][owner]\\\\n            );\\\\n\\\\n        // Revert if amount is 0\\\\n        require(amount > 0, \\\\\\"CMCAsset: NO_OP\\\\\\");\\\\n\\\\n        // Reduce the amount claimable from the multisig by the owner\\\\n        exitableAmount[assetId][\\\\n            owner\\\\n        ] = exitableAmount[assetId][owner].sub(amount);\\\\n\\\\n        // Perform transfer\\\\n        transferAsset(assetId, recipient, amount);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x39c1bd81d8ec2a0fa7c23aad683017f5e2ec28a2db43643020649f935b5b74bf\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/CMCCore.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/ICMCCore.sol\\\\\\";\\\\nimport \\\\\\"./ReentrancyGuard.sol\\\\\\";\\\\n\\\\n/// @title CMCCore\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains logic pertaining to the participants of a channel,\\\\n///         including setting and retrieving the participants and the\\\\n///         mastercopy.\\\\n\\\\ncontract CMCCore is ReentrancyGuard, ICMCCore {\\\\n    address private immutable mastercopyAddress;\\\\n\\\\n    address internal alice;\\\\n    address internal bob;\\\\n\\\\n    /// @notice Set invalid participants to block the mastercopy from being used directly\\\\n    ///         Nonzero address also prevents the mastercopy from being setup\\\\n    ///         Only setting alice is sufficient, setting bob too wouldn\'t change anything\\\\n    constructor() {\\\\n        mastercopyAddress = address(this);\\\\n    }\\\\n\\\\n    // Prevents us from calling methods directly from the mastercopy contract\\\\n    modifier onlyViaProxy {\\\\n        require(\\\\n            address(this) != mastercopyAddress,\\\\n            \\\\\\"Mastercopy: ONLY_VIA_PROXY\\\\\\"\\\\n        );\\\\n        _;\\\\n    }\\\\n\\\\n    /// @notice Contract constructor for Proxied copies\\\\n    /// @param _alice: Address representing user with function deposit\\\\n    /// @param _bob: Address representing user with multisig deposit\\\\n    function setup(address _alice, address _bob)\\\\n        external\\\\n        override\\\\n        onlyViaProxy\\\\n    {\\\\n        require(alice == address(0), \\\\\\"CMCCore: ALREADY_SETUP\\\\\\");\\\\n        require(\\\\n            _alice != address(0) && _bob != address(0),\\\\n            \\\\\\"CMCCore: INVALID_PARTICIPANT\\\\\\"\\\\n        );\\\\n        require(_alice != _bob, \\\\\\"CMCCore: IDENTICAL_PARTICIPANTS\\\\\\");\\\\n        ReentrancyGuard.setup();\\\\n        alice = _alice;\\\\n        bob = _bob;\\\\n    }\\\\n\\\\n    /// @notice A getter function for the bob of the multisig\\\\n    /// @return Bob\'s signer address\\\\n    function getAlice()\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (address)\\\\n    {\\\\n        return alice;\\\\n    }\\\\n\\\\n    /// @notice A getter function for the bob of the multisig\\\\n    /// @return Alice\'s signer address\\\\n    function getBob()\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (address)\\\\n    {\\\\n        return bob;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x37324d80a19f1feb6e413fe6a41d82b5dba38bca62e0e05ae6f420000dd93c53\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/CMCDeposit.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/ICMCDeposit.sol\\\\\\";\\\\nimport \\\\\\"./CMCCore.sol\\\\\\";\\\\nimport \\\\\\"./CMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibAsset.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibERC20.sol\\\\\\";\\\\n\\\\n/// @title CMCDeposit\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains logic supporting channel multisig deposits. Channel\\\\n///         funding is asymmetric, with `alice` having to call a deposit\\\\n///         function which tracks the total amount she has deposited so far,\\\\n///         and any other funds in the multisig being attributed to `bob`.\\\\n\\\\ncontract CMCDeposit is CMCCore, CMCAsset, ICMCDeposit {\\\\n    mapping(address => uint256) private depositsAlice;\\\\n\\\\n    receive() external payable onlyViaProxy nonReentrant {}\\\\n\\\\n    function getTotalDepositsAlice(address assetId)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (uint256)\\\\n    {\\\\n        return _getTotalDepositsAlice(assetId);\\\\n    }\\\\n\\\\n    function _getTotalDepositsAlice(address assetId)\\\\n        internal\\\\n        view\\\\n        returns (uint256)\\\\n    {\\\\n        return depositsAlice[assetId];\\\\n    }\\\\n\\\\n    function getTotalDepositsBob(address assetId)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (uint256)\\\\n    {\\\\n        return _getTotalDepositsBob(assetId);\\\\n    }\\\\n\\\\n    // Calculated using invariant onchain properties. Note we DONT use safemath here\\\\n    function _getTotalDepositsBob(address assetId)\\\\n        internal\\\\n        view\\\\n        returns (uint256)\\\\n    {\\\\n        return\\\\n            LibAsset.getOwnBalance(assetId) +\\\\n            totalTransferred[assetId] -\\\\n            depositsAlice[assetId];\\\\n    }\\\\n\\\\n    function depositAlice(address assetId, uint256 amount)\\\\n        external\\\\n        payable\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrant\\\\n    {\\\\n        if (LibAsset.isEther(assetId)) {\\\\n            require(msg.value == amount, \\\\\\"CMCDeposit: VALUE_MISMATCH\\\\\\");\\\\n        } else {\\\\n            // If ETH is sent along, it will be attributed to bob\\\\n            require(msg.value == 0, \\\\\\"CMCDeposit: ETH_WITH_ERC_TRANSFER\\\\\\");\\\\n            require(\\\\n                LibERC20.transferFrom(\\\\n                    assetId,\\\\n                    msg.sender,\\\\n                    address(this),\\\\n                    amount\\\\n                ),\\\\n                \\\\\\"CMCDeposit: ERC20_TRANSFER_FAILED\\\\\\"\\\\n            );\\\\n        }\\\\n        // NOTE: explicitly do NOT use safemath here\\\\n        depositsAlice[assetId] += amount;\\\\n        emit AliceDeposited(assetId, amount);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x4d3dd828158289df93d6b5a6419bc5e8d95888aba81e62cd913af1e4c540bece\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/CMCWithdraw.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/Commitment.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/ICMCWithdraw.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/WithdrawHelper.sol\\\\\\";\\\\nimport \\\\\\"./CMCCore.sol\\\\\\";\\\\nimport \\\\\\"./CMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibAsset.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibChannelCrypto.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibUtils.sol\\\\\\";\\\\n\\\\n/// @title CMCWithdraw\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains logic for all cooperative channel multisig withdrawals.\\\\n///         Cooperative withdrawal commitments must be signed by both channel\\\\n///         participants. As part of the channel withdrawals, an arbitrary\\\\n///         call can be made, which is extracted from the withdraw data.\\\\n\\\\ncontract CMCWithdraw is CMCCore, CMCAsset, ICMCWithdraw {\\\\n    using LibChannelCrypto for bytes32;\\\\n\\\\n    mapping(bytes32 => bool) private isExecuted;\\\\n\\\\n    modifier validateWithdrawData(WithdrawData calldata wd) {\\\\n        require(\\\\n            wd.channelAddress == address(this),\\\\n            \\\\\\"CMCWithdraw: CHANNEL_MISMATCH\\\\\\"\\\\n        );\\\\n        _;\\\\n    }\\\\n\\\\n    function getWithdrawalTransactionRecord(WithdrawData calldata wd)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (bool)\\\\n    {\\\\n        return isExecuted[hashWithdrawData(wd)];\\\\n    }\\\\n\\\\n    /// @param wd The withdraw data consisting of\\\\n    /// semantic withdraw information, i.e. assetId, recipient, and amount;\\\\n    /// information to make an optional call in addition to the actual transfer,\\\\n    /// i.e. target address for the call and call payload;\\\\n    /// additional information, i.e. channel address and nonce.\\\\n    /// @param aliceSignature Signature of owner a\\\\n    /// @param bobSignature Signature of owner b\\\\n    function withdraw(\\\\n        WithdrawData calldata wd,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) external override onlyViaProxy nonReentrant validateWithdrawData(wd) {\\\\n        // Generate hash\\\\n        bytes32 wdHash = hashWithdrawData(wd);\\\\n\\\\n        // Verify Alice\'s and Bob\'s signature on the withdraw data\\\\n        verifySignaturesOnWithdrawDataHash(wdHash, aliceSignature, bobSignature);\\\\n\\\\n        // Replay protection\\\\n        require(!isExecuted[wdHash], \\\\\\"CMCWithdraw: ALREADY_EXECUTED\\\\\\");\\\\n        isExecuted[wdHash] = true;\\\\n\\\\n        // Determine actually transferable amount\\\\n        uint256 actualAmount = getAvailableAmount(wd.assetId, wd.amount);\\\\n\\\\n        // Revert if actualAmount is zero && callTo is 0\\\\n        require(\\\\n            actualAmount > 0 || wd.callTo != address(0),\\\\n            \\\\\\"CMCWithdraw: NO_OP\\\\\\"\\\\n        );\\\\n\\\\n        // Register and execute the transfer\\\\n        transferAsset(wd.assetId, wd.recipient, actualAmount);\\\\n\\\\n        // Do we have to make a call in addition to the actual transfer?\\\\n        if (wd.callTo != address(0)) {\\\\n            WithdrawHelper(wd.callTo).execute(wd, actualAmount);\\\\n        }\\\\n    }\\\\n\\\\n    function verifySignaturesOnWithdrawDataHash(\\\\n        bytes32 wdHash,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) internal view {\\\\n        bytes32 commitment =\\\\n            keccak256(abi.encode(CommitmentType.WithdrawData, wdHash));\\\\n        require(\\\\n            commitment.checkSignature(aliceSignature, alice),\\\\n            \\\\\\"CMCWithdraw: INVALID_ALICE_SIG\\\\\\"\\\\n        );\\\\n        require(\\\\n            commitment.checkSignature(bobSignature, bob),\\\\n            \\\\\\"CMCWithdraw: INVALID_BOB_SIG\\\\\\"\\\\n        );\\\\n    }\\\\n\\\\n    function hashWithdrawData(WithdrawData calldata wd)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        return keccak256(abi.encode(wd));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x7fde93a55cab8b4a9497471af1f8321a6d9463a93c3c6b11cf6d5ada26326beb\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/ChannelMastercopy.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/IVectorChannel.sol\\\\\\";\\\\nimport \\\\\\"./CMCCore.sol\\\\\\";\\\\nimport \\\\\\"./CMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./CMCDeposit.sol\\\\\\";\\\\nimport \\\\\\"./CMCWithdraw.sol\\\\\\";\\\\nimport \\\\\\"./CMCAdjudicator.sol\\\\\\";\\\\n\\\\n/// @title ChannelMastercopy\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains the logic used by all Vector multisigs. A proxy to this\\\\n///         contract is deployed per-channel using the ChannelFactory.sol.\\\\n///         Supports channel adjudication logic, deposit logic, and arbitrary\\\\n///         calls when a commitment is double-signed.\\\\ncontract ChannelMastercopy is\\\\n    CMCCore,\\\\n    CMCAsset,\\\\n    CMCDeposit,\\\\n    CMCWithdraw,\\\\n    CMCAdjudicator,\\\\n    IVectorChannel\\\\n{\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x96d68c908eb39a0002b574c423306ef1b9991da56087cb8f5e2d8b908676b3c7\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/ReentrancyGuard.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\n/// @title CMCWithdraw\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice A \\\\\\"mutex\\\\\\" reentrancy guard, heavily influenced by OpenZeppelin.\\\\n\\\\ncontract ReentrancyGuard {\\\\n    uint256 private constant OPEN = 1;\\\\n    uint256 private constant LOCKED = 2;\\\\n\\\\n    uint256 public lock;\\\\n\\\\n    function setup() internal {\\\\n        lock = OPEN;\\\\n    }\\\\n\\\\n    modifier nonReentrant() {\\\\n        require(lock == OPEN, \\\\\\"ReentrancyGuard: REENTRANT_CALL\\\\\\");\\\\n        lock = LOCKED;\\\\n        _;\\\\n        lock = OPEN;\\\\n    }\\\\n\\\\n    modifier nonReentrantView() {\\\\n        require(lock == OPEN, \\\\\\"ReentrancyGuard: REENTRANT_CALL\\\\\\");\\\\n        _;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf7adf3f05703e0176d892051633e6ca3291e5a3d7ab769f880c03a0d0849dfa7\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/Commitment.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nenum CommitmentType {ChannelState, WithdrawData}\\\\n\\",\\"keccak256\\":\\"0xabfb62d2dbe45e307fc08742f87d2ff5d6faa9ab065f0c2395dc4adcbe0a9c20\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCAdjudicator.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./Types.sol\\\\\\";\\\\n\\\\ninterface ICMCAdjudicator {\\\\n    struct CoreChannelState {\\\\n        address channelAddress;\\\\n        address alice;\\\\n        address bob;\\\\n        address[] assetIds;\\\\n        Balance[] balances;\\\\n        uint256[] processedDepositsA;\\\\n        uint256[] processedDepositsB;\\\\n        uint256[] defundNonces;\\\\n        uint256 timeout;\\\\n        uint256 nonce;\\\\n        bytes32 merkleRoot;\\\\n    }\\\\n\\\\n    struct CoreTransferState {\\\\n        address channelAddress;\\\\n        bytes32 transferId;\\\\n        address transferDefinition;\\\\n        address initiator;\\\\n        address responder;\\\\n        address assetId;\\\\n        Balance balance;\\\\n        uint256 transferTimeout;\\\\n        bytes32 initialStateHash;\\\\n    }\\\\n\\\\n    struct ChannelDispute {\\\\n        bytes32 channelStateHash;\\\\n        uint256 nonce;\\\\n        bytes32 merkleRoot;\\\\n        uint256 consensusExpiry;\\\\n        uint256 defundExpiry;\\\\n    }\\\\n\\\\n    struct TransferDispute {\\\\n        bytes32 transferStateHash;\\\\n        uint256 transferDisputeExpiry;\\\\n        bool isDefunded;\\\\n    }\\\\n\\\\n    event ChannelDisputed(\\\\n        address disputer,\\\\n        CoreChannelState state,\\\\n        ChannelDispute dispute\\\\n    );\\\\n\\\\n    event ChannelDefunded(\\\\n        address defunder,\\\\n        CoreChannelState state,\\\\n        ChannelDispute dispute,\\\\n        address[] assetIds\\\\n    );\\\\n\\\\n    event TransferDisputed(\\\\n        address disputer,\\\\n        CoreTransferState state,\\\\n        TransferDispute dispute\\\\n    );\\\\n\\\\n    event TransferDefunded(\\\\n        address defunder,\\\\n        CoreTransferState state,\\\\n        TransferDispute dispute,\\\\n        bytes encodedInitialState,\\\\n        bytes encodedResolver,\\\\n        Balance balance\\\\n    );\\\\n\\\\n    function getChannelDispute() external view returns (ChannelDispute memory);\\\\n\\\\n    function getDefundNonce(address assetId) external view returns (uint256);\\\\n\\\\n    function getTransferDispute(bytes32 transferId)\\\\n        external\\\\n        view\\\\n        returns (TransferDispute memory);\\\\n\\\\n    function disputeChannel(\\\\n        CoreChannelState calldata ccs,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) external;\\\\n\\\\n    function defundChannel(\\\\n        CoreChannelState calldata ccs,\\\\n        address[] calldata assetIds,\\\\n        uint256[] calldata indices\\\\n    ) external;\\\\n\\\\n    function disputeTransfer(\\\\n        CoreTransferState calldata cts,\\\\n        bytes32[] calldata merkleProofData\\\\n    ) external;\\\\n\\\\n    function defundTransfer(\\\\n        CoreTransferState calldata cts,\\\\n        bytes calldata encodedInitialTransferState,\\\\n        bytes calldata encodedTransferResolver,\\\\n        bytes calldata responderSignature\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x88522bb51c2b9991b24ef33a3c776ac76d96060ebbc33cd5b2b14513fb21d237\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCAsset.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface ICMCAsset {\\\\n    function getTotalTransferred(address assetId)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function getExitableAmount(address assetId, address owner)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function exit(\\\\n        address assetId,\\\\n        address owner,\\\\n        address payable recipient\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x895d89536e8ca469afe642b7001f0dfff497ce29d5d73f862b07a1cdc483f3f7\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCCore.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface ICMCCore {\\\\n    function setup(address _alice, address _bob) external;\\\\n\\\\n    function getAlice() external view returns (address);\\\\n\\\\n    function getBob() external view returns (address);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x8e8da2d8fb5198441ba6cdff018dff9e4145b07d575647c990659adad637ec8c\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCDeposit.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface ICMCDeposit {\\\\n    event AliceDeposited(address assetId, uint256 amount);\\\\n    \\\\n    function getTotalDepositsAlice(address assetId)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function getTotalDepositsBob(address assetId)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function depositAlice(address assetId, uint256 amount) external payable;\\\\n}\\\\n\\",\\"keccak256\\":\\"0xdf6f284e44d88013cf9d51220315fb37e63086e470442685891c90aadd138295\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCWithdraw.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nstruct WithdrawData {\\\\n    address channelAddress;\\\\n    address assetId;\\\\n    address payable recipient;\\\\n    uint256 amount;\\\\n    uint256 nonce;\\\\n    address callTo;\\\\n    bytes callData;\\\\n}\\\\n\\\\ninterface ICMCWithdraw {\\\\n    function getWithdrawalTransactionRecord(WithdrawData calldata wd)\\\\n        external\\\\n        view\\\\n        returns (bool);\\\\n\\\\n    function withdraw(\\\\n        WithdrawData calldata wd,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x097dfe95ad19096f9a3dd0138b4a51680c26e665d1639278a7c0a5c9f7fc5c78\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ITransferDefinition.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./ITransferRegistry.sol\\\\\\";\\\\nimport \\\\\\"./Types.sol\\\\\\";\\\\n\\\\ninterface ITransferDefinition {\\\\n    // Validates the initial state of the transfer.\\\\n    // Called by validator.ts during `create` updates.\\\\n    function create(bytes calldata encodedBalance, bytes calldata)\\\\n        external\\\\n        view\\\\n        returns (bool);\\\\n\\\\n    // Performs a state transition to resolve a transfer and returns final balances.\\\\n    // Called by validator.ts during `resolve` updates.\\\\n    function resolve(\\\\n        bytes calldata encodedBalance,\\\\n        bytes calldata,\\\\n        bytes calldata\\\\n    ) external view returns (Balance memory);\\\\n\\\\n    // Should also have the following properties:\\\\n    // string public constant override Name = \\\\\\"...\\\\\\";\\\\n    // string public constant override StateEncoding = \\\\\\"...\\\\\\";\\\\n    // string public constant override ResolverEncoding = \\\\\\"...\\\\\\";\\\\n    // These properties are included on the transfer specifically\\\\n    // to make it easier for implementers to add new transfers by\\\\n    // only include a `.sol` file\\\\n    function Name() external view returns (string memory);\\\\n\\\\n    function StateEncoding() external view returns (string memory);\\\\n\\\\n    function ResolverEncoding() external view returns (string memory);\\\\n\\\\n    function EncodedCancel() external view returns (bytes memory);\\\\n\\\\n    function getRegistryInformation()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd8eef575aa791b187397c9096e6cf40431b590d3999f0a80e38f3e59f4cf4764\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ITransferRegistry.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental \\\\\\"ABIEncoderV2\\\\\\";\\\\n\\\\nstruct RegisteredTransfer {\\\\n    string name;\\\\n    address definition;\\\\n    string stateEncoding;\\\\n    string resolverEncoding;\\\\n    bytes encodedCancel;\\\\n}\\\\n\\\\ninterface ITransferRegistry {\\\\n    event TransferAdded(RegisteredTransfer transfer);\\\\n\\\\n    event TransferRemoved(RegisteredTransfer transfer);\\\\n\\\\n    // Should add a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function addTransferDefinition(RegisteredTransfer memory transfer) external;\\\\n\\\\n    // Should remove a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function removeTransferDefinition(string memory name) external;\\\\n\\\\n    // Should return all transfer defintions in registry\\\\n    function getTransferDefinitions()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer[] memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd13be6d976c64e381a0d9df10c621cd964454b6916f25df4ea6c1b4cd873a58a\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/IVectorChannel.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./ICMCCore.sol\\\\\\";\\\\nimport \\\\\\"./ICMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./ICMCDeposit.sol\\\\\\";\\\\nimport \\\\\\"./ICMCWithdraw.sol\\\\\\";\\\\nimport \\\\\\"./ICMCAdjudicator.sol\\\\\\";\\\\n\\\\ninterface IVectorChannel is\\\\n    ICMCCore,\\\\n    ICMCAsset,\\\\n    ICMCDeposit,\\\\n    ICMCWithdraw,\\\\n    ICMCAdjudicator\\\\n{}\\\\n\\",\\"keccak256\\":\\"0x9e21e3b6510bb5aecab999bfcbefe6184bd2be5a80179ef8ecadb63ddd2c8d53\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/Types.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nstruct Balance {\\\\n    uint256[2] amount; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n    address payable[2] to; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf8c71b155b630cde965f5d1db5f0d2751a9763f5a797f15d946613e9224f1046\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/WithdrawHelper.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./ICMCWithdraw.sol\\\\\\";\\\\n\\\\ninterface WithdrawHelper {\\\\n    function execute(WithdrawData calldata wd, uint256 actualAmount) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x45bd70363bc7a45001589d55d8d068a3baa321c50382c0c73f1ffae45adfc4bb\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibAsset.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./LibERC20.sol\\\\\\";\\\\nimport \\\\\\"./LibUtils.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\\\\";\\\\n\\\\n\\\\n/// @title LibAsset\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This library contains helpers for dealing with onchain transfers\\\\n///         of in-channel assets. It is designed to safely handle all asset\\\\n///         transfers out of channel in the event of an onchain dispute. Also\\\\n///         safely handles ERC20 transfers that may be non-compliant\\\\nlibrary LibAsset {\\\\n    address constant ETHER_ASSETID = address(0);\\\\n\\\\n    function isEther(address assetId) internal pure returns (bool) {\\\\n        return assetId == ETHER_ASSETID;\\\\n    }\\\\n\\\\n    function getOwnBalance(address assetId) internal view returns (uint256) {\\\\n        return\\\\n            isEther(assetId)\\\\n                ? address(this).balance\\\\n                : IERC20(assetId).balanceOf(address(this));\\\\n    }\\\\n\\\\n    function transferEther(address payable recipient, uint256 amount)\\\\n        internal\\\\n        returns (bool)\\\\n    {\\\\n        (bool success, bytes memory returnData) =\\\\n            recipient.call{value: amount}(\\\\\\"\\\\\\");\\\\n        LibUtils.revertIfCallFailed(success, returnData);\\\\n        return true;\\\\n    }\\\\n\\\\n    function transferERC20(\\\\n        address assetId,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return LibERC20.transfer(assetId, recipient, amount);\\\\n    }\\\\n\\\\n    // This function is a wrapper for transfers of Ether or ERC20 tokens,\\\\n    // both standard-compliant ones as well as tokens that exhibit the\\\\n    // missing-return-value bug.\\\\n    // Although it behaves very much like Solidity\'s `transfer` function\\\\n    // or the ERC20 `transfer` and is, in fact, designed to replace direct\\\\n    // usage of those, it is deliberately named `unregisteredTransfer`,\\\\n    // because we need to register every transfer out of the channel.\\\\n    // Therefore, it should normally not be used directly, with the single\\\\n    // exception of the `transferAsset` function in `CMCAsset.sol`,\\\\n    // which combines the \\\\\\"naked\\\\\\" unregistered transfer given below\\\\n    // with a registration.\\\\n    // USING THIS FUNCTION SOMEWHERE ELSE IS PROBABLY WRONG!\\\\n    function unregisteredTransfer(\\\\n        address assetId,\\\\n        address payable recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            isEther(assetId)\\\\n                ? transferEther(recipient, amount)\\\\n                : transferERC20(assetId, recipient, amount);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x02e7b660846ad2f56f8005f786e0e2eb1d625c83f4cfcf9fc07a9566ca86195c\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibChannelCrypto.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\\\\\";\\\\n\\\\t\\\\t\\\\n/// @author Connext <support@connext.network>\\\\t\\\\t\\\\n/// @notice This library contains helpers for recovering signatures from a\\\\t\\\\t\\\\n///         Vector commitments. Channels do not allow for arbitrary signing of\\\\t\\\\t\\\\n///         messages to prevent misuse of private keys by injected providers,\\\\t\\\\t\\\\n///         and instead only sign messages with a Vector channel prefix.\\\\nlibrary LibChannelCrypto {\\\\n    function checkSignature(\\\\n        bytes32 hash,\\\\n        bytes memory signature,\\\\n        address allegedSigner\\\\n    ) internal pure returns (bool) {\\\\n        return recoverChannelMessageSigner(hash, signature) == allegedSigner;\\\\n    }\\\\n\\\\n    function recoverChannelMessageSigner(bytes32 hash, bytes memory signature)\\\\n        internal\\\\n        pure\\\\n        returns (address)\\\\n    {\\\\n        bytes32 digest = toChannelSignedMessage(hash);\\\\n        return ECDSA.recover(digest, signature);\\\\n    }\\\\n\\\\n    function toChannelSignedMessage(bytes32 hash)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        // 32 is the length in bytes of hash,\\\\n        // enforced by the type signature above\\\\n        return\\\\n            keccak256(abi.encodePacked(\\\\\\"\\\\\\\\x16Vector Signed Message:\\\\\\\\n32\\\\\\", hash));\\\\n    }\\\\n\\\\n    function checkUtilitySignature(\\\\n        bytes32 hash,\\\\n        bytes memory signature,\\\\n        address allegedSigner\\\\n    ) internal pure returns (bool) {\\\\n        return recoverChannelMessageSigner(hash, signature) == allegedSigner;\\\\n    }\\\\n\\\\n    function recoverUtilityMessageSigner(bytes32 hash, bytes memory signature)\\\\n        internal\\\\n        pure\\\\n        returns (address)\\\\n    {\\\\n        bytes32 digest = toUtilitySignedMessage(hash);\\\\n        return ECDSA.recover(digest, signature);\\\\n    }\\\\n\\\\n    function toUtilitySignedMessage(bytes32 hash)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        // 32 is the length in bytes of hash,\\\\n        // enforced by the type signature above\\\\n        return\\\\n            keccak256(abi.encodePacked(\\\\\\"\\\\\\\\x17Utility Signed Message:\\\\\\\\n32\\\\\\", hash));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xb8aa3679b75f2a1a5785f614f5dff9a76a689c18caa56a8df1f4e3c3167d6ece\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./LibUtils.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Address.sol\\\\\\";\\\\n\\\\n/// @title LibERC20\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This library provides several functions to safely handle\\\\n///         noncompliant tokens (i.e. does not return a boolean from\\\\n///         the transfer function)\\\\n\\\\nlibrary LibERC20 {\\\\n    function wrapCall(address assetId, bytes memory callData)\\\\n        internal\\\\n        returns (bool)\\\\n    {\\\\n        require(Address.isContract(assetId), \\\\\\"LibERC20: NO_CODE\\\\\\");\\\\n        (bool success, bytes memory returnData) = assetId.call(callData);\\\\n        LibUtils.revertIfCallFailed(success, returnData);\\\\n        return returnData.length == 0 || abi.decode(returnData, (bool));\\\\n    }\\\\n\\\\n    function approve(\\\\n        address assetId,\\\\n        address spender,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            wrapCall(\\\\n                assetId,\\\\n                abi.encodeWithSignature(\\\\n                    \\\\\\"approve(address,uint256)\\\\\\",\\\\n                    spender,\\\\n                    amount\\\\n                )\\\\n            );\\\\n    }\\\\n\\\\n    function transferFrom(\\\\n        address assetId,\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            wrapCall(\\\\n                assetId,\\\\n                abi.encodeWithSignature(\\\\n                    \\\\\\"transferFrom(address,address,uint256)\\\\\\",\\\\n                    sender,\\\\n                    recipient,\\\\n                    amount\\\\n                )\\\\n            );\\\\n    }\\\\n\\\\n    function transfer(\\\\n        address assetId,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            wrapCall(\\\\n                assetId,\\\\n                abi.encodeWithSignature(\\\\n                    \\\\\\"transfer(address,uint256)\\\\\\",\\\\n                    recipient,\\\\n                    amount\\\\n                )\\\\n            );\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x5bad1474c93a295939c23f976786f0d086abc063f19ff9c8c1d069759c4a7ff5\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibMath.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\n/// @title LibMath\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This library allows functions that would otherwise overflow and\\\\n///         revert if SafeMath was used to instead return the UINT_MAX. In the\\\\n///         adjudicator, this is used to ensure you can get the majority of\\\\n///         funds out in the event your balance > UINT_MAX and there is an\\\\n///         onchain dispute.\\\\nlibrary LibMath {\\\\n    /// @dev Returns the maximum uint256 for an addition that would overflow\\\\n    ///      (saturation arithmetic)\\\\n    function satAdd(uint256 x, uint256 y) internal pure returns (uint256) {\\\\n        uint256 sum = x + y;\\\\n        return sum >= x ? sum : type(uint256).max;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x1e6307538bfdb12a0f5234db5b9b22365b6abe2b96baa37f2e4b5d2d3f6683b8\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibUtils.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\n/// @title LibUtils\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains a helper to revert if a call was not successfully\\\\n///         made\\\\nlibrary LibUtils {\\\\n    // If success is false, reverts and passes on the revert string.\\\\n    function revertIfCallFailed(bool success, bytes memory returnData)\\\\n        internal\\\\n        pure\\\\n    {\\\\n        if (!success) {\\\\n            assembly {\\\\n                revert(add(returnData, 0x20), mload(returnData))\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf31897ed92b88739ca9c6e74d089e01c5dbf432183d2ab0b959b539842374ccd\\",\\"license\\":\\"UNLICENSED\\"}},\\"version\\":1}","bytecode":"","deployedBytecode":"","devdoc":{"author":"Connext <support@connext.network>","kind":"dev","methods":{"getAlice()":{"returns":{"_0":"Bob\'s signer address"}},"getBob()":{"returns":{"_0":"Alice\'s signer address"}},"setup(address,address)":{"params":{"_alice":": Address representing user with function deposit","_bob":": Address representing user with multisig deposit"}},"withdraw((address,address,address,uint256,uint256,address,bytes),bytes,bytes)":{"params":{"aliceSignature":"Signature of owner a","bobSignature":"Signature of owner b","wd":"The withdraw data consisting of semantic withdraw information, i.e. assetId, recipient, and amount; information to make an optional call in addition to the actual transfer, i.e. target address for the call and call payload; additional information, i.e. channel address and nonce."}}},"title":"ChannelMastercopy","version":1},"userdoc":{"kind":"user","methods":{"getAlice()":{"notice":"A getter function for the bob of the multisig"},"getBob()":{"notice":"A getter function for the bob of the multisig"},"setup(address,address)":{"notice":"Contract constructor for Proxied copies"}},"notice":"Contains the logic used by all Vector multisigs. A proxy to this         contract is deployed per-channel using the ChannelFactory.sol.         Supports channel adjudication logic, deposit logic, and arbitrary         calls when a commitment is double-signed.","version":1},"storageLayout":{"storage":[{"astId":3403,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"lock","offset":0,"slot":"0","type":"t_uint256"},{"astId":2597,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"alice","offset":0,"slot":"1","type":"t_address"},{"astId":2599,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"bob","offset":0,"slot":"2","type":"t_address"},{"astId":2348,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"totalTransferred","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":2354,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"exitableAmount","offset":0,"slot":"4","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":2732,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"depositsAlice","offset":0,"slot":"5","type":"t_mapping(t_address,t_uint256)"},{"astId":2895,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"isExecuted","offset":0,"slot":"6","type":"t_mapping(t_bytes32,t_bool)"},{"astId":1503,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"channelDispute","offset":0,"slot":"7","type":"t_struct(ChannelDispute)3596_storage"},{"astId":1507,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"defundNonces","offset":0,"slot":"12","type":"t_mapping(t_address,t_uint256)"},{"astId":1511,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"transferDisputes","offset":0,"slot":"13","type":"t_mapping(t_bytes32,t_struct(TransferDispute)3603_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_bool)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(TransferDispute)3603_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct ICMCAdjudicator.TransferDispute)","numberOfBytes":"32","value":"t_struct(TransferDispute)3603_storage"},"t_struct(ChannelDispute)3596_storage":{"encoding":"inplace","label":"struct ICMCAdjudicator.ChannelDispute","members":[{"astId":3587,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"channelStateHash","offset":0,"slot":"0","type":"t_bytes32"},{"astId":3589,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"nonce","offset":0,"slot":"1","type":"t_uint256"},{"astId":3591,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"merkleRoot","offset":0,"slot":"2","type":"t_bytes32"},{"astId":3593,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"consensusExpiry","offset":0,"slot":"3","type":"t_uint256"},{"astId":3595,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"defundExpiry","offset":0,"slot":"4","type":"t_uint256"}],"numberOfBytes":"160"},"t_struct(TransferDispute)3603_storage":{"encoding":"inplace","label":"struct ICMCAdjudicator.TransferDispute","members":[{"astId":3598,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"transferStateHash","offset":0,"slot":"0","type":"t_bytes32"},{"astId":3600,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"transferDisputeExpiry","offset":0,"slot":"1","type":"t_uint256"},{"astId":3602,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"isDefunded","offset":0,"slot":"2","type":"t_bool"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}}}')},2826:function(e){e.exports=JSON.parse('{"address":"0xBea1D42A4C0138A484C432BBBa296Ff320D5700B","abi":[{"inputs":[],"name":"EncodedCancel","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"Name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ResolverEncoding","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"StateEncoding","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"encodedBalance","type":"bytes"},{"internalType":"bytes","name":"encodedState","type":"bytes"}],"name":"create","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRegistryInformation","outputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"address","name":"definition","type":"address"},{"internalType":"string","name":"stateEncoding","type":"string"},{"internalType":"string","name":"resolverEncoding","type":"string"},{"internalType":"bytes","name":"encodedCancel","type":"bytes"}],"internalType":"struct RegisteredTransfer","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"encodedBalance","type":"bytes"},{"internalType":"bytes","name":"encodedState","type":"bytes"},{"internalType":"bytes","name":"encodedResolver","type":"bytes"}],"name":"resolve","outputs":[{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance","name":"","type":"tuple"}],"stateMutability":"view","type":"function"}],"transactionHash":"0x5603b9bb87d5af244ac9316020bdc02385e5dc5b78da98b87269992ddc1a1f1c","receipt":{"to":null,"from":"0x627306090abaB3A6e1400e9345bC60c78a8BEf57","contractAddress":"0xBea1D42A4C0138A484C432BBBa296Ff320D5700B","transactionIndex":0,"gasUsed":"795245","logsBloom":"0xblockHash":"0x4d79f807fa1d4e9481e723fc44066e1f50c68e3fe90026c9d907c8c35ff20f5a","transactionHash":"0x5603b9bb87d5af244ac9316020bdc02385e5dc5b78da98b87269992ddc1a1f1c","logs":[{"transactionIndex":0,"blockNumber":8439283,"transactionHash":"0x5603b9bb87d5af244ac9316020bdc02385e5dc5b78da98b87269992ddc1a1f1c","address":"0x0000000000000000000000000000000000001010","topics":["0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63","0x0000000000000000000000000000000000000000000000000000000000001010","0x000000000000000000000000627306090abab3a6e1400e9345bc60c78a8bef57","0x000000000000000000000000928ed6a3e94437bbd316ccad78479f1d163a6a8c"],"data":"0x0000000000000000000000000000000000000000000000000002d34567bc020000000000000000000000000000000000000000000000000001c734d54560d070000000000000000000000000000000000000000000000020891db3adf9c86b2100000000000000000000000000000000000000000000000001c4618fdda4ce70000000000000000000000000000000000000000000000020892086f361846d21","logIndex":0,"blockHash":"0x4d79f807fa1d4e9481e723fc44066e1f50c68e3fe90026c9d907c8c35ff20f5a"}],"blockNumber":8439283,"cumulativeGasUsed":"795245","status":1,"byzantium":true},"args":[],"solcInputHash":"89c55d5a88f10637860a9ea31a1daad3","metadata":"{\\"compiler\\":{\\"version\\":\\"0.7.1+commit.f4a555be\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[],\\"name\\":\\"EncodedCancel\\",\\"outputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"\\",\\"type\\":\\"bytes\\"}],\\"stateMutability\\":\\"pure\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"Name\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"ResolverEncoding\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"StateEncoding\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedBalance\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedState\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"create\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getRegistryInformation\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"definition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"stateEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"resolverEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedCancel\\",\\"type\\":\\"bytes\\"}],\\"internalType\\":\\"struct RegisteredTransfer\\",\\"name\\":\\"\\",\\"type\\":\\"tuple\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedBalance\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedState\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedResolver\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"resolve\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"\\",\\"type\\":\\"tuple\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"author\\":\\"Connext <support@connext.network>\\",\\"kind\\":\\"dev\\",\\"methods\\":{},\\"title\\":\\"HashlockTransfer\\",\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"notice\\":\\"This contract allows users to claim a payment locked in         the application if they provide the correct preImage. The payment is         reverted if not unlocked by the timelock if one is provided.\\",\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"src.sol/transferDefinitions/HashlockTransfer.sol\\":\\"HashlockTransfer\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"src.sol/interfaces/ITransferDefinition.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./ITransferRegistry.sol\\\\\\";\\\\nimport \\\\\\"./Types.sol\\\\\\";\\\\n\\\\ninterface ITransferDefinition {\\\\n    // Validates the initial state of the transfer.\\\\n    // Called by validator.ts during `create` updates.\\\\n    function create(bytes calldata encodedBalance, bytes calldata)\\\\n        external\\\\n        view\\\\n        returns (bool);\\\\n\\\\n    // Performs a state transition to resolve a transfer and returns final balances.\\\\n    // Called by validator.ts during `resolve` updates.\\\\n    function resolve(\\\\n        bytes calldata encodedBalance,\\\\n        bytes calldata,\\\\n        bytes calldata\\\\n    ) external view returns (Balance memory);\\\\n\\\\n    // Should also have the following properties:\\\\n    // string public constant override Name = \\\\\\"...\\\\\\";\\\\n    // string public constant override StateEncoding = \\\\\\"...\\\\\\";\\\\n    // string public constant override ResolverEncoding = \\\\\\"...\\\\\\";\\\\n    // These properties are included on the transfer specifically\\\\n    // to make it easier for implementers to add new transfers by\\\\n    // only include a `.sol` file\\\\n    function Name() external view returns (string memory);\\\\n\\\\n    function StateEncoding() external view returns (string memory);\\\\n\\\\n    function ResolverEncoding() external view returns (string memory);\\\\n\\\\n    function EncodedCancel() external view returns (bytes memory);\\\\n\\\\n    function getRegistryInformation()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd8eef575aa791b187397c9096e6cf40431b590d3999f0a80e38f3e59f4cf4764\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ITransferRegistry.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental \\\\\\"ABIEncoderV2\\\\\\";\\\\n\\\\nstruct RegisteredTransfer {\\\\n    string name;\\\\n    address definition;\\\\n    string stateEncoding;\\\\n    string resolverEncoding;\\\\n    bytes encodedCancel;\\\\n}\\\\n\\\\ninterface ITransferRegistry {\\\\n    event TransferAdded(RegisteredTransfer transfer);\\\\n\\\\n    event TransferRemoved(RegisteredTransfer transfer);\\\\n\\\\n    // Should add a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function addTransferDefinition(RegisteredTransfer memory transfer) external;\\\\n\\\\n    // Should remove a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function removeTransferDefinition(string memory name) external;\\\\n\\\\n    // Should return all transfer defintions in registry\\\\n    function getTransferDefinitions()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer[] memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd13be6d976c64e381a0d9df10c621cd964454b6916f25df4ea6c1b4cd873a58a\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/Types.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nstruct Balance {\\\\n    uint256[2] amount; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n    address payable[2] to; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf8c71b155b630cde965f5d1db5f0d2751a9763f5a797f15d946613e9224f1046\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/transferDefinitions/HashlockTransfer.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./TransferDefinition.sol\\\\\\";\\\\n\\\\n/// @title HashlockTransfer\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This contract allows users to claim a payment locked in\\\\n///         the application if they provide the correct preImage. The payment is\\\\n///         reverted if not unlocked by the timelock if one is provided.\\\\n\\\\ncontract HashlockTransfer is TransferDefinition {\\\\n    struct TransferState {\\\\n        bytes32 lockHash;\\\\n        uint256 expiry; // If 0, then no timelock is enforced\\\\n    }\\\\n\\\\n    struct TransferResolver {\\\\n        bytes32 preImage;\\\\n    }\\\\n\\\\n    // Provide registry information\\\\n    string public constant override Name = \\\\\\"HashlockTransfer\\\\\\";\\\\n    string public constant override StateEncoding =\\\\n        \\\\\\"tuple(bytes32 lockHash, uint256 expiry)\\\\\\";\\\\n    string public constant override ResolverEncoding =\\\\n        \\\\\\"tuple(bytes32 preImage)\\\\\\";\\\\n\\\\n    function EncodedCancel() external pure override returns(bytes memory) {\\\\n      TransferResolver memory resolver;\\\\n      resolver.preImage = bytes32(0);\\\\n      return abi.encode(resolver);\\\\n    } \\\\n\\\\n    function create(bytes calldata encodedBalance, bytes calldata encodedState)\\\\n        external\\\\n        view\\\\n        override\\\\n        returns (bool)\\\\n    {\\\\n        // Decode parameters\\\\n        TransferState memory state = abi.decode(encodedState, (TransferState));\\\\n        Balance memory balance = abi.decode(encodedBalance, (Balance));\\\\n\\\\n        require(\\\\n            balance.amount[0] > 0,\\\\n            \\\\\\"HashlockTransfer: ZER0_SENDER_BALANCE\\\\\\"\\\\n        );\\\\n\\\\n        require(\\\\n            balance.amount[1] == 0,\\\\n            \\\\\\"HashlockTransfer: NONZERO_RECIPIENT_BALANCE\\\\\\"\\\\n        );\\\\n        require(\\\\n            state.lockHash != bytes32(0),\\\\n            \\\\\\"HashlockTransfer: EMPTY_LOCKHASH\\\\\\"\\\\n        );\\\\n        require(\\\\n            state.expiry == 0 || state.expiry > block.timestamp,\\\\n            \\\\\\"HashlockTransfer: EXPIRED_TIMELOCK\\\\\\"\\\\n        );\\\\n\\\\n        // Valid transfer state\\\\n        return true;\\\\n    }\\\\n\\\\n    function resolve(\\\\n        bytes calldata encodedBalance,\\\\n        bytes calldata encodedState,\\\\n        bytes calldata encodedResolver\\\\n    ) external view override returns (Balance memory) {\\\\n        TransferState memory state = abi.decode(encodedState, (TransferState));\\\\n        TransferResolver memory resolver =\\\\n            abi.decode(encodedResolver, (TransferResolver));\\\\n        Balance memory balance = abi.decode(encodedBalance, (Balance));\\\\n\\\\n        // If you pass in bytes32(0), payment is canceled\\\\n        // If timelock is nonzero and has expired, payment must be canceled\\\\n        // otherwise resolve will revert\\\\n        if (resolver.preImage != bytes32(0)) {\\\\n            // Payment must not be expired\\\\n            require(state.expiry == 0 || state.expiry > block.timestamp, \\\\\\"HashlockTransfer: PAYMENT_EXPIRED\\\\\\");\\\\n\\\\n            // Check hash for normal payment unlock\\\\n            bytes32 generatedHash = sha256(abi.encode(resolver.preImage));\\\\n            require(\\\\n                state.lockHash == generatedHash,\\\\n                \\\\\\"HashlockTransfer: INVALID_PREIMAGE\\\\\\"\\\\n            );\\\\n\\\\n            // Update state\\\\n            balance.amount[1] = balance.amount[0];\\\\n            balance.amount[0] = 0;\\\\n        }\\\\n        // To cancel, the preImage must be empty (not simply incorrect)\\\\n        // There are no additional state mutations, and the preImage is\\\\n        // asserted by the `if` statement\\\\n\\\\n        return balance;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x0c403a415e87408f8f7be80d9ec3e4415189d5e85fb58e9ddef5730e4a2ae98e\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/transferDefinitions/TransferDefinition.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"../interfaces/ITransferDefinition.sol\\\\\\";\\\\nimport \\\\\\"../interfaces/ITransferRegistry.sol\\\\\\";\\\\n\\\\n/// @title TransferDefinition\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This contract helps reduce boilerplate needed when creating\\\\n///         new transfer definitions by providing an implementation of\\\\n///         the required getter\\\\n\\\\nabstract contract TransferDefinition is ITransferDefinition {\\\\n    function getRegistryInformation()\\\\n        external\\\\n        view\\\\n        override\\\\n        returns (RegisteredTransfer memory)\\\\n    {\\\\n        return\\\\n            RegisteredTransfer({\\\\n                name: this.Name(),\\\\n                stateEncoding: this.StateEncoding(),\\\\n                resolverEncoding: this.ResolverEncoding(),\\\\n                definition: address(this),\\\\n                encodedCancel: this.EncodedCancel()\\\\n            });\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xdb8bcb3fadd5c514bc6585b0a48d66952570bbb1a62f18b9dc9a4f693dc11c5e\\",\\"license\\":\\"UNLICENSED\\"}},\\"version\\":1}","bytecode":"0x608060405234801561001057600080fd5b50610d6c806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638052474d1161005b5780638052474d146100bd5780638de8b77e146100c55780638ef98a7e146100cd57806394184ba9146100ed5761007d565b80630528aa1c14610082578063206162be146100a05780633722aff9146100b5575b600080fd5b61008a61010d565b6040516100979190610a10565b60405180910390f35b6100a8610141565b6040516100979190610c1e565b61008a61034d565b61008a610386565b61008a6103b2565b6100e06100db3660046107ae565b6103ce565b6040516100979190610bb4565b6101006100fb366004610745565b61050e565b60405161009791906109fc565b60606101176105da565b6000815260405161012c908290602001610cae565b60405160208183030381529060405291505090565b6101496105ec565b6040518060a00160405280306001600160a01b0316638052474d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561018d57600080fd5b505afa1580156101a1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101c99190810190610844565b8152602001306001600160a01b03168152602001306001600160a01b0316638de8b77e6040518163ffffffff1660e01b815260040160006040518083038186803b15801561021657600080fd5b505afa15801561022a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102529190810190610844565b8152602001306001600160a01b0316633722aff96040518163ffffffff1660e01b815260040160006040518083038186803b15801561029057600080fd5b505afa1580156102a4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102cc9190810190610844565b8152602001306001600160a01b0316630528aa1c6040518163ffffffff1660e01b815260040160006040518083038186803b15801561030a57600080fd5b505afa15801561031e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103469190810190610844565b9052905090565b6040518060400160405280601781526020017f7475706c65286279746573333220707265496d6167652900000000000000000081525081565b6040518060400160405280601081526020016f2430b9b43637b1b5aa3930b739b332b960811b81525081565b604051806060016040528060278152602001610d106027913981565b6103d6610624565b6103de610649565b6103ea85870187610981565b90506103f46105da565b6104008486018661095c565b905061040a610624565b610416898b018b61087f565b82519091501561050157602083015115806104345750428360200151115b6104595760405162461bcd60e51b815260040161045090610b3e565b60405180910390fd5b6000600283600001516040516020016104729190610a07565b60408051601f198184030181529082905261048c916109e0565b602060405180830381855afa1580156104a9573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906104cc919061072d565b845190915081146104ef5760405162461bcd60e51b815260040161045090610a75565b50805180516020909101528051600090525b9998505050505050505050565b6000610518610649565b61052483850185610981565b905061052e610624565b61053a8688018861087f565b80515190915061055c5760405162461bcd60e51b815260040161045090610ab7565b8051602001511561057f5760405162461bcd60e51b815260040161045090610a2a565b815161059d5760405162461bcd60e51b815260040161045090610b7f565b602082015115806105b15750428260200151115b6105cd5760405162461bcd60e51b815260040161045090610afc565b5060019695505050505050565b60408051602081019091526000815290565b6040518060a001604052806060815260200160006001600160a01b031681526020016060815260200160608152602001606081525090565b6040518060400160405280610637610660565b8152602001610644610660565b905290565b604080518082019091526000808252602082015290565b60405180604001604052806002906020820280368337509192915050565b60008083601f84011261068f578182fd5b50813567ffffffffffffffff8111156106a6578182fd5b6020830191508360208285010111156106be57600080fd5b9250929050565b600082601f8301126106d5578081fd5b815167ffffffffffffffff8111156106eb578182fd5b6106fe601f8201601f1916602001610cb8565b915080825283602082850101111561071557600080fd5b610726816020840160208601610cdf565b5092915050565b60006020828403121561073e578081fd5b5051919050565b6000806000806040858703121561075a578283fd5b843567ffffffffffffffff80821115610771578485fd5b61077d8883890161067e565b90965094506020870135915080821115610795578384fd5b506107a28782880161067e565b95989497509550505050565b600080600080600080606087890312156107c6578182fd5b863567ffffffffffffffff808211156107dd578384fd5b6107e98a838b0161067e565b90985096506020890135915080821115610801578384fd5b61080d8a838b0161067e565b90965094506040890135915080821115610825578384fd5b5061083289828a0161067e565b979a9699509497509295939492505050565b600060208284031215610855578081fd5b815167ffffffffffffffff81111561086b578182fd5b610877848285016106c5565b949350505050565b600060808284031215610890578081fd5b61089a6040610cb8565b83601f8401126108a8578182fd5b6108b26040610cb8565b808460408601878111156108c4578586fd5b855b60028110156108e55782358552602094850194909201916001016108c6565b5082855287605f8801126108f7578586fd5b6109016040610cb8565b9350839250905060808601871015610917578485fd5b845b600281101561094d5781356001600160a01b0381168114610938578687fd5b84526020938401939190910190600101610919565b50506020830152509392505050565b60006020828403121561096d578081fd5b6109776020610cb8565b9135825250919050565b600060408284031215610992578081fd5b61099c6040610cb8565b82358152602083013560208201528091505092915050565b600081518084526109cc816020860160208601610cdf565b601f01601f19169290920160200192915050565b600082516109f2818460208701610cdf565b9190910192915050565b901515815260200190565b90815260200190565b600060208252610a2360208301846109b4565b9392505050565b6020808252602b908201527f486173686c6f636b5472616e736665723a204e4f4e5a45524f5f52454349504960408201526a454e545f42414c414e434560a81b606082015260800190565b60208082526022908201527f486173686c6f636b5472616e736665723a20494e56414c49445f505245494d41604082015261474560f01b606082015260800190565b60208082526025908201527f486173686c6f636b5472616e736665723a205a4552305f53454e4445525f42416040820152644c414e434560d81b606082015260800190565b60208082526022908201527f486173686c6f636b5472616e736665723a20455850495245445f54494d454c4f604082015261434b60f01b606082015260800190565b60208082526021908201527f486173686c6f636b5472616e736665723a205041594d454e545f4558504952456040820152601160fa1b606082015260800190565b6020808252818101527f486173686c6f636b5472616e736665723a20454d5054595f4c4f434b48415348604082015260600190565b815160808201908260005b6002811015610bde578251825260209283019290910190600101610bbf565b5050506020808401516040840160005b6002811015610c145782516001600160a01b031682529183019190830190600101610bee565b5050505092915050565b600060208252825160a06020840152610c3a60c08401826109b4565b905060018060a01b0360208501511660408401526040840151601f1980858403016060860152610c6a83836109b4565b92506060860151915080858403016080860152610c8783836109b4565b925060808601519150808584030160a086015250610ca582826109b4565b95945050505050565b9051815260200190565b60405181810167ffffffffffffffff81118282101715610cd757600080fd5b604052919050565b60005b83811015610cfa578181015183820152602001610ce2565b83811115610d09576000848401525b5050505056fe7475706c652862797465733332206c6f636b486173682c2075696e743235362065787069727929a2646970667358221220f7a1aad5efbe0de5a92ccb20170dbe8d594d5a4ccb943cb48fbcd3fcbc98e24c64736f6c63430007010033","deployedBytecode":"0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80638052474d1161005b5780638052474d146100bd5780638de8b77e146100c55780638ef98a7e146100cd57806394184ba9146100ed5761007d565b80630528aa1c14610082578063206162be146100a05780633722aff9146100b5575b600080fd5b61008a61010d565b6040516100979190610a10565b60405180910390f35b6100a8610141565b6040516100979190610c1e565b61008a61034d565b61008a610386565b61008a6103b2565b6100e06100db3660046107ae565b6103ce565b6040516100979190610bb4565b6101006100fb366004610745565b61050e565b60405161009791906109fc565b60606101176105da565b6000815260405161012c908290602001610cae565b60405160208183030381529060405291505090565b6101496105ec565b6040518060a00160405280306001600160a01b0316638052474d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561018d57600080fd5b505afa1580156101a1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101c99190810190610844565b8152602001306001600160a01b03168152602001306001600160a01b0316638de8b77e6040518163ffffffff1660e01b815260040160006040518083038186803b15801561021657600080fd5b505afa15801561022a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102529190810190610844565b8152602001306001600160a01b0316633722aff96040518163ffffffff1660e01b815260040160006040518083038186803b15801561029057600080fd5b505afa1580156102a4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102cc9190810190610844565b8152602001306001600160a01b0316630528aa1c6040518163ffffffff1660e01b815260040160006040518083038186803b15801561030a57600080fd5b505afa15801561031e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103469190810190610844565b9052905090565b6040518060400160405280601781526020017f7475706c65286279746573333220707265496d6167652900000000000000000081525081565b6040518060400160405280601081526020016f2430b9b43637b1b5aa3930b739b332b960811b81525081565b604051806060016040528060278152602001610d106027913981565b6103d6610624565b6103de610649565b6103ea85870187610981565b90506103f46105da565b6104008486018661095c565b905061040a610624565b610416898b018b61087f565b82519091501561050157602083015115806104345750428360200151115b6104595760405162461bcd60e51b815260040161045090610b3e565b60405180910390fd5b6000600283600001516040516020016104729190610a07565b60408051601f198184030181529082905261048c916109e0565b602060405180830381855afa1580156104a9573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906104cc919061072d565b845190915081146104ef5760405162461bcd60e51b815260040161045090610a75565b50805180516020909101528051600090525b9998505050505050505050565b6000610518610649565b61052483850185610981565b905061052e610624565b61053a8688018861087f565b80515190915061055c5760405162461bcd60e51b815260040161045090610ab7565b8051602001511561057f5760405162461bcd60e51b815260040161045090610a2a565b815161059d5760405162461bcd60e51b815260040161045090610b7f565b602082015115806105b15750428260200151115b6105cd5760405162461bcd60e51b815260040161045090610afc565b5060019695505050505050565b60408051602081019091526000815290565b6040518060a001604052806060815260200160006001600160a01b031681526020016060815260200160608152602001606081525090565b6040518060400160405280610637610660565b8152602001610644610660565b905290565b604080518082019091526000808252602082015290565b60405180604001604052806002906020820280368337509192915050565b60008083601f84011261068f578182fd5b50813567ffffffffffffffff8111156106a6578182fd5b6020830191508360208285010111156106be57600080fd5b9250929050565b600082601f8301126106d5578081fd5b815167ffffffffffffffff8111156106eb578182fd5b6106fe601f8201601f1916602001610cb8565b915080825283602082850101111561071557600080fd5b610726816020840160208601610cdf565b5092915050565b60006020828403121561073e578081fd5b5051919050565b6000806000806040858703121561075a578283fd5b843567ffffffffffffffff80821115610771578485fd5b61077d8883890161067e565b90965094506020870135915080821115610795578384fd5b506107a28782880161067e565b95989497509550505050565b600080600080600080606087890312156107c6578182fd5b863567ffffffffffffffff808211156107dd578384fd5b6107e98a838b0161067e565b90985096506020890135915080821115610801578384fd5b61080d8a838b0161067e565b90965094506040890135915080821115610825578384fd5b5061083289828a0161067e565b979a9699509497509295939492505050565b600060208284031215610855578081fd5b815167ffffffffffffffff81111561086b578182fd5b610877848285016106c5565b949350505050565b600060808284031215610890578081fd5b61089a6040610cb8565b83601f8401126108a8578182fd5b6108b26040610cb8565b808460408601878111156108c4578586fd5b855b60028110156108e55782358552602094850194909201916001016108c6565b5082855287605f8801126108f7578586fd5b6109016040610cb8565b9350839250905060808601871015610917578485fd5b845b600281101561094d5781356001600160a01b0381168114610938578687fd5b84526020938401939190910190600101610919565b50506020830152509392505050565b60006020828403121561096d578081fd5b6109776020610cb8565b9135825250919050565b600060408284031215610992578081fd5b61099c6040610cb8565b82358152602083013560208201528091505092915050565b600081518084526109cc816020860160208601610cdf565b601f01601f19169290920160200192915050565b600082516109f2818460208701610cdf565b9190910192915050565b901515815260200190565b90815260200190565b600060208252610a2360208301846109b4565b9392505050565b6020808252602b908201527f486173686c6f636b5472616e736665723a204e4f4e5a45524f5f52454349504960408201526a454e545f42414c414e434560a81b606082015260800190565b60208082526022908201527f486173686c6f636b5472616e736665723a20494e56414c49445f505245494d41604082015261474560f01b606082015260800190565b60208082526025908201527f486173686c6f636b5472616e736665723a205a4552305f53454e4445525f42416040820152644c414e434560d81b606082015260800190565b60208082526022908201527f486173686c6f636b5472616e736665723a20455850495245445f54494d454c4f604082015261434b60f01b606082015260800190565b60208082526021908201527f486173686c6f636b5472616e736665723a205041594d454e545f4558504952456040820152601160fa1b606082015260800190565b6020808252818101527f486173686c6f636b5472616e736665723a20454d5054595f4c4f434b48415348604082015260600190565b815160808201908260005b6002811015610bde578251825260209283019290910190600101610bbf565b5050506020808401516040840160005b6002811015610c145782516001600160a01b031682529183019190830190600101610bee565b5050505092915050565b600060208252825160a06020840152610c3a60c08401826109b4565b905060018060a01b0360208501511660408401526040840151601f1980858403016060860152610c6a83836109b4565b92506060860151915080858403016080860152610c8783836109b4565b925060808601519150808584030160a086015250610ca582826109b4565b95945050505050565b9051815260200190565b60405181810167ffffffffffffffff81118282101715610cd757600080fd5b604052919050565b60005b83811015610cfa578181015183820152602001610ce2565b83811115610d09576000848401525b5050505056fe7475706c652862797465733332206c6f636b486173682c2075696e743235362065787069727929a2646970667358221220f7a1aad5efbe0de5a92ccb20170dbe8d594d5a4ccb943cb48fbcd3fcbc98e24c64736f6c63430007010033","devdoc":{"author":"Connext <support@connext.network>","kind":"dev","methods":{},"title":"HashlockTransfer","version":1},"userdoc":{"kind":"user","methods":{},"notice":"This contract allows users to claim a payment locked in         the application if they provide the correct preImage. The payment is         reverted if not unlocked by the timelock if one is provided.","version":1},"storageLayout":{"storage":[],"types":null}}')},2827:function(e){e.exports=JSON.parse('{"address":"0x0296dd2C57398Ed949D5Cd1Ad97d8C86BC2416AE","abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"transactionHash":"0x37ce9bf40222ac23c9d859bb4683e257493b4021a75bd6db0d56a2d0b263d586","receipt":{"to":null,"from":"0x6E137983f0B260BAD708b4FAef30cba5a74E69AA","contractAddress":"0x0296dd2C57398Ed949D5Cd1Ad97d8C86BC2416AE","transactionIndex":0,"gasUsed":"888397","logsBloom":"0x000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000200000000000000000000000000000000000080000008000000000000000000001000000000040000000000a0000000000000000000800000000000000000080000010000000000000000000000000000000000000000000000000000080000000000000000000200000000000000000000000000000010000000000008000000000000000004000000002000000000001000000000000000000000000000000100040000020000000000004000000000000000000000000000000000000000000000000100000","blockHash":"0x02904dc1a27edef312ef61fa143a1ce55a76f95f1545fe0c52e30b619f4d8200","transactionHash":"0x37ce9bf40222ac23c9d859bb4683e257493b4021a75bd6db0d56a2d0b263d586","logs":[{"transactionIndex":0,"blockNumber":8336295,"transactionHash":"0x37ce9bf40222ac23c9d859bb4683e257493b4021a75bd6db0d56a2d0b263d586","address":"0x0296dd2C57398Ed949D5Cd1Ad97d8C86BC2416AE","topics":["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000006e137983f0b260bad708b4faef30cba5a74e69aa"],"data":"0x00000000000000000000000000000000000000000000d3c21bcecceda1000000","logIndex":0,"blockHash":"0x02904dc1a27edef312ef61fa143a1ce55a76f95f1545fe0c52e30b619f4d8200"},{"transactionIndex":0,"blockNumber":8336295,"transactionHash":"0x37ce9bf40222ac23c9d859bb4683e257493b4021a75bd6db0d56a2d0b263d586","address":"0x0000000000000000000000000000000000001010","topics":["0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63","0x0000000000000000000000000000000000000000000000000000000000001010","0x0000000000000000000000006e137983f0b260bad708b4faef30cba5a74e69aa","0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"],"data":"0x000000000000000000000000000000000000000000000000000327fe0b9ac200000000000000000000000000000000000000000000000000014952198b262a0000000000000000000000000000000000000000000000005d9a6f28274506a6f900000000000000000000000000000000000000000000000001462a1b7f8b680000000000000000000000000000000000000000000000005d9a72502550a168f9","logIndex":1,"blockHash":"0x02904dc1a27edef312ef61fa143a1ce55a76f95f1545fe0c52e30b619f4d8200"}],"blockNumber":8336295,"cumulativeGasUsed":"888397","status":1,"byzantium":true},"args":[],"solcInputHash":"e64b9cdf4f72778a3c3a9b0d6a298f3c","metadata":"{\\"compiler\\":{\\"version\\":\\"0.7.1+commit.f4a555be\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"value\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Approval\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"from\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"value\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Transfer\\",\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"}],\\"name\\":\\"allowance\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"approve\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"balanceOf\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"burn\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"decimals\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"subtractedValue\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"decreaseAllowance\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"addedValue\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"increaseAllowance\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"mint\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"name\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"symbol\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"totalSupply\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"transfer\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"sender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"transferFrom\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{\\"allowance(address,address)\\":{\\"details\\":\\"See {IERC20-allowance}.\\"},\\"approve(address,uint256)\\":{\\"details\\":\\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\\"},\\"balanceOf(address)\\":{\\"details\\":\\"See {IERC20-balanceOf}.\\"},\\"decimals()\\":{\\"details\\":\\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\\"},\\"decreaseAllowance(address,uint256)\\":{\\"details\\":\\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\\"},\\"increaseAllowance(address,uint256)\\":{\\"details\\":\\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\\"},\\"name()\\":{\\"details\\":\\"Returns the name of the token.\\"},\\"symbol()\\":{\\"details\\":\\"Returns the symbol of the token, usually a shorter version of the name.\\"},\\"totalSupply()\\":{\\"details\\":\\"See {IERC20-totalSupply}.\\"},\\"transfer(address,uint256)\\":{\\"details\\":\\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\\"},\\"transferFrom(address,address,uint256)\\":{\\"details\\":\\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``\'s tokens of at least `amount`.\\"}},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"src.sol/testing/TestToken.sol\\":\\"TestToken\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/GSN/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/*\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with GSN meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address payable) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes memory) {\\\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x910a2e625b71168563edf9eeef55a50d6d699acfe27ceba3921f291829a8f938\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/math/SafeMath.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Wrappers over Solidity\'s arithmetic operations with added overflow\\\\n * checks.\\\\n *\\\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\\\n * in bugs, because programmers usually assume that an overflow raises an\\\\n * error, which is the standard behavior in high level programming languages.\\\\n * `SafeMath` restores this intuition by reverting the transaction when an\\\\n * operation overflows.\\\\n *\\\\n * Using this library instead of the unchecked operations eliminates an entire\\\\n * class of bugs, so it\'s recommended to use it always.\\\\n */\\\\nlibrary SafeMath {\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `+` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Addition cannot overflow.\\\\n     */\\\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        uint256 c = a + b;\\\\n        require(c >= a, \\\\\\"SafeMath: addition overflow\\\\\\");\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return sub(a, b, \\\\\\"SafeMath: subtraction overflow\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        require(b <= a, errorMessage);\\\\n        uint256 c = a - b;\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `*` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Multiplication cannot overflow.\\\\n     */\\\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\\\\n        // benefit is lost if \'b\' is also tested.\\\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\\\n        if (a == 0) {\\\\n            return 0;\\\\n        }\\\\n\\\\n        uint256 c = a * b;\\\\n        require(c / a == b, \\\\\\"SafeMath: multiplication overflow\\\\\\");\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return div(a, b, \\\\\\"SafeMath: division by zero\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        require(b > 0, errorMessage);\\\\n        uint256 c = a / b;\\\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * Reverts when dividing by zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return mod(a, b, \\\\\\"SafeMath: modulo by zero\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * Reverts with custom message when dividing by zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        require(b != 0, errorMessage);\\\\n        return a % b;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\nimport \\\\\\"../../GSN/Context.sol\\\\\\";\\\\nimport \\\\\\"./IERC20.sol\\\\\\";\\\\nimport \\\\\\"../../math/SafeMath.sol\\\\\\";\\\\nimport \\\\\\"../../utils/Address.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Implementation of the {IERC20} interface.\\\\n *\\\\n * This implementation is agnostic to the way tokens are created. This means\\\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\\\n *\\\\n * TIP: For a detailed writeup see our guide\\\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\\\n * to implement supply mechanisms].\\\\n *\\\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\\\n * of returning `false` on failure. This behavior is nonetheless conventional\\\\n * and does not conflict with the expectations of ERC20 applications.\\\\n *\\\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\\\n * This allows applications to reconstruct the allowance for all accounts just\\\\n * by listening to said events. Other implementations of the EIP may not emit\\\\n * these events, as it isn\'t required by the specification.\\\\n *\\\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\\\n * functions have been added to mitigate the well-known issues around setting\\\\n * allowances. See {IERC20-approve}.\\\\n */\\\\ncontract ERC20 is Context, IERC20 {\\\\n    using SafeMath for uint256;\\\\n    using Address for address;\\\\n\\\\n    mapping (address => uint256) private _balances;\\\\n\\\\n    mapping (address => mapping (address => uint256)) private _allowances;\\\\n\\\\n    uint256 private _totalSupply;\\\\n\\\\n    string private _name;\\\\n    string private _symbol;\\\\n    uint8 private _decimals;\\\\n\\\\n    /**\\\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\\\n     * a default value of 18.\\\\n     *\\\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\\\n     *\\\\n     * All three of these values are immutable: they can only be set once during\\\\n     * construction.\\\\n     */\\\\n    constructor (string memory name, string memory symbol) {\\\\n        _name = name;\\\\n        _symbol = symbol;\\\\n        _decimals = 18;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the name of the token.\\\\n     */\\\\n    function name() public view returns (string memory) {\\\\n        return _name;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\\\n     * name.\\\\n     */\\\\n    function symbol() public view returns (string memory) {\\\\n        return _symbol;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the number of decimals used to get its user representation.\\\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\\\n     *\\\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\\\n     * called.\\\\n     *\\\\n     * NOTE: This information is only used for _display_ purposes: it in\\\\n     * no way affects any of the arithmetic of the contract, including\\\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\\\n     */\\\\n    function decimals() public view returns (uint8) {\\\\n        return _decimals;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-totalSupply}.\\\\n     */\\\\n    function totalSupply() public view override returns (uint256) {\\\\n        return _totalSupply;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-balanceOf}.\\\\n     */\\\\n    function balanceOf(address account) public view override returns (uint256) {\\\\n        return _balances[account];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-transfer}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `recipient` cannot be the zero address.\\\\n     * - the caller must have a balance of at least `amount`.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\\\n        _transfer(_msgSender(), recipient, amount);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-allowance}.\\\\n     */\\\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\\\n        return _allowances[owner][spender];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-approve}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\\\n        _approve(_msgSender(), spender, amount);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-transferFrom}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\\\n     * required by the EIP. See the note at the beginning of {ERC20};\\\\n     *\\\\n     * Requirements:\\\\n     * - `sender` and `recipient` cannot be the zero address.\\\\n     * - `sender` must have a balance of at least `amount`.\\\\n     * - the caller must have allowance for ``sender``\'s tokens of at least\\\\n     * `amount`.\\\\n     */\\\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\\\n        _transfer(sender, recipient, amount);\\\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\\\\"ERC20: transfer amount exceeds allowance\\\\\\"));\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\\\n     *\\\\n     * This is an alternative to {approve} that can be used as a mitigation for\\\\n     * problems described in {IERC20-approve}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\\\n     *\\\\n     * This is an alternative to {approve} that can be used as a mitigation for\\\\n     * problems described in {IERC20-approve}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     * - `spender` must have allowance for the caller of at least\\\\n     * `subtractedValue`.\\\\n     */\\\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\\\\"ERC20: decreased allowance below zero\\\\\\"));\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\\\n     *\\\\n     * This is internal function is equivalent to {transfer}, and can be used to\\\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `sender` cannot be the zero address.\\\\n     * - `recipient` cannot be the zero address.\\\\n     * - `sender` must have a balance of at least `amount`.\\\\n     */\\\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\\\n        require(sender != address(0), \\\\\\"ERC20: transfer from the zero address\\\\\\");\\\\n        require(recipient != address(0), \\\\\\"ERC20: transfer to the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(sender, recipient, amount);\\\\n\\\\n        _balances[sender] = _balances[sender].sub(amount, \\\\\\"ERC20: transfer amount exceeds balance\\\\\\");\\\\n        _balances[recipient] = _balances[recipient].add(amount);\\\\n        emit Transfer(sender, recipient, amount);\\\\n    }\\\\n\\\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\\\n     * the total supply.\\\\n     *\\\\n     * Emits a {Transfer} event with `from` set to the zero address.\\\\n     *\\\\n     * Requirements\\\\n     *\\\\n     * - `to` cannot be the zero address.\\\\n     */\\\\n    function _mint(address account, uint256 amount) internal virtual {\\\\n        require(account != address(0), \\\\\\"ERC20: mint to the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(address(0), account, amount);\\\\n\\\\n        _totalSupply = _totalSupply.add(amount);\\\\n        _balances[account] = _balances[account].add(amount);\\\\n        emit Transfer(address(0), account, amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\\\n     * total supply.\\\\n     *\\\\n     * Emits a {Transfer} event with `to` set to the zero address.\\\\n     *\\\\n     * Requirements\\\\n     *\\\\n     * - `account` cannot be the zero address.\\\\n     * - `account` must have at least `amount` tokens.\\\\n     */\\\\n    function _burn(address account, uint256 amount) internal virtual {\\\\n        require(account != address(0), \\\\\\"ERC20: burn from the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(account, address(0), amount);\\\\n\\\\n        _balances[account] = _balances[account].sub(amount, \\\\\\"ERC20: burn amount exceeds balance\\\\\\");\\\\n        _totalSupply = _totalSupply.sub(amount);\\\\n        emit Transfer(account, address(0), amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\\\n     *\\\\n     * This internal function is equivalent to `approve`, and can be used to\\\\n     * e.g. set automatic allowances for certain subsystems, etc.\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `owner` cannot be the zero address.\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\\\n        require(owner != address(0), \\\\\\"ERC20: approve from the zero address\\\\\\");\\\\n        require(spender != address(0), \\\\\\"ERC20: approve to the zero address\\\\\\");\\\\n\\\\n        _allowances[owner][spender] = amount;\\\\n        emit Approval(owner, spender, amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\\\n     *\\\\n     * WARNING: This function should only be called from the constructor. Most\\\\n     * applications that interact with token contracts will not expect\\\\n     * {decimals} to ever change, and may work incorrectly if it does.\\\\n     */\\\\n    function _setupDecimals(uint8 decimals_) internal {\\\\n        _decimals = decimals_;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Hook that is called before any transfer of tokens. This includes\\\\n     * minting and burning.\\\\n     *\\\\n     * Calling conditions:\\\\n     *\\\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\'s tokens\\\\n     * will be to transferred to `to`.\\\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\\\n     * - when `to` is zero, `amount` of ``from``\'s tokens will be burned.\\\\n     * - `from` and `to` are never both zero.\\\\n     *\\\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\\\n     */\\\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf1ac0ee2ca2b36f90574d3b2b37422ced4fa829741d80794c62f5958a2d8f474\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Returns the amount of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender\'s allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\\\n     * allowance mechanism. `amount` is then deducted from the caller\'s\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Address.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Collection of functions related to the address type\\\\n */\\\\nlibrary Address {\\\\n    /**\\\\n     * @dev Returns true if `account` is a contract.\\\\n     *\\\\n     * [IMPORTANT]\\\\n     * ====\\\\n     * It is unsafe to assume that an address for which this function returns\\\\n     * false is an externally-owned account (EOA) and not a contract.\\\\n     *\\\\n     * Among others, `isContract` will return false for the following\\\\n     * types of addresses:\\\\n     *\\\\n     *  - an externally-owned account\\\\n     *  - a contract in construction\\\\n     *  - an address where a contract will be created\\\\n     *  - an address where a contract lived, but was destroyed\\\\n     * ====\\\\n     */\\\\n    function isContract(address account) internal view returns (bool) {\\\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\\\n        // for accounts without code, i.e. `keccak256(\'\')`\\\\n        bytes32 codehash;\\\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\\\n        // solhint-disable-next-line no-inline-assembly\\\\n        assembly { codehash := extcodehash(account) }\\\\n        return (codehash != accountHash && codehash != 0x0);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\\\\n     * `recipient`, forwarding all available gas and reverting on errors.\\\\n     *\\\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\\\n     * imposed by `transfer`, making them unable to receive funds via\\\\n     * `transfer`. {sendValue} removes this limitation.\\\\n     *\\\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\\\n     *\\\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\\\n     * taken to not create reentrancy vulnerabilities. Consider using\\\\n     * {ReentrancyGuard} or the\\\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\\\n     */\\\\n    function sendValue(address payable recipient, uint256 amount) internal {\\\\n        require(address(this).balance >= amount, \\\\\\"Address: insufficient balance\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\\\n        (bool success, ) = recipient.call{ value: amount }(\\\\\\"\\\\\\");\\\\n        require(success, \\\\\\"Address: unable to send value, recipient may have reverted\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Performs a Solidity function call using a low level `call`. A\\\\n     * plain`call` is an unsafe replacement for a function call: use this\\\\n     * function instead.\\\\n     *\\\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\\\n     * function (like regular Solidity function calls).\\\\n     *\\\\n     * Returns the raw returned data. To convert to the expected return value,\\\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `target` must be a contract.\\\\n     * - calling `target` with `data` must not revert.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n      return functionCall(target, data, \\\\\\"Address: low-level call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but also transferring `value` wei to `target`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the calling contract must have an ETH balance of at least `value`.\\\\n     * - the called Solidity function must be `payable`.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, value, \\\\\\"Address: low-level call with value failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\\\n        require(address(this).balance >= value, \\\\\\"Address: insufficient balance for call\\\\\\");\\\\n        return _functionCallWithValue(target, data, value, errorMessage);\\\\n    }\\\\n\\\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: call to non-contract\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls\\\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\\\n        if (success) {\\\\n            return returndata;\\\\n        } else {\\\\n            // Look for revert reason and bubble it up if present\\\\n            if (returndata.length > 0) {\\\\n                // The easiest way to bubble the revert reason is using memory via assembly\\\\n\\\\n                // solhint-disable-next-line no-inline-assembly\\\\n                assembly {\\\\n                    let returndata_size := mload(returndata)\\\\n                    revert(add(32, returndata), returndata_size)\\\\n                }\\\\n            } else {\\\\n                revert(errorMessage);\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x698f929f1097637d051976b322a2d532c27df022b09010e8d091e2888a5ebdf8\\",\\"license\\":\\"MIT\\"},\\"src.sol/testing/TestToken.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.1;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\\\\";\\\\n\\\\n/* This token is ONLY useful for testing\\\\n * Anybody can mint as many tokens as they like\\\\n * Anybody can burn anyone else\'s tokens\\\\n */\\\\ncontract TestToken is ERC20 {\\\\n    constructor() ERC20(\\\\\\"Test Token\\\\\\", \\\\\\"TEST\\\\\\") {\\\\n        _mint(msg.sender, 1000000 ether);\\\\n    }\\\\n\\\\n    function mint(address account, uint256 amount) external {\\\\n        _mint(account, amount);\\\\n    }\\\\n\\\\n    function burn(address account, uint256 amount) external {\\\\n        _burn(account, amount);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe879a63f0b107705dc9405af3efc7adc2f6425da2c5ec571c72f91db2a059876\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"0x60806040523480156200001157600080fd5b50604080518082018252600a8152692a32b9ba102a37b5b2b760b11b602080830191825283518085019094526004845263151154d560e21b908401528151919291620000609160039162000218565b5080516200007690600490602084019062000218565b50506005805460ff19166012179055506200009c3369d3c21bcecceda1000000620000a2565b620002b4565b6001600160a01b038216620000fe576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6200010c60008383620001b1565b6200012881600254620001b660201b6200060b1790919060201c565b6002556001600160a01b038216600090815260208181526040909120546200015b9183906200060b620001b6821b17901c565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b505050565b60008282018381101562000211576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200025b57805160ff19168380011785556200028b565b828001600101855582156200028b579182015b828111156200028b5782518255916020019190600101906200026e565b50620002999291506200029d565b5090565b5b808211156200029957600081556001016200029e565b610cfb80620002c46000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806340c10f191161008c5780639dc29fac116100665780639dc29fac14610287578063a457c2d7146102b3578063a9059cbb146102df578063dd62ed3e1461030b576100cf565b806340c10f191461022b57806370a082311461025957806395d89b411461027f576100cf565b806306fdde03146100d4578063095ea7b31461015157806318160ddd1461019157806323b872dd146101ab578063313ce567146101e157806339509351146101ff575b600080fd5b6100dc610339565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101165781810151838201526020016100fe565b50505050905090810190601f1680156101435780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561016757600080fd5b506001600160a01b0381351690602001356103cf565b604080519115158252519081900360200190f35b6101996103ec565b60408051918252519081900360200190f35b61017d600480360360608110156101c157600080fd5b506001600160a01b038135811691602081013590911690604001356103f2565b6101e9610479565b6040805160ff9092168252519081900360200190f35b61017d6004803603604081101561021557600080fd5b506001600160a01b038135169060200135610482565b6102576004803603604081101561024157600080fd5b506001600160a01b0381351690602001356104d0565b005b6101996004803603602081101561026f57600080fd5b50356001600160a01b03166104de565b6100dc6104f9565b6102576004803603604081101561029d57600080fd5b506001600160a01b03813516906020013561055a565b61017d600480360360408110156102c957600080fd5b506001600160a01b038135169060200135610564565b61017d600480360360408110156102f557600080fd5b506001600160a01b0381351690602001356105cc565b6101996004803603604081101561032157600080fd5b506001600160a01b03813581169160200135166105e0565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103c55780601f1061039a576101008083540402835291602001916103c5565b820191906000526020600020905b8154815290600101906020018083116103a857829003601f168201915b5050505050905090565b60006103e36103dc61066c565b8484610670565b50600192915050565b60025490565b60006103ff84848461075c565b61046f8461040b61066c565b61046a85604051806060016040528060288152602001610c0f602891396001600160a01b038a1660009081526001602052604081209061044961066c565b6001600160a01b0316815260208101919091526040016000205491906108b7565b610670565b5060019392505050565b60055460ff1690565b60006103e361048f61066c565b8461046a85600160006104a061066c565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549061060b565b6104da828261094e565b5050565b6001600160a01b031660009081526020819052604090205490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103c55780601f1061039a576101008083540402835291602001916103c5565b6104da8282610a3e565b60006103e361057161066c565b8461046a85604051806060016040528060258152602001610ca1602591396001600061059b61066c565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906108b7565b60006103e36105d961066c565b848461075c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600082820183811015610665576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b3390565b6001600160a01b0383166106b55760405162461bcd60e51b8152600401808060200182810382526024815260200180610c7d6024913960400191505060405180910390fd5b6001600160a01b0382166106fa5760405162461bcd60e51b8152600401808060200182810382526022815260200180610bc76022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166107a15760405162461bcd60e51b8152600401808060200182810382526025815260200180610c586025913960400191505060405180910390fd5b6001600160a01b0382166107e65760405162461bcd60e51b8152600401808060200182810382526023815260200180610b826023913960400191505060405180910390fd5b6107f1838383610b3a565b61082e81604051806060016040528060268152602001610be9602691396001600160a01b03861660009081526020819052604090205491906108b7565b6001600160a01b03808516600090815260208190526040808220939093559084168152205461085d908261060b565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600081848411156109465760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561090b5781810151838201526020016108f3565b50505050905090810190601f1680156109385780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b0382166109a9576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6109b560008383610b3a565b6002546109c2908261060b565b6002556001600160a01b0382166000908152602081905260409020546109e8908261060b565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b038216610a835760405162461bcd60e51b8152600401808060200182810382526021815260200180610c376021913960400191505060405180910390fd5b610a8f82600083610b3a565b610acc81604051806060016040528060228152602001610ba5602291396001600160a01b03851660009081526020819052604090205491906108b7565b6001600160a01b038316600090815260208190526040902055600254610af29082610b3f565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b505050565b600061066583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506108b756fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220ab9dcafdcf3d12155ca9697d505d71261c7afcb9c777a043bc5bb39f7a2d72ab64736f6c63430007010033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806340c10f191161008c5780639dc29fac116100665780639dc29fac14610287578063a457c2d7146102b3578063a9059cbb146102df578063dd62ed3e1461030b576100cf565b806340c10f191461022b57806370a082311461025957806395d89b411461027f576100cf565b806306fdde03146100d4578063095ea7b31461015157806318160ddd1461019157806323b872dd146101ab578063313ce567146101e157806339509351146101ff575b600080fd5b6100dc610339565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101165781810151838201526020016100fe565b50505050905090810190601f1680156101435780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561016757600080fd5b506001600160a01b0381351690602001356103cf565b604080519115158252519081900360200190f35b6101996103ec565b60408051918252519081900360200190f35b61017d600480360360608110156101c157600080fd5b506001600160a01b038135811691602081013590911690604001356103f2565b6101e9610479565b6040805160ff9092168252519081900360200190f35b61017d6004803603604081101561021557600080fd5b506001600160a01b038135169060200135610482565b6102576004803603604081101561024157600080fd5b506001600160a01b0381351690602001356104d0565b005b6101996004803603602081101561026f57600080fd5b50356001600160a01b03166104de565b6100dc6104f9565b6102576004803603604081101561029d57600080fd5b506001600160a01b03813516906020013561055a565b61017d600480360360408110156102c957600080fd5b506001600160a01b038135169060200135610564565b61017d600480360360408110156102f557600080fd5b506001600160a01b0381351690602001356105cc565b6101996004803603604081101561032157600080fd5b506001600160a01b03813581169160200135166105e0565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103c55780601f1061039a576101008083540402835291602001916103c5565b820191906000526020600020905b8154815290600101906020018083116103a857829003601f168201915b5050505050905090565b60006103e36103dc61066c565b8484610670565b50600192915050565b60025490565b60006103ff84848461075c565b61046f8461040b61066c565b61046a85604051806060016040528060288152602001610c0f602891396001600160a01b038a1660009081526001602052604081209061044961066c565b6001600160a01b0316815260208101919091526040016000205491906108b7565b610670565b5060019392505050565b60055460ff1690565b60006103e361048f61066c565b8461046a85600160006104a061066c565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549061060b565b6104da828261094e565b5050565b6001600160a01b031660009081526020819052604090205490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103c55780601f1061039a576101008083540402835291602001916103c5565b6104da8282610a3e565b60006103e361057161066c565b8461046a85604051806060016040528060258152602001610ca1602591396001600061059b61066c565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906108b7565b60006103e36105d961066c565b848461075c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600082820183811015610665576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b3390565b6001600160a01b0383166106b55760405162461bcd60e51b8152600401808060200182810382526024815260200180610c7d6024913960400191505060405180910390fd5b6001600160a01b0382166106fa5760405162461bcd60e51b8152600401808060200182810382526022815260200180610bc76022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166107a15760405162461bcd60e51b8152600401808060200182810382526025815260200180610c586025913960400191505060405180910390fd5b6001600160a01b0382166107e65760405162461bcd60e51b8152600401808060200182810382526023815260200180610b826023913960400191505060405180910390fd5b6107f1838383610b3a565b61082e81604051806060016040528060268152602001610be9602691396001600160a01b03861660009081526020819052604090205491906108b7565b6001600160a01b03808516600090815260208190526040808220939093559084168152205461085d908261060b565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600081848411156109465760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561090b5781810151838201526020016108f3565b50505050905090810190601f1680156109385780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b0382166109a9576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6109b560008383610b3a565b6002546109c2908261060b565b6002556001600160a01b0382166000908152602081905260409020546109e8908261060b565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b038216610a835760405162461bcd60e51b8152600401808060200182810382526021815260200180610c376021913960400191505060405180910390fd5b610a8f82600083610b3a565b610acc81604051806060016040528060228152602001610ba5602291396001600160a01b03851660009081526020819052604090205491906108b7565b6001600160a01b038316600090815260208190526040902055600254610af29082610b3f565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b505050565b600061066583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506108b756fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220ab9dcafdcf3d12155ca9697d505d71261c7afcb9c777a043bc5bb39f7a2d72ab64736f6c63430007010033","devdoc":{"kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``\'s tokens of at least `amount`."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1},"storageLayout":{"storage":[{"astId":590,"contract":"src.sol/testing/TestToken.sol:TestToken","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":596,"contract":"src.sol/testing/TestToken.sol:TestToken","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":598,"contract":"src.sol/testing/TestToken.sol:TestToken","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":600,"contract":"src.sol/testing/TestToken.sol:TestToken","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":602,"contract":"src.sol/testing/TestToken.sol:TestToken","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"},{"astId":604,"contract":"src.sol/testing/TestToken.sol:TestToken","label":"_decimals","offset":0,"slot":"5","type":"t_uint8"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}}}')},2828:function(e){e.exports=JSON.parse('{"address":"0xE2E4fF8Dc77A4E9BE15B3F244c29b99C7e8dD9d4","abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"address","name":"definition","type":"address"},{"internalType":"string","name":"stateEncoding","type":"string"},{"internalType":"string","name":"resolverEncoding","type":"string"},{"internalType":"bytes","name":"encodedCancel","type":"bytes"}],"indexed":false,"internalType":"struct RegisteredTransfer","name":"transfer","type":"tuple"}],"name":"TransferAdded","type":"event"},{"anonymous":false,"inputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"address","name":"definition","type":"address"},{"internalType":"string","name":"stateEncoding","type":"string"},{"internalType":"string","name":"resolverEncoding","type":"string"},{"internalType":"bytes","name":"encodedCancel","type":"bytes"}],"indexed":false,"internalType":"struct RegisteredTransfer","name":"transfer","type":"tuple"}],"name":"TransferRemoved","type":"event"},{"inputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"address","name":"definition","type":"address"},{"internalType":"string","name":"stateEncoding","type":"string"},{"internalType":"string","name":"resolverEncoding","type":"string"},{"internalType":"bytes","name":"encodedCancel","type":"bytes"}],"internalType":"struct RegisteredTransfer","name":"definition","type":"tuple"}],"name":"addTransferDefinition","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getTransferDefinitions","outputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"address","name":"definition","type":"address"},{"internalType":"string","name":"stateEncoding","type":"string"},{"internalType":"string","name":"resolverEncoding","type":"string"},{"internalType":"bytes","name":"encodedCancel","type":"bytes"}],"internalType":"struct RegisteredTransfer[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"name","type":"string"}],"name":"removeTransferDefinition","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"transactionHash":"0x7aa61f3d5ea9f17f0e5f894aaf1c406ebda6d3597a024cda4a286318d1d40227","receipt":{"to":null,"from":"0x627306090abaB3A6e1400e9345bC60c78a8BEf57","contractAddress":"0xE2E4fF8Dc77A4E9BE15B3F244c29b99C7e8dD9d4","transactionIndex":0,"gasUsed":"1239411","logsBloom":"0xblockHash":"0xdc19141a77638ea2aa338a5ef8eac4e74177c013203d8fda1ac9508e9f46a9c3","transactionHash":"0x7aa61f3d5ea9f17f0e5f894aaf1c406ebda6d3597a024cda4a286318d1d40227","logs":[{"transactionIndex":0,"blockNumber":8439291,"transactionHash":"0x7aa61f3d5ea9f17f0e5f894aaf1c406ebda6d3597a024cda4a286318d1d40227","address":"0xE2E4fF8Dc77A4E9BE15B3F244c29b99C7e8dD9d4","topics":["0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","0x0000000000000000000000000000000000000000000000000000000000000000","0x000000000000000000000000627306090abab3a6e1400e9345bc60c78a8bef57"],"data":"0x","logIndex":0,"blockHash":"0xdc19141a77638ea2aa338a5ef8eac4e74177c013203d8fda1ac9508e9f46a9c3"},{"transactionIndex":0,"blockNumber":8439291,"transactionHash":"0x7aa61f3d5ea9f17f0e5f894aaf1c406ebda6d3597a024cda4a286318d1d40227","address":"0x0000000000000000000000000000000000001010","topics":["0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63","0x0000000000000000000000000000000000000000000000000000000000001010","0x000000000000000000000000627306090abab3a6e1400e9345bc60c78a8bef57","0x000000000000000000000000928ed6a3e94437bbd316ccad78479f1d163a6a8c"],"data":"0x0000000000000000000000000000000000000000000000000004673cdc62be0000000000000000000000000000000000000000000000000001c094bf51e4fc70000000000000000000000000000000000000000000000020892453c3ed443f2100000000000000000000000000000000000000000000000001bc2d8275823e700000000000000000000000000000000000000000000000208928bb00c9a6fd21","logIndex":1,"blockHash":"0xdc19141a77638ea2aa338a5ef8eac4e74177c013203d8fda1ac9508e9f46a9c3"}],"blockNumber":8439291,"cumulativeGasUsed":"1239411","status":1,"byzantium":true},"args":[],"solcInputHash":"89c55d5a88f10637860a9ea31a1daad3","metadata":"{\\"compiler\\":{\\"version\\":\\"0.7.1+commit.f4a555be\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"previousOwner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"OwnershipTransferred\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"definition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"stateEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"resolverEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedCancel\\",\\"type\\":\\"bytes\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct RegisteredTransfer\\",\\"name\\":\\"transfer\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"TransferAdded\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"definition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"stateEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"resolverEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedCancel\\",\\"type\\":\\"bytes\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct RegisteredTransfer\\",\\"name\\":\\"transfer\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"TransferRemoved\\",\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"definition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"stateEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"resolverEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedCancel\\",\\"type\\":\\"bytes\\"}],\\"internalType\\":\\"struct RegisteredTransfer\\",\\"name\\":\\"definition\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"addTransferDefinition\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getTransferDefinitions\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"definition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"stateEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"resolverEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedCancel\\",\\"type\\":\\"bytes\\"}],\\"internalType\\":\\"struct RegisteredTransfer[]\\",\\"name\\":\\"\\",\\"type\\":\\"tuple[]\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"owner\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"}],\\"name\\":\\"removeTransferDefinition\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"renounceOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"transferOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"author\\":\\"Connext <support@connext.network>\\",\\"kind\\":\\"dev\\",\\"methods\\":{\\"addTransferDefinition((string,address,string,string,bytes))\\":{\\"details\\":\\"Should add a transfer definition to the registry\\"},\\"getTransferDefinitions()\\":{\\"details\\":\\"Should return all transfer defintions in registry\\"},\\"owner()\\":{\\"details\\":\\"Returns the address of the current owner.\\"},\\"removeTransferDefinition(string)\\":{\\"details\\":\\"Should remove a transfer definition from the registry\\"},\\"renounceOwnership()\\":{\\"details\\":\\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\\"},\\"transferOwnership(address)\\":{\\"details\\":\\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\\"}},\\"title\\":\\"TransferRegistry\\",\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"notice\\":\\"The TransferRegistry maintains an onchain record of all         supported transfers (specifically holds the registry information         defined within the contracts). The offchain protocol uses         this information to get the correct encodings when generating         signatures. The information stored here can only be updated         by the owner of the contract\\",\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"src.sol/TransferRegistry.sol\\":\\"TransferRegistry\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/GSN/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/*\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with GSN meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address payable) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes memory) {\\\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x910a2e625b71168563edf9eeef55a50d6d699acfe27ceba3921f291829a8f938\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/access/Ownable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\nimport \\\\\\"../GSN/Context.sol\\\\\\";\\\\n/**\\\\n * @dev Contract module which provides a basic access control mechanism, where\\\\n * there is an account (an owner) that can be granted exclusive access to\\\\n * specific functions.\\\\n *\\\\n * By default, the owner account will be the one that deploys the contract. This\\\\n * can later be changed with {transferOwnership}.\\\\n *\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\\\n * the owner.\\\\n */\\\\ncontract Ownable is Context {\\\\n    address private _owner;\\\\n\\\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\\\n\\\\n    /**\\\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\\\n     */\\\\n    constructor () {\\\\n        address msgSender = _msgSender();\\\\n        _owner = msgSender;\\\\n        emit OwnershipTransferred(address(0), msgSender);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the address of the current owner.\\\\n     */\\\\n    function owner() public view returns (address) {\\\\n        return _owner;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the owner.\\\\n     */\\\\n    modifier onlyOwner() {\\\\n        require(_owner == _msgSender(), \\\\\\"Ownable: caller is not the owner\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Leaves the contract without owner. It will not be possible to call\\\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\\\n     *\\\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\\\n     * thereby removing any functionality that is only available to the owner.\\\\n     */\\\\n    function renounceOwnership() public virtual onlyOwner {\\\\n        emit OwnershipTransferred(_owner, address(0));\\\\n        _owner = address(0);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\\\n     * Can only be called by the current owner.\\\\n     */\\\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\\\n        require(newOwner != address(0), \\\\\\"Ownable: new owner is the zero address\\\\\\");\\\\n        emit OwnershipTransferred(_owner, newOwner);\\\\n        _owner = newOwner;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x74b0525c81e47810f1bd795755962bdb84de3a4f71cfcb063f4c4d4999a3e96b\\",\\"license\\":\\"MIT\\"},\\"src.sol/TransferRegistry.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/ITransferRegistry.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibIterableMapping.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/access/Ownable.sol\\\\\\";\\\\n\\\\n/// @title TransferRegistry\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice The TransferRegistry maintains an onchain record of all\\\\n///         supported transfers (specifically holds the registry information\\\\n///         defined within the contracts). The offchain protocol uses\\\\n///         this information to get the correct encodings when generating\\\\n///         signatures. The information stored here can only be updated\\\\n///         by the owner of the contract\\\\n\\\\ncontract TransferRegistry is Ownable, ITransferRegistry {\\\\n    using LibIterableMapping for LibIterableMapping.IterableMapping;\\\\n\\\\n    LibIterableMapping.IterableMapping transfers;\\\\n\\\\n    /// @dev Should add a transfer definition to the registry\\\\n    function addTransferDefinition(RegisteredTransfer memory definition)\\\\n        external\\\\n        override\\\\n        onlyOwner\\\\n    {\\\\n        // Get index transfer will be added at\\\\n        uint256 idx = transfers.length();\\\\n        \\\\n        // Add registered transfer\\\\n        transfers.addTransferDefinition(definition);\\\\n\\\\n        // Emit event\\\\n        emit TransferAdded(transfers.getTransferDefinitionByIndex(idx));\\\\n    }\\\\n\\\\n    /// @dev Should remove a transfer definition from the registry\\\\n    function removeTransferDefinition(string memory name)\\\\n        external\\\\n        override\\\\n        onlyOwner\\\\n    {\\\\n        // Get transfer from library to remove for event\\\\n        RegisteredTransfer memory transfer = transfers.getTransferDefinitionByName(name);\\\\n\\\\n        // Remove transfer\\\\n        transfers.removeTransferDefinition(name);\\\\n\\\\n        // Emit event\\\\n        emit TransferRemoved(transfer);\\\\n    }\\\\n\\\\n    /// @dev Should return all transfer defintions in registry\\\\n    function getTransferDefinitions()\\\\n        external\\\\n        view\\\\n        override\\\\n        returns (RegisteredTransfer[] memory)\\\\n    {\\\\n        return transfers.getTransferDefinitions();\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe0bbdc74c5635a2b21ab1a0f2b4ebb377af048f05cc2bab70f645ac826984382\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ITransferRegistry.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental \\\\\\"ABIEncoderV2\\\\\\";\\\\n\\\\nstruct RegisteredTransfer {\\\\n    string name;\\\\n    address definition;\\\\n    string stateEncoding;\\\\n    string resolverEncoding;\\\\n    bytes encodedCancel;\\\\n}\\\\n\\\\ninterface ITransferRegistry {\\\\n    event TransferAdded(RegisteredTransfer transfer);\\\\n\\\\n    event TransferRemoved(RegisteredTransfer transfer);\\\\n\\\\n    // Should add a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function addTransferDefinition(RegisteredTransfer memory transfer) external;\\\\n\\\\n    // Should remove a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function removeTransferDefinition(string memory name) external;\\\\n\\\\n    // Should return all transfer defintions in registry\\\\n    function getTransferDefinitions()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer[] memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd13be6d976c64e381a0d9df10c621cd964454b6916f25df4ea6c1b4cd873a58a\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibIterableMapping.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"../interfaces/ITransferRegistry.sol\\\\\\";\\\\n\\\\n/// @title LibIterableMapping\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This library provides an efficient way to store and retrieve\\\\n///         RegisteredTransfers. This contract is used to manage the transfers\\\\n///         stored by `TransferRegistry.sol`\\\\nlibrary LibIterableMapping {\\\\n    struct TransferDefinitionWithIndex {\\\\n        RegisteredTransfer transfer;\\\\n        uint256 index;\\\\n    }\\\\n\\\\n    struct IterableMapping {\\\\n        mapping(string => TransferDefinitionWithIndex) transfers;\\\\n        string[] names;\\\\n    }\\\\n\\\\n    function stringEqual(string memory s, string memory t)\\\\n        internal\\\\n        pure\\\\n        returns (bool)\\\\n    {\\\\n        return keccak256(abi.encodePacked(s)) == keccak256(abi.encodePacked(t));\\\\n    }\\\\n\\\\n    function isEmptyString(string memory s) internal pure returns (bool) {\\\\n        return stringEqual(s, \\\\\\"\\\\\\");\\\\n    }\\\\n\\\\n    function nameExists(IterableMapping storage self, string memory name)\\\\n        internal\\\\n        view\\\\n        returns (bool)\\\\n    {\\\\n        return\\\\n            !isEmptyString(name) &&\\\\n            self.names.length != 0 &&\\\\n            stringEqual(self.names[self.transfers[name].index], name);\\\\n    }\\\\n\\\\n    function length(IterableMapping storage self)\\\\n        internal\\\\n        view\\\\n        returns (uint256)\\\\n    {\\\\n        return self.names.length;\\\\n    }\\\\n\\\\n    function getTransferDefinitionByName(\\\\n        IterableMapping storage self,\\\\n        string memory name\\\\n    ) internal view returns (RegisteredTransfer memory) {\\\\n        require(nameExists(self, name), \\\\\\"LibIterableMapping: NAME_NOT_FOUND\\\\\\");\\\\n        return self.transfers[name].transfer;\\\\n    }\\\\n\\\\n    function getTransferDefinitionByIndex(\\\\n        IterableMapping storage self,\\\\n        uint256 index\\\\n    ) internal view returns (RegisteredTransfer memory) {\\\\n        require(index < self.names.length, \\\\\\"LibIterableMapping: INVALID_INDEX\\\\\\");\\\\n        return self.transfers[self.names[index]].transfer;\\\\n    }\\\\n\\\\n    function getTransferDefinitions(IterableMapping storage self)\\\\n        internal\\\\n        view\\\\n        returns (RegisteredTransfer[] memory)\\\\n    {\\\\n        uint256 l = self.names.length;\\\\n        RegisteredTransfer[] memory transfers = new RegisteredTransfer[](l);\\\\n        for (uint256 i = 0; i < l; i++) {\\\\n            transfers[i] = self.transfers[self.names[i]].transfer;\\\\n        }\\\\n        return transfers;\\\\n    }\\\\n\\\\n    function addTransferDefinition(\\\\n        IterableMapping storage self,\\\\n        RegisteredTransfer memory transfer\\\\n    ) internal {\\\\n        string memory name = transfer.name;\\\\n        require(!isEmptyString(name), \\\\\\"LibIterableMapping: EMPTY_NAME\\\\\\");\\\\n        require(!nameExists(self, name), \\\\\\"LibIterableMapping: NAME_ALREADY_ADDED\\\\\\");\\\\n        self.transfers[name] = TransferDefinitionWithIndex({\\\\n            transfer: transfer,\\\\n            index: self.names.length\\\\n        });\\\\n        self.names.push(name);\\\\n    }\\\\n\\\\n    function removeTransferDefinition(\\\\n        IterableMapping storage self,\\\\n        string memory name\\\\n    ) internal {\\\\n        require(!isEmptyString(name), \\\\\\"LibIterableMapping: EMPTY_NAME\\\\\\");\\\\n        require(nameExists(self, name), \\\\\\"LibIterableMapping: NAME_NOT_FOUND\\\\\\");\\\\n        uint256 index = self.transfers[name].index;\\\\n        string memory lastName = self.names[self.names.length - 1];\\\\n        self.transfers[lastName].index = index;\\\\n        self.names[index] = lastName;\\\\n        delete self.transfers[name];\\\\n        self.names.pop();\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x52d4a240bb76e9892af1ecbf6cf72995890db0b115a36a54e1b0115f0f47ce8a\\",\\"license\\":\\"UNLICENSED\\"}},\\"version\\":1}","bytecode":"0x608060405234801561001057600080fd5b50600061001b61006a565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35061006e565b3390565b6115078061007d6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806355304c3f14610067578063715018a61461007c5780638da5cb5b14610084578063961bf9b1146100a2578063c9ff4d25146100b5578063f2fde38b146100ca575b600080fd5b61007a610075366004611061565b6100dd565b005b61007a610179565b61008c6101f8565b604051610099919061127c565b60405180910390f35b61007a6100b0366004611026565b610207565b6100bd61028b565b6040516100999190611290565b61007a6100d836600461100b565b61029c565b6100e5610352565b6000546001600160a01b0390811691161461011b5760405162461bcd60e51b81526004016101129061137c565b60405180910390fd5b60006101276001610356565b905061013460018361035d565b7fcdbba5dd6bffbe47d5f74dbed3cf4a2174815c7186eaa49b32f97af4c47543bf6101606001836104af565b60405161016d919061146b565b60405180910390a15050565b610181610352565b6000546001600160a01b039081169116146101ae5760405162461bcd60e51b81526004016101129061137c565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b61020f610352565b6000546001600160a01b0390811691161461023c5760405162461bcd60e51b81526004016101129061137c565b610244610e79565b61024f600183610783565b905061025c6001836107c1565b7fdc44d9d985df00268149ae57add485c612e57109279f8485035dbe2b2251222b8160405161016d919061146b565b606061029760016109df565b905090565b6102a4610352565b6000546001600160a01b039081169116146102d15760405162461bcd60e51b81526004016101129061137c565b6001600160a01b0381166102f75760405162461bcd60e51b8152600401610112906112f0565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6001015490565b805161036881610d0e565b156103855760405162461bcd60e51b8152600401610112906113b1565b61038f8382610d29565b156103ac5760405162461bcd60e51b815260040161011290611336565b60408051808201825283815260018501546020820152905184906103d19084906111f0565b908152604051602091819003820190208251805180519293919284926103fb928492910190610eb1565b506020828101516001830180546001600160a01b0319166001600160a01b039092169190911790556040830151805161043a9260028501920190610eb1565b5060608201518051610456916003840191602090910190610eb1565b5060808201518051610472916004840191602090910190610eb1565b505050602091820151600590910155600180850180549182018155600090815282902083516104a993919092019190840190610eb1565b50505050565b6104b7610e79565b600183015482106104da5760405162461bcd60e51b8152600401610112906113e8565b826000018360010183815481106104ed57fe5b90600052602060002001604051610504919061120c565b9081526040805160209281900383018120805460026001821615610100026000190190911604601f8101859004909402820160c090810190935260a0820184815291939092849291849184018282801561059f5780601f106105745761010080835404028352916020019161059f565b820191906000526020600020905b81548152906001019060200180831161058257829003601f168201915b50505091835250506001828101546001600160a01b0316602080840191909152600280850180546040805161010096831615969096026000190190911692909204601f810184900484028501840183528085529190940193918301828280156106495780601f1061061e57610100808354040283529160200191610649565b820191906000526020600020905b81548152906001019060200180831161062c57829003601f168201915b505050918352505060038201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156106dd5780601f106106b2576101008083540402835291602001916106dd565b820191906000526020600020905b8154815290600101906020018083116106c057829003601f168201915b505050918352505060048201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156107715780601f1061074657610100808354040283529160200191610771565b820191906000526020600020905b81548152906001019060200180831161075457829003601f168201915b50505050508152505090505b92915050565b61078b610e79565b6107958383610d29565b6107b15760405162461bcd60e51b815260040161011290611429565b60405183906105049084906111f0565b6107ca81610d0e565b156107e75760405162461bcd60e51b8152600401610112906113b1565b6107f18282610d29565b61080d5760405162461bcd60e51b815260040161011290611429565b6000826000018260405161082191906111f0565b90815260405190819003602001902060050154600184018054919250606091600019810190811061084e57fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156108dc5780601f106108b1576101008083540402835291602001916108dc565b820191906000526020600020905b8154815290600101906020018083116108bf57829003601f168201915b505050505090508184600001826040516108f691906111f0565b9081526020016040518091039020600501819055508084600101838154811061091b57fe5b906000526020600020019080519060200190610938929190610eb1565b5060405184906109499085906111f0565b908152604051908190036020019020600081816109668282610f2f565b6001820180546001600160a01b0319169055610986600283016000610f2f565b610994600383016000610f2f565b6109a2600483016000610f2f565b505060058201600090555050836001018054806109bb57fe5b6001900381819060005260206000200160006109d79190610f2f565b905550505050565b6001810154606090818167ffffffffffffffff811180156109ff57600080fd5b50604051908082528060200260200182016040528015610a3957816020015b610a26610e79565b815260200190600190039081610a1e5790505b50905060005b82811015610d065784600001856001018281548110610a5a57fe5b90600052602060002001604051610a71919061120c565b9081526040805160209281900383018120805460026001821615610100026000190190911604601f8101859004909402820160c090810190935260a08201848152919390928492918491840182828015610b0c5780601f10610ae157610100808354040283529160200191610b0c565b820191906000526020600020905b815481529060010190602001808311610aef57829003601f168201915b50505091835250506001828101546001600160a01b0316602080840191909152600280850180546040805161010096831615969096026000190190911692909204601f81018490048402850184018352808552919094019391830182828015610bb65780601f10610b8b57610100808354040283529160200191610bb6565b820191906000526020600020905b815481529060010190602001808311610b9957829003601f168201915b505050918352505060038201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015610c4a5780601f10610c1f57610100808354040283529160200191610c4a565b820191906000526020600020905b815481529060010190602001808311610c2d57829003601f168201915b505050918352505060048201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015610cde5780601f10610cb357610100808354040283529160200191610cde565b820191906000526020600020905b815481529060010190602001808311610cc157829003601f168201915b505050505081525050828281518110610cf357fe5b6020908102919091010152600101610a3f565b509392505050565b600061077d8260405180602001604052806000815250610e20565b6000610d3482610d0e565b158015610d445750600183015415155b8015610e195750610e19836001018460000184604051610d6491906111f0565b90815260200160405180910390206005015481548110610d8057fe5b600091825260209182902001805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015610e0e5780601f10610de357610100808354040283529160200191610e0e565b820191906000526020600020905b815481529060010190602001808311610df157829003601f168201915b505050505083610e20565b9392505050565b600081604051602001610e3391906111f0565b6040516020818303038152906040528051906020012083604051602001610e5a91906111f0565b6040516020818303038152906040528051906020012014905092915050565b6040518060a001604052806060815260200160006001600160a01b031681526020016060815260200160608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610ef257805160ff1916838001178555610f1f565b82800160010185558215610f1f579182015b82811115610f1f578251825591602001919060010190610f04565b50610f2b929150610f76565b5090565b50805460018160011615610100020316600290046000825580601f10610f555750610f73565b601f016020900490600052602060002090810190610f739190610f76565b50565b5b80821115610f2b5760008155600101610f77565b80356001600160a01b038116811461077d57600080fd5b600082601f830112610fb2578081fd5b813567ffffffffffffffff811115610fc8578182fd5b610fdb601f8201601f191660200161147e565b9150808252836020828501011115610ff257600080fd5b8060208401602084013760009082016020015292915050565b60006020828403121561101c578081fd5b610e198383610f8b565b600060208284031215611037578081fd5b813567ffffffffffffffff81111561104d578182fd5b61105984828501610fa2565b949350505050565b600060208284031215611072578081fd5b813567ffffffffffffffff80821115611089578283fd5b9083019060a0828603121561109c578283fd5b6110a660a061147e565b8235828111156110b4578485fd5b6110c087828601610fa2565b8252506110d08660208501610f8b565b60208201526040830135828111156110e6578485fd5b6110f287828601610fa2565b604083015250606083013582811115611109578485fd5b61111587828601610fa2565b60608301525060808301358281111561112c578485fd5b61113887828601610fa2565b60808301525095945050505050565b6000815180845261115f8160208601602086016114a5565b601f01601f19169290920160200192915050565b6000815160a0845261118860a0850182611147565b905060018060a01b036020840151166020850152604083015184820360408601526111b38282611147565b915050606083015184820360608601526111cd8282611147565b915050608083015184820360808601526111e78282611147565b95945050505050565b600082516112028184602087016114a5565b9190910192915050565b600080835460018082166000811461122b576001811461124257611271565b60ff198316865260028304607f1686019350611271565b600283048786526020808720875b838110156112695781548a820152908501908201611250565b505050860193505b509195945050505050565b6001600160a01b0391909116815260200190565b6000602080830181845280855180835260408601915060408482028701019250838701855b828110156112e357603f198886030184526112d1858351611173565b945092850192908501906001016112b5565b5092979650505050505050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526026908201527f4c69624974657261626c654d617070696e673a204e414d455f414c524541445960408201526517d05111115160d21b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601e908201527f4c69624974657261626c654d617070696e673a20454d5054595f4e414d450000604082015260600190565b60208082526021908201527f4c69624974657261626c654d617070696e673a20494e56414c49445f494e44456040820152600b60fb1b606082015260800190565b60208082526022908201527f4c69624974657261626c654d617070696e673a204e414d455f4e4f545f464f55604082015261139160f21b606082015260800190565b600060208252610e196020830184611173565b60405181810167ffffffffffffffff8111828210171561149d57600080fd5b604052919050565b60005b838110156114c05781810151838201526020016114a8565b838111156104a9575050600091015256fea26469706673582212207ffce686b133899c962d2392c37d7cc417bfb49017cb433d19d525b065f0f46d64736f6c63430007010033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106100625760003560e01c806355304c3f14610067578063715018a61461007c5780638da5cb5b14610084578063961bf9b1146100a2578063c9ff4d25146100b5578063f2fde38b146100ca575b600080fd5b61007a610075366004611061565b6100dd565b005b61007a610179565b61008c6101f8565b604051610099919061127c565b60405180910390f35b61007a6100b0366004611026565b610207565b6100bd61028b565b6040516100999190611290565b61007a6100d836600461100b565b61029c565b6100e5610352565b6000546001600160a01b0390811691161461011b5760405162461bcd60e51b81526004016101129061137c565b60405180910390fd5b60006101276001610356565b905061013460018361035d565b7fcdbba5dd6bffbe47d5f74dbed3cf4a2174815c7186eaa49b32f97af4c47543bf6101606001836104af565b60405161016d919061146b565b60405180910390a15050565b610181610352565b6000546001600160a01b039081169116146101ae5760405162461bcd60e51b81526004016101129061137c565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b61020f610352565b6000546001600160a01b0390811691161461023c5760405162461bcd60e51b81526004016101129061137c565b610244610e79565b61024f600183610783565b905061025c6001836107c1565b7fdc44d9d985df00268149ae57add485c612e57109279f8485035dbe2b2251222b8160405161016d919061146b565b606061029760016109df565b905090565b6102a4610352565b6000546001600160a01b039081169116146102d15760405162461bcd60e51b81526004016101129061137c565b6001600160a01b0381166102f75760405162461bcd60e51b8152600401610112906112f0565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6001015490565b805161036881610d0e565b156103855760405162461bcd60e51b8152600401610112906113b1565b61038f8382610d29565b156103ac5760405162461bcd60e51b815260040161011290611336565b60408051808201825283815260018501546020820152905184906103d19084906111f0565b908152604051602091819003820190208251805180519293919284926103fb928492910190610eb1565b506020828101516001830180546001600160a01b0319166001600160a01b039092169190911790556040830151805161043a9260028501920190610eb1565b5060608201518051610456916003840191602090910190610eb1565b5060808201518051610472916004840191602090910190610eb1565b505050602091820151600590910155600180850180549182018155600090815282902083516104a993919092019190840190610eb1565b50505050565b6104b7610e79565b600183015482106104da5760405162461bcd60e51b8152600401610112906113e8565b826000018360010183815481106104ed57fe5b90600052602060002001604051610504919061120c565b9081526040805160209281900383018120805460026001821615610100026000190190911604601f8101859004909402820160c090810190935260a0820184815291939092849291849184018282801561059f5780601f106105745761010080835404028352916020019161059f565b820191906000526020600020905b81548152906001019060200180831161058257829003601f168201915b50505091835250506001828101546001600160a01b0316602080840191909152600280850180546040805161010096831615969096026000190190911692909204601f810184900484028501840183528085529190940193918301828280156106495780601f1061061e57610100808354040283529160200191610649565b820191906000526020600020905b81548152906001019060200180831161062c57829003601f168201915b505050918352505060038201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156106dd5780601f106106b2576101008083540402835291602001916106dd565b820191906000526020600020905b8154815290600101906020018083116106c057829003601f168201915b505050918352505060048201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156107715780601f1061074657610100808354040283529160200191610771565b820191906000526020600020905b81548152906001019060200180831161075457829003601f168201915b50505050508152505090505b92915050565b61078b610e79565b6107958383610d29565b6107b15760405162461bcd60e51b815260040161011290611429565b60405183906105049084906111f0565b6107ca81610d0e565b156107e75760405162461bcd60e51b8152600401610112906113b1565b6107f18282610d29565b61080d5760405162461bcd60e51b815260040161011290611429565b6000826000018260405161082191906111f0565b90815260405190819003602001902060050154600184018054919250606091600019810190811061084e57fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156108dc5780601f106108b1576101008083540402835291602001916108dc565b820191906000526020600020905b8154815290600101906020018083116108bf57829003601f168201915b505050505090508184600001826040516108f691906111f0565b9081526020016040518091039020600501819055508084600101838154811061091b57fe5b906000526020600020019080519060200190610938929190610eb1565b5060405184906109499085906111f0565b908152604051908190036020019020600081816109668282610f2f565b6001820180546001600160a01b0319169055610986600283016000610f2f565b610994600383016000610f2f565b6109a2600483016000610f2f565b505060058201600090555050836001018054806109bb57fe5b6001900381819060005260206000200160006109d79190610f2f565b905550505050565b6001810154606090818167ffffffffffffffff811180156109ff57600080fd5b50604051908082528060200260200182016040528015610a3957816020015b610a26610e79565b815260200190600190039081610a1e5790505b50905060005b82811015610d065784600001856001018281548110610a5a57fe5b90600052602060002001604051610a71919061120c565b9081526040805160209281900383018120805460026001821615610100026000190190911604601f8101859004909402820160c090810190935260a08201848152919390928492918491840182828015610b0c5780601f10610ae157610100808354040283529160200191610b0c565b820191906000526020600020905b815481529060010190602001808311610aef57829003601f168201915b50505091835250506001828101546001600160a01b0316602080840191909152600280850180546040805161010096831615969096026000190190911692909204601f81018490048402850184018352808552919094019391830182828015610bb65780601f10610b8b57610100808354040283529160200191610bb6565b820191906000526020600020905b815481529060010190602001808311610b9957829003601f168201915b505050918352505060038201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015610c4a5780601f10610c1f57610100808354040283529160200191610c4a565b820191906000526020600020905b815481529060010190602001808311610c2d57829003601f168201915b505050918352505060048201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015610cde5780601f10610cb357610100808354040283529160200191610cde565b820191906000526020600020905b815481529060010190602001808311610cc157829003601f168201915b505050505081525050828281518110610cf357fe5b6020908102919091010152600101610a3f565b509392505050565b600061077d8260405180602001604052806000815250610e20565b6000610d3482610d0e565b158015610d445750600183015415155b8015610e195750610e19836001018460000184604051610d6491906111f0565b90815260200160405180910390206005015481548110610d8057fe5b600091825260209182902001805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015610e0e5780601f10610de357610100808354040283529160200191610e0e565b820191906000526020600020905b815481529060010190602001808311610df157829003601f168201915b505050505083610e20565b9392505050565b600081604051602001610e3391906111f0565b6040516020818303038152906040528051906020012083604051602001610e5a91906111f0565b6040516020818303038152906040528051906020012014905092915050565b6040518060a001604052806060815260200160006001600160a01b031681526020016060815260200160608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610ef257805160ff1916838001178555610f1f565b82800160010185558215610f1f579182015b82811115610f1f578251825591602001919060010190610f04565b50610f2b929150610f76565b5090565b50805460018160011615610100020316600290046000825580601f10610f555750610f73565b601f016020900490600052602060002090810190610f739190610f76565b50565b5b80821115610f2b5760008155600101610f77565b80356001600160a01b038116811461077d57600080fd5b600082601f830112610fb2578081fd5b813567ffffffffffffffff811115610fc8578182fd5b610fdb601f8201601f191660200161147e565b9150808252836020828501011115610ff257600080fd5b8060208401602084013760009082016020015292915050565b60006020828403121561101c578081fd5b610e198383610f8b565b600060208284031215611037578081fd5b813567ffffffffffffffff81111561104d578182fd5b61105984828501610fa2565b949350505050565b600060208284031215611072578081fd5b813567ffffffffffffffff80821115611089578283fd5b9083019060a0828603121561109c578283fd5b6110a660a061147e565b8235828111156110b4578485fd5b6110c087828601610fa2565b8252506110d08660208501610f8b565b60208201526040830135828111156110e6578485fd5b6110f287828601610fa2565b604083015250606083013582811115611109578485fd5b61111587828601610fa2565b60608301525060808301358281111561112c578485fd5b61113887828601610fa2565b60808301525095945050505050565b6000815180845261115f8160208601602086016114a5565b601f01601f19169290920160200192915050565b6000815160a0845261118860a0850182611147565b905060018060a01b036020840151166020850152604083015184820360408601526111b38282611147565b915050606083015184820360608601526111cd8282611147565b915050608083015184820360808601526111e78282611147565b95945050505050565b600082516112028184602087016114a5565b9190910192915050565b600080835460018082166000811461122b576001811461124257611271565b60ff198316865260028304607f1686019350611271565b600283048786526020808720875b838110156112695781548a820152908501908201611250565b505050860193505b509195945050505050565b6001600160a01b0391909116815260200190565b6000602080830181845280855180835260408601915060408482028701019250838701855b828110156112e357603f198886030184526112d1858351611173565b945092850192908501906001016112b5565b5092979650505050505050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526026908201527f4c69624974657261626c654d617070696e673a204e414d455f414c524541445960408201526517d05111115160d21b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601e908201527f4c69624974657261626c654d617070696e673a20454d5054595f4e414d450000604082015260600190565b60208082526021908201527f4c69624974657261626c654d617070696e673a20494e56414c49445f494e44456040820152600b60fb1b606082015260800190565b60208082526022908201527f4c69624974657261626c654d617070696e673a204e414d455f4e4f545f464f55604082015261139160f21b606082015260800190565b600060208252610e196020830184611173565b60405181810167ffffffffffffffff8111828210171561149d57600080fd5b604052919050565b60005b838110156114c05781810151838201526020016114a8565b838111156104a9575050600091015256fea26469706673582212207ffce686b133899c962d2392c37d7cc417bfb49017cb433d19d525b065f0f46d64736f6c63430007010033","devdoc":{"author":"Connext <support@connext.network>","kind":"dev","methods":{"addTransferDefinition((string,address,string,string,bytes))":{"details":"Should add a transfer definition to the registry"},"getTransferDefinitions()":{"details":"Should return all transfer defintions in registry"},"owner()":{"details":"Returns the address of the current owner."},"removeTransferDefinition(string)":{"details":"Should remove a transfer definition from the registry"},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"title":"TransferRegistry","version":1},"userdoc":{"kind":"user","methods":{},"notice":"The TransferRegistry maintains an onchain record of all         supported transfers (specifically holds the registry information         defined within the contracts). The offchain protocol uses         this information to get the correct encodings when generating         signatures. The information stored here can only be updated         by the owner of the contract","version":1},"storageLayout":{"storage":[{"astId":30,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":3458,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"transfers","offset":0,"slot":"1","type":"t_struct(IterableMapping)4424_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_string_storage)dyn_storage":{"base":"t_string_storage","encoding":"dynamic_array","label":"string[]","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_mapping(t_string_memory_ptr,t_struct(TransferDefinitionWithIndex)4416_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => struct LibIterableMapping.TransferDefinitionWithIndex)","numberOfBytes":"32","value":"t_struct(TransferDefinitionWithIndex)4416_storage"},"t_string_memory_ptr":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(IterableMapping)4424_storage":{"encoding":"inplace","label":"struct LibIterableMapping.IterableMapping","members":[{"astId":4420,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"transfers","offset":0,"slot":"0","type":"t_mapping(t_string_memory_ptr,t_struct(TransferDefinitionWithIndex)4416_storage)"},{"astId":4423,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"names","offset":0,"slot":"1","type":"t_array(t_string_storage)dyn_storage"}],"numberOfBytes":"64"},"t_struct(RegisteredTransfer)3967_storage":{"encoding":"inplace","label":"struct RegisteredTransfer","members":[{"astId":3958,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":3960,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"definition","offset":0,"slot":"1","type":"t_address"},{"astId":3962,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"stateEncoding","offset":0,"slot":"2","type":"t_string_storage"},{"astId":3964,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"resolverEncoding","offset":0,"slot":"3","type":"t_string_storage"},{"astId":3966,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"encodedCancel","offset":0,"slot":"4","type":"t_bytes_storage"}],"numberOfBytes":"160"},"t_struct(TransferDefinitionWithIndex)4416_storage":{"encoding":"inplace","label":"struct LibIterableMapping.TransferDefinitionWithIndex","members":[{"astId":4413,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"transfer","offset":0,"slot":"0","type":"t_struct(RegisteredTransfer)3967_storage"},{"astId":4415,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"index","offset":0,"slot":"5","type":"t_uint256"}],"numberOfBytes":"192"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}}}')},2829:function(e){e.exports=JSON.parse('{"address":"0x1Ce3395105914E6Cdd68e349afDfD7D726f3c8Be","abi":[{"inputs":[],"name":"EncodedCancel","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"Name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ResolverEncoding","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"StateEncoding","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"encodedBalance","type":"bytes"},{"internalType":"bytes","name":"encodedState","type":"bytes"}],"name":"create","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"getRegistryInformation","outputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"address","name":"definition","type":"address"},{"internalType":"string","name":"stateEncoding","type":"string"},{"internalType":"string","name":"resolverEncoding","type":"string"},{"internalType":"bytes","name":"encodedCancel","type":"bytes"}],"internalType":"struct RegisteredTransfer","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"encodedBalance","type":"bytes"},{"internalType":"bytes","name":"encodedState","type":"bytes"},{"internalType":"bytes","name":"encodedResolver","type":"bytes"}],"name":"resolve","outputs":[{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"}],"transactionHash":"0x8f52a07c6444b93e80f3f225722efa6ff780ba51967568f425025ca1ee4e4ee6","receipt":{"to":null,"from":"0x627306090abaB3A6e1400e9345bC60c78a8BEf57","contractAddress":"0x1Ce3395105914E6Cdd68e349afDfD7D726f3c8Be","transactionIndex":0,"gasUsed":"1069621","logsBloom":"0xblockHash":"0x0d3b6ab0e28598a21083d4c86d2004be719407d0460e5bcfb9fd63eee25988a1","transactionHash":"0x8f52a07c6444b93e80f3f225722efa6ff780ba51967568f425025ca1ee4e4ee6","logs":[{"transactionIndex":0,"blockNumber":8439287,"transactionHash":"0x8f52a07c6444b93e80f3f225722efa6ff780ba51967568f425025ca1ee4e4ee6","address":"0x0000000000000000000000000000000000001010","topics":["0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63","0x0000000000000000000000000000000000000000000000000000000000001010","0x000000000000000000000000627306090abab3a6e1400e9345bc60c78a8bef57","0x000000000000000000000000928ed6a3e94437bbd316ccad78479f1d163a6a8c"],"data":"0x0000000000000000000000000000000000000000000000000003ccd08bbfd20000000000000000000000000000000000000000000000000001c4618fdda4ce70000000000000000000000000000000000000000000000020892086f361846d2100000000000000000000000000000000000000000000000001c094bf51e4fc70000000000000000000000000000000000000000000000020892453c3ed443f21","logIndex":0,"blockHash":"0x0d3b6ab0e28598a21083d4c86d2004be719407d0460e5bcfb9fd63eee25988a1"}],"blockNumber":8439287,"cumulativeGasUsed":"1069621","status":1,"byzantium":true},"args":[],"solcInputHash":"89c55d5a88f10637860a9ea31a1daad3","metadata":"{\\"compiler\\":{\\"version\\":\\"0.7.1+commit.f4a555be\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[],\\"name\\":\\"EncodedCancel\\",\\"outputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"\\",\\"type\\":\\"bytes\\"}],\\"stateMutability\\":\\"pure\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"Name\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"ResolverEncoding\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"StateEncoding\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedBalance\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedState\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"create\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"pure\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getRegistryInformation\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"definition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"stateEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"resolverEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedCancel\\",\\"type\\":\\"bytes\\"}],\\"internalType\\":\\"struct RegisteredTransfer\\",\\"name\\":\\"\\",\\"type\\":\\"tuple\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedBalance\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedState\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedResolver\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"resolve\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"\\",\\"type\\":\\"tuple\\"}],\\"stateMutability\\":\\"pure\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"author\\":\\"Connext <support@connext.network>\\",\\"kind\\":\\"dev\\",\\"methods\\":{},\\"title\\":\\"Withdraw\\",\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"notice\\":\\"This contract burns the initiator\'s funds if a mutually signed         withdraw commitment can be generated\\",\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"src.sol/transferDefinitions/Withdraw.sol\\":\\"Withdraw\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\\\n *\\\\n * These functions can be used to verify that a message was signed by the holder\\\\n * of the private keys of a given address.\\\\n */\\\\nlibrary ECDSA {\\\\n    /**\\\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\\\n     * `signature`. This address can then be used for verification purposes.\\\\n     *\\\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\\\n     * this function rejects them by requiring the `s` value to be in the lower\\\\n     * half order, and the `v` value to be either 27 or 28.\\\\n     *\\\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\\\n     * verification to be secure: it is possible to craft signatures that\\\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\\\n     * this is by receiving a hash of the original message (which may otherwise\\\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\\\n     */\\\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\\\n        // Check the signature length\\\\n        if (signature.length != 65) {\\\\n            revert(\\\\\\"ECDSA: invalid signature length\\\\\\");\\\\n        }\\\\n\\\\n        // Divide the signature in r, s and v variables\\\\n        bytes32 r;\\\\n        bytes32 s;\\\\n        uint8 v;\\\\n\\\\n        // ecrecover takes the signature parameters, and the only way to get them\\\\n        // currently is to use assembly.\\\\n        // solhint-disable-next-line no-inline-assembly\\\\n        assembly {\\\\n            r := mload(add(signature, 0x20))\\\\n            s := mload(add(signature, 0x40))\\\\n            v := byte(0, mload(add(signature, 0x60)))\\\\n        }\\\\n\\\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\\\n        // the valid range for s in (281): 0 < s < secp256k1n \\\\u00f7 2 + 1, and for v in (282): v \\\\u2208 {27, 28}. Most\\\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\\\n        //\\\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\\\n        // these malleable signatures as well.\\\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\\\n            revert(\\\\\\"ECDSA: invalid signature \'s\' value\\\\\\");\\\\n        }\\\\n\\\\n        if (v != 27 && v != 28) {\\\\n            revert(\\\\\\"ECDSA: invalid signature \'v\' value\\\\\\");\\\\n        }\\\\n\\\\n        // If the signature is valid (and not malleable), return the signer address\\\\n        address signer = ecrecover(hash, v, r, s);\\\\n        require(signer != address(0), \\\\\\"ECDSA: invalid signature\\\\\\");\\\\n\\\\n        return signer;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\\\n     * replicates the behavior of the\\\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\\\n     * JSON-RPC method.\\\\n     *\\\\n     * See {recover}.\\\\n     */\\\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\\\n        // 32 is the length in bytes of hash,\\\\n        // enforced by the type signature above\\\\n        return keccak256(abi.encodePacked(\\\\\\"\\\\\\\\x19Ethereum Signed Message:\\\\\\\\n32\\\\\\", hash));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf25c49d2be2d28918ae6de7e9724238367dabe50631ec8fd23d1cdae2cb70262\\",\\"license\\":\\"MIT\\"},\\"src.sol/interfaces/ITransferDefinition.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./ITransferRegistry.sol\\\\\\";\\\\nimport \\\\\\"./Types.sol\\\\\\";\\\\n\\\\ninterface ITransferDefinition {\\\\n    // Validates the initial state of the transfer.\\\\n    // Called by validator.ts during `create` updates.\\\\n    function create(bytes calldata encodedBalance, bytes calldata)\\\\n        external\\\\n        view\\\\n        returns (bool);\\\\n\\\\n    // Performs a state transition to resolve a transfer and returns final balances.\\\\n    // Called by validator.ts during `resolve` updates.\\\\n    function resolve(\\\\n        bytes calldata encodedBalance,\\\\n        bytes calldata,\\\\n        bytes calldata\\\\n    ) external view returns (Balance memory);\\\\n\\\\n    // Should also have the following properties:\\\\n    // string public constant override Name = \\\\\\"...\\\\\\";\\\\n    // string public constant override StateEncoding = \\\\\\"...\\\\\\";\\\\n    // string public constant override ResolverEncoding = \\\\\\"...\\\\\\";\\\\n    // These properties are included on the transfer specifically\\\\n    // to make it easier for implementers to add new transfers by\\\\n    // only include a `.sol` file\\\\n    function Name() external view returns (string memory);\\\\n\\\\n    function StateEncoding() external view returns (string memory);\\\\n\\\\n    function ResolverEncoding() external view returns (string memory);\\\\n\\\\n    function EncodedCancel() external view returns (bytes memory);\\\\n\\\\n    function getRegistryInformation()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd8eef575aa791b187397c9096e6cf40431b590d3999f0a80e38f3e59f4cf4764\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ITransferRegistry.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental \\\\\\"ABIEncoderV2\\\\\\";\\\\n\\\\nstruct RegisteredTransfer {\\\\n    string name;\\\\n    address definition;\\\\n    string stateEncoding;\\\\n    string resolverEncoding;\\\\n    bytes encodedCancel;\\\\n}\\\\n\\\\ninterface ITransferRegistry {\\\\n    event TransferAdded(RegisteredTransfer transfer);\\\\n\\\\n    event TransferRemoved(RegisteredTransfer transfer);\\\\n\\\\n    // Should add a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function addTransferDefinition(RegisteredTransfer memory transfer) external;\\\\n\\\\n    // Should remove a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function removeTransferDefinition(string memory name) external;\\\\n\\\\n    // Should return all transfer defintions in registry\\\\n    function getTransferDefinitions()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer[] memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd13be6d976c64e381a0d9df10c621cd964454b6916f25df4ea6c1b4cd873a58a\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/Types.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nstruct Balance {\\\\n    uint256[2] amount; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n    address payable[2] to; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf8c71b155b630cde965f5d1db5f0d2751a9763f5a797f15d946613e9224f1046\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibChannelCrypto.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\\\\\";\\\\n\\\\t\\\\t\\\\n/// @author Connext <support@connext.network>\\\\t\\\\t\\\\n/// @notice This library contains helpers for recovering signatures from a\\\\t\\\\t\\\\n///         Vector commitments. Channels do not allow for arbitrary signing of\\\\t\\\\t\\\\n///         messages to prevent misuse of private keys by injected providers,\\\\t\\\\t\\\\n///         and instead only sign messages with a Vector channel prefix.\\\\nlibrary LibChannelCrypto {\\\\n    function checkSignature(\\\\n        bytes32 hash,\\\\n        bytes memory signature,\\\\n        address allegedSigner\\\\n    ) internal pure returns (bool) {\\\\n        return recoverChannelMessageSigner(hash, signature) == allegedSigner;\\\\n    }\\\\n\\\\n    function recoverChannelMessageSigner(bytes32 hash, bytes memory signature)\\\\n        internal\\\\n        pure\\\\n        returns (address)\\\\n    {\\\\n        bytes32 digest = toChannelSignedMessage(hash);\\\\n        return ECDSA.recover(digest, signature);\\\\n    }\\\\n\\\\n    function toChannelSignedMessage(bytes32 hash)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        // 32 is the length in bytes of hash,\\\\n        // enforced by the type signature above\\\\n        return\\\\n            keccak256(abi.encodePacked(\\\\\\"\\\\\\\\x16Vector Signed Message:\\\\\\\\n32\\\\\\", hash));\\\\n    }\\\\n\\\\n    function checkUtilitySignature(\\\\n        bytes32 hash,\\\\n        bytes memory signature,\\\\n        address allegedSigner\\\\n    ) internal pure returns (bool) {\\\\n        return recoverChannelMessageSigner(hash, signature) == allegedSigner;\\\\n    }\\\\n\\\\n    function recoverUtilityMessageSigner(bytes32 hash, bytes memory signature)\\\\n        internal\\\\n        pure\\\\n        returns (address)\\\\n    {\\\\n        bytes32 digest = toUtilitySignedMessage(hash);\\\\n        return ECDSA.recover(digest, signature);\\\\n    }\\\\n\\\\n    function toUtilitySignedMessage(bytes32 hash)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        // 32 is the length in bytes of hash,\\\\n        // enforced by the type signature above\\\\n        return\\\\n            keccak256(abi.encodePacked(\\\\\\"\\\\\\\\x17Utility Signed Message:\\\\\\\\n32\\\\\\", hash));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xb8aa3679b75f2a1a5785f614f5dff9a76a689c18caa56a8df1f4e3c3167d6ece\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/transferDefinitions/TransferDefinition.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"../interfaces/ITransferDefinition.sol\\\\\\";\\\\nimport \\\\\\"../interfaces/ITransferRegistry.sol\\\\\\";\\\\n\\\\n/// @title TransferDefinition\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This contract helps reduce boilerplate needed when creating\\\\n///         new transfer definitions by providing an implementation of\\\\n///         the required getter\\\\n\\\\nabstract contract TransferDefinition is ITransferDefinition {\\\\n    function getRegistryInformation()\\\\n        external\\\\n        view\\\\n        override\\\\n        returns (RegisteredTransfer memory)\\\\n    {\\\\n        return\\\\n            RegisteredTransfer({\\\\n                name: this.Name(),\\\\n                stateEncoding: this.StateEncoding(),\\\\n                resolverEncoding: this.ResolverEncoding(),\\\\n                definition: address(this),\\\\n                encodedCancel: this.EncodedCancel()\\\\n            });\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xdb8bcb3fadd5c514bc6585b0a48d66952570bbb1a62f18b9dc9a4f693dc11c5e\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/transferDefinitions/Withdraw.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./TransferDefinition.sol\\\\\\";\\\\nimport \\\\\\"../lib/LibChannelCrypto.sol\\\\\\";\\\\n\\\\n/// @title Withdraw\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This contract burns the initiator\'s funds if a mutually signed\\\\n///         withdraw commitment can be generated\\\\n\\\\ncontract Withdraw is TransferDefinition {\\\\n    using LibChannelCrypto for bytes32;\\\\n\\\\n    struct TransferState {\\\\n        bytes initiatorSignature;\\\\n        address initiator;\\\\n        address responder;\\\\n        bytes32 data;\\\\n        uint256 nonce; // included so that each withdraw commitment has a unique hash\\\\n        uint256 fee;\\\\n        address callTo;\\\\n        bytes callData;\\\\n    }\\\\n\\\\n    struct TransferResolver {\\\\n        bytes responderSignature;\\\\n    }\\\\n\\\\n    // Provide registry information\\\\n    string public constant override Name = \\\\\\"Withdraw\\\\\\";\\\\n    string public constant override StateEncoding =\\\\n        \\\\\\"tuple(bytes initiatorSignature, address initiator, address responder, bytes32 data, uint256 nonce, uint256 fee, address callTo, bytes callData)\\\\\\";\\\\n    string public constant override ResolverEncoding =\\\\n        \\\\\\"tuple(bytes responderSignature)\\\\\\";\\\\n\\\\n    function EncodedCancel() external pure override returns(bytes memory) {\\\\n      TransferResolver memory resolver;\\\\n      resolver.responderSignature = new bytes(65);\\\\n      return abi.encode(resolver);\\\\n    }\\\\n\\\\n    function create(bytes calldata encodedBalance, bytes calldata encodedState)\\\\n        external\\\\n        pure\\\\n        override\\\\n        returns (bool)\\\\n    {\\\\n        // Get unencoded information\\\\n        TransferState memory state = abi.decode(encodedState, (TransferState));\\\\n        Balance memory balance = abi.decode(encodedBalance, (Balance));\\\\n\\\\n        require(balance.amount[1] == 0, \\\\\\"Withdraw: NONZERO_RECIPIENT_BALANCE\\\\\\");\\\\n        require(\\\\n            state.initiator != address(0) && state.responder != address(0),\\\\n            \\\\\\"Withdraw: EMPTY_SIGNERS\\\\\\"\\\\n        );\\\\n        require(state.data != bytes32(0), \\\\\\"Withdraw: EMPTY_DATA\\\\\\");\\\\n        require(state.nonce != uint256(0), \\\\\\"Withdraw: EMPTY_NONCE\\\\\\");\\\\n        require(\\\\n            state.fee <= balance.amount[0],\\\\n            \\\\\\"Withdraw: INSUFFICIENT_BALANCE\\\\\\"\\\\n        );\\\\n        require(\\\\n            state.data.checkSignature(\\\\n                state.initiatorSignature,\\\\n                state.initiator\\\\n            ),\\\\n            \\\\\\"Withdraw: INVALID_INITIATOR_SIG\\\\\\"\\\\n        );\\\\n        \\\\n        // Valid initial transfer state\\\\n        return true;\\\\n    }\\\\n\\\\n    function resolve(\\\\n        bytes calldata encodedBalance,\\\\n        bytes calldata encodedState,\\\\n        bytes calldata encodedResolver\\\\n    ) external pure override returns (Balance memory) {\\\\n        TransferState memory state = abi.decode(encodedState, (TransferState));\\\\n        TransferResolver memory resolver =\\\\n            abi.decode(encodedResolver, (TransferResolver));\\\\n        Balance memory balance = abi.decode(encodedBalance, (Balance));\\\\n\\\\n        // Allow for a withdrawal to be canceled if an empty signature is \\\\n        // passed in. Should have *specific* cancellation action, not just\\\\n        // any invalid sig\\\\n        bytes memory b = new bytes(65);\\\\n        if (keccak256(resolver.responderSignature) == keccak256(b)) {\\\\n            // Withdraw should be cancelled, no state manipulation needed\\\\n        } else {\\\\n            require(\\\\n                state.data.checkSignature(\\\\n                    resolver.responderSignature,\\\\n                    state.responder\\\\n                ),\\\\n                \\\\\\"Withdraw: INVALID_RESPONDER_SIG\\\\\\"\\\\n            );\\\\n            // Reduce withdraw amount by optional fee\\\\n            // It\'s up to the offchain validators to ensure that the withdraw commitment takes this fee into account\\\\n            balance.amount[1] = state.fee;\\\\n            balance.amount[0] = 0;\\\\n        }\\\\n\\\\n        return balance;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x012e5deb93a2d67452884dff9179274801a30abf2455833eb4c59a42a87c50b0\\",\\"license\\":\\"UNLICENSED\\"}},\\"version\\":1}","bytecode":"0x608060405234801561001057600080fd5b50611263806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638052474d1161005b5780638052474d146100bd5780638de8b77e146100c55780638ef98a7e146100cd57806394184ba9146100ed5761007d565b80630528aa1c14610082578063206162be146100a05780633722aff9146100b5575b600080fd5b61008a61010d565b6040516100979190610d6e565b60405180910390f35b6100a861015c565b6040516100979190611060565b61008a610368565b61008a6103a1565b61008a6103c5565b6100e06100db3660046109fc565b6103e1565b6040516100979190610ff6565b6101006100fb366004610993565b6104ca565b6040516100979190610d45565b60606101176107b0565b604080516041808252608082019092529060208201818036833750505081526040516101479082906020016110f0565b60405160208183030381529060405291505090565b6101646107c3565b6040518060a00160405280306001600160a01b0316638052474d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156101a857600080fd5b505afa1580156101bc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101e49190810190610a92565b8152602001306001600160a01b03168152602001306001600160a01b0316638de8b77e6040518163ffffffff1660e01b815260040160006040518083038186803b15801561023157600080fd5b505afa158015610245573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261026d9190810190610a92565b8152602001306001600160a01b0316633722aff96040518163ffffffff1660e01b815260040160006040518083038186803b1580156102ab57600080fd5b505afa1580156102bf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102e79190810190610a92565b8152602001306001600160a01b0316630528aa1c6040518163ffffffff1660e01b815260040160006040518083038186803b15801561032557600080fd5b505afa158015610339573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103619190810190610a92565b9052905090565b6040518060400160405280601f81526020017f7475706c6528627974657320726573706f6e6465725369676e6174757265290081525081565b60405180604001604052806008815260200167576974686472617760c01b81525081565b6040518060c00160405280608f815260200161119f608f913981565b6103e96107fb565b6103f1610820565b6103fd85870187610c02565b90506104076107b0565b61041384860186610b97565b905061041d6107fb565b610429898b018b610ac5565b60408051604180825260808201909252919250606091906020820181803683370190505090508080519060200120836000015180519060200120141561046e576104bc565b825160408501516060860151610485929091610608565b6104aa5760405162461bcd60e51b81526004016104a190610fbf565b60405180910390fd5b60a08401518251602001528151600090525b509998505050505050505050565b60006104d4610820565b6104e083850185610c02565b90506104ea6107fb565b6104f686880188610ac5565b8051602001519091501561051c5760405162461bcd60e51b81526004016104a190610f1f565b60208201516001600160a01b031615801590610544575060408201516001600160a01b031615155b6105605760405162461bcd60e51b81526004016104a190610df6565b60608201516105815760405162461bcd60e51b81526004016104a190610f62565b60808201516105a25760405162461bcd60e51b81526004016104a190610f90565b80515160a083015111156105c85760405162461bcd60e51b81526004016104a190610ea6565b8151602083015160608401516105df929091610608565b6105fb5760405162461bcd60e51b81526004016104a190610e6f565b5060019695505050505050565b6000816001600160a01b031661061e8585610630565b6001600160a01b031614949350505050565b60008061063c84610652565b90506106488184610682565b9150505b92915050565b6000816040516020016106659190610d14565b604051602081830303815290604052805190602001209050919050565b600081516041146106a55760405162461bcd60e51b81526004016104a190610dbf565b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156106f75760405162461bcd60e51b81526004016104a190610e2d565b8060ff16601b1415801561070f57508060ff16601c14155b1561072c5760405162461bcd60e51b81526004016104a190610edd565b6000600187838686604051600081526020016040526040516107519493929190610d50565b6020604051602081039080840390855afa158015610773573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166107a65760405162461bcd60e51b81526004016104a190610d88565b9695505050505050565b6040518060200160405280606081525090565b6040518060a001604052806060815260200160006001600160a01b031681526020016060815260200160608152602001606081525090565b604051806040016040528061080e610883565b815260200161081b610883565b905290565b6040518061010001604052806060815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008019168152602001600081526020016000815260200160006001600160a01b03168152602001606081525090565b60405180604001604052806002906020820280368337509192915050565b803561064c81611186565b60008083601f8401126108bd578182fd5b50813567ffffffffffffffff8111156108d4578182fd5b6020830191508360208285010111156108ec57600080fd5b9250929050565b600082601f830112610903578081fd5b813561091661091182611132565b61110b565b915080825283602082850101111561092d57600080fd5b8060208401602084013760009082016020015292915050565b600082601f830112610956578081fd5b815161096461091182611132565b915080825283602082850101111561097b57600080fd5b61098c816020840160208601611156565b5092915050565b600080600080604085870312156109a8578384fd5b843567ffffffffffffffff808211156109bf578586fd5b6109cb888389016108ac565b909650945060208701359150808211156109e3578384fd5b506109f0878288016108ac565b95989497509550505050565b60008060008060008060608789031215610a14578182fd5b863567ffffffffffffffff80821115610a2b578384fd5b610a378a838b016108ac565b90985096506020890135915080821115610a4f578384fd5b610a5b8a838b016108ac565b90965094506040890135915080821115610a73578384fd5b50610a8089828a016108ac565b979a9699509497509295939492505050565b600060208284031215610aa3578081fd5b815167ffffffffffffffff811115610ab9578182fd5b61064884828501610946565b600060808284031215610ad6578081fd5b610ae0604061110b565b83601f840112610aee578182fd5b610af8604061110b565b80846040860187811115610b0a578586fd5b855b6002811015610b2b578235855260209485019490920191600101610b0c565b5082855287605f880112610b3d578586fd5b610b47604061110b565b9350839250905060808601871015610b5d578485fd5b845b6002811015610b88578135610b7381611186565b84526020938401939190910190600101610b5f565b50506020830152509392505050565b600060208284031215610ba8578081fd5b813567ffffffffffffffff80821115610bbf578283fd5b9083019060208286031215610bd2578283fd5b610bdc602061110b565b823582811115610bea578485fd5b610bf6878286016108f3565b82525095945050505050565b600060208284031215610c13578081fd5b813567ffffffffffffffff80821115610c2a578283fd5b8184019150610100808387031215610c40578384fd5b610c498161110b565b9050823582811115610c59578485fd5b610c65878286016108f3565b825250610c7586602085016108a1565b6020820152610c8786604085016108a1565b6040820152606083013560608201526080830135608082015260a083013560a0820152610cb78660c085016108a1565b60c082015260e083013582811115610ccd578485fd5b610cd9878286016108f3565b60e08301525095945050505050565b60008151808452610d00816020860160208601611156565b601f01601f19169290920160200192915050565b7f16566563746f72205369676e6564204d6573736167653a0a33320000000000008152601a810191909152603a0190565b901515815260200190565b93845260ff9290921660208401526040830152606082015260800190565b600060208252610d816020830184610ce8565b9392505050565b60208082526018908201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604082015260600190565b6020808252601f908201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604082015260600190565b60208082526017908201527f57697468647261773a20454d5054595f5349474e455253000000000000000000604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604082015261756560f01b606082015260800190565b6020808252601f908201527f57697468647261773a20494e56414c49445f494e49544941544f525f53494700604082015260600190565b6020808252601e908201527f57697468647261773a20494e53554646494349454e545f42414c414e43450000604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604082015261756560f01b606082015260800190565b60208082526023908201527f57697468647261773a204e4f4e5a45524f5f524543495049454e545f42414c416040820152624e434560e81b606082015260800190565b60208082526014908201527357697468647261773a20454d5054595f4441544160601b604082015260600190565b60208082526015908201527457697468647261773a20454d5054595f4e4f4e434560581b604082015260600190565b6020808252601f908201527f57697468647261773a20494e56414c49445f524553504f4e4445525f53494700604082015260600190565b815160808201908260005b6002811015611020578251825260209283019290910190600101611001565b5050506020808401516040840160005b60028110156110565782516001600160a01b031682529183019190830190600101611030565b5050505092915050565b600060208252825160a0602084015261107c60c0840182610ce8565b905060018060a01b0360208501511660408401526040840151601f19808584030160608601526110ac8383610ce8565b925060608601519150808584030160808601526110c98383610ce8565b925060808601519150808584030160a0860152506110e78282610ce8565b95945050505050565b60006020825282516020808401526106486040840182610ce8565b60405181810167ffffffffffffffff8111828210171561112a57600080fd5b604052919050565b600067ffffffffffffffff821115611148578081fd5b50601f01601f191660200190565b60005b83811015611171578181015183820152602001611159565b83811115611180576000848401525b50505050565b6001600160a01b038116811461119b57600080fd5b5056fe7475706c6528627974657320696e69746961746f725369676e61747572652c206164647265737320696e69746961746f722c206164647265737320726573706f6e6465722c206279746573333220646174612c2075696e74323536206e6f6e63652c2075696e74323536206665652c20616464726573732063616c6c546f2c2062797465732063616c6c4461746129a2646970667358221220e6c29ec66c4575ed5816330cc0372206a95865e0e0b591d5a21001f4a374293764736f6c63430007010033","deployedBytecode":"0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80638052474d1161005b5780638052474d146100bd5780638de8b77e146100c55780638ef98a7e146100cd57806394184ba9146100ed5761007d565b80630528aa1c14610082578063206162be146100a05780633722aff9146100b5575b600080fd5b61008a61010d565b6040516100979190610d6e565b60405180910390f35b6100a861015c565b6040516100979190611060565b61008a610368565b61008a6103a1565b61008a6103c5565b6100e06100db3660046109fc565b6103e1565b6040516100979190610ff6565b6101006100fb366004610993565b6104ca565b6040516100979190610d45565b60606101176107b0565b604080516041808252608082019092529060208201818036833750505081526040516101479082906020016110f0565b60405160208183030381529060405291505090565b6101646107c3565b6040518060a00160405280306001600160a01b0316638052474d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156101a857600080fd5b505afa1580156101bc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101e49190810190610a92565b8152602001306001600160a01b03168152602001306001600160a01b0316638de8b77e6040518163ffffffff1660e01b815260040160006040518083038186803b15801561023157600080fd5b505afa158015610245573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261026d9190810190610a92565b8152602001306001600160a01b0316633722aff96040518163ffffffff1660e01b815260040160006040518083038186803b1580156102ab57600080fd5b505afa1580156102bf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102e79190810190610a92565b8152602001306001600160a01b0316630528aa1c6040518163ffffffff1660e01b815260040160006040518083038186803b15801561032557600080fd5b505afa158015610339573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103619190810190610a92565b9052905090565b6040518060400160405280601f81526020017f7475706c6528627974657320726573706f6e6465725369676e6174757265290081525081565b60405180604001604052806008815260200167576974686472617760c01b81525081565b6040518060c00160405280608f815260200161119f608f913981565b6103e96107fb565b6103f1610820565b6103fd85870187610c02565b90506104076107b0565b61041384860186610b97565b905061041d6107fb565b610429898b018b610ac5565b60408051604180825260808201909252919250606091906020820181803683370190505090508080519060200120836000015180519060200120141561046e576104bc565b825160408501516060860151610485929091610608565b6104aa5760405162461bcd60e51b81526004016104a190610fbf565b60405180910390fd5b60a08401518251602001528151600090525b509998505050505050505050565b60006104d4610820565b6104e083850185610c02565b90506104ea6107fb565b6104f686880188610ac5565b8051602001519091501561051c5760405162461bcd60e51b81526004016104a190610f1f565b60208201516001600160a01b031615801590610544575060408201516001600160a01b031615155b6105605760405162461bcd60e51b81526004016104a190610df6565b60608201516105815760405162461bcd60e51b81526004016104a190610f62565b60808201516105a25760405162461bcd60e51b81526004016104a190610f90565b80515160a083015111156105c85760405162461bcd60e51b81526004016104a190610ea6565b8151602083015160608401516105df929091610608565b6105fb5760405162461bcd60e51b81526004016104a190610e6f565b5060019695505050505050565b6000816001600160a01b031661061e8585610630565b6001600160a01b031614949350505050565b60008061063c84610652565b90506106488184610682565b9150505b92915050565b6000816040516020016106659190610d14565b604051602081830303815290604052805190602001209050919050565b600081516041146106a55760405162461bcd60e51b81526004016104a190610dbf565b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156106f75760405162461bcd60e51b81526004016104a190610e2d565b8060ff16601b1415801561070f57508060ff16601c14155b1561072c5760405162461bcd60e51b81526004016104a190610edd565b6000600187838686604051600081526020016040526040516107519493929190610d50565b6020604051602081039080840390855afa158015610773573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166107a65760405162461bcd60e51b81526004016104a190610d88565b9695505050505050565b6040518060200160405280606081525090565b6040518060a001604052806060815260200160006001600160a01b031681526020016060815260200160608152602001606081525090565b604051806040016040528061080e610883565b815260200161081b610883565b905290565b6040518061010001604052806060815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008019168152602001600081526020016000815260200160006001600160a01b03168152602001606081525090565b60405180604001604052806002906020820280368337509192915050565b803561064c81611186565b60008083601f8401126108bd578182fd5b50813567ffffffffffffffff8111156108d4578182fd5b6020830191508360208285010111156108ec57600080fd5b9250929050565b600082601f830112610903578081fd5b813561091661091182611132565b61110b565b915080825283602082850101111561092d57600080fd5b8060208401602084013760009082016020015292915050565b600082601f830112610956578081fd5b815161096461091182611132565b915080825283602082850101111561097b57600080fd5b61098c816020840160208601611156565b5092915050565b600080600080604085870312156109a8578384fd5b843567ffffffffffffffff808211156109bf578586fd5b6109cb888389016108ac565b909650945060208701359150808211156109e3578384fd5b506109f0878288016108ac565b95989497509550505050565b60008060008060008060608789031215610a14578182fd5b863567ffffffffffffffff80821115610a2b578384fd5b610a378a838b016108ac565b90985096506020890135915080821115610a4f578384fd5b610a5b8a838b016108ac565b90965094506040890135915080821115610a73578384fd5b50610a8089828a016108ac565b979a9699509497509295939492505050565b600060208284031215610aa3578081fd5b815167ffffffffffffffff811115610ab9578182fd5b61064884828501610946565b600060808284031215610ad6578081fd5b610ae0604061110b565b83601f840112610aee578182fd5b610af8604061110b565b80846040860187811115610b0a578586fd5b855b6002811015610b2b578235855260209485019490920191600101610b0c565b5082855287605f880112610b3d578586fd5b610b47604061110b565b9350839250905060808601871015610b5d578485fd5b845b6002811015610b88578135610b7381611186565b84526020938401939190910190600101610b5f565b50506020830152509392505050565b600060208284031215610ba8578081fd5b813567ffffffffffffffff80821115610bbf578283fd5b9083019060208286031215610bd2578283fd5b610bdc602061110b565b823582811115610bea578485fd5b610bf6878286016108f3565b82525095945050505050565b600060208284031215610c13578081fd5b813567ffffffffffffffff80821115610c2a578283fd5b8184019150610100808387031215610c40578384fd5b610c498161110b565b9050823582811115610c59578485fd5b610c65878286016108f3565b825250610c7586602085016108a1565b6020820152610c8786604085016108a1565b6040820152606083013560608201526080830135608082015260a083013560a0820152610cb78660c085016108a1565b60c082015260e083013582811115610ccd578485fd5b610cd9878286016108f3565b60e08301525095945050505050565b60008151808452610d00816020860160208601611156565b601f01601f19169290920160200192915050565b7f16566563746f72205369676e6564204d6573736167653a0a33320000000000008152601a810191909152603a0190565b901515815260200190565b93845260ff9290921660208401526040830152606082015260800190565b600060208252610d816020830184610ce8565b9392505050565b60208082526018908201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604082015260600190565b6020808252601f908201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604082015260600190565b60208082526017908201527f57697468647261773a20454d5054595f5349474e455253000000000000000000604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604082015261756560f01b606082015260800190565b6020808252601f908201527f57697468647261773a20494e56414c49445f494e49544941544f525f53494700604082015260600190565b6020808252601e908201527f57697468647261773a20494e53554646494349454e545f42414c414e43450000604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604082015261756560f01b606082015260800190565b60208082526023908201527f57697468647261773a204e4f4e5a45524f5f524543495049454e545f42414c416040820152624e434560e81b606082015260800190565b60208082526014908201527357697468647261773a20454d5054595f4441544160601b604082015260600190565b60208082526015908201527457697468647261773a20454d5054595f4e4f4e434560581b604082015260600190565b6020808252601f908201527f57697468647261773a20494e56414c49445f524553504f4e4445525f53494700604082015260600190565b815160808201908260005b6002811015611020578251825260209283019290910190600101611001565b5050506020808401516040840160005b60028110156110565782516001600160a01b031682529183019190830190600101611030565b5050505092915050565b600060208252825160a0602084015261107c60c0840182610ce8565b905060018060a01b0360208501511660408401526040840151601f19808584030160608601526110ac8383610ce8565b925060608601519150808584030160808601526110c98383610ce8565b925060808601519150808584030160a0860152506110e78282610ce8565b95945050505050565b60006020825282516020808401526106486040840182610ce8565b60405181810167ffffffffffffffff8111828210171561112a57600080fd5b604052919050565b600067ffffffffffffffff821115611148578081fd5b50601f01601f191660200190565b60005b83811015611171578181015183820152602001611159565b83811115611180576000848401525b50505050565b6001600160a01b038116811461119b57600080fd5b5056fe7475706c6528627974657320696e69746961746f725369676e61747572652c206164647265737320696e69746961746f722c206164647265737320726573706f6e6465722c206279746573333220646174612c2075696e74323536206e6f6e63652c2075696e74323536206665652c20616464726573732063616c6c546f2c2062797465732063616c6c4461746129a2646970667358221220e6c29ec66c4575ed5816330cc0372206a95865e0e0b591d5a21001f4a374293764736f6c63430007010033","devdoc":{"author":"Connext <support@connext.network>","kind":"dev","methods":{},"title":"Withdraw","version":1},"userdoc":{"kind":"user","methods":{},"notice":"This contract burns the initiator\'s funds if a mutually signed         withdraw commitment can be generated","version":1},"storageLayout":{"storage":[],"types":null}}')},2836:function(e){e.exports=JSON.parse('{"address":"0xe561583d3A0dba55569Da8ff2e51a74d435eF372","abi":[{"inputs":[{"internalType":"address","name":"_mastercopy","type":"address"},{"internalType":"uint256","name":"_chainId","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"channel","type":"address"}],"name":"ChannelCreation","type":"event"},{"inputs":[{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"}],"name":"createChannel","outputs":[{"internalType":"address","name":"channel","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"createChannelAndDepositAlice","outputs":[{"internalType":"address","name":"channel","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"getChainId","outputs":[{"internalType":"uint256","name":"_chainId","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"}],"name":"getChannelAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMastercopy","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getProxyCreationCode","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStoredChainId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"transactionHash":"0x573ec5b3918f7d7e157b879b0eab352939937f8f021e21021ef548c42382f49e","receipt":{"to":null,"from":"0xd4b33434Cb36df9286Ef5132FCFb8062c96aC56E","contractAddress":"0xe561583d3A0dba55569Da8ff2e51a74d435eF372","transactionIndex":5,"gasUsed":"677184","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","blockHash":"0x4f46f3fb2a5705dd9b0e0357b7ba009b97394215111e220443ca410da1d7141f","transactionHash":"0x573ec5b3918f7d7e157b879b0eab352939937f8f021e21021ef548c42382f49e","logs":[],"blockNumber":14465801,"cumulativeGasUsed":"3472523","status":1,"byzantium":true},"args":["0xd105b6B42206dfA6Db00E6a4823bC88eFAC00476","0"],"solcInputHash":"89c55d5a88f10637860a9ea31a1daad3","metadata":"{\\"compiler\\":{\\"version\\":\\"0.7.1+commit.f4a555be\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_mastercopy\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_chainId\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"channel\\",\\"type\\":\\"address\\"}],\\"name\\":\\"ChannelCreation\\",\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"}],\\"name\\":\\"createChannel\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channel\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"createChannelAndDepositAlice\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channel\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"payable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getChainId\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_chainId\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getChannelAddress\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getMastercopy\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getProxyCreationCode\\",\\"outputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"\\",\\"type\\":\\"bytes\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getStoredChainId\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"author\\":\\"Connext <support@connext.network>\\",\\"kind\\":\\"dev\\",\\"methods\\":{\\"constructor\\":{\\"details\\":\\"Creates a new `ChannelFactory`\\",\\"params\\":{\\"_chainId\\":\\"the chain identifier when generating the CREATE2 salt. If zero, the chain identifier used in the proxy salt will be the result of the opcode\\",\\"_mastercopy\\":\\"the address of the `ChannelMastercopy` (channel logic)\\"}},\\"createChannel(address,address)\\":{\\"details\\":\\"Allows us to create new channel contract and get it all set up in one transaction\\",\\"params\\":{\\"alice\\":\\"address of the high fidelity channel participant\\",\\"bob\\":\\"address of the other channel participant\\"}},\\"createChannelAndDepositAlice(address,address,address,uint256)\\":{\\"details\\":\\"Allows us to create a new channel contract and fund it in one transaction\\",\\"params\\":{\\"bob\\":\\"address of the other channel participant\\"}},\\"getChainId()\\":{\\"details\\":\\"Allows us to get the chainId that this factory will use in the create2 salt\\"},\\"getChannelAddress(address,address)\\":{\\"details\\":\\"Allows us to get the address for a new channel contract created via `createChannel`\\",\\"params\\":{\\"alice\\":\\"address of the igh fidelity channel participant\\",\\"bob\\":\\"address of the other channel participant\\"}},\\"getMastercopy()\\":{\\"details\\":\\"Allows us to get the mastercopy that this factory will deploy channels against\\"},\\"getProxyCreationCode()\\":{\\"details\\":\\"Returns the proxy code used to both calculate the CREATE2 address and deploy the channel proxy pointed to the `ChannelMastercopy`\\"},\\"getStoredChainId()\\":{\\"details\\":\\"Allows us to get the chainId that this factory has stored\\"}},\\"title\\":\\"ChannelFactory\\",\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"notice\\":\\"Creates and sets up a new channel proxy contract\\",\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"src.sol/ChannelFactory.sol\\":\\"ChannelFactory\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Returns the amount of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender\'s allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\\\n     * allowance mechanism. `amount` is then deducted from the caller\'s\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Address.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Collection of functions related to the address type\\\\n */\\\\nlibrary Address {\\\\n    /**\\\\n     * @dev Returns true if `account` is a contract.\\\\n     *\\\\n     * [IMPORTANT]\\\\n     * ====\\\\n     * It is unsafe to assume that an address for which this function returns\\\\n     * false is an externally-owned account (EOA) and not a contract.\\\\n     *\\\\n     * Among others, `isContract` will return false for the following\\\\n     * types of addresses:\\\\n     *\\\\n     *  - an externally-owned account\\\\n     *  - a contract in construction\\\\n     *  - an address where a contract will be created\\\\n     *  - an address where a contract lived, but was destroyed\\\\n     * ====\\\\n     */\\\\n    function isContract(address account) internal view returns (bool) {\\\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\\\n        // for accounts without code, i.e. `keccak256(\'\')`\\\\n        bytes32 codehash;\\\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\\\n        // solhint-disable-next-line no-inline-assembly\\\\n        assembly { codehash := extcodehash(account) }\\\\n        return (codehash != accountHash && codehash != 0x0);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\\\\n     * `recipient`, forwarding all available gas and reverting on errors.\\\\n     *\\\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\\\n     * imposed by `transfer`, making them unable to receive funds via\\\\n     * `transfer`. {sendValue} removes this limitation.\\\\n     *\\\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\\\n     *\\\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\\\n     * taken to not create reentrancy vulnerabilities. Consider using\\\\n     * {ReentrancyGuard} or the\\\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\\\n     */\\\\n    function sendValue(address payable recipient, uint256 amount) internal {\\\\n        require(address(this).balance >= amount, \\\\\\"Address: insufficient balance\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\\\n        (bool success, ) = recipient.call{ value: amount }(\\\\\\"\\\\\\");\\\\n        require(success, \\\\\\"Address: unable to send value, recipient may have reverted\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Performs a Solidity function call using a low level `call`. A\\\\n     * plain`call` is an unsafe replacement for a function call: use this\\\\n     * function instead.\\\\n     *\\\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\\\n     * function (like regular Solidity function calls).\\\\n     *\\\\n     * Returns the raw returned data. To convert to the expected return value,\\\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `target` must be a contract.\\\\n     * - calling `target` with `data` must not revert.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n      return functionCall(target, data, \\\\\\"Address: low-level call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but also transferring `value` wei to `target`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the calling contract must have an ETH balance of at least `value`.\\\\n     * - the called Solidity function must be `payable`.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, value, \\\\\\"Address: low-level call with value failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\\\n        require(address(this).balance >= value, \\\\\\"Address: insufficient balance for call\\\\\\");\\\\n        return _functionCallWithValue(target, data, value, errorMessage);\\\\n    }\\\\n\\\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: call to non-contract\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls\\\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\\\n        if (success) {\\\\n            return returndata;\\\\n        } else {\\\\n            // Look for revert reason and bubble it up if present\\\\n            if (returndata.length > 0) {\\\\n                // The easiest way to bubble the revert reason is using memory via assembly\\\\n\\\\n                // solhint-disable-next-line no-inline-assembly\\\\n                assembly {\\\\n                    let returndata_size := mload(returndata)\\\\n                    revert(add(32, returndata), returndata_size)\\\\n                }\\\\n            } else {\\\\n                revert(errorMessage);\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x698f929f1097637d051976b322a2d532c27df022b09010e8d091e2888a5ebdf8\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Create2.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\\\n * `CREATE2` can be used to compute in advance the address where a smart\\\\n * contract will be deployed, which allows for interesting new mechanisms known\\\\n * as \'counterfactual interactions\'.\\\\n *\\\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\\\n * information.\\\\n */\\\\nlibrary Create2 {\\\\n    /**\\\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\\\n     * will be deployed can be known in advance via {computeAddress}.\\\\n     *\\\\n     * The bytecode for a contract can be obtained from Solidity with\\\\n     * `type(contractName).creationCode`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `bytecode` must not be empty.\\\\n     * - `salt` must have not been used for `bytecode` already.\\\\n     * - the factory must have a balance of at least `amount`.\\\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\\\n     */\\\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\\\\n        address addr;\\\\n        require(address(this).balance >= amount, \\\\\\"Create2: insufficient balance\\\\\\");\\\\n        require(bytecode.length != 0, \\\\\\"Create2: bytecode length is zero\\\\\\");\\\\n        // solhint-disable-next-line no-inline-assembly\\\\n        assembly {\\\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\\\n        }\\\\n        require(addr != address(0), \\\\\\"Create2: Failed on deploy\\\\\\");\\\\n        return addr;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\\\n     */\\\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\\\n        return computeAddress(salt, bytecodeHash, address(this));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\\\n     * `deployer`. If `deployer` is this contract\'s address, returns the same value as {computeAddress}.\\\\n     */\\\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\\\\n        bytes32 _data = keccak256(\\\\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\\\\n        );\\\\n        return address(uint256(_data));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x539295edd21ad514c0b1a0d1c89ada0831942f379ea83b6eb85769211fc7937e\\",\\"license\\":\\"MIT\\"},\\"src.sol/ChannelFactory.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Create2.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./interfaces/IChannelFactory.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/IVectorChannel.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibAsset.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibERC20.sol\\\\\\";\\\\n\\\\n/// @title ChannelFactory\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Creates and sets up a new channel proxy contract\\\\ncontract ChannelFactory is IChannelFactory {\\\\n    // Creation code constants taken from EIP1167\\\\n    bytes private constant proxyCreationCodePrefix =\\\\n        hex\\\\\\"3d602d80600a3d3981f3_363d3d373d3d3d363d73\\\\\\";\\\\n    bytes private constant proxyCreationCodeSuffix =\\\\n        hex\\\\\\"5af43d82803e903d91602b57fd5bf3\\\\\\";\\\\n\\\\n    bytes32 private creationCodeHash;\\\\n    address private immutable mastercopy;\\\\n    uint256 private immutable chainId;\\\\n\\\\n    /// @dev Creates a new `ChannelFactory`\\\\n    /// @param _mastercopy the address of the `ChannelMastercopy` (channel logic)\\\\n    /// @param _chainId the chain identifier when generating the CREATE2 salt. If zero, the chain identifier used in the proxy salt will be the result of the opcode\\\\n    constructor(address _mastercopy, uint256 _chainId) {\\\\n        mastercopy = _mastercopy;\\\\n        chainId = _chainId;\\\\n        creationCodeHash = keccak256(_getProxyCreationCode(_mastercopy));\\\\n    }\\\\n\\\\n    ////////////////////////////////////////\\\\n    // Public Methods\\\\n\\\\n    /// @dev Allows us to get the mastercopy that this factory will deploy channels against\\\\n    function getMastercopy() external view override returns (address) {\\\\n        return mastercopy;\\\\n    }\\\\n\\\\n    /// @dev Allows us to get the chainId that this factory will use in the create2 salt\\\\n    function getChainId() public view override returns (uint256 _chainId) {\\\\n        // Hold in memory to reduce sload calls\\\\n        uint256 chain = chainId;\\\\n        if (chain == 0) {\\\\n            assembly {\\\\n                _chainId := chainid()\\\\n            }\\\\n        } else {\\\\n            _chainId = chain;\\\\n        }\\\\n    }\\\\n\\\\n    /// @dev Allows us to get the chainId that this factory has stored\\\\n    function getStoredChainId() external view override returns (uint256) {\\\\n        return chainId;\\\\n    }\\\\n\\\\n    /// @dev Returns the proxy code used to both calculate the CREATE2 address and deploy the channel proxy pointed to the `ChannelMastercopy`\\\\n    function getProxyCreationCode()\\\\n        public\\\\n        view\\\\n        override\\\\n        returns (bytes memory)\\\\n    {\\\\n        return _getProxyCreationCode(mastercopy);\\\\n    }\\\\n\\\\n    /// @dev Allows us to get the address for a new channel contract created via `createChannel`\\\\n    /// @param alice address of the igh fidelity channel participant\\\\n    /// @param bob address of the other channel participant\\\\n    function getChannelAddress(address alice, address bob)\\\\n        external\\\\n        view\\\\n        override\\\\n        returns (address)\\\\n    {\\\\n        return\\\\n            Create2.computeAddress(\\\\n                generateSalt(alice, bob),\\\\n                creationCodeHash\\\\n            );\\\\n    }\\\\n\\\\n    /// @dev Allows us to create new channel contract and get it all set up in one transaction\\\\n    /// @param alice address of the high fidelity channel participant\\\\n    /// @param bob address of the other channel participant\\\\n    function createChannel(address alice, address bob)\\\\n        public\\\\n        override\\\\n        returns (address channel)\\\\n    {\\\\n        channel = deployChannelProxy(alice, bob);\\\\n        IVectorChannel(channel).setup(alice, bob);\\\\n        emit ChannelCreation(channel);\\\\n    }\\\\n\\\\n    /// @dev Allows us to create a new channel contract and fund it in one transaction\\\\n    /// @param bob address of the other channel participant\\\\n    function createChannelAndDepositAlice(\\\\n        address alice,\\\\n        address bob,\\\\n        address assetId,\\\\n        uint256 amount\\\\n    ) external payable override returns (address channel) {\\\\n        channel = createChannel(alice, bob);\\\\n        // Deposit funds (if a token) must be approved for the\\\\n        // `ChannelFactory`, which then claims the funds and transfers\\\\n        // to the channel address. While this is inefficient, this is\\\\n        // the safest/clearest way to transfer funds\\\\n        if (!LibAsset.isEther(assetId)) {\\\\n            require(\\\\n                LibERC20.transferFrom(\\\\n                    assetId,\\\\n                    msg.sender,\\\\n                    address(this),\\\\n                    amount\\\\n                ),\\\\n                \\\\\\"ChannelFactory: ERC20_TRANSFER_FAILED\\\\\\"\\\\n            );\\\\n            require(\\\\n                LibERC20.approve(assetId, address(channel), amount),\\\\n                \\\\\\"ChannelFactory: ERC20_APPROVE_FAILED\\\\\\"\\\\n            );\\\\n        }\\\\n        IVectorChannel(channel).depositAlice{value: msg.value}(assetId, amount);\\\\n    }\\\\n\\\\n    ////////////////////////////////////////\\\\n    // Internal Methods\\\\n\\\\n    function _getProxyCreationCode(address _mastercopy) internal pure returns (bytes memory) {\\\\n      return abi.encodePacked(\\\\n                proxyCreationCodePrefix,\\\\n                _mastercopy,\\\\n                proxyCreationCodeSuffix\\\\n            );\\\\n    }\\\\n\\\\n    /// @dev Allows us to create new channel contact using CREATE2\\\\n    /// @param alice address of the high fidelity participant in the channel\\\\n    /// @param bob address of the other channel participant\\\\n    function deployChannelProxy(address alice, address bob)\\\\n        internal\\\\n        returns (address)\\\\n    {\\\\n        bytes32 salt = generateSalt(alice, bob);\\\\n        return Create2.deploy(0, salt, getProxyCreationCode());\\\\n    }\\\\n\\\\n    /// @dev Generates the unique salt for calculating the CREATE2 address of the channel proxy\\\\n    function generateSalt(address alice, address bob)\\\\n        internal\\\\n        view\\\\n        returns (bytes32)\\\\n    {\\\\n        return keccak256(abi.encodePacked(alice, bob, getChainId()));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x9b30b13dd79eea72eadd2bec3eba0f515929259a21d2ece6b982703c280e532a\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCAdjudicator.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./Types.sol\\\\\\";\\\\n\\\\ninterface ICMCAdjudicator {\\\\n    struct CoreChannelState {\\\\n        address channelAddress;\\\\n        address alice;\\\\n        address bob;\\\\n        address[] assetIds;\\\\n        Balance[] balances;\\\\n        uint256[] processedDepositsA;\\\\n        uint256[] processedDepositsB;\\\\n        uint256[] defundNonces;\\\\n        uint256 timeout;\\\\n        uint256 nonce;\\\\n        bytes32 merkleRoot;\\\\n    }\\\\n\\\\n    struct CoreTransferState {\\\\n        address channelAddress;\\\\n        bytes32 transferId;\\\\n        address transferDefinition;\\\\n        address initiator;\\\\n        address responder;\\\\n        address assetId;\\\\n        Balance balance;\\\\n        uint256 transferTimeout;\\\\n        bytes32 initialStateHash;\\\\n    }\\\\n\\\\n    struct ChannelDispute {\\\\n        bytes32 channelStateHash;\\\\n        uint256 nonce;\\\\n        bytes32 merkleRoot;\\\\n        uint256 consensusExpiry;\\\\n        uint256 defundExpiry;\\\\n    }\\\\n\\\\n    struct TransferDispute {\\\\n        bytes32 transferStateHash;\\\\n        uint256 transferDisputeExpiry;\\\\n        bool isDefunded;\\\\n    }\\\\n\\\\n    event ChannelDisputed(\\\\n        address disputer,\\\\n        CoreChannelState state,\\\\n        ChannelDispute dispute\\\\n    );\\\\n\\\\n    event ChannelDefunded(\\\\n        address defunder,\\\\n        CoreChannelState state,\\\\n        ChannelDispute dispute,\\\\n        address[] assetIds\\\\n    );\\\\n\\\\n    event TransferDisputed(\\\\n        address disputer,\\\\n        CoreTransferState state,\\\\n        TransferDispute dispute\\\\n    );\\\\n\\\\n    event TransferDefunded(\\\\n        address defunder,\\\\n        CoreTransferState state,\\\\n        TransferDispute dispute,\\\\n        bytes encodedInitialState,\\\\n        bytes encodedResolver,\\\\n        Balance balance\\\\n    );\\\\n\\\\n    function getChannelDispute() external view returns (ChannelDispute memory);\\\\n\\\\n    function getDefundNonce(address assetId) external view returns (uint256);\\\\n\\\\n    function getTransferDispute(bytes32 transferId)\\\\n        external\\\\n        view\\\\n        returns (TransferDispute memory);\\\\n\\\\n    function disputeChannel(\\\\n        CoreChannelState calldata ccs,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) external;\\\\n\\\\n    function defundChannel(\\\\n        CoreChannelState calldata ccs,\\\\n        address[] calldata assetIds,\\\\n        uint256[] calldata indices\\\\n    ) external;\\\\n\\\\n    function disputeTransfer(\\\\n        CoreTransferState calldata cts,\\\\n        bytes32[] calldata merkleProofData\\\\n    ) external;\\\\n\\\\n    function defundTransfer(\\\\n        CoreTransferState calldata cts,\\\\n        bytes calldata encodedInitialTransferState,\\\\n        bytes calldata encodedTransferResolver,\\\\n        bytes calldata responderSignature\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x88522bb51c2b9991b24ef33a3c776ac76d96060ebbc33cd5b2b14513fb21d237\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCAsset.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface ICMCAsset {\\\\n    function getTotalTransferred(address assetId)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function getExitableAmount(address assetId, address owner)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function exit(\\\\n        address assetId,\\\\n        address owner,\\\\n        address payable recipient\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x895d89536e8ca469afe642b7001f0dfff497ce29d5d73f862b07a1cdc483f3f7\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCCore.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface ICMCCore {\\\\n    function setup(address _alice, address _bob) external;\\\\n\\\\n    function getAlice() external view returns (address);\\\\n\\\\n    function getBob() external view returns (address);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x8e8da2d8fb5198441ba6cdff018dff9e4145b07d575647c990659adad637ec8c\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCDeposit.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface ICMCDeposit {\\\\n    event AliceDeposited(address assetId, uint256 amount);\\\\n    \\\\n    function getTotalDepositsAlice(address assetId)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function getTotalDepositsBob(address assetId)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function depositAlice(address assetId, uint256 amount) external payable;\\\\n}\\\\n\\",\\"keccak256\\":\\"0xdf6f284e44d88013cf9d51220315fb37e63086e470442685891c90aadd138295\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCWithdraw.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nstruct WithdrawData {\\\\n    address channelAddress;\\\\n    address assetId;\\\\n    address payable recipient;\\\\n    uint256 amount;\\\\n    uint256 nonce;\\\\n    address callTo;\\\\n    bytes callData;\\\\n}\\\\n\\\\ninterface ICMCWithdraw {\\\\n    function getWithdrawalTransactionRecord(WithdrawData calldata wd)\\\\n        external\\\\n        view\\\\n        returns (bool);\\\\n\\\\n    function withdraw(\\\\n        WithdrawData calldata wd,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x097dfe95ad19096f9a3dd0138b4a51680c26e665d1639278a7c0a5c9f7fc5c78\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/IChannelFactory.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface IChannelFactory {\\\\n    event ChannelCreation(address channel);\\\\n\\\\n    function getMastercopy() external view returns (address);\\\\n\\\\n    function getChainId() external view returns (uint256);\\\\n\\\\n    function getStoredChainId() external view returns (uint256);\\\\n\\\\n    function getProxyCreationCode() external view returns (bytes memory);\\\\n\\\\n    function getChannelAddress(address alice, address bob)\\\\n        external\\\\n        view\\\\n        returns (address);\\\\n\\\\n    function createChannel(address alice, address bob)\\\\n        external\\\\n        returns (address);\\\\n\\\\n    function createChannelAndDepositAlice(\\\\n        address alice,\\\\n        address bob,\\\\n        address assetId,\\\\n        uint256 amount\\\\n    ) external payable returns (address);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x2330bd554f878feb2494fb9dd830a1707865b63cfd6471a8dad1e5912ebf72ea\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/IVectorChannel.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./ICMCCore.sol\\\\\\";\\\\nimport \\\\\\"./ICMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./ICMCDeposit.sol\\\\\\";\\\\nimport \\\\\\"./ICMCWithdraw.sol\\\\\\";\\\\nimport \\\\\\"./ICMCAdjudicator.sol\\\\\\";\\\\n\\\\ninterface IVectorChannel is\\\\n    ICMCCore,\\\\n    ICMCAsset,\\\\n    ICMCDeposit,\\\\n    ICMCWithdraw,\\\\n    ICMCAdjudicator\\\\n{}\\\\n\\",\\"keccak256\\":\\"0x9e21e3b6510bb5aecab999bfcbefe6184bd2be5a80179ef8ecadb63ddd2c8d53\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/Types.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nstruct Balance {\\\\n    uint256[2] amount; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n    address payable[2] to; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf8c71b155b630cde965f5d1db5f0d2751a9763f5a797f15d946613e9224f1046\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibAsset.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./LibERC20.sol\\\\\\";\\\\nimport \\\\\\"./LibUtils.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\\\\";\\\\n\\\\n\\\\n/// @title LibAsset\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This library contains helpers for dealing with onchain transfers\\\\n///         of in-channel assets. It is designed to safely handle all asset\\\\n///         transfers out of channel in the event of an onchain dispute. Also\\\\n///         safely handles ERC20 transfers that may be non-compliant\\\\nlibrary LibAsset {\\\\n    address constant ETHER_ASSETID = address(0);\\\\n\\\\n    function isEther(address assetId) internal pure returns (bool) {\\\\n        return assetId == ETHER_ASSETID;\\\\n    }\\\\n\\\\n    function getOwnBalance(address assetId) internal view returns (uint256) {\\\\n        return\\\\n            isEther(assetId)\\\\n                ? address(this).balance\\\\n                : IERC20(assetId).balanceOf(address(this));\\\\n    }\\\\n\\\\n    function transferEther(address payable recipient, uint256 amount)\\\\n        internal\\\\n        returns (bool)\\\\n    {\\\\n        (bool success, bytes memory returnData) =\\\\n            recipient.call{value: amount}(\\\\\\"\\\\\\");\\\\n        LibUtils.revertIfCallFailed(success, returnData);\\\\n        return true;\\\\n    }\\\\n\\\\n    function transferERC20(\\\\n        address assetId,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return LibERC20.transfer(assetId, recipient, amount);\\\\n    }\\\\n\\\\n    // This function is a wrapper for transfers of Ether or ERC20 tokens,\\\\n    // both standard-compliant ones as well as tokens that exhibit the\\\\n    // missing-return-value bug.\\\\n    // Although it behaves very much like Solidity\'s `transfer` function\\\\n    // or the ERC20 `transfer` and is, in fact, designed to replace direct\\\\n    // usage of those, it is deliberately named `unregisteredTransfer`,\\\\n    // because we need to register every transfer out of the channel.\\\\n    // Therefore, it should normally not be used directly, with the single\\\\n    // exception of the `transferAsset` function in `CMCAsset.sol`,\\\\n    // which combines the \\\\\\"naked\\\\\\" unregistered transfer given below\\\\n    // with a registration.\\\\n    // USING THIS FUNCTION SOMEWHERE ELSE IS PROBABLY WRONG!\\\\n    function unregisteredTransfer(\\\\n        address assetId,\\\\n        address payable recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            isEther(assetId)\\\\n                ? transferEther(recipient, amount)\\\\n                : transferERC20(assetId, recipient, amount);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x02e7b660846ad2f56f8005f786e0e2eb1d625c83f4cfcf9fc07a9566ca86195c\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./LibUtils.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Address.sol\\\\\\";\\\\n\\\\n/// @title LibERC20\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This library provides several functions to safely handle\\\\n///         noncompliant tokens (i.e. does not return a boolean from\\\\n///         the transfer function)\\\\n\\\\nlibrary LibERC20 {\\\\n    function wrapCall(address assetId, bytes memory callData)\\\\n        internal\\\\n        returns (bool)\\\\n    {\\\\n        require(Address.isContract(assetId), \\\\\\"LibERC20: NO_CODE\\\\\\");\\\\n        (bool success, bytes memory returnData) = assetId.call(callData);\\\\n        LibUtils.revertIfCallFailed(success, returnData);\\\\n        return returnData.length == 0 || abi.decode(returnData, (bool));\\\\n    }\\\\n\\\\n    function approve(\\\\n        address assetId,\\\\n        address spender,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            wrapCall(\\\\n                assetId,\\\\n                abi.encodeWithSignature(\\\\n                    \\\\\\"approve(address,uint256)\\\\\\",\\\\n                    spender,\\\\n                    amount\\\\n                )\\\\n            );\\\\n    }\\\\n\\\\n    function transferFrom(\\\\n        address assetId,\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            wrapCall(\\\\n                assetId,\\\\n                abi.encodeWithSignature(\\\\n                    \\\\\\"transferFrom(address,address,uint256)\\\\\\",\\\\n                    sender,\\\\n                    recipient,\\\\n                    amount\\\\n                )\\\\n            );\\\\n    }\\\\n\\\\n    function transfer(\\\\n        address assetId,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            wrapCall(\\\\n                assetId,\\\\n                abi.encodeWithSignature(\\\\n                    \\\\\\"transfer(address,uint256)\\\\\\",\\\\n                    recipient,\\\\n                    amount\\\\n                )\\\\n            );\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x5bad1474c93a295939c23f976786f0d086abc063f19ff9c8c1d069759c4a7ff5\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibUtils.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\n/// @title LibUtils\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains a helper to revert if a call was not successfully\\\\n///         made\\\\nlibrary LibUtils {\\\\n    // If success is false, reverts and passes on the revert string.\\\\n    function revertIfCallFailed(bool success, bytes memory returnData)\\\\n        internal\\\\n        pure\\\\n    {\\\\n        if (!success) {\\\\n            assembly {\\\\n                revert(add(returnData, 0x20), mload(returnData))\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf31897ed92b88739ca9c6e74d089e01c5dbf432183d2ab0b959b539842374ccd\\",\\"license\\":\\"UNLICENSED\\"}},\\"version\\":1}","bytecode":"0x60c060405234801561001057600080fd5b50604051610c8f380380610c8f83398101604081905261002f916100eb565b6001600160601b0319606083901b1660805260a081905261004f82610062565b8051602090910120600055506101909050565b60606040518060400160405280601481526020017f3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000815250826040518060400160405280600f81526020016e5af43d82803e903d91602b57fd5bf360881b8152506040516020016100d59392919061015c565b6040516020818303038152906040529050919050565b600080604083850312156100fd578182fd5b82516001600160a01b0381168114610113578283fd5b6020939093015192949293505050565b60008151815b818110156101435760208185018101518683015201610129565b818111156101515782828601525b509290920192915050565b60006101688286610123565b606085901b6001600160601b03191681526101866014820185610123565b9695505050505050565b60805160601c60a051610acf6101c06000398061017e52806101a452508061015352806102a65250610acf6000f3fe6080604052600436106100705760003560e01c806335a1ba6f1161004e57806335a1ba6f146100d7578063e617aaac14610104578063efe4369314610124578063fe4545011461013957610070565b806315727e911461007557806332a130c9146100a05780633408e470146100c2575b600080fd5b34801561008157600080fd5b5061008a61014c565b60405161009791906108d6565b60405180910390f35b3480156100ac57600080fd5b506100b561017c565b6040516100979190610a60565b3480156100ce57600080fd5b506100b56101a0565b3480156100e357600080fd5b506100f76100f2366004610703565b6101d8565b604051610097919061086b565b34801561011057600080fd5b506100f761011f366004610703565b610284565b34801561013057600080fd5b506100f76102a4565b6100f7610147366004610737565b6102c8565b60606101777f00000000000000000000000000000000000000000000000000000000000000006103a5565b905090565b7f000000000000000000000000000000000000000000000000000000000000000090565b60007f0000000000000000000000000000000000000000000000000000000000000000806101d0574691506101d4565b8091505b5090565b60006101e48383610425565b604051632d34ba7960e01b81529091506001600160a01b03821690632d34ba7990610215908690869060040161087f565b600060405180830381600087803b15801561022f57600080fd5b505af1158015610243573d6000803e3d6000fd5b505050507fa79ba8cc5fdc29196c8d65701a02433c92328f38f0ffbea3908335b80d81409d81604051610276919061086b565b60405180910390a192915050565b600061029b610293848461044f565b60005461048b565b90505b92915050565b7f000000000000000000000000000000000000000000000000000000000000000090565b60006102d485856101d8565b90506102df83610498565b61033b576102ef833330856104a5565b6103145760405162461bcd60e51b815260040161030b906109e4565b60405180910390fd5b61031f8382846104f8565b61033b5760405162461bcd60e51b815260040161030b906109a0565b60405163635ae90160e01b81526001600160a01b0382169063635ae90190349061036b90879087906004016108bd565b6000604051808303818588803b15801561038457600080fd5b505af1158015610398573d6000803e3d6000fd5b5050505050949350505050565b6060604051806040016040528060148152602001733d602d80600a3d3981f3363d3d373d3d3d363d7360601b815250826040518060400160405280600f81526020016e5af43d82803e903d91602b57fd5bf360881b81525060405160200161040f93929190610824565b6040516020818303038152906040529050919050565b600080610432848461044f565b905061044760008261044261014c565b610540565b949350505050565b6000828261045b6101a0565b60405160200161046d939291906107ab565b60405160208183030381529060405280519060200120905092915050565b600061029b8383306105b2565b6001600160a01b03161590565b60006104ef858585856040516024016104c093929190610899565b60408051601f198184030181529190526020810180516001600160e01b03166323b872dd60e01b1790526105f1565b95945050505050565b60006104478484846040516024016105119291906108bd565b60408051601f198184030181529190526020810180516001600160e01b031663095ea7b360e01b1790526105f1565b600080844710156105635760405162461bcd60e51b815260040161030b90610a29565b82516105815760405162461bcd60e51b815260040161030b90610909565b8383516020850187f590506001600160a01b0381166104475760405162461bcd60e51b815260040161030b9061093e565b60008060ff60f81b8386866040516020016105d094939291906107d4565b60408051808303601f19018152919052805160209091012095945050505050565b60006105fc836106a2565b6106185760405162461bcd60e51b815260040161030b90610975565b60006060846001600160a01b0316846040516106349190610808565b6000604051808303816000865af19150503d8060008114610671576040519150601f19603f3d011682016040523d82523d6000602084013e610676565b606091505b509150915061068582826106db565b805115806104ef5750808060200190518101906104ef9190610784565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610447575050151592915050565b816106e857805160208201fd5b5050565b80356001600160a01b038116811461029e57600080fd5b60008060408385031215610715578182fd5b61071f84846106ec565b915061072e84602085016106ec565b90509250929050565b6000806000806080858703121561074c578182fd5b61075686866106ec565b935061076586602087016106ec565b925061077486604087016106ec565b9396929550929360600135925050565b600060208284031215610795578081fd5b815180151581146107a4578182fd5b9392505050565b6001600160601b0319606094851b811682529290931b9091166014830152602882015260480190565b6001600160f81b031994909416845260609290921b6001600160601b03191660018401526015830152603582015260550190565b6000825161081a818460208701610a69565b9190910192915050565b60008451610836818460208901610a69565b606085901b6001600160601b031916908301908152835161085e816014840160208801610a69565b0160140195945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b60006020825282518060208401526108f5816040850160208701610a69565b601f01601f19169190910160400192915050565b6020808252818101527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604082015260600190565b60208082526019908201527f437265617465323a204661696c6564206f6e206465706c6f7900000000000000604082015260600190565b6020808252601190820152704c696245524332303a204e4f5f434f444560781b604082015260600190565b60208082526024908201527f4368616e6e656c466163746f72793a2045524332305f415050524f56455f46416040820152631253115160e21b606082015260800190565b60208082526025908201527f4368616e6e656c466163746f72793a2045524332305f5452414e534645525f46604082015264105253115160da1b606082015260800190565b6020808252601d908201527f437265617465323a20696e73756666696369656e742062616c616e6365000000604082015260600190565b90815260200190565b60005b83811015610a84578181015183820152602001610a6c565b83811115610a93576000848401525b5050505056fea26469706673582212206b46714e4e157ca4fcef5f14f882cae62cdcfb5e301602c8361ab37a1daaf2ab64736f6c63430007010033","deployedBytecode":"0x6080604052600436106100705760003560e01c806335a1ba6f1161004e57806335a1ba6f146100d7578063e617aaac14610104578063efe4369314610124578063fe4545011461013957610070565b806315727e911461007557806332a130c9146100a05780633408e470146100c2575b600080fd5b34801561008157600080fd5b5061008a61014c565b60405161009791906108d6565b60405180910390f35b3480156100ac57600080fd5b506100b561017c565b6040516100979190610a60565b3480156100ce57600080fd5b506100b56101a0565b3480156100e357600080fd5b506100f76100f2366004610703565b6101d8565b604051610097919061086b565b34801561011057600080fd5b506100f761011f366004610703565b610284565b34801561013057600080fd5b506100f76102a4565b6100f7610147366004610737565b6102c8565b60606101777f00000000000000000000000000000000000000000000000000000000000000006103a5565b905090565b7f000000000000000000000000000000000000000000000000000000000000000090565b60007f0000000000000000000000000000000000000000000000000000000000000000806101d0574691506101d4565b8091505b5090565b60006101e48383610425565b604051632d34ba7960e01b81529091506001600160a01b03821690632d34ba7990610215908690869060040161087f565b600060405180830381600087803b15801561022f57600080fd5b505af1158015610243573d6000803e3d6000fd5b505050507fa79ba8cc5fdc29196c8d65701a02433c92328f38f0ffbea3908335b80d81409d81604051610276919061086b565b60405180910390a192915050565b600061029b610293848461044f565b60005461048b565b90505b92915050565b7f000000000000000000000000000000000000000000000000000000000000000090565b60006102d485856101d8565b90506102df83610498565b61033b576102ef833330856104a5565b6103145760405162461bcd60e51b815260040161030b906109e4565b60405180910390fd5b61031f8382846104f8565b61033b5760405162461bcd60e51b815260040161030b906109a0565b60405163635ae90160e01b81526001600160a01b0382169063635ae90190349061036b90879087906004016108bd565b6000604051808303818588803b15801561038457600080fd5b505af1158015610398573d6000803e3d6000fd5b5050505050949350505050565b6060604051806040016040528060148152602001733d602d80600a3d3981f3363d3d373d3d3d363d7360601b815250826040518060400160405280600f81526020016e5af43d82803e903d91602b57fd5bf360881b81525060405160200161040f93929190610824565b6040516020818303038152906040529050919050565b600080610432848461044f565b905061044760008261044261014c565b610540565b949350505050565b6000828261045b6101a0565b60405160200161046d939291906107ab565b60405160208183030381529060405280519060200120905092915050565b600061029b8383306105b2565b6001600160a01b03161590565b60006104ef858585856040516024016104c093929190610899565b60408051601f198184030181529190526020810180516001600160e01b03166323b872dd60e01b1790526105f1565b95945050505050565b60006104478484846040516024016105119291906108bd565b60408051601f198184030181529190526020810180516001600160e01b031663095ea7b360e01b1790526105f1565b600080844710156105635760405162461bcd60e51b815260040161030b90610a29565b82516105815760405162461bcd60e51b815260040161030b90610909565b8383516020850187f590506001600160a01b0381166104475760405162461bcd60e51b815260040161030b9061093e565b60008060ff60f81b8386866040516020016105d094939291906107d4565b60408051808303601f19018152919052805160209091012095945050505050565b60006105fc836106a2565b6106185760405162461bcd60e51b815260040161030b90610975565b60006060846001600160a01b0316846040516106349190610808565b6000604051808303816000865af19150503d8060008114610671576040519150601f19603f3d011682016040523d82523d6000602084013e610676565b606091505b509150915061068582826106db565b805115806104ef5750808060200190518101906104ef9190610784565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610447575050151592915050565b816106e857805160208201fd5b5050565b80356001600160a01b038116811461029e57600080fd5b60008060408385031215610715578182fd5b61071f84846106ec565b915061072e84602085016106ec565b90509250929050565b6000806000806080858703121561074c578182fd5b61075686866106ec565b935061076586602087016106ec565b925061077486604087016106ec565b9396929550929360600135925050565b600060208284031215610795578081fd5b815180151581146107a4578182fd5b9392505050565b6001600160601b0319606094851b811682529290931b9091166014830152602882015260480190565b6001600160f81b031994909416845260609290921b6001600160601b03191660018401526015830152603582015260550190565b6000825161081a818460208701610a69565b9190910192915050565b60008451610836818460208901610a69565b606085901b6001600160601b031916908301908152835161085e816014840160208801610a69565b0160140195945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b60006020825282518060208401526108f5816040850160208701610a69565b601f01601f19169190910160400192915050565b6020808252818101527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604082015260600190565b60208082526019908201527f437265617465323a204661696c6564206f6e206465706c6f7900000000000000604082015260600190565b6020808252601190820152704c696245524332303a204e4f5f434f444560781b604082015260600190565b60208082526024908201527f4368616e6e656c466163746f72793a2045524332305f415050524f56455f46416040820152631253115160e21b606082015260800190565b60208082526025908201527f4368616e6e656c466163746f72793a2045524332305f5452414e534645525f46604082015264105253115160da1b606082015260800190565b6020808252601d908201527f437265617465323a20696e73756666696369656e742062616c616e6365000000604082015260600190565b90815260200190565b60005b83811015610a84578181015183820152602001610a6c565b83811115610a93576000848401525b5050505056fea26469706673582212206b46714e4e157ca4fcef5f14f882cae62cdcfb5e301602c8361ab37a1daaf2ab64736f6c63430007010033","devdoc":{"author":"Connext <support@connext.network>","kind":"dev","methods":{"constructor":{"details":"Creates a new `ChannelFactory`","params":{"_chainId":"the chain identifier when generating the CREATE2 salt. If zero, the chain identifier used in the proxy salt will be the result of the opcode","_mastercopy":"the address of the `ChannelMastercopy` (channel logic)"}},"createChannel(address,address)":{"details":"Allows us to create new channel contract and get it all set up in one transaction","params":{"alice":"address of the high fidelity channel participant","bob":"address of the other channel participant"}},"createChannelAndDepositAlice(address,address,address,uint256)":{"details":"Allows us to create a new channel contract and fund it in one transaction","params":{"bob":"address of the other channel participant"}},"getChainId()":{"details":"Allows us to get the chainId that this factory will use in the create2 salt"},"getChannelAddress(address,address)":{"details":"Allows us to get the address for a new channel contract created via `createChannel`","params":{"alice":"address of the igh fidelity channel participant","bob":"address of the other channel participant"}},"getMastercopy()":{"details":"Allows us to get the mastercopy that this factory will deploy channels against"},"getProxyCreationCode()":{"details":"Returns the proxy code used to both calculate the CREATE2 address and deploy the channel proxy pointed to the `ChannelMastercopy`"},"getStoredChainId()":{"details":"Allows us to get the chainId that this factory has stored"}},"title":"ChannelFactory","version":1},"userdoc":{"kind":"user","methods":{},"notice":"Creates and sets up a new channel proxy contract","version":1},"storageLayout":{"storage":[{"astId":3100,"contract":"src.sol/ChannelFactory.sol:ChannelFactory","label":"creationCodeHash","offset":0,"slot":"0","type":"t_bytes32"}],"types":{"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"}}}}')},2837:function(e){e.exports=JSON.parse('{"address":"0xd105b6B42206dfA6Db00E6a4823bC88eFAC00476","abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"assetId","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"AliceDeposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"defunder","type":"address"},{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"},{"internalType":"address[]","name":"assetIds","type":"address[]"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance[]","name":"balances","type":"tuple[]"},{"internalType":"uint256[]","name":"processedDepositsA","type":"uint256[]"},{"internalType":"uint256[]","name":"processedDepositsB","type":"uint256[]"},{"internalType":"uint256[]","name":"defundNonces","type":"uint256[]"},{"internalType":"uint256","name":"timeout","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"indexed":false,"internalType":"struct ICMCAdjudicator.CoreChannelState","name":"state","type":"tuple"},{"components":[{"internalType":"bytes32","name":"channelStateHash","type":"bytes32"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"consensusExpiry","type":"uint256"},{"internalType":"uint256","name":"defundExpiry","type":"uint256"}],"indexed":false,"internalType":"struct ICMCAdjudicator.ChannelDispute","name":"dispute","type":"tuple"},{"indexed":false,"internalType":"address[]","name":"assetIds","type":"address[]"}],"name":"ChannelDefunded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"disputer","type":"address"},{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"},{"internalType":"address[]","name":"assetIds","type":"address[]"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance[]","name":"balances","type":"tuple[]"},{"internalType":"uint256[]","name":"processedDepositsA","type":"uint256[]"},{"internalType":"uint256[]","name":"processedDepositsB","type":"uint256[]"},{"internalType":"uint256[]","name":"defundNonces","type":"uint256[]"},{"internalType":"uint256","name":"timeout","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"indexed":false,"internalType":"struct ICMCAdjudicator.CoreChannelState","name":"state","type":"tuple"},{"components":[{"internalType":"bytes32","name":"channelStateHash","type":"bytes32"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"consensusExpiry","type":"uint256"},{"internalType":"uint256","name":"defundExpiry","type":"uint256"}],"indexed":false,"internalType":"struct ICMCAdjudicator.ChannelDispute","name":"dispute","type":"tuple"}],"name":"ChannelDisputed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"defunder","type":"address"},{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"bytes32","name":"transferId","type":"bytes32"},{"internalType":"address","name":"transferDefinition","type":"address"},{"internalType":"address","name":"initiator","type":"address"},{"internalType":"address","name":"responder","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance","name":"balance","type":"tuple"},{"internalType":"uint256","name":"transferTimeout","type":"uint256"},{"internalType":"bytes32","name":"initialStateHash","type":"bytes32"}],"indexed":false,"internalType":"struct ICMCAdjudicator.CoreTransferState","name":"state","type":"tuple"},{"components":[{"internalType":"bytes32","name":"transferStateHash","type":"bytes32"},{"internalType":"uint256","name":"transferDisputeExpiry","type":"uint256"},{"internalType":"bool","name":"isDefunded","type":"bool"}],"indexed":false,"internalType":"struct ICMCAdjudicator.TransferDispute","name":"dispute","type":"tuple"},{"indexed":false,"internalType":"bytes","name":"encodedInitialState","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"encodedResolver","type":"bytes"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"indexed":false,"internalType":"struct Balance","name":"balance","type":"tuple"}],"name":"TransferDefunded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"disputer","type":"address"},{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"bytes32","name":"transferId","type":"bytes32"},{"internalType":"address","name":"transferDefinition","type":"address"},{"internalType":"address","name":"initiator","type":"address"},{"internalType":"address","name":"responder","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance","name":"balance","type":"tuple"},{"internalType":"uint256","name":"transferTimeout","type":"uint256"},{"internalType":"bytes32","name":"initialStateHash","type":"bytes32"}],"indexed":false,"internalType":"struct ICMCAdjudicator.CoreTransferState","name":"state","type":"tuple"},{"components":[{"internalType":"bytes32","name":"transferStateHash","type":"bytes32"},{"internalType":"uint256","name":"transferDisputeExpiry","type":"uint256"},{"internalType":"bool","name":"isDefunded","type":"bool"}],"indexed":false,"internalType":"struct ICMCAdjudicator.TransferDispute","name":"dispute","type":"tuple"}],"name":"TransferDisputed","type":"event"},{"inputs":[{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"},{"internalType":"address[]","name":"assetIds","type":"address[]"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance[]","name":"balances","type":"tuple[]"},{"internalType":"uint256[]","name":"processedDepositsA","type":"uint256[]"},{"internalType":"uint256[]","name":"processedDepositsB","type":"uint256[]"},{"internalType":"uint256[]","name":"defundNonces","type":"uint256[]"},{"internalType":"uint256","name":"timeout","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"internalType":"struct ICMCAdjudicator.CoreChannelState","name":"ccs","type":"tuple"},{"internalType":"address[]","name":"assetIds","type":"address[]"},{"internalType":"uint256[]","name":"indices","type":"uint256[]"}],"name":"defundChannel","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"bytes32","name":"transferId","type":"bytes32"},{"internalType":"address","name":"transferDefinition","type":"address"},{"internalType":"address","name":"initiator","type":"address"},{"internalType":"address","name":"responder","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance","name":"balance","type":"tuple"},{"internalType":"uint256","name":"transferTimeout","type":"uint256"},{"internalType":"bytes32","name":"initialStateHash","type":"bytes32"}],"internalType":"struct ICMCAdjudicator.CoreTransferState","name":"cts","type":"tuple"},{"internalType":"bytes","name":"encodedInitialTransferState","type":"bytes"},{"internalType":"bytes","name":"encodedTransferResolver","type":"bytes"},{"internalType":"bytes","name":"responderSignature","type":"bytes"}],"name":"defundTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"depositAlice","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"},{"internalType":"address[]","name":"assetIds","type":"address[]"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance[]","name":"balances","type":"tuple[]"},{"internalType":"uint256[]","name":"processedDepositsA","type":"uint256[]"},{"internalType":"uint256[]","name":"processedDepositsB","type":"uint256[]"},{"internalType":"uint256[]","name":"defundNonces","type":"uint256[]"},{"internalType":"uint256","name":"timeout","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"internalType":"struct ICMCAdjudicator.CoreChannelState","name":"ccs","type":"tuple"},{"internalType":"bytes","name":"aliceSignature","type":"bytes"},{"internalType":"bytes","name":"bobSignature","type":"bytes"}],"name":"disputeChannel","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"bytes32","name":"transferId","type":"bytes32"},{"internalType":"address","name":"transferDefinition","type":"address"},{"internalType":"address","name":"initiator","type":"address"},{"internalType":"address","name":"responder","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance","name":"balance","type":"tuple"},{"internalType":"uint256","name":"transferTimeout","type":"uint256"},{"internalType":"bytes32","name":"initialStateHash","type":"bytes32"}],"internalType":"struct ICMCAdjudicator.CoreTransferState","name":"cts","type":"tuple"},{"internalType":"bytes32[]","name":"merkleProofData","type":"bytes32[]"}],"name":"disputeTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address payable","name":"recipient","type":"address"}],"name":"exit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getAlice","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBob","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getChannelDispute","outputs":[{"components":[{"internalType":"bytes32","name":"channelStateHash","type":"bytes32"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"consensusExpiry","type":"uint256"},{"internalType":"uint256","name":"defundExpiry","type":"uint256"}],"internalType":"struct ICMCAdjudicator.ChannelDispute","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"}],"name":"getDefundNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"getExitableAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"}],"name":"getTotalDepositsAlice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"}],"name":"getTotalDepositsBob","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"}],"name":"getTotalTransferred","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"transferId","type":"bytes32"}],"name":"getTransferDispute","outputs":[{"components":[{"internalType":"bytes32","name":"transferStateHash","type":"bytes32"},{"internalType":"uint256","name":"transferDisputeExpiry","type":"uint256"},{"internalType":"bool","name":"isDefunded","type":"bool"}],"internalType":"struct ICMCAdjudicator.TransferDispute","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"internalType":"address payable","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"address","name":"callTo","type":"address"},{"internalType":"bytes","name":"callData","type":"bytes"}],"internalType":"struct WithdrawData","name":"wd","type":"tuple"}],"name":"getWithdrawalTransactionRecord","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_alice","type":"address"},{"internalType":"address","name":"_bob","type":"address"}],"name":"setup","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"internalType":"address payable","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"address","name":"callTo","type":"address"},{"internalType":"bytes","name":"callData","type":"bytes"}],"internalType":"struct WithdrawData","name":"wd","type":"tuple"},{"internalType":"bytes","name":"aliceSignature","type":"bytes"},{"internalType":"bytes","name":"bobSignature","type":"bytes"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"transactionHash":"0x1d7b1ca20954fc1410471c2ca9ccbfc2e75b4f6d30a2179a9b30b42bf773648c","receipt":{"to":null,"from":"0xd4b33434Cb36df9286Ef5132FCFb8062c96aC56E","contractAddress":"0xd105b6B42206dfA6Db00E6a4823bC88eFAC00476","transactionIndex":7,"gasUsed":"3585396","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","blockHash":"0x54b9c38540ba41233d843aa654f1647dbaacf8a822ddfa82ec22d48a82980037","transactionHash":"0x1d7b1ca20954fc1410471c2ca9ccbfc2e75b4f6d30a2179a9b30b42bf773648c","logs":[],"blockNumber":14465799,"cumulativeGasUsed":"5745159","status":1,"byzantium":true},"args":[],"solcInputHash":"89c55d5a88f10637860a9ea31a1daad3","metadata":"{\\"compiler\\":{\\"version\\":\\"0.7.1+commit.f4a555be\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"AliceDeposited\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"defunder\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address[]\\",\\"name\\":\\"assetIds\\",\\"type\\":\\"address[]\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance[]\\",\\"name\\":\\"balances\\",\\"type\\":\\"tuple[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsA\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsB\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"defundNonces\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"timeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.CoreChannelState\\",\\"name\\":\\"state\\",\\"type\\":\\"tuple\\"},{\\"components\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"channelStateHash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"consensusExpiry\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"defundExpiry\\",\\"type\\":\\"uint256\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.ChannelDispute\\",\\"name\\":\\"dispute\\",\\"type\\":\\"tuple\\"},{\\"indexed\\":false,\\"internalType\\":\\"address[]\\",\\"name\\":\\"assetIds\\",\\"type\\":\\"address[]\\"}],\\"name\\":\\"ChannelDefunded\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"disputer\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address[]\\",\\"name\\":\\"assetIds\\",\\"type\\":\\"address[]\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance[]\\",\\"name\\":\\"balances\\",\\"type\\":\\"tuple[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsA\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsB\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"defundNonces\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"timeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.CoreChannelState\\",\\"name\\":\\"state\\",\\"type\\":\\"tuple\\"},{\\"components\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"channelStateHash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"consensusExpiry\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"defundExpiry\\",\\"type\\":\\"uint256\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.ChannelDispute\\",\\"name\\":\\"dispute\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"ChannelDisputed\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"defunder\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferId\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"transferDefinition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"initiator\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"responder\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"balance\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferTimeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"initialStateHash\\",\\"type\\":\\"bytes32\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.CoreTransferState\\",\\"name\\":\\"state\\",\\"type\\":\\"tuple\\"},{\\"components\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferStateHash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferDisputeExpiry\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"isDefunded\\",\\"type\\":\\"bool\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.TransferDispute\\",\\"name\\":\\"dispute\\",\\"type\\":\\"tuple\\"},{\\"indexed\\":false,\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedInitialState\\",\\"type\\":\\"bytes\\"},{\\"indexed\\":false,\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedResolver\\",\\"type\\":\\"bytes\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"balance\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"TransferDefunded\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"disputer\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferId\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"transferDefinition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"initiator\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"responder\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"balance\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferTimeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"initialStateHash\\",\\"type\\":\\"bytes32\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.CoreTransferState\\",\\"name\\":\\"state\\",\\"type\\":\\"tuple\\"},{\\"components\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferStateHash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferDisputeExpiry\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"isDefunded\\",\\"type\\":\\"bool\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.TransferDispute\\",\\"name\\":\\"dispute\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"TransferDisputed\\",\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address[]\\",\\"name\\":\\"assetIds\\",\\"type\\":\\"address[]\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance[]\\",\\"name\\":\\"balances\\",\\"type\\":\\"tuple[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsA\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsB\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"defundNonces\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"timeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"}],\\"internalType\\":\\"struct ICMCAdjudicator.CoreChannelState\\",\\"name\\":\\"ccs\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"address[]\\",\\"name\\":\\"assetIds\\",\\"type\\":\\"address[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"indices\\",\\"type\\":\\"uint256[]\\"}],\\"name\\":\\"defundChannel\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferId\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"transferDefinition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"initiator\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"responder\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"balance\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferTimeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"initialStateHash\\",\\"type\\":\\"bytes32\\"}],\\"internalType\\":\\"struct ICMCAdjudicator.CoreTransferState\\",\\"name\\":\\"cts\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedInitialTransferState\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedTransferResolver\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"responderSignature\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"defundTransfer\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"depositAlice\\",\\"outputs\\":[],\\"stateMutability\\":\\"payable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address[]\\",\\"name\\":\\"assetIds\\",\\"type\\":\\"address[]\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance[]\\",\\"name\\":\\"balances\\",\\"type\\":\\"tuple[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsA\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsB\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"defundNonces\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"timeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"}],\\"internalType\\":\\"struct ICMCAdjudicator.CoreChannelState\\",\\"name\\":\\"ccs\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"aliceSignature\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"bobSignature\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"disputeChannel\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferId\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"transferDefinition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"initiator\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"responder\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"balance\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferTimeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"initialStateHash\\",\\"type\\":\\"bytes32\\"}],\\"internalType\\":\\"struct ICMCAdjudicator.CoreTransferState\\",\\"name\\":\\"cts\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"bytes32[]\\",\\"name\\":\\"merkleProofData\\",\\"type\\":\\"bytes32[]\\"}],\\"name\\":\\"disputeTransfer\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address payable\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"}],\\"name\\":\\"exit\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getAlice\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getBob\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getChannelDispute\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"channelStateHash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"consensusExpiry\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"defundExpiry\\",\\"type\\":\\"uint256\\"}],\\"internalType\\":\\"struct ICMCAdjudicator.ChannelDispute\\",\\"name\\":\\"\\",\\"type\\":\\"tuple\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getDefundNonce\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getExitableAmount\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getTotalDepositsAlice\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getTotalDepositsBob\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getTotalTransferred\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferId\\",\\"type\\":\\"bytes32\\"}],\\"name\\":\\"getTransferDispute\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferStateHash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferDisputeExpiry\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"isDefunded\\",\\"type\\":\\"bool\\"}],\\"internalType\\":\\"struct ICMCAdjudicator.TransferDispute\\",\\"name\\":\\"\\",\\"type\\":\\"tuple\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address payable\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"callTo\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"callData\\",\\"type\\":\\"bytes\\"}],\\"internalType\\":\\"struct WithdrawData\\",\\"name\\":\\"wd\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"getWithdrawalTransactionRecord\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"lock\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"_bob\\",\\"type\\":\\"address\\"}],\\"name\\":\\"setup\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address payable\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"callTo\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"callData\\",\\"type\\":\\"bytes\\"}],\\"internalType\\":\\"struct WithdrawData\\",\\"name\\":\\"wd\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"aliceSignature\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"bobSignature\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"withdraw\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"stateMutability\\":\\"payable\\",\\"type\\":\\"receive\\"}],\\"devdoc\\":{\\"author\\":\\"Connext <support@connext.network>\\",\\"kind\\":\\"dev\\",\\"methods\\":{\\"getAlice()\\":{\\"returns\\":{\\"_0\\":\\"Bob\'s signer address\\"}},\\"getBob()\\":{\\"returns\\":{\\"_0\\":\\"Alice\'s signer address\\"}},\\"setup(address,address)\\":{\\"params\\":{\\"_alice\\":\\": Address representing user with function deposit\\",\\"_bob\\":\\": Address representing user with multisig deposit\\"}},\\"withdraw((address,address,address,uint256,uint256,address,bytes),bytes,bytes)\\":{\\"params\\":{\\"aliceSignature\\":\\"Signature of owner a\\",\\"bobSignature\\":\\"Signature of owner b\\",\\"wd\\":\\"The withdraw data consisting of semantic withdraw information, i.e. assetId, recipient, and amount; information to make an optional call in addition to the actual transfer, i.e. target address for the call and call payload; additional information, i.e. channel address and nonce.\\"}}},\\"title\\":\\"ChannelMastercopy\\",\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{\\"getAlice()\\":{\\"notice\\":\\"A getter function for the bob of the multisig\\"},\\"getBob()\\":{\\"notice\\":\\"A getter function for the bob of the multisig\\"},\\"setup(address,address)\\":{\\"notice\\":\\"Contract constructor for Proxied copies\\"}},\\"notice\\":\\"Contains the logic used by all Vector multisigs. A proxy to this         contract is deployed per-channel using the ChannelFactory.sol.         Supports channel adjudication logic, deposit logic, and arbitrary         calls when a commitment is double-signed.\\",\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"src.sol/ChannelMastercopy.sol\\":\\"ChannelMastercopy\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\\\n *\\\\n * These functions can be used to verify that a message was signed by the holder\\\\n * of the private keys of a given address.\\\\n */\\\\nlibrary ECDSA {\\\\n    /**\\\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\\\n     * `signature`. This address can then be used for verification purposes.\\\\n     *\\\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\\\n     * this function rejects them by requiring the `s` value to be in the lower\\\\n     * half order, and the `v` value to be either 27 or 28.\\\\n     *\\\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\\\n     * verification to be secure: it is possible to craft signatures that\\\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\\\n     * this is by receiving a hash of the original message (which may otherwise\\\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\\\n     */\\\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\\\n        // Check the signature length\\\\n        if (signature.length != 65) {\\\\n            revert(\\\\\\"ECDSA: invalid signature length\\\\\\");\\\\n        }\\\\n\\\\n        // Divide the signature in r, s and v variables\\\\n        bytes32 r;\\\\n        bytes32 s;\\\\n        uint8 v;\\\\n\\\\n        // ecrecover takes the signature parameters, and the only way to get them\\\\n        // currently is to use assembly.\\\\n        // solhint-disable-next-line no-inline-assembly\\\\n        assembly {\\\\n            r := mload(add(signature, 0x20))\\\\n            s := mload(add(signature, 0x40))\\\\n            v := byte(0, mload(add(signature, 0x60)))\\\\n        }\\\\n\\\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\\\n        // the valid range for s in (281): 0 < s < secp256k1n \\\\u00f7 2 + 1, and for v in (282): v \\\\u2208 {27, 28}. Most\\\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\\\n        //\\\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\\\n        // these malleable signatures as well.\\\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\\\n            revert(\\\\\\"ECDSA: invalid signature \'s\' value\\\\\\");\\\\n        }\\\\n\\\\n        if (v != 27 && v != 28) {\\\\n            revert(\\\\\\"ECDSA: invalid signature \'v\' value\\\\\\");\\\\n        }\\\\n\\\\n        // If the signature is valid (and not malleable), return the signer address\\\\n        address signer = ecrecover(hash, v, r, s);\\\\n        require(signer != address(0), \\\\\\"ECDSA: invalid signature\\\\\\");\\\\n\\\\n        return signer;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\\\n     * replicates the behavior of the\\\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\\\n     * JSON-RPC method.\\\\n     *\\\\n     * See {recover}.\\\\n     */\\\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\\\n        // 32 is the length in bytes of hash,\\\\n        // enforced by the type signature above\\\\n        return keccak256(abi.encodePacked(\\\\\\"\\\\\\\\x19Ethereum Signed Message:\\\\\\\\n32\\\\\\", hash));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf25c49d2be2d28918ae6de7e9724238367dabe50631ec8fd23d1cdae2cb70262\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/cryptography/MerkleProof.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev These functions deal with verification of Merkle trees (hash trees),\\\\n */\\\\nlibrary MerkleProof {\\\\n    /**\\\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\\\n     * defined by `root`. For this, a `proof` must be provided, containing\\\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\\\n     */\\\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\\\n        bytes32 computedHash = leaf;\\\\n\\\\n        for (uint256 i = 0; i < proof.length; i++) {\\\\n            bytes32 proofElement = proof[i];\\\\n\\\\n            if (computedHash <= proofElement) {\\\\n                // Hash(current computed hash + current element of the proof)\\\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\\\n            } else {\\\\n                // Hash(current element of the proof + current computed hash)\\\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\\\n            }\\\\n        }\\\\n\\\\n        // Check if the computed hash (root) is equal to the provided root\\\\n        return computedHash == root;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x4959be2683e7af3439cb94f06aa6c40cb42ca9336747d0c7dce54f07196489bc\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/math/Math.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Standard math utilities missing in the Solidity language.\\\\n */\\\\nlibrary Math {\\\\n    /**\\\\n     * @dev Returns the largest of two numbers.\\\\n     */\\\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a >= b ? a : b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the smallest of two numbers.\\\\n     */\\\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a < b ? a : b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the average of two numbers. The result is rounded towards\\\\n     * zero.\\\\n     */\\\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        // (a + b) / 2 can overflow, so we distribute\\\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xa4fdec0ea7d943692cac780111ff2ff9d89848cad0494a59cfaed63a705054b4\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/math/SafeMath.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Wrappers over Solidity\'s arithmetic operations with added overflow\\\\n * checks.\\\\n *\\\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\\\n * in bugs, because programmers usually assume that an overflow raises an\\\\n * error, which is the standard behavior in high level programming languages.\\\\n * `SafeMath` restores this intuition by reverting the transaction when an\\\\n * operation overflows.\\\\n *\\\\n * Using this library instead of the unchecked operations eliminates an entire\\\\n * class of bugs, so it\'s recommended to use it always.\\\\n */\\\\nlibrary SafeMath {\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `+` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Addition cannot overflow.\\\\n     */\\\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        uint256 c = a + b;\\\\n        require(c >= a, \\\\\\"SafeMath: addition overflow\\\\\\");\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return sub(a, b, \\\\\\"SafeMath: subtraction overflow\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        require(b <= a, errorMessage);\\\\n        uint256 c = a - b;\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `*` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Multiplication cannot overflow.\\\\n     */\\\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\\\\n        // benefit is lost if \'b\' is also tested.\\\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\\\n        if (a == 0) {\\\\n            return 0;\\\\n        }\\\\n\\\\n        uint256 c = a * b;\\\\n        require(c / a == b, \\\\\\"SafeMath: multiplication overflow\\\\\\");\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return div(a, b, \\\\\\"SafeMath: division by zero\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        require(b > 0, errorMessage);\\\\n        uint256 c = a / b;\\\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * Reverts when dividing by zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return mod(a, b, \\\\\\"SafeMath: modulo by zero\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * Reverts with custom message when dividing by zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        require(b != 0, errorMessage);\\\\n        return a % b;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Returns the amount of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender\'s allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\\\n     * allowance mechanism. `amount` is then deducted from the caller\'s\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Address.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Collection of functions related to the address type\\\\n */\\\\nlibrary Address {\\\\n    /**\\\\n     * @dev Returns true if `account` is a contract.\\\\n     *\\\\n     * [IMPORTANT]\\\\n     * ====\\\\n     * It is unsafe to assume that an address for which this function returns\\\\n     * false is an externally-owned account (EOA) and not a contract.\\\\n     *\\\\n     * Among others, `isContract` will return false for the following\\\\n     * types of addresses:\\\\n     *\\\\n     *  - an externally-owned account\\\\n     *  - a contract in construction\\\\n     *  - an address where a contract will be created\\\\n     *  - an address where a contract lived, but was destroyed\\\\n     * ====\\\\n     */\\\\n    function isContract(address account) internal view returns (bool) {\\\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\\\n        // for accounts without code, i.e. `keccak256(\'\')`\\\\n        bytes32 codehash;\\\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\\\n        // solhint-disable-next-line no-inline-assembly\\\\n        assembly { codehash := extcodehash(account) }\\\\n        return (codehash != accountHash && codehash != 0x0);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\\\\n     * `recipient`, forwarding all available gas and reverting on errors.\\\\n     *\\\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\\\n     * imposed by `transfer`, making them unable to receive funds via\\\\n     * `transfer`. {sendValue} removes this limitation.\\\\n     *\\\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\\\n     *\\\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\\\n     * taken to not create reentrancy vulnerabilities. Consider using\\\\n     * {ReentrancyGuard} or the\\\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\\\n     */\\\\n    function sendValue(address payable recipient, uint256 amount) internal {\\\\n        require(address(this).balance >= amount, \\\\\\"Address: insufficient balance\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\\\n        (bool success, ) = recipient.call{ value: amount }(\\\\\\"\\\\\\");\\\\n        require(success, \\\\\\"Address: unable to send value, recipient may have reverted\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Performs a Solidity function call using a low level `call`. A\\\\n     * plain`call` is an unsafe replacement for a function call: use this\\\\n     * function instead.\\\\n     *\\\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\\\n     * function (like regular Solidity function calls).\\\\n     *\\\\n     * Returns the raw returned data. To convert to the expected return value,\\\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `target` must be a contract.\\\\n     * - calling `target` with `data` must not revert.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n      return functionCall(target, data, \\\\\\"Address: low-level call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but also transferring `value` wei to `target`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the calling contract must have an ETH balance of at least `value`.\\\\n     * - the called Solidity function must be `payable`.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, value, \\\\\\"Address: low-level call with value failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\\\n        require(address(this).balance >= value, \\\\\\"Address: insufficient balance for call\\\\\\");\\\\n        return _functionCallWithValue(target, data, value, errorMessage);\\\\n    }\\\\n\\\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: call to non-contract\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls\\\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\\\n        if (success) {\\\\n            return returndata;\\\\n        } else {\\\\n            // Look for revert reason and bubble it up if present\\\\n            if (returndata.length > 0) {\\\\n                // The easiest way to bubble the revert reason is using memory via assembly\\\\n\\\\n                // solhint-disable-next-line no-inline-assembly\\\\n                assembly {\\\\n                    let returndata_size := mload(returndata)\\\\n                    revert(add(32, returndata), returndata_size)\\\\n                }\\\\n            } else {\\\\n                revert(errorMessage);\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x698f929f1097637d051976b322a2d532c27df022b09010e8d091e2888a5ebdf8\\",\\"license\\":\\"MIT\\"},\\"src.sol/CMCAdjudicator.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/Commitment.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/ICMCAdjudicator.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/ITransferDefinition.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/Types.sol\\\\\\";\\\\nimport \\\\\\"./CMCCore.sol\\\\\\";\\\\nimport \\\\\\"./CMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./CMCDeposit.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibChannelCrypto.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibMath.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/cryptography/MerkleProof.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/math/SafeMath.sol\\\\\\";\\\\n\\\\n/// @title CMCAdjudicator\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains logic for disputing a single channel and all active\\\\n///         transfers associated with the channel. Contains two major phases:\\\\n///         (1) consensus: settle on latest channel state\\\\n///         (2) defund: remove assets and dispute active transfers\\\\ncontract CMCAdjudicator is CMCCore, CMCAsset, CMCDeposit, ICMCAdjudicator {\\\\n    using LibChannelCrypto for bytes32;\\\\n    using LibMath for uint256;\\\\n    using SafeMath for uint256;\\\\n\\\\n    uint256 private constant INITIAL_DEFUND_NONCE = 1;\\\\n\\\\n    ChannelDispute private channelDispute;\\\\n    mapping(address => uint256) private defundNonces;\\\\n    mapping(bytes32 => TransferDispute) private transferDisputes;\\\\n\\\\n    modifier validateChannel(CoreChannelState calldata ccs) {\\\\n        require(\\\\n            ccs.channelAddress == address(this) &&\\\\n                ccs.alice == alice &&\\\\n                ccs.bob == bob,\\\\n            \\\\\\"CMCAdjudicator: INVALID_CHANNEL\\\\\\"\\\\n        );\\\\n        _;\\\\n    }\\\\n\\\\n    modifier validateTransfer(CoreTransferState calldata cts) {\\\\n        require(\\\\n            cts.channelAddress == address(this),\\\\n            \\\\\\"CMCAdjudicator: INVALID_TRANSFER\\\\\\"\\\\n        );\\\\n        _;\\\\n    }\\\\n\\\\n    function getChannelDispute()\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (ChannelDispute memory)\\\\n    {\\\\n        return channelDispute;\\\\n    }\\\\n\\\\n    function getDefundNonce(address assetId)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (uint256)\\\\n    {\\\\n        return defundNonces[assetId];\\\\n    }\\\\n\\\\n    function getTransferDispute(bytes32 transferId)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (TransferDispute memory)\\\\n    {\\\\n        return transferDisputes[transferId];\\\\n    }\\\\n\\\\n    function disputeChannel(\\\\n        CoreChannelState calldata ccs,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) external override onlyViaProxy nonReentrant validateChannel(ccs) {\\\\n        // Generate hash\\\\n        bytes32 ccsHash = hashChannelState(ccs);\\\\n\\\\n        // Verify Alice\'s and Bob\'s signature on the channel state\\\\n        verifySignaturesOnChannelStateHash(ccs, ccsHash, aliceSignature, bobSignature);\\\\n\\\\n        // We cannot dispute a channel in its defund phase\\\\n        require(!inDefundPhase(), \\\\\\"CMCAdjudicator: INVALID_PHASE\\\\\\");\\\\n\\\\n        // New nonce must be strictly greater than the stored one\\\\n        require(\\\\n            channelDispute.nonce < ccs.nonce,\\\\n            \\\\\\"CMCAdjudicator: INVALID_NONCE\\\\\\"\\\\n        );\\\\n\\\\n        if (!inConsensusPhase()) {\\\\n            // We are not already in a dispute\\\\n            // Set expiries\\\\n            // TODO: offchain-ensure that there can\'t be an overflow\\\\n            channelDispute.consensusExpiry = block.timestamp.add(ccs.timeout);\\\\n            channelDispute.defundExpiry = block.timestamp.add(\\\\n                ccs.timeout.mul(2)\\\\n            );\\\\n        }\\\\n\\\\n        // Store newer state\\\\n        channelDispute.channelStateHash = ccsHash;\\\\n        channelDispute.nonce = ccs.nonce;\\\\n        channelDispute.merkleRoot = ccs.merkleRoot;\\\\n\\\\n        // Emit event\\\\n        emit ChannelDisputed(msg.sender, ccs, channelDispute);\\\\n    }\\\\n\\\\n    function defundChannel(\\\\n        CoreChannelState calldata ccs,\\\\n        address[] calldata assetIds,\\\\n        uint256[] calldata indices\\\\n    ) external override onlyViaProxy nonReentrant validateChannel(ccs) {\\\\n        // These checks are not strictly necessary, but it\'s a bit cleaner this way\\\\n        require(assetIds.length > 0, \\\\\\"CMCAdjudicator: NO_ASSETS_GIVEN\\\\\\");\\\\n        require(\\\\n            indices.length <= assetIds.length,\\\\n            \\\\\\"CMCAdjudicator: WRONG_ARRAY_LENGTHS\\\\\\"\\\\n        );\\\\n\\\\n        // Verify that the given channel state matches the stored one\\\\n        require(\\\\n            hashChannelState(ccs) == channelDispute.channelStateHash,\\\\n            \\\\\\"CMCAdjudicator: INVALID_CHANNEL_HASH\\\\\\"\\\\n        );\\\\n\\\\n        // We need to be in defund phase for that\\\\n        require(inDefundPhase(), \\\\\\"CMCAdjudicator: INVALID_PHASE\\\\\\");\\\\n\\\\n        // TODO SECURITY: Beware of reentrancy\\\\n        // TODO: offchain-ensure that all arrays have the same length:\\\\n        // assetIds, balances, processedDepositsA, processedDepositsB, defundNonces\\\\n        // Make sure there are no duplicates in the assetIds -- duplicates are often a source of double-spends\\\\n\\\\n        // Defund all assets given\\\\n        for (uint256 i = 0; i < assetIds.length; i++) {\\\\n            address assetId = assetIds[i];\\\\n\\\\n            // Verify or find the index of the assetId in the ccs.assetIds\\\\n            uint256 index;\\\\n            if (i < indices.length) {\\\\n                // The index was supposedly given -- we verify\\\\n                index = indices[i];\\\\n                require(\\\\n                    assetId == ccs.assetIds[index],\\\\n                    \\\\\\"CMCAdjudicator: INDEX_MISMATCH\\\\\\"\\\\n                );\\\\n            } else {\\\\n                // we search through the assets in ccs\\\\n                for (index = 0; index < ccs.assetIds.length; index++) {\\\\n                    if (assetId == ccs.assetIds[index]) {\\\\n                        break;\\\\n                    }\\\\n                }\\\\n            }\\\\n\\\\n            // Now, if `index`  is equal to the number of assets in ccs,\\\\n            // then the current asset is not in ccs;\\\\n            // otherwise, `index` is the index in ccs for the current asset\\\\n\\\\n            // Check the assets haven\'t already been defunded + update the\\\\n            // defundNonce for that asset\\\\n            {\\\\n                // Open a new block to avoid \\\\\\"stack too deep\\\\\\" error\\\\n                uint256 defundNonce =\\\\n                    (index == ccs.assetIds.length)\\\\n                        ? INITIAL_DEFUND_NONCE\\\\n                        : ccs.defundNonces[index];\\\\n                require(\\\\n                    defundNonces[assetId] < defundNonce,\\\\n                    \\\\\\"CMCAdjudicator: CHANNEL_ALREADY_DEFUNDED\\\\\\"\\\\n                );\\\\n                defundNonces[assetId] = defundNonce;\\\\n            }\\\\n\\\\n            // Get total deposits\\\\n            uint256 tdAlice = _getTotalDepositsAlice(assetId);\\\\n            uint256 tdBob = _getTotalDepositsBob(assetId);\\\\n\\\\n            Balance memory balance;\\\\n\\\\n            if (index == ccs.assetIds.length) {\\\\n                // The current asset is not a part of ccs; refund what has been deposited\\\\n                balance = Balance({\\\\n                    amount: [tdAlice, tdBob],\\\\n                    to: [payable(ccs.alice), payable(ccs.bob)]\\\\n                });\\\\n            } else {\\\\n                // Start with the final balances in ccs\\\\n                balance = ccs.balances[index];\\\\n                // Add unprocessed deposits\\\\n                balance.amount[0] = balance.amount[0].satAdd(\\\\n                    tdAlice - ccs.processedDepositsA[index]\\\\n                );\\\\n                balance.amount[1] = balance.amount[1].satAdd(\\\\n                    tdBob - ccs.processedDepositsB[index]\\\\n                );\\\\n            }\\\\n\\\\n            // Add result to exitable amounts\\\\n            makeBalanceExitable(assetId, balance);\\\\n        }\\\\n\\\\n        emit ChannelDefunded(\\\\n            msg.sender,\\\\n            ccs,\\\\n            channelDispute,\\\\n            assetIds\\\\n        );\\\\n    }\\\\n\\\\n    function disputeTransfer(\\\\n        CoreTransferState calldata cts,\\\\n        bytes32[] calldata merkleProofData\\\\n    ) external override onlyViaProxy nonReentrant validateTransfer(cts) {\\\\n        // Verify that the given transfer state is included in the \\\\\\"finalized\\\\\\" channel state\\\\n        bytes32 transferStateHash = hashTransferState(cts);\\\\n        verifyMerkleProof(\\\\n            merkleProofData,\\\\n            channelDispute.merkleRoot,\\\\n            transferStateHash\\\\n        );\\\\n\\\\n        // The channel needs to be in defund phase for that, i.e. channel state is \\\\\\"finalized\\\\\\"\\\\n        require(inDefundPhase(), \\\\\\"CMCAdjudicator: INVALID_PHASE\\\\\\");\\\\n\\\\n        // Get stored dispute for this transfer\\\\n        TransferDispute storage transferDispute =\\\\n            transferDisputes[cts.transferId];\\\\n\\\\n        // Verify that this transfer has not been disputed before\\\\n        require(\\\\n            transferDispute.transferDisputeExpiry == 0,\\\\n            \\\\\\"CMCAdjudicator: TRANSFER_ALREADY_DISPUTED\\\\\\"\\\\n        );\\\\n\\\\n        // Store transfer state and set expiry\\\\n        transferDispute.transferStateHash = transferStateHash;\\\\n        // TODO: offchain-ensure that there can\'t be an overflow\\\\n        transferDispute.transferDisputeExpiry = block.timestamp.add(\\\\n            cts.transferTimeout\\\\n        );\\\\n\\\\n        emit TransferDisputed(\\\\n            msg.sender,\\\\n            cts,\\\\n            transferDispute\\\\n        );\\\\n    }\\\\n\\\\n    function defundTransfer(\\\\n        CoreTransferState calldata cts,\\\\n        bytes calldata encodedInitialTransferState,\\\\n        bytes calldata encodedTransferResolver,\\\\n        bytes calldata responderSignature\\\\n    ) external override onlyViaProxy nonReentrant validateTransfer(cts) {\\\\n        // Get stored dispute for this transfer\\\\n        TransferDispute storage transferDispute =\\\\n            transferDisputes[cts.transferId];\\\\n\\\\n        // Verify that a dispute for this transfer has already been started\\\\n        require(\\\\n            transferDispute.transferDisputeExpiry != 0,\\\\n            \\\\\\"CMCAdjudicator: TRANSFER_NOT_DISPUTED\\\\\\"\\\\n        );\\\\n\\\\n        // Verify that the given transfer state matches the stored one\\\\n        require(\\\\n            hashTransferState(cts) == transferDispute.transferStateHash,\\\\n            \\\\\\"CMCAdjudicator: INVALID_TRANSFER_HASH\\\\\\"\\\\n        );\\\\n\\\\n        // We can\'t defund twice\\\\n        require(\\\\n            !transferDispute.isDefunded,\\\\n            \\\\\\"CMCAdjudicator: TRANSFER_ALREADY_DEFUNDED\\\\\\"\\\\n        );\\\\n        transferDispute.isDefunded = true;\\\\n\\\\n        Balance memory balance;\\\\n\\\\n        if (block.timestamp < transferDispute.transferDisputeExpiry) {\\\\n            // Ensure the correct hash is provided\\\\n            require(\\\\n                keccak256(encodedInitialTransferState) == cts.initialStateHash,\\\\n                \\\\\\"CMCAdjudicator: INVALID_TRANSFER_HASH\\\\\\"\\\\n            );\\\\n            \\\\n            // Before dispute expiry, responder or responder-authorized\\\\n            // agent (i.e. watchtower) can resolve\\\\n            require(\\\\n                msg.sender == cts.responder || cts.initialStateHash.checkSignature(responderSignature, cts.responder),\\\\n                \\\\\\"CMCAdjudicator: INVALID_RESOLVER\\\\\\"\\\\n            );\\\\n            \\\\n            ITransferDefinition transferDefinition =\\\\n                ITransferDefinition(cts.transferDefinition);\\\\n            balance = transferDefinition.resolve(\\\\n                abi.encode(cts.balance),\\\\n                encodedInitialTransferState,\\\\n                encodedTransferResolver\\\\n            );\\\\n            // Verify that returned balances don\'t exceed initial balances\\\\n            require(\\\\n                balance.amount[0].add(balance.amount[1]) <=\\\\n                    cts.balance.amount[0].add(cts.balance.amount[1]),\\\\n                \\\\\\"CMCAdjudicator: INVALID_BALANCES\\\\\\"\\\\n            );\\\\n        } else {\\\\n            // After dispute expiry, if the responder hasn\'t resolved, we defund the initial balance\\\\n            balance = cts.balance;\\\\n        }\\\\n\\\\n        // Depending on previous code path, defund either resolved or initial balance\\\\n        makeBalanceExitable(cts.assetId, balance);\\\\n\\\\n        // Emit event\\\\n        emit TransferDefunded(\\\\n            msg.sender,\\\\n            cts,\\\\n            transferDispute,\\\\n            encodedInitialTransferState,\\\\n            encodedTransferResolver,\\\\n            balance\\\\n        );\\\\n    }\\\\n\\\\n    function verifySignaturesOnChannelStateHash(\\\\n        CoreChannelState calldata ccs,\\\\n        bytes32 ccsHash,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) internal pure {\\\\n        bytes32 commitment =\\\\n            keccak256(abi.encode(CommitmentType.ChannelState, ccsHash));\\\\n        require(\\\\n            commitment.checkSignature(aliceSignature, ccs.alice),\\\\n            \\\\\\"CMCAdjudicator: INVALID_ALICE_SIG\\\\\\"\\\\n        );\\\\n        require(\\\\n            commitment.checkSignature(bobSignature, ccs.bob),\\\\n            \\\\\\"CMCAdjudicator: INVALID_BOB_SIG\\\\\\"\\\\n        );\\\\n    }\\\\n\\\\n    function verifyMerkleProof(\\\\n        bytes32[] calldata proof,\\\\n        bytes32 root,\\\\n        bytes32 leaf\\\\n    ) internal pure {\\\\n        require(\\\\n            MerkleProof.verify(proof, root, leaf),\\\\n            \\\\\\"CMCAdjudicator: INVALID_MERKLE_PROOF\\\\\\"\\\\n        );\\\\n    }\\\\n\\\\n    function inConsensusPhase() internal view returns (bool) {\\\\n        return block.timestamp < channelDispute.consensusExpiry;\\\\n    }\\\\n\\\\n    function inDefundPhase() internal view returns (bool) {\\\\n        return\\\\n            channelDispute.consensusExpiry <= block.timestamp &&\\\\n            block.timestamp < channelDispute.defundExpiry;\\\\n    }\\\\n\\\\n    function hashChannelState(CoreChannelState calldata ccs)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        return keccak256(abi.encode(ccs));\\\\n    }\\\\n\\\\n    function hashTransferState(CoreTransferState calldata cts)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        return keccak256(abi.encode(cts));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x351fb7770cbb6fbb6f3470e63d5a9e93c817722f9c8e2e5c62e38ebf8c6e389b\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/CMCAsset.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/ICMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/Types.sol\\\\\\";\\\\nimport \\\\\\"./CMCCore.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibAsset.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibMath.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/math/Math.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/math/SafeMath.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\\\\";\\\\n\\\\n/// @title CMCAsset\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains logic to safely transfer channel assets (even if they are\\\\n///         noncompliant). During adjudication, balances from defunding the\\\\n///         channel or defunding transfers are registered as withdrawable. Once\\\\n///         they are registered, the owner (or a watchtower on behalf of the\\\\n///         owner), may call `exit` to reclaim funds from the multisig.\\\\n\\\\ncontract CMCAsset is CMCCore, ICMCAsset {\\\\n    using SafeMath for uint256;\\\\n    using LibMath for uint256;\\\\n\\\\n    mapping(address => uint256) internal totalTransferred;\\\\n    mapping(address => mapping(address => uint256))\\\\n        private exitableAmount;\\\\n\\\\n    function registerTransfer(address assetId, uint256 amount) internal {\\\\n        totalTransferred[assetId] += amount;\\\\n    }\\\\n\\\\n    function getTotalTransferred(address assetId)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (uint256)\\\\n    {\\\\n        return totalTransferred[assetId];\\\\n    }\\\\n\\\\n    function makeExitable(\\\\n        address assetId,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal {\\\\n        exitableAmount[assetId][\\\\n            recipient\\\\n        ] = exitableAmount[assetId][recipient].satAdd(amount);\\\\n    }\\\\n\\\\n    function makeBalanceExitable(\\\\n        address assetId,\\\\n        Balance memory balance\\\\n    ) internal {\\\\n        for (uint256 i = 0; i < 2; i++) {\\\\n            uint256 amount = balance.amount[i];\\\\n            if (amount > 0) {\\\\n                makeExitable(assetId, balance.to[i], amount);\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n    function getExitableAmount(address assetId, address owner)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (uint256)\\\\n    {\\\\n        return exitableAmount[assetId][owner];\\\\n    }\\\\n\\\\n    function getAvailableAmount(address assetId, uint256 maxAmount)\\\\n        internal\\\\n        view\\\\n        returns (uint256)\\\\n    {\\\\n        // Taking the min protects against the case where the multisig\\\\n        // holds less than the amount that is trying to be withdrawn\\\\n        // while still allowing the total of the funds to be removed\\\\n        // without the transaction reverting.\\\\n        return Math.min(maxAmount, LibAsset.getOwnBalance(assetId));\\\\n    }\\\\n\\\\n    function transferAsset(\\\\n        address assetId,\\\\n        address payable recipient,\\\\n        uint256 amount\\\\n    ) internal {\\\\n        registerTransfer(assetId, amount);\\\\n        require(\\\\n            LibAsset.unregisteredTransfer(assetId, recipient, amount),\\\\n            \\\\\\"CMCAsset: TRANSFER_FAILED\\\\\\"\\\\n        );\\\\n    }\\\\n\\\\n    function exit(\\\\n        address assetId,\\\\n        address owner,\\\\n        address payable recipient\\\\n    ) external override onlyViaProxy nonReentrant {\\\\n        // Either the owner must be the recipient, or in control\\\\n        // of setting the recipient of the funds to whomever they\\\\n        // choose\\\\n        require(\\\\n            msg.sender == owner || owner == recipient,\\\\n            \\\\\\"CMCAsset: OWNER_MISMATCH\\\\\\"\\\\n        );\\\\n\\\\n        uint256 amount =\\\\n            getAvailableAmount(\\\\n                assetId,\\\\n                exitableAmount[assetId][owner]\\\\n            );\\\\n\\\\n        // Revert if amount is 0\\\\n        require(amount > 0, \\\\\\"CMCAsset: NO_OP\\\\\\");\\\\n\\\\n        // Reduce the amount claimable from the multisig by the owner\\\\n        exitableAmount[assetId][\\\\n            owner\\\\n        ] = exitableAmount[assetId][owner].sub(amount);\\\\n\\\\n        // Perform transfer\\\\n        transferAsset(assetId, recipient, amount);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x39c1bd81d8ec2a0fa7c23aad683017f5e2ec28a2db43643020649f935b5b74bf\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/CMCCore.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/ICMCCore.sol\\\\\\";\\\\nimport \\\\\\"./ReentrancyGuard.sol\\\\\\";\\\\n\\\\n/// @title CMCCore\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains logic pertaining to the participants of a channel,\\\\n///         including setting and retrieving the participants and the\\\\n///         mastercopy.\\\\n\\\\ncontract CMCCore is ReentrancyGuard, ICMCCore {\\\\n    address private immutable mastercopyAddress;\\\\n\\\\n    address internal alice;\\\\n    address internal bob;\\\\n\\\\n    /// @notice Set invalid participants to block the mastercopy from being used directly\\\\n    ///         Nonzero address also prevents the mastercopy from being setup\\\\n    ///         Only setting alice is sufficient, setting bob too wouldn\'t change anything\\\\n    constructor() {\\\\n        mastercopyAddress = address(this);\\\\n    }\\\\n\\\\n    // Prevents us from calling methods directly from the mastercopy contract\\\\n    modifier onlyViaProxy {\\\\n        require(\\\\n            address(this) != mastercopyAddress,\\\\n            \\\\\\"Mastercopy: ONLY_VIA_PROXY\\\\\\"\\\\n        );\\\\n        _;\\\\n    }\\\\n\\\\n    /// @notice Contract constructor for Proxied copies\\\\n    /// @param _alice: Address representing user with function deposit\\\\n    /// @param _bob: Address representing user with multisig deposit\\\\n    function setup(address _alice, address _bob)\\\\n        external\\\\n        override\\\\n        onlyViaProxy\\\\n    {\\\\n        require(alice == address(0), \\\\\\"CMCCore: ALREADY_SETUP\\\\\\");\\\\n        require(\\\\n            _alice != address(0) && _bob != address(0),\\\\n            \\\\\\"CMCCore: INVALID_PARTICIPANT\\\\\\"\\\\n        );\\\\n        require(_alice != _bob, \\\\\\"CMCCore: IDENTICAL_PARTICIPANTS\\\\\\");\\\\n        ReentrancyGuard.setup();\\\\n        alice = _alice;\\\\n        bob = _bob;\\\\n    }\\\\n\\\\n    /// @notice A getter function for the bob of the multisig\\\\n    /// @return Bob\'s signer address\\\\n    function getAlice()\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (address)\\\\n    {\\\\n        return alice;\\\\n    }\\\\n\\\\n    /// @notice A getter function for the bob of the multisig\\\\n    /// @return Alice\'s signer address\\\\n    function getBob()\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (address)\\\\n    {\\\\n        return bob;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x37324d80a19f1feb6e413fe6a41d82b5dba38bca62e0e05ae6f420000dd93c53\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/CMCDeposit.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/ICMCDeposit.sol\\\\\\";\\\\nimport \\\\\\"./CMCCore.sol\\\\\\";\\\\nimport \\\\\\"./CMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibAsset.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibERC20.sol\\\\\\";\\\\n\\\\n/// @title CMCDeposit\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains logic supporting channel multisig deposits. Channel\\\\n///         funding is asymmetric, with `alice` having to call a deposit\\\\n///         function which tracks the total amount she has deposited so far,\\\\n///         and any other funds in the multisig being attributed to `bob`.\\\\n\\\\ncontract CMCDeposit is CMCCore, CMCAsset, ICMCDeposit {\\\\n    mapping(address => uint256) private depositsAlice;\\\\n\\\\n    receive() external payable onlyViaProxy nonReentrant {}\\\\n\\\\n    function getTotalDepositsAlice(address assetId)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (uint256)\\\\n    {\\\\n        return _getTotalDepositsAlice(assetId);\\\\n    }\\\\n\\\\n    function _getTotalDepositsAlice(address assetId)\\\\n        internal\\\\n        view\\\\n        returns (uint256)\\\\n    {\\\\n        return depositsAlice[assetId];\\\\n    }\\\\n\\\\n    function getTotalDepositsBob(address assetId)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (uint256)\\\\n    {\\\\n        return _getTotalDepositsBob(assetId);\\\\n    }\\\\n\\\\n    // Calculated using invariant onchain properties. Note we DONT use safemath here\\\\n    function _getTotalDepositsBob(address assetId)\\\\n        internal\\\\n        view\\\\n        returns (uint256)\\\\n    {\\\\n        return\\\\n            LibAsset.getOwnBalance(assetId) +\\\\n            totalTransferred[assetId] -\\\\n            depositsAlice[assetId];\\\\n    }\\\\n\\\\n    function depositAlice(address assetId, uint256 amount)\\\\n        external\\\\n        payable\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrant\\\\n    {\\\\n        if (LibAsset.isEther(assetId)) {\\\\n            require(msg.value == amount, \\\\\\"CMCDeposit: VALUE_MISMATCH\\\\\\");\\\\n        } else {\\\\n            // If ETH is sent along, it will be attributed to bob\\\\n            require(msg.value == 0, \\\\\\"CMCDeposit: ETH_WITH_ERC_TRANSFER\\\\\\");\\\\n            require(\\\\n                LibERC20.transferFrom(\\\\n                    assetId,\\\\n                    msg.sender,\\\\n                    address(this),\\\\n                    amount\\\\n                ),\\\\n                \\\\\\"CMCDeposit: ERC20_TRANSFER_FAILED\\\\\\"\\\\n            );\\\\n        }\\\\n        // NOTE: explicitly do NOT use safemath here\\\\n        depositsAlice[assetId] += amount;\\\\n        emit AliceDeposited(assetId, amount);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x4d3dd828158289df93d6b5a6419bc5e8d95888aba81e62cd913af1e4c540bece\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/CMCWithdraw.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/Commitment.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/ICMCWithdraw.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/WithdrawHelper.sol\\\\\\";\\\\nimport \\\\\\"./CMCCore.sol\\\\\\";\\\\nimport \\\\\\"./CMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibAsset.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibChannelCrypto.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibUtils.sol\\\\\\";\\\\n\\\\n/// @title CMCWithdraw\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains logic for all cooperative channel multisig withdrawals.\\\\n///         Cooperative withdrawal commitments must be signed by both channel\\\\n///         participants. As part of the channel withdrawals, an arbitrary\\\\n///         call can be made, which is extracted from the withdraw data.\\\\n\\\\ncontract CMCWithdraw is CMCCore, CMCAsset, ICMCWithdraw {\\\\n    using LibChannelCrypto for bytes32;\\\\n\\\\n    mapping(bytes32 => bool) private isExecuted;\\\\n\\\\n    modifier validateWithdrawData(WithdrawData calldata wd) {\\\\n        require(\\\\n            wd.channelAddress == address(this),\\\\n            \\\\\\"CMCWithdraw: CHANNEL_MISMATCH\\\\\\"\\\\n        );\\\\n        _;\\\\n    }\\\\n\\\\n    function getWithdrawalTransactionRecord(WithdrawData calldata wd)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (bool)\\\\n    {\\\\n        return isExecuted[hashWithdrawData(wd)];\\\\n    }\\\\n\\\\n    /// @param wd The withdraw data consisting of\\\\n    /// semantic withdraw information, i.e. assetId, recipient, and amount;\\\\n    /// information to make an optional call in addition to the actual transfer,\\\\n    /// i.e. target address for the call and call payload;\\\\n    /// additional information, i.e. channel address and nonce.\\\\n    /// @param aliceSignature Signature of owner a\\\\n    /// @param bobSignature Signature of owner b\\\\n    function withdraw(\\\\n        WithdrawData calldata wd,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) external override onlyViaProxy nonReentrant validateWithdrawData(wd) {\\\\n        // Generate hash\\\\n        bytes32 wdHash = hashWithdrawData(wd);\\\\n\\\\n        // Verify Alice\'s and Bob\'s signature on the withdraw data\\\\n        verifySignaturesOnWithdrawDataHash(wdHash, aliceSignature, bobSignature);\\\\n\\\\n        // Replay protection\\\\n        require(!isExecuted[wdHash], \\\\\\"CMCWithdraw: ALREADY_EXECUTED\\\\\\");\\\\n        isExecuted[wdHash] = true;\\\\n\\\\n        // Determine actually transferable amount\\\\n        uint256 actualAmount = getAvailableAmount(wd.assetId, wd.amount);\\\\n\\\\n        // Revert if actualAmount is zero && callTo is 0\\\\n        require(\\\\n            actualAmount > 0 || wd.callTo != address(0),\\\\n            \\\\\\"CMCWithdraw: NO_OP\\\\\\"\\\\n        );\\\\n\\\\n        // Register and execute the transfer\\\\n        transferAsset(wd.assetId, wd.recipient, actualAmount);\\\\n\\\\n        // Do we have to make a call in addition to the actual transfer?\\\\n        if (wd.callTo != address(0)) {\\\\n            WithdrawHelper(wd.callTo).execute(wd, actualAmount);\\\\n        }\\\\n    }\\\\n\\\\n    function verifySignaturesOnWithdrawDataHash(\\\\n        bytes32 wdHash,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) internal view {\\\\n        bytes32 commitment =\\\\n            keccak256(abi.encode(CommitmentType.WithdrawData, wdHash));\\\\n        require(\\\\n            commitment.checkSignature(aliceSignature, alice),\\\\n            \\\\\\"CMCWithdraw: INVALID_ALICE_SIG\\\\\\"\\\\n        );\\\\n        require(\\\\n            commitment.checkSignature(bobSignature, bob),\\\\n            \\\\\\"CMCWithdraw: INVALID_BOB_SIG\\\\\\"\\\\n        );\\\\n    }\\\\n\\\\n    function hashWithdrawData(WithdrawData calldata wd)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        return keccak256(abi.encode(wd));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x7fde93a55cab8b4a9497471af1f8321a6d9463a93c3c6b11cf6d5ada26326beb\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/ChannelMastercopy.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/IVectorChannel.sol\\\\\\";\\\\nimport \\\\\\"./CMCCore.sol\\\\\\";\\\\nimport \\\\\\"./CMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./CMCDeposit.sol\\\\\\";\\\\nimport \\\\\\"./CMCWithdraw.sol\\\\\\";\\\\nimport \\\\\\"./CMCAdjudicator.sol\\\\\\";\\\\n\\\\n/// @title ChannelMastercopy\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains the logic used by all Vector multisigs. A proxy to this\\\\n///         contract is deployed per-channel using the ChannelFactory.sol.\\\\n///         Supports channel adjudication logic, deposit logic, and arbitrary\\\\n///         calls when a commitment is double-signed.\\\\ncontract ChannelMastercopy is\\\\n    CMCCore,\\\\n    CMCAsset,\\\\n    CMCDeposit,\\\\n    CMCWithdraw,\\\\n    CMCAdjudicator,\\\\n    IVectorChannel\\\\n{\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x96d68c908eb39a0002b574c423306ef1b9991da56087cb8f5e2d8b908676b3c7\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/ReentrancyGuard.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\n/// @title CMCWithdraw\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice A \\\\\\"mutex\\\\\\" reentrancy guard, heavily influenced by OpenZeppelin.\\\\n\\\\ncontract ReentrancyGuard {\\\\n    uint256 private constant OPEN = 1;\\\\n    uint256 private constant LOCKED = 2;\\\\n\\\\n    uint256 public lock;\\\\n\\\\n    function setup() internal {\\\\n        lock = OPEN;\\\\n    }\\\\n\\\\n    modifier nonReentrant() {\\\\n        require(lock == OPEN, \\\\\\"ReentrancyGuard: REENTRANT_CALL\\\\\\");\\\\n        lock = LOCKED;\\\\n        _;\\\\n        lock = OPEN;\\\\n    }\\\\n\\\\n    modifier nonReentrantView() {\\\\n        require(lock == OPEN, \\\\\\"ReentrancyGuard: REENTRANT_CALL\\\\\\");\\\\n        _;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf7adf3f05703e0176d892051633e6ca3291e5a3d7ab769f880c03a0d0849dfa7\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/Commitment.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nenum CommitmentType {ChannelState, WithdrawData}\\\\n\\",\\"keccak256\\":\\"0xabfb62d2dbe45e307fc08742f87d2ff5d6faa9ab065f0c2395dc4adcbe0a9c20\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCAdjudicator.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./Types.sol\\\\\\";\\\\n\\\\ninterface ICMCAdjudicator {\\\\n    struct CoreChannelState {\\\\n        address channelAddress;\\\\n        address alice;\\\\n        address bob;\\\\n        address[] assetIds;\\\\n        Balance[] balances;\\\\n        uint256[] processedDepositsA;\\\\n        uint256[] processedDepositsB;\\\\n        uint256[] defundNonces;\\\\n        uint256 timeout;\\\\n        uint256 nonce;\\\\n        bytes32 merkleRoot;\\\\n    }\\\\n\\\\n    struct CoreTransferState {\\\\n        address channelAddress;\\\\n        bytes32 transferId;\\\\n        address transferDefinition;\\\\n        address initiator;\\\\n        address responder;\\\\n        address assetId;\\\\n        Balance balance;\\\\n        uint256 transferTimeout;\\\\n        bytes32 initialStateHash;\\\\n    }\\\\n\\\\n    struct ChannelDispute {\\\\n        bytes32 channelStateHash;\\\\n        uint256 nonce;\\\\n        bytes32 merkleRoot;\\\\n        uint256 consensusExpiry;\\\\n        uint256 defundExpiry;\\\\n    }\\\\n\\\\n    struct TransferDispute {\\\\n        bytes32 transferStateHash;\\\\n        uint256 transferDisputeExpiry;\\\\n        bool isDefunded;\\\\n    }\\\\n\\\\n    event ChannelDisputed(\\\\n        address disputer,\\\\n        CoreChannelState state,\\\\n        ChannelDispute dispute\\\\n    );\\\\n\\\\n    event ChannelDefunded(\\\\n        address defunder,\\\\n        CoreChannelState state,\\\\n        ChannelDispute dispute,\\\\n        address[] assetIds\\\\n    );\\\\n\\\\n    event TransferDisputed(\\\\n        address disputer,\\\\n        CoreTransferState state,\\\\n        TransferDispute dispute\\\\n    );\\\\n\\\\n    event TransferDefunded(\\\\n        address defunder,\\\\n        CoreTransferState state,\\\\n        TransferDispute dispute,\\\\n        bytes encodedInitialState,\\\\n        bytes encodedResolver,\\\\n        Balance balance\\\\n    );\\\\n\\\\n    function getChannelDispute() external view returns (ChannelDispute memory);\\\\n\\\\n    function getDefundNonce(address assetId) external view returns (uint256);\\\\n\\\\n    function getTransferDispute(bytes32 transferId)\\\\n        external\\\\n        view\\\\n        returns (TransferDispute memory);\\\\n\\\\n    function disputeChannel(\\\\n        CoreChannelState calldata ccs,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) external;\\\\n\\\\n    function defundChannel(\\\\n        CoreChannelState calldata ccs,\\\\n        address[] calldata assetIds,\\\\n        uint256[] calldata indices\\\\n    ) external;\\\\n\\\\n    function disputeTransfer(\\\\n        CoreTransferState calldata cts,\\\\n        bytes32[] calldata merkleProofData\\\\n    ) external;\\\\n\\\\n    function defundTransfer(\\\\n        CoreTransferState calldata cts,\\\\n        bytes calldata encodedInitialTransferState,\\\\n        bytes calldata encodedTransferResolver,\\\\n        bytes calldata responderSignature\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x88522bb51c2b9991b24ef33a3c776ac76d96060ebbc33cd5b2b14513fb21d237\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCAsset.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface ICMCAsset {\\\\n    function getTotalTransferred(address assetId)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function getExitableAmount(address assetId, address owner)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function exit(\\\\n        address assetId,\\\\n        address owner,\\\\n        address payable recipient\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x895d89536e8ca469afe642b7001f0dfff497ce29d5d73f862b07a1cdc483f3f7\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCCore.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface ICMCCore {\\\\n    function setup(address _alice, address _bob) external;\\\\n\\\\n    function getAlice() external view returns (address);\\\\n\\\\n    function getBob() external view returns (address);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x8e8da2d8fb5198441ba6cdff018dff9e4145b07d575647c990659adad637ec8c\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCDeposit.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface ICMCDeposit {\\\\n    event AliceDeposited(address assetId, uint256 amount);\\\\n    \\\\n    function getTotalDepositsAlice(address assetId)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function getTotalDepositsBob(address assetId)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function depositAlice(address assetId, uint256 amount) external payable;\\\\n}\\\\n\\",\\"keccak256\\":\\"0xdf6f284e44d88013cf9d51220315fb37e63086e470442685891c90aadd138295\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCWithdraw.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nstruct WithdrawData {\\\\n    address channelAddress;\\\\n    address assetId;\\\\n    address payable recipient;\\\\n    uint256 amount;\\\\n    uint256 nonce;\\\\n    address callTo;\\\\n    bytes callData;\\\\n}\\\\n\\\\ninterface ICMCWithdraw {\\\\n    function getWithdrawalTransactionRecord(WithdrawData calldata wd)\\\\n        external\\\\n        view\\\\n        returns (bool);\\\\n\\\\n    function withdraw(\\\\n        WithdrawData calldata wd,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x097dfe95ad19096f9a3dd0138b4a51680c26e665d1639278a7c0a5c9f7fc5c78\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ITransferDefinition.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./ITransferRegistry.sol\\\\\\";\\\\nimport \\\\\\"./Types.sol\\\\\\";\\\\n\\\\ninterface ITransferDefinition {\\\\n    // Validates the initial state of the transfer.\\\\n    // Called by validator.ts during `create` updates.\\\\n    function create(bytes calldata encodedBalance, bytes calldata)\\\\n        external\\\\n        view\\\\n        returns (bool);\\\\n\\\\n    // Performs a state transition to resolve a transfer and returns final balances.\\\\n    // Called by validator.ts during `resolve` updates.\\\\n    function resolve(\\\\n        bytes calldata encodedBalance,\\\\n        bytes calldata,\\\\n        bytes calldata\\\\n    ) external view returns (Balance memory);\\\\n\\\\n    // Should also have the following properties:\\\\n    // string public constant override Name = \\\\\\"...\\\\\\";\\\\n    // string public constant override StateEncoding = \\\\\\"...\\\\\\";\\\\n    // string public constant override ResolverEncoding = \\\\\\"...\\\\\\";\\\\n    // These properties are included on the transfer specifically\\\\n    // to make it easier for implementers to add new transfers by\\\\n    // only include a `.sol` file\\\\n    function Name() external view returns (string memory);\\\\n\\\\n    function StateEncoding() external view returns (string memory);\\\\n\\\\n    function ResolverEncoding() external view returns (string memory);\\\\n\\\\n    function EncodedCancel() external view returns (bytes memory);\\\\n\\\\n    function getRegistryInformation()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd8eef575aa791b187397c9096e6cf40431b590d3999f0a80e38f3e59f4cf4764\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ITransferRegistry.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental \\\\\\"ABIEncoderV2\\\\\\";\\\\n\\\\nstruct RegisteredTransfer {\\\\n    string name;\\\\n    address definition;\\\\n    string stateEncoding;\\\\n    string resolverEncoding;\\\\n    bytes encodedCancel;\\\\n}\\\\n\\\\ninterface ITransferRegistry {\\\\n    event TransferAdded(RegisteredTransfer transfer);\\\\n\\\\n    event TransferRemoved(RegisteredTransfer transfer);\\\\n\\\\n    // Should add a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function addTransferDefinition(RegisteredTransfer memory transfer) external;\\\\n\\\\n    // Should remove a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function removeTransferDefinition(string memory name) external;\\\\n\\\\n    // Should return all transfer defintions in registry\\\\n    function getTransferDefinitions()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer[] memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd13be6d976c64e381a0d9df10c621cd964454b6916f25df4ea6c1b4cd873a58a\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/IVectorChannel.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./ICMCCore.sol\\\\\\";\\\\nimport \\\\\\"./ICMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./ICMCDeposit.sol\\\\\\";\\\\nimport \\\\\\"./ICMCWithdraw.sol\\\\\\";\\\\nimport \\\\\\"./ICMCAdjudicator.sol\\\\\\";\\\\n\\\\ninterface IVectorChannel is\\\\n    ICMCCore,\\\\n    ICMCAsset,\\\\n    ICMCDeposit,\\\\n    ICMCWithdraw,\\\\n    ICMCAdjudicator\\\\n{}\\\\n\\",\\"keccak256\\":\\"0x9e21e3b6510bb5aecab999bfcbefe6184bd2be5a80179ef8ecadb63ddd2c8d53\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/Types.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nstruct Balance {\\\\n    uint256[2] amount; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n    address payable[2] to; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf8c71b155b630cde965f5d1db5f0d2751a9763f5a797f15d946613e9224f1046\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/WithdrawHelper.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./ICMCWithdraw.sol\\\\\\";\\\\n\\\\ninterface WithdrawHelper {\\\\n    function execute(WithdrawData calldata wd, uint256 actualAmount) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x45bd70363bc7a45001589d55d8d068a3baa321c50382c0c73f1ffae45adfc4bb\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibAsset.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./LibERC20.sol\\\\\\";\\\\nimport \\\\\\"./LibUtils.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\\\\";\\\\n\\\\n\\\\n/// @title LibAsset\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This library contains helpers for dealing with onchain transfers\\\\n///         of in-channel assets. It is designed to safely handle all asset\\\\n///         transfers out of channel in the event of an onchain dispute. Also\\\\n///         safely handles ERC20 transfers that may be non-compliant\\\\nlibrary LibAsset {\\\\n    address constant ETHER_ASSETID = address(0);\\\\n\\\\n    function isEther(address assetId) internal pure returns (bool) {\\\\n        return assetId == ETHER_ASSETID;\\\\n    }\\\\n\\\\n    function getOwnBalance(address assetId) internal view returns (uint256) {\\\\n        return\\\\n            isEther(assetId)\\\\n                ? address(this).balance\\\\n                : IERC20(assetId).balanceOf(address(this));\\\\n    }\\\\n\\\\n    function transferEther(address payable recipient, uint256 amount)\\\\n        internal\\\\n        returns (bool)\\\\n    {\\\\n        (bool success, bytes memory returnData) =\\\\n            recipient.call{value: amount}(\\\\\\"\\\\\\");\\\\n        LibUtils.revertIfCallFailed(success, returnData);\\\\n        return true;\\\\n    }\\\\n\\\\n    function transferERC20(\\\\n        address assetId,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return LibERC20.transfer(assetId, recipient, amount);\\\\n    }\\\\n\\\\n    // This function is a wrapper for transfers of Ether or ERC20 tokens,\\\\n    // both standard-compliant ones as well as tokens that exhibit the\\\\n    // missing-return-value bug.\\\\n    // Although it behaves very much like Solidity\'s `transfer` function\\\\n    // or the ERC20 `transfer` and is, in fact, designed to replace direct\\\\n    // usage of those, it is deliberately named `unregisteredTransfer`,\\\\n    // because we need to register every transfer out of the channel.\\\\n    // Therefore, it should normally not be used directly, with the single\\\\n    // exception of the `transferAsset` function in `CMCAsset.sol`,\\\\n    // which combines the \\\\\\"naked\\\\\\" unregistered transfer given below\\\\n    // with a registration.\\\\n    // USING THIS FUNCTION SOMEWHERE ELSE IS PROBABLY WRONG!\\\\n    function unregisteredTransfer(\\\\n        address assetId,\\\\n        address payable recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            isEther(assetId)\\\\n                ? transferEther(recipient, amount)\\\\n                : transferERC20(assetId, recipient, amount);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x02e7b660846ad2f56f8005f786e0e2eb1d625c83f4cfcf9fc07a9566ca86195c\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibChannelCrypto.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\\\\\";\\\\n\\\\t\\\\t\\\\n/// @author Connext <support@connext.network>\\\\t\\\\t\\\\n/// @notice This library contains helpers for recovering signatures from a\\\\t\\\\t\\\\n///         Vector commitments. Channels do not allow for arbitrary signing of\\\\t\\\\t\\\\n///         messages to prevent misuse of private keys by injected providers,\\\\t\\\\t\\\\n///         and instead only sign messages with a Vector channel prefix.\\\\nlibrary LibChannelCrypto {\\\\n    function checkSignature(\\\\n        bytes32 hash,\\\\n        bytes memory signature,\\\\n        address allegedSigner\\\\n    ) internal pure returns (bool) {\\\\n        return recoverChannelMessageSigner(hash, signature) == allegedSigner;\\\\n    }\\\\n\\\\n    function recoverChannelMessageSigner(bytes32 hash, bytes memory signature)\\\\n        internal\\\\n        pure\\\\n        returns (address)\\\\n    {\\\\n        bytes32 digest = toChannelSignedMessage(hash);\\\\n        return ECDSA.recover(digest, signature);\\\\n    }\\\\n\\\\n    function toChannelSignedMessage(bytes32 hash)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        // 32 is the length in bytes of hash,\\\\n        // enforced by the type signature above\\\\n        return\\\\n            keccak256(abi.encodePacked(\\\\\\"\\\\\\\\x16Vector Signed Message:\\\\\\\\n32\\\\\\", hash));\\\\n    }\\\\n\\\\n    function checkUtilitySignature(\\\\n        bytes32 hash,\\\\n        bytes memory signature,\\\\n        address allegedSigner\\\\n    ) internal pure returns (bool) {\\\\n        return recoverChannelMessageSigner(hash, signature) == allegedSigner;\\\\n    }\\\\n\\\\n    function recoverUtilityMessageSigner(bytes32 hash, bytes memory signature)\\\\n        internal\\\\n        pure\\\\n        returns (address)\\\\n    {\\\\n        bytes32 digest = toUtilitySignedMessage(hash);\\\\n        return ECDSA.recover(digest, signature);\\\\n    }\\\\n\\\\n    function toUtilitySignedMessage(bytes32 hash)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        // 32 is the length in bytes of hash,\\\\n        // enforced by the type signature above\\\\n        return\\\\n            keccak256(abi.encodePacked(\\\\\\"\\\\\\\\x17Utility Signed Message:\\\\\\\\n32\\\\\\", hash));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xb8aa3679b75f2a1a5785f614f5dff9a76a689c18caa56a8df1f4e3c3167d6ece\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./LibUtils.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Address.sol\\\\\\";\\\\n\\\\n/// @title LibERC20\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This library provides several functions to safely handle\\\\n///         noncompliant tokens (i.e. does not return a boolean from\\\\n///         the transfer function)\\\\n\\\\nlibrary LibERC20 {\\\\n    function wrapCall(address assetId, bytes memory callData)\\\\n        internal\\\\n        returns (bool)\\\\n    {\\\\n        require(Address.isContract(assetId), \\\\\\"LibERC20: NO_CODE\\\\\\");\\\\n        (bool success, bytes memory returnData) = assetId.call(callData);\\\\n        LibUtils.revertIfCallFailed(success, returnData);\\\\n        return returnData.length == 0 || abi.decode(returnData, (bool));\\\\n    }\\\\n\\\\n    function approve(\\\\n        address assetId,\\\\n        address spender,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            wrapCall(\\\\n                assetId,\\\\n                abi.encodeWithSignature(\\\\n                    \\\\\\"approve(address,uint256)\\\\\\",\\\\n                    spender,\\\\n                    amount\\\\n                )\\\\n            );\\\\n    }\\\\n\\\\n    function transferFrom(\\\\n        address assetId,\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            wrapCall(\\\\n                assetId,\\\\n                abi.encodeWithSignature(\\\\n                    \\\\\\"transferFrom(address,address,uint256)\\\\\\",\\\\n                    sender,\\\\n                    recipient,\\\\n                    amount\\\\n                )\\\\n            );\\\\n    }\\\\n\\\\n    function transfer(\\\\n        address assetId,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            wrapCall(\\\\n                assetId,\\\\n                abi.encodeWithSignature(\\\\n                    \\\\\\"transfer(address,uint256)\\\\\\",\\\\n                    recipient,\\\\n                    amount\\\\n                )\\\\n            );\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x5bad1474c93a295939c23f976786f0d086abc063f19ff9c8c1d069759c4a7ff5\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibMath.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\n/// @title LibMath\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This library allows functions that would otherwise overflow and\\\\n///         revert if SafeMath was used to instead return the UINT_MAX. In the\\\\n///         adjudicator, this is used to ensure you can get the majority of\\\\n///         funds out in the event your balance > UINT_MAX and there is an\\\\n///         onchain dispute.\\\\nlibrary LibMath {\\\\n    /// @dev Returns the maximum uint256 for an addition that would overflow\\\\n    ///      (saturation arithmetic)\\\\n    function satAdd(uint256 x, uint256 y) internal pure returns (uint256) {\\\\n        uint256 sum = x + y;\\\\n        return sum >= x ? sum : type(uint256).max;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x1e6307538bfdb12a0f5234db5b9b22365b6abe2b96baa37f2e4b5d2d3f6683b8\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibUtils.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\n/// @title LibUtils\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains a helper to revert if a call was not successfully\\\\n///         made\\\\nlibrary LibUtils {\\\\n    // If success is false, reverts and passes on the revert string.\\\\n    function revertIfCallFailed(bool success, bytes memory returnData)\\\\n        internal\\\\n        pure\\\\n    {\\\\n        if (!success) {\\\\n            assembly {\\\\n                revert(add(returnData, 0x20), mload(returnData))\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf31897ed92b88739ca9c6e74d089e01c5dbf432183d2ab0b959b539842374ccd\\",\\"license\\":\\"UNLICENSED\\"}},\\"version\\":1}","bytecode":"","deployedBytecode":"","devdoc":{"author":"Connext <support@connext.network>","kind":"dev","methods":{"getAlice()":{"returns":{"_0":"Bob\'s signer address"}},"getBob()":{"returns":{"_0":"Alice\'s signer address"}},"setup(address,address)":{"params":{"_alice":": Address representing user with function deposit","_bob":": Address representing user with multisig deposit"}},"withdraw((address,address,address,uint256,uint256,address,bytes),bytes,bytes)":{"params":{"aliceSignature":"Signature of owner a","bobSignature":"Signature of owner b","wd":"The withdraw data consisting of semantic withdraw information, i.e. assetId, recipient, and amount; information to make an optional call in addition to the actual transfer, i.e. target address for the call and call payload; additional information, i.e. channel address and nonce."}}},"title":"ChannelMastercopy","version":1},"userdoc":{"kind":"user","methods":{"getAlice()":{"notice":"A getter function for the bob of the multisig"},"getBob()":{"notice":"A getter function for the bob of the multisig"},"setup(address,address)":{"notice":"Contract constructor for Proxied copies"}},"notice":"Contains the logic used by all Vector multisigs. A proxy to this         contract is deployed per-channel using the ChannelFactory.sol.         Supports channel adjudication logic, deposit logic, and arbitrary         calls when a commitment is double-signed.","version":1},"storageLayout":{"storage":[{"astId":3403,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"lock","offset":0,"slot":"0","type":"t_uint256"},{"astId":2597,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"alice","offset":0,"slot":"1","type":"t_address"},{"astId":2599,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"bob","offset":0,"slot":"2","type":"t_address"},{"astId":2348,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"totalTransferred","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":2354,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"exitableAmount","offset":0,"slot":"4","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":2732,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"depositsAlice","offset":0,"slot":"5","type":"t_mapping(t_address,t_uint256)"},{"astId":2895,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"isExecuted","offset":0,"slot":"6","type":"t_mapping(t_bytes32,t_bool)"},{"astId":1503,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"channelDispute","offset":0,"slot":"7","type":"t_struct(ChannelDispute)3596_storage"},{"astId":1507,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"defundNonces","offset":0,"slot":"12","type":"t_mapping(t_address,t_uint256)"},{"astId":1511,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"transferDisputes","offset":0,"slot":"13","type":"t_mapping(t_bytes32,t_struct(TransferDispute)3603_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_bool)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(TransferDispute)3603_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct ICMCAdjudicator.TransferDispute)","numberOfBytes":"32","value":"t_struct(TransferDispute)3603_storage"},"t_struct(ChannelDispute)3596_storage":{"encoding":"inplace","label":"struct ICMCAdjudicator.ChannelDispute","members":[{"astId":3587,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"channelStateHash","offset":0,"slot":"0","type":"t_bytes32"},{"astId":3589,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"nonce","offset":0,"slot":"1","type":"t_uint256"},{"astId":3591,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"merkleRoot","offset":0,"slot":"2","type":"t_bytes32"},{"astId":3593,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"consensusExpiry","offset":0,"slot":"3","type":"t_uint256"},{"astId":3595,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"defundExpiry","offset":0,"slot":"4","type":"t_uint256"}],"numberOfBytes":"160"},"t_struct(TransferDispute)3603_storage":{"encoding":"inplace","label":"struct ICMCAdjudicator.TransferDispute","members":[{"astId":3598,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"transferStateHash","offset":0,"slot":"0","type":"t_bytes32"},{"astId":3600,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"transferDisputeExpiry","offset":0,"slot":"1","type":"t_uint256"},{"astId":3602,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"isDefunded","offset":0,"slot":"2","type":"t_bool"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}}}')},2838:function(e){e.exports=JSON.parse('{"address":"0x4CA2F568B46f9d94Bb68940F187a1573a4AF23d5","abi":[{"inputs":[],"name":"EncodedCancel","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"Name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ResolverEncoding","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"StateEncoding","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"encodedBalance","type":"bytes"},{"internalType":"bytes","name":"encodedState","type":"bytes"}],"name":"create","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRegistryInformation","outputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"address","name":"definition","type":"address"},{"internalType":"string","name":"stateEncoding","type":"string"},{"internalType":"string","name":"resolverEncoding","type":"string"},{"internalType":"bytes","name":"encodedCancel","type":"bytes"}],"internalType":"struct RegisteredTransfer","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"encodedBalance","type":"bytes"},{"internalType":"bytes","name":"encodedState","type":"bytes"},{"internalType":"bytes","name":"encodedResolver","type":"bytes"}],"name":"resolve","outputs":[{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance","name":"","type":"tuple"}],"stateMutability":"view","type":"function"}],"transactionHash":"0xabe9f873c1493bf2f4d47b2895200904f4fe6adca935c98ac54a62b9075f71aa","receipt":{"to":null,"from":"0xd4b33434Cb36df9286Ef5132FCFb8062c96aC56E","contractAddress":"0x4CA2F568B46f9d94Bb68940F187a1573a4AF23d5","transactionIndex":3,"gasUsed":"795245","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","blockHash":"0x72f96c7958f99f3c816e35d2eab323f3c63eab1a601b5be52be4b57beeb3a17b","transactionHash":"0xabe9f873c1493bf2f4d47b2895200904f4fe6adca935c98ac54a62b9075f71aa","logs":[],"blockNumber":14465803,"cumulativeGasUsed":"1650399","status":1,"byzantium":true},"args":[],"solcInputHash":"89c55d5a88f10637860a9ea31a1daad3","metadata":"{\\"compiler\\":{\\"version\\":\\"0.7.1+commit.f4a555be\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[],\\"name\\":\\"EncodedCancel\\",\\"outputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"\\",\\"type\\":\\"bytes\\"}],\\"stateMutability\\":\\"pure\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"Name\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"ResolverEncoding\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"StateEncoding\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedBalance\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedState\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"create\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getRegistryInformation\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"definition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"stateEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"resolverEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedCancel\\",\\"type\\":\\"bytes\\"}],\\"internalType\\":\\"struct RegisteredTransfer\\",\\"name\\":\\"\\",\\"type\\":\\"tuple\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedBalance\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedState\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedResolver\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"resolve\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"\\",\\"type\\":\\"tuple\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"author\\":\\"Connext <support@connext.network>\\",\\"kind\\":\\"dev\\",\\"methods\\":{},\\"title\\":\\"HashlockTransfer\\",\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"notice\\":\\"This contract allows users to claim a payment locked in         the application if they provide the correct preImage. The payment is         reverted if not unlocked by the timelock if one is provided.\\",\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"src.sol/transferDefinitions/HashlockTransfer.sol\\":\\"HashlockTransfer\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"src.sol/interfaces/ITransferDefinition.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./ITransferRegistry.sol\\\\\\";\\\\nimport \\\\\\"./Types.sol\\\\\\";\\\\n\\\\ninterface ITransferDefinition {\\\\n    // Validates the initial state of the transfer.\\\\n    // Called by validator.ts during `create` updates.\\\\n    function create(bytes calldata encodedBalance, bytes calldata)\\\\n        external\\\\n        view\\\\n        returns (bool);\\\\n\\\\n    // Performs a state transition to resolve a transfer and returns final balances.\\\\n    // Called by validator.ts during `resolve` updates.\\\\n    function resolve(\\\\n        bytes calldata encodedBalance,\\\\n        bytes calldata,\\\\n        bytes calldata\\\\n    ) external view returns (Balance memory);\\\\n\\\\n    // Should also have the following properties:\\\\n    // string public constant override Name = \\\\\\"...\\\\\\";\\\\n    // string public constant override StateEncoding = \\\\\\"...\\\\\\";\\\\n    // string public constant override ResolverEncoding = \\\\\\"...\\\\\\";\\\\n    // These properties are included on the transfer specifically\\\\n    // to make it easier for implementers to add new transfers by\\\\n    // only include a `.sol` file\\\\n    function Name() external view returns (string memory);\\\\n\\\\n    function StateEncoding() external view returns (string memory);\\\\n\\\\n    function ResolverEncoding() external view returns (string memory);\\\\n\\\\n    function EncodedCancel() external view returns (bytes memory);\\\\n\\\\n    function getRegistryInformation()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd8eef575aa791b187397c9096e6cf40431b590d3999f0a80e38f3e59f4cf4764\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ITransferRegistry.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental \\\\\\"ABIEncoderV2\\\\\\";\\\\n\\\\nstruct RegisteredTransfer {\\\\n    string name;\\\\n    address definition;\\\\n    string stateEncoding;\\\\n    string resolverEncoding;\\\\n    bytes encodedCancel;\\\\n}\\\\n\\\\ninterface ITransferRegistry {\\\\n    event TransferAdded(RegisteredTransfer transfer);\\\\n\\\\n    event TransferRemoved(RegisteredTransfer transfer);\\\\n\\\\n    // Should add a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function addTransferDefinition(RegisteredTransfer memory transfer) external;\\\\n\\\\n    // Should remove a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function removeTransferDefinition(string memory name) external;\\\\n\\\\n    // Should return all transfer defintions in registry\\\\n    function getTransferDefinitions()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer[] memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd13be6d976c64e381a0d9df10c621cd964454b6916f25df4ea6c1b4cd873a58a\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/Types.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nstruct Balance {\\\\n    uint256[2] amount; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n    address payable[2] to; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf8c71b155b630cde965f5d1db5f0d2751a9763f5a797f15d946613e9224f1046\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/transferDefinitions/HashlockTransfer.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./TransferDefinition.sol\\\\\\";\\\\n\\\\n/// @title HashlockTransfer\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This contract allows users to claim a payment locked in\\\\n///         the application if they provide the correct preImage. The payment is\\\\n///         reverted if not unlocked by the timelock if one is provided.\\\\n\\\\ncontract HashlockTransfer is TransferDefinition {\\\\n    struct TransferState {\\\\n        bytes32 lockHash;\\\\n        uint256 expiry; // If 0, then no timelock is enforced\\\\n    }\\\\n\\\\n    struct TransferResolver {\\\\n        bytes32 preImage;\\\\n    }\\\\n\\\\n    // Provide registry information\\\\n    string public constant override Name = \\\\\\"HashlockTransfer\\\\\\";\\\\n    string public constant override StateEncoding =\\\\n        \\\\\\"tuple(bytes32 lockHash, uint256 expiry)\\\\\\";\\\\n    string public constant override ResolverEncoding =\\\\n        \\\\\\"tuple(bytes32 preImage)\\\\\\";\\\\n\\\\n    function EncodedCancel() external pure override returns(bytes memory) {\\\\n      TransferResolver memory resolver;\\\\n      resolver.preImage = bytes32(0);\\\\n      return abi.encode(resolver);\\\\n    } \\\\n\\\\n    function create(bytes calldata encodedBalance, bytes calldata encodedState)\\\\n        external\\\\n        view\\\\n        override\\\\n        returns (bool)\\\\n    {\\\\n        // Decode parameters\\\\n        TransferState memory state = abi.decode(encodedState, (TransferState));\\\\n        Balance memory balance = abi.decode(encodedBalance, (Balance));\\\\n\\\\n        require(\\\\n            balance.amount[0] > 0,\\\\n            \\\\\\"HashlockTransfer: ZER0_SENDER_BALANCE\\\\\\"\\\\n        );\\\\n\\\\n        require(\\\\n            balance.amount[1] == 0,\\\\n            \\\\\\"HashlockTransfer: NONZERO_RECIPIENT_BALANCE\\\\\\"\\\\n        );\\\\n        require(\\\\n            state.lockHash != bytes32(0),\\\\n            \\\\\\"HashlockTransfer: EMPTY_LOCKHASH\\\\\\"\\\\n        );\\\\n        require(\\\\n            state.expiry == 0 || state.expiry > block.timestamp,\\\\n            \\\\\\"HashlockTransfer: EXPIRED_TIMELOCK\\\\\\"\\\\n        );\\\\n\\\\n        // Valid transfer state\\\\n        return true;\\\\n    }\\\\n\\\\n    function resolve(\\\\n        bytes calldata encodedBalance,\\\\n        bytes calldata encodedState,\\\\n        bytes calldata encodedResolver\\\\n    ) external view override returns (Balance memory) {\\\\n        TransferState memory state = abi.decode(encodedState, (TransferState));\\\\n        TransferResolver memory resolver =\\\\n            abi.decode(encodedResolver, (TransferResolver));\\\\n        Balance memory balance = abi.decode(encodedBalance, (Balance));\\\\n\\\\n        // If you pass in bytes32(0), payment is canceled\\\\n        // If timelock is nonzero and has expired, payment must be canceled\\\\n        // otherwise resolve will revert\\\\n        if (resolver.preImage != bytes32(0)) {\\\\n            // Payment must not be expired\\\\n            require(state.expiry == 0 || state.expiry > block.timestamp, \\\\\\"HashlockTransfer: PAYMENT_EXPIRED\\\\\\");\\\\n\\\\n            // Check hash for normal payment unlock\\\\n            bytes32 generatedHash = sha256(abi.encode(resolver.preImage));\\\\n            require(\\\\n                state.lockHash == generatedHash,\\\\n                \\\\\\"HashlockTransfer: INVALID_PREIMAGE\\\\\\"\\\\n            );\\\\n\\\\n            // Update state\\\\n            balance.amount[1] = balance.amount[0];\\\\n            balance.amount[0] = 0;\\\\n        }\\\\n        // To cancel, the preImage must be empty (not simply incorrect)\\\\n        // There are no additional state mutations, and the preImage is\\\\n        // asserted by the `if` statement\\\\n\\\\n        return balance;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x0c403a415e87408f8f7be80d9ec3e4415189d5e85fb58e9ddef5730e4a2ae98e\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/transferDefinitions/TransferDefinition.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"../interfaces/ITransferDefinition.sol\\\\\\";\\\\nimport \\\\\\"../interfaces/ITransferRegistry.sol\\\\\\";\\\\n\\\\n/// @title TransferDefinition\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This contract helps reduce boilerplate needed when creating\\\\n///         new transfer definitions by providing an implementation of\\\\n///         the required getter\\\\n\\\\nabstract contract TransferDefinition is ITransferDefinition {\\\\n    function getRegistryInformation()\\\\n        external\\\\n        view\\\\n        override\\\\n        returns (RegisteredTransfer memory)\\\\n    {\\\\n        return\\\\n            RegisteredTransfer({\\\\n                name: this.Name(),\\\\n                stateEncoding: this.StateEncoding(),\\\\n                resolverEncoding: this.ResolverEncoding(),\\\\n                definition: address(this),\\\\n                encodedCancel: this.EncodedCancel()\\\\n            });\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xdb8bcb3fadd5c514bc6585b0a48d66952570bbb1a62f18b9dc9a4f693dc11c5e\\",\\"license\\":\\"UNLICENSED\\"}},\\"version\\":1}","bytecode":"0x608060405234801561001057600080fd5b50610d6c806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638052474d1161005b5780638052474d146100bd5780638de8b77e146100c55780638ef98a7e146100cd57806394184ba9146100ed5761007d565b80630528aa1c14610082578063206162be146100a05780633722aff9146100b5575b600080fd5b61008a61010d565b6040516100979190610a10565b60405180910390f35b6100a8610141565b6040516100979190610c1e565b61008a61034d565b61008a610386565b61008a6103b2565b6100e06100db3660046107ae565b6103ce565b6040516100979190610bb4565b6101006100fb366004610745565b61050e565b60405161009791906109fc565b60606101176105da565b6000815260405161012c908290602001610cae565b60405160208183030381529060405291505090565b6101496105ec565b6040518060a00160405280306001600160a01b0316638052474d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561018d57600080fd5b505afa1580156101a1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101c99190810190610844565b8152602001306001600160a01b03168152602001306001600160a01b0316638de8b77e6040518163ffffffff1660e01b815260040160006040518083038186803b15801561021657600080fd5b505afa15801561022a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102529190810190610844565b8152602001306001600160a01b0316633722aff96040518163ffffffff1660e01b815260040160006040518083038186803b15801561029057600080fd5b505afa1580156102a4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102cc9190810190610844565b8152602001306001600160a01b0316630528aa1c6040518163ffffffff1660e01b815260040160006040518083038186803b15801561030a57600080fd5b505afa15801561031e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103469190810190610844565b9052905090565b6040518060400160405280601781526020017f7475706c65286279746573333220707265496d6167652900000000000000000081525081565b6040518060400160405280601081526020016f2430b9b43637b1b5aa3930b739b332b960811b81525081565b604051806060016040528060278152602001610d106027913981565b6103d6610624565b6103de610649565b6103ea85870187610981565b90506103f46105da565b6104008486018661095c565b905061040a610624565b610416898b018b61087f565b82519091501561050157602083015115806104345750428360200151115b6104595760405162461bcd60e51b815260040161045090610b3e565b60405180910390fd5b6000600283600001516040516020016104729190610a07565b60408051601f198184030181529082905261048c916109e0565b602060405180830381855afa1580156104a9573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906104cc919061072d565b845190915081146104ef5760405162461bcd60e51b815260040161045090610a75565b50805180516020909101528051600090525b9998505050505050505050565b6000610518610649565b61052483850185610981565b905061052e610624565b61053a8688018861087f565b80515190915061055c5760405162461bcd60e51b815260040161045090610ab7565b8051602001511561057f5760405162461bcd60e51b815260040161045090610a2a565b815161059d5760405162461bcd60e51b815260040161045090610b7f565b602082015115806105b15750428260200151115b6105cd5760405162461bcd60e51b815260040161045090610afc565b5060019695505050505050565b60408051602081019091526000815290565b6040518060a001604052806060815260200160006001600160a01b031681526020016060815260200160608152602001606081525090565b6040518060400160405280610637610660565b8152602001610644610660565b905290565b604080518082019091526000808252602082015290565b60405180604001604052806002906020820280368337509192915050565b60008083601f84011261068f578182fd5b50813567ffffffffffffffff8111156106a6578182fd5b6020830191508360208285010111156106be57600080fd5b9250929050565b600082601f8301126106d5578081fd5b815167ffffffffffffffff8111156106eb578182fd5b6106fe601f8201601f1916602001610cb8565b915080825283602082850101111561071557600080fd5b610726816020840160208601610cdf565b5092915050565b60006020828403121561073e578081fd5b5051919050565b6000806000806040858703121561075a578283fd5b843567ffffffffffffffff80821115610771578485fd5b61077d8883890161067e565b90965094506020870135915080821115610795578384fd5b506107a28782880161067e565b95989497509550505050565b600080600080600080606087890312156107c6578182fd5b863567ffffffffffffffff808211156107dd578384fd5b6107e98a838b0161067e565b90985096506020890135915080821115610801578384fd5b61080d8a838b0161067e565b90965094506040890135915080821115610825578384fd5b5061083289828a0161067e565b979a9699509497509295939492505050565b600060208284031215610855578081fd5b815167ffffffffffffffff81111561086b578182fd5b610877848285016106c5565b949350505050565b600060808284031215610890578081fd5b61089a6040610cb8565b83601f8401126108a8578182fd5b6108b26040610cb8565b808460408601878111156108c4578586fd5b855b60028110156108e55782358552602094850194909201916001016108c6565b5082855287605f8801126108f7578586fd5b6109016040610cb8565b9350839250905060808601871015610917578485fd5b845b600281101561094d5781356001600160a01b0381168114610938578687fd5b84526020938401939190910190600101610919565b50506020830152509392505050565b60006020828403121561096d578081fd5b6109776020610cb8565b9135825250919050565b600060408284031215610992578081fd5b61099c6040610cb8565b82358152602083013560208201528091505092915050565b600081518084526109cc816020860160208601610cdf565b601f01601f19169290920160200192915050565b600082516109f2818460208701610cdf565b9190910192915050565b901515815260200190565b90815260200190565b600060208252610a2360208301846109b4565b9392505050565b6020808252602b908201527f486173686c6f636b5472616e736665723a204e4f4e5a45524f5f52454349504960408201526a454e545f42414c414e434560a81b606082015260800190565b60208082526022908201527f486173686c6f636b5472616e736665723a20494e56414c49445f505245494d41604082015261474560f01b606082015260800190565b60208082526025908201527f486173686c6f636b5472616e736665723a205a4552305f53454e4445525f42416040820152644c414e434560d81b606082015260800190565b60208082526022908201527f486173686c6f636b5472616e736665723a20455850495245445f54494d454c4f604082015261434b60f01b606082015260800190565b60208082526021908201527f486173686c6f636b5472616e736665723a205041594d454e545f4558504952456040820152601160fa1b606082015260800190565b6020808252818101527f486173686c6f636b5472616e736665723a20454d5054595f4c4f434b48415348604082015260600190565b815160808201908260005b6002811015610bde578251825260209283019290910190600101610bbf565b5050506020808401516040840160005b6002811015610c145782516001600160a01b031682529183019190830190600101610bee565b5050505092915050565b600060208252825160a06020840152610c3a60c08401826109b4565b905060018060a01b0360208501511660408401526040840151601f1980858403016060860152610c6a83836109b4565b92506060860151915080858403016080860152610c8783836109b4565b925060808601519150808584030160a086015250610ca582826109b4565b95945050505050565b9051815260200190565b60405181810167ffffffffffffffff81118282101715610cd757600080fd5b604052919050565b60005b83811015610cfa578181015183820152602001610ce2565b83811115610d09576000848401525b5050505056fe7475706c652862797465733332206c6f636b486173682c2075696e743235362065787069727929a2646970667358221220f7a1aad5efbe0de5a92ccb20170dbe8d594d5a4ccb943cb48fbcd3fcbc98e24c64736f6c63430007010033","deployedBytecode":"0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80638052474d1161005b5780638052474d146100bd5780638de8b77e146100c55780638ef98a7e146100cd57806394184ba9146100ed5761007d565b80630528aa1c14610082578063206162be146100a05780633722aff9146100b5575b600080fd5b61008a61010d565b6040516100979190610a10565b60405180910390f35b6100a8610141565b6040516100979190610c1e565b61008a61034d565b61008a610386565b61008a6103b2565b6100e06100db3660046107ae565b6103ce565b6040516100979190610bb4565b6101006100fb366004610745565b61050e565b60405161009791906109fc565b60606101176105da565b6000815260405161012c908290602001610cae565b60405160208183030381529060405291505090565b6101496105ec565b6040518060a00160405280306001600160a01b0316638052474d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561018d57600080fd5b505afa1580156101a1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101c99190810190610844565b8152602001306001600160a01b03168152602001306001600160a01b0316638de8b77e6040518163ffffffff1660e01b815260040160006040518083038186803b15801561021657600080fd5b505afa15801561022a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102529190810190610844565b8152602001306001600160a01b0316633722aff96040518163ffffffff1660e01b815260040160006040518083038186803b15801561029057600080fd5b505afa1580156102a4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102cc9190810190610844565b8152602001306001600160a01b0316630528aa1c6040518163ffffffff1660e01b815260040160006040518083038186803b15801561030a57600080fd5b505afa15801561031e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103469190810190610844565b9052905090565b6040518060400160405280601781526020017f7475706c65286279746573333220707265496d6167652900000000000000000081525081565b6040518060400160405280601081526020016f2430b9b43637b1b5aa3930b739b332b960811b81525081565b604051806060016040528060278152602001610d106027913981565b6103d6610624565b6103de610649565b6103ea85870187610981565b90506103f46105da565b6104008486018661095c565b905061040a610624565b610416898b018b61087f565b82519091501561050157602083015115806104345750428360200151115b6104595760405162461bcd60e51b815260040161045090610b3e565b60405180910390fd5b6000600283600001516040516020016104729190610a07565b60408051601f198184030181529082905261048c916109e0565b602060405180830381855afa1580156104a9573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906104cc919061072d565b845190915081146104ef5760405162461bcd60e51b815260040161045090610a75565b50805180516020909101528051600090525b9998505050505050505050565b6000610518610649565b61052483850185610981565b905061052e610624565b61053a8688018861087f565b80515190915061055c5760405162461bcd60e51b815260040161045090610ab7565b8051602001511561057f5760405162461bcd60e51b815260040161045090610a2a565b815161059d5760405162461bcd60e51b815260040161045090610b7f565b602082015115806105b15750428260200151115b6105cd5760405162461bcd60e51b815260040161045090610afc565b5060019695505050505050565b60408051602081019091526000815290565b6040518060a001604052806060815260200160006001600160a01b031681526020016060815260200160608152602001606081525090565b6040518060400160405280610637610660565b8152602001610644610660565b905290565b604080518082019091526000808252602082015290565b60405180604001604052806002906020820280368337509192915050565b60008083601f84011261068f578182fd5b50813567ffffffffffffffff8111156106a6578182fd5b6020830191508360208285010111156106be57600080fd5b9250929050565b600082601f8301126106d5578081fd5b815167ffffffffffffffff8111156106eb578182fd5b6106fe601f8201601f1916602001610cb8565b915080825283602082850101111561071557600080fd5b610726816020840160208601610cdf565b5092915050565b60006020828403121561073e578081fd5b5051919050565b6000806000806040858703121561075a578283fd5b843567ffffffffffffffff80821115610771578485fd5b61077d8883890161067e565b90965094506020870135915080821115610795578384fd5b506107a28782880161067e565b95989497509550505050565b600080600080600080606087890312156107c6578182fd5b863567ffffffffffffffff808211156107dd578384fd5b6107e98a838b0161067e565b90985096506020890135915080821115610801578384fd5b61080d8a838b0161067e565b90965094506040890135915080821115610825578384fd5b5061083289828a0161067e565b979a9699509497509295939492505050565b600060208284031215610855578081fd5b815167ffffffffffffffff81111561086b578182fd5b610877848285016106c5565b949350505050565b600060808284031215610890578081fd5b61089a6040610cb8565b83601f8401126108a8578182fd5b6108b26040610cb8565b808460408601878111156108c4578586fd5b855b60028110156108e55782358552602094850194909201916001016108c6565b5082855287605f8801126108f7578586fd5b6109016040610cb8565b9350839250905060808601871015610917578485fd5b845b600281101561094d5781356001600160a01b0381168114610938578687fd5b84526020938401939190910190600101610919565b50506020830152509392505050565b60006020828403121561096d578081fd5b6109776020610cb8565b9135825250919050565b600060408284031215610992578081fd5b61099c6040610cb8565b82358152602083013560208201528091505092915050565b600081518084526109cc816020860160208601610cdf565b601f01601f19169290920160200192915050565b600082516109f2818460208701610cdf565b9190910192915050565b901515815260200190565b90815260200190565b600060208252610a2360208301846109b4565b9392505050565b6020808252602b908201527f486173686c6f636b5472616e736665723a204e4f4e5a45524f5f52454349504960408201526a454e545f42414c414e434560a81b606082015260800190565b60208082526022908201527f486173686c6f636b5472616e736665723a20494e56414c49445f505245494d41604082015261474560f01b606082015260800190565b60208082526025908201527f486173686c6f636b5472616e736665723a205a4552305f53454e4445525f42416040820152644c414e434560d81b606082015260800190565b60208082526022908201527f486173686c6f636b5472616e736665723a20455850495245445f54494d454c4f604082015261434b60f01b606082015260800190565b60208082526021908201527f486173686c6f636b5472616e736665723a205041594d454e545f4558504952456040820152601160fa1b606082015260800190565b6020808252818101527f486173686c6f636b5472616e736665723a20454d5054595f4c4f434b48415348604082015260600190565b815160808201908260005b6002811015610bde578251825260209283019290910190600101610bbf565b5050506020808401516040840160005b6002811015610c145782516001600160a01b031682529183019190830190600101610bee565b5050505092915050565b600060208252825160a06020840152610c3a60c08401826109b4565b905060018060a01b0360208501511660408401526040840151601f1980858403016060860152610c6a83836109b4565b92506060860151915080858403016080860152610c8783836109b4565b925060808601519150808584030160a086015250610ca582826109b4565b95945050505050565b9051815260200190565b60405181810167ffffffffffffffff81118282101715610cd757600080fd5b604052919050565b60005b83811015610cfa578181015183820152602001610ce2565b83811115610d09576000848401525b5050505056fe7475706c652862797465733332206c6f636b486173682c2075696e743235362065787069727929a2646970667358221220f7a1aad5efbe0de5a92ccb20170dbe8d594d5a4ccb943cb48fbcd3fcbc98e24c64736f6c63430007010033","devdoc":{"author":"Connext <support@connext.network>","kind":"dev","methods":{},"title":"HashlockTransfer","version":1},"userdoc":{"kind":"user","methods":{},"notice":"This contract allows users to claim a payment locked in         the application if they provide the correct preImage. The payment is         reverted if not unlocked by the timelock if one is provided.","version":1},"storageLayout":{"storage":[],"types":null}}')},2839:function(e){e.exports=JSON.parse('{"address":"0x9E86dd60e0B1e7e142F033d1BdEf734c6b3224Bb","abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"transactionHash":"0xbcf8e5283022bb4349f66ef8788c36f4759afde2e69d6adbf0c93d6037273304","receipt":{"to":null,"from":"0xd4b33434Cb36df9286Ef5132FCFb8062c96aC56E","contractAddress":"0x9E86dd60e0B1e7e142F033d1BdEf734c6b3224Bb","transactionIndex":3,"gasUsed":"888397","logsBloom":"0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000100000000000000000000000000000000000000000080000000000000200000000000000000000000000000000000a0000000000000000000800000000000000000000000010000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000008000000000000","blockHash":"0xf7c2eee05552c55fb65cc461451ad6d8091bf84108083e6a424a9a46fd1c1f40","transactionHash":"0xbcf8e5283022bb4349f66ef8788c36f4759afde2e69d6adbf0c93d6037273304","logs":[{"transactionIndex":3,"blockNumber":14465810,"transactionHash":"0xbcf8e5283022bb4349f66ef8788c36f4759afde2e69d6adbf0c93d6037273304","address":"0x9E86dd60e0B1e7e142F033d1BdEf734c6b3224Bb","topics":["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","0x0000000000000000000000000000000000000000000000000000000000000000","0x000000000000000000000000d4b33434cb36df9286ef5132fcfb8062c96ac56e"],"data":"0x00000000000000000000000000000000000000000000d3c21bcecceda1000000","logIndex":0,"blockHash":"0xf7c2eee05552c55fb65cc461451ad6d8091bf84108083e6a424a9a46fd1c1f40"}],"blockNumber":14465810,"cumulativeGasUsed":"2370990","status":1,"byzantium":true},"args":[],"solcInputHash":"89c55d5a88f10637860a9ea31a1daad3","metadata":"{\\"compiler\\":{\\"version\\":\\"0.7.1+commit.f4a555be\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"value\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Approval\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"from\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"value\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Transfer\\",\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"}],\\"name\\":\\"allowance\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"approve\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"balanceOf\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"burn\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"decimals\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"subtractedValue\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"decreaseAllowance\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"addedValue\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"increaseAllowance\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"mint\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"name\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"symbol\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"totalSupply\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"transfer\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"sender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"transferFrom\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{\\"allowance(address,address)\\":{\\"details\\":\\"See {IERC20-allowance}.\\"},\\"approve(address,uint256)\\":{\\"details\\":\\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\\"},\\"balanceOf(address)\\":{\\"details\\":\\"See {IERC20-balanceOf}.\\"},\\"decimals()\\":{\\"details\\":\\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\\"},\\"decreaseAllowance(address,uint256)\\":{\\"details\\":\\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\\"},\\"increaseAllowance(address,uint256)\\":{\\"details\\":\\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\\"},\\"name()\\":{\\"details\\":\\"Returns the name of the token.\\"},\\"symbol()\\":{\\"details\\":\\"Returns the symbol of the token, usually a shorter version of the name.\\"},\\"totalSupply()\\":{\\"details\\":\\"See {IERC20-totalSupply}.\\"},\\"transfer(address,uint256)\\":{\\"details\\":\\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\\"},\\"transferFrom(address,address,uint256)\\":{\\"details\\":\\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``\'s tokens of at least `amount`.\\"}},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"src.sol/testing/TestToken.sol\\":\\"TestToken\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/GSN/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/*\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with GSN meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address payable) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes memory) {\\\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x910a2e625b71168563edf9eeef55a50d6d699acfe27ceba3921f291829a8f938\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/math/SafeMath.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Wrappers over Solidity\'s arithmetic operations with added overflow\\\\n * checks.\\\\n *\\\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\\\n * in bugs, because programmers usually assume that an overflow raises an\\\\n * error, which is the standard behavior in high level programming languages.\\\\n * `SafeMath` restores this intuition by reverting the transaction when an\\\\n * operation overflows.\\\\n *\\\\n * Using this library instead of the unchecked operations eliminates an entire\\\\n * class of bugs, so it\'s recommended to use it always.\\\\n */\\\\nlibrary SafeMath {\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `+` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Addition cannot overflow.\\\\n     */\\\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        uint256 c = a + b;\\\\n        require(c >= a, \\\\\\"SafeMath: addition overflow\\\\\\");\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return sub(a, b, \\\\\\"SafeMath: subtraction overflow\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        require(b <= a, errorMessage);\\\\n        uint256 c = a - b;\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `*` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Multiplication cannot overflow.\\\\n     */\\\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\\\\n        // benefit is lost if \'b\' is also tested.\\\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\\\n        if (a == 0) {\\\\n            return 0;\\\\n        }\\\\n\\\\n        uint256 c = a * b;\\\\n        require(c / a == b, \\\\\\"SafeMath: multiplication overflow\\\\\\");\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return div(a, b, \\\\\\"SafeMath: division by zero\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        require(b > 0, errorMessage);\\\\n        uint256 c = a / b;\\\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * Reverts when dividing by zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return mod(a, b, \\\\\\"SafeMath: modulo by zero\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * Reverts with custom message when dividing by zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        require(b != 0, errorMessage);\\\\n        return a % b;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\nimport \\\\\\"../../GSN/Context.sol\\\\\\";\\\\nimport \\\\\\"./IERC20.sol\\\\\\";\\\\nimport \\\\\\"../../math/SafeMath.sol\\\\\\";\\\\nimport \\\\\\"../../utils/Address.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Implementation of the {IERC20} interface.\\\\n *\\\\n * This implementation is agnostic to the way tokens are created. This means\\\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\\\n *\\\\n * TIP: For a detailed writeup see our guide\\\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\\\n * to implement supply mechanisms].\\\\n *\\\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\\\n * of returning `false` on failure. This behavior is nonetheless conventional\\\\n * and does not conflict with the expectations of ERC20 applications.\\\\n *\\\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\\\n * This allows applications to reconstruct the allowance for all accounts just\\\\n * by listening to said events. Other implementations of the EIP may not emit\\\\n * these events, as it isn\'t required by the specification.\\\\n *\\\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\\\n * functions have been added to mitigate the well-known issues around setting\\\\n * allowances. See {IERC20-approve}.\\\\n */\\\\ncontract ERC20 is Context, IERC20 {\\\\n    using SafeMath for uint256;\\\\n    using Address for address;\\\\n\\\\n    mapping (address => uint256) private _balances;\\\\n\\\\n    mapping (address => mapping (address => uint256)) private _allowances;\\\\n\\\\n    uint256 private _totalSupply;\\\\n\\\\n    string private _name;\\\\n    string private _symbol;\\\\n    uint8 private _decimals;\\\\n\\\\n    /**\\\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\\\n     * a default value of 18.\\\\n     *\\\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\\\n     *\\\\n     * All three of these values are immutable: they can only be set once during\\\\n     * construction.\\\\n     */\\\\n    constructor (string memory name, string memory symbol) {\\\\n        _name = name;\\\\n        _symbol = symbol;\\\\n        _decimals = 18;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the name of the token.\\\\n     */\\\\n    function name() public view returns (string memory) {\\\\n        return _name;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\\\n     * name.\\\\n     */\\\\n    function symbol() public view returns (string memory) {\\\\n        return _symbol;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the number of decimals used to get its user representation.\\\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\\\n     *\\\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\\\n     * called.\\\\n     *\\\\n     * NOTE: This information is only used for _display_ purposes: it in\\\\n     * no way affects any of the arithmetic of the contract, including\\\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\\\n     */\\\\n    function decimals() public view returns (uint8) {\\\\n        return _decimals;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-totalSupply}.\\\\n     */\\\\n    function totalSupply() public view override returns (uint256) {\\\\n        return _totalSupply;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-balanceOf}.\\\\n     */\\\\n    function balanceOf(address account) public view override returns (uint256) {\\\\n        return _balances[account];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-transfer}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `recipient` cannot be the zero address.\\\\n     * - the caller must have a balance of at least `amount`.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\\\n        _transfer(_msgSender(), recipient, amount);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-allowance}.\\\\n     */\\\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\\\n        return _allowances[owner][spender];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-approve}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\\\n        _approve(_msgSender(), spender, amount);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-transferFrom}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\\\n     * required by the EIP. See the note at the beginning of {ERC20};\\\\n     *\\\\n     * Requirements:\\\\n     * - `sender` and `recipient` cannot be the zero address.\\\\n     * - `sender` must have a balance of at least `amount`.\\\\n     * - the caller must have allowance for ``sender``\'s tokens of at least\\\\n     * `amount`.\\\\n     */\\\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\\\n        _transfer(sender, recipient, amount);\\\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\\\\"ERC20: transfer amount exceeds allowance\\\\\\"));\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\\\n     *\\\\n     * This is an alternative to {approve} that can be used as a mitigation for\\\\n     * problems described in {IERC20-approve}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\\\n     *\\\\n     * This is an alternative to {approve} that can be used as a mitigation for\\\\n     * problems described in {IERC20-approve}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     * - `spender` must have allowance for the caller of at least\\\\n     * `subtractedValue`.\\\\n     */\\\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\\\\"ERC20: decreased allowance below zero\\\\\\"));\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\\\n     *\\\\n     * This is internal function is equivalent to {transfer}, and can be used to\\\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `sender` cannot be the zero address.\\\\n     * - `recipient` cannot be the zero address.\\\\n     * - `sender` must have a balance of at least `amount`.\\\\n     */\\\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\\\n        require(sender != address(0), \\\\\\"ERC20: transfer from the zero address\\\\\\");\\\\n        require(recipient != address(0), \\\\\\"ERC20: transfer to the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(sender, recipient, amount);\\\\n\\\\n        _balances[sender] = _balances[sender].sub(amount, \\\\\\"ERC20: transfer amount exceeds balance\\\\\\");\\\\n        _balances[recipient] = _balances[recipient].add(amount);\\\\n        emit Transfer(sender, recipient, amount);\\\\n    }\\\\n\\\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\\\n     * the total supply.\\\\n     *\\\\n     * Emits a {Transfer} event with `from` set to the zero address.\\\\n     *\\\\n     * Requirements\\\\n     *\\\\n     * - `to` cannot be the zero address.\\\\n     */\\\\n    function _mint(address account, uint256 amount) internal virtual {\\\\n        require(account != address(0), \\\\\\"ERC20: mint to the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(address(0), account, amount);\\\\n\\\\n        _totalSupply = _totalSupply.add(amount);\\\\n        _balances[account] = _balances[account].add(amount);\\\\n        emit Transfer(address(0), account, amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\\\n     * total supply.\\\\n     *\\\\n     * Emits a {Transfer} event with `to` set to the zero address.\\\\n     *\\\\n     * Requirements\\\\n     *\\\\n     * - `account` cannot be the zero address.\\\\n     * - `account` must have at least `amount` tokens.\\\\n     */\\\\n    function _burn(address account, uint256 amount) internal virtual {\\\\n        require(account != address(0), \\\\\\"ERC20: burn from the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(account, address(0), amount);\\\\n\\\\n        _balances[account] = _balances[account].sub(amount, \\\\\\"ERC20: burn amount exceeds balance\\\\\\");\\\\n        _totalSupply = _totalSupply.sub(amount);\\\\n        emit Transfer(account, address(0), amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\\\n     *\\\\n     * This internal function is equivalent to `approve`, and can be used to\\\\n     * e.g. set automatic allowances for certain subsystems, etc.\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `owner` cannot be the zero address.\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\\\n        require(owner != address(0), \\\\\\"ERC20: approve from the zero address\\\\\\");\\\\n        require(spender != address(0), \\\\\\"ERC20: approve to the zero address\\\\\\");\\\\n\\\\n        _allowances[owner][spender] = amount;\\\\n        emit Approval(owner, spender, amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\\\n     *\\\\n     * WARNING: This function should only be called from the constructor. Most\\\\n     * applications that interact with token contracts will not expect\\\\n     * {decimals} to ever change, and may work incorrectly if it does.\\\\n     */\\\\n    function _setupDecimals(uint8 decimals_) internal {\\\\n        _decimals = decimals_;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Hook that is called before any transfer of tokens. This includes\\\\n     * minting and burning.\\\\n     *\\\\n     * Calling conditions:\\\\n     *\\\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\'s tokens\\\\n     * will be to transferred to `to`.\\\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\\\n     * - when `to` is zero, `amount` of ``from``\'s tokens will be burned.\\\\n     * - `from` and `to` are never both zero.\\\\n     *\\\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\\\n     */\\\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf1ac0ee2ca2b36f90574d3b2b37422ced4fa829741d80794c62f5958a2d8f474\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Returns the amount of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender\'s allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\\\n     * allowance mechanism. `amount` is then deducted from the caller\'s\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Address.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Collection of functions related to the address type\\\\n */\\\\nlibrary Address {\\\\n    /**\\\\n     * @dev Returns true if `account` is a contract.\\\\n     *\\\\n     * [IMPORTANT]\\\\n     * ====\\\\n     * It is unsafe to assume that an address for which this function returns\\\\n     * false is an externally-owned account (EOA) and not a contract.\\\\n     *\\\\n     * Among others, `isContract` will return false for the following\\\\n     * types of addresses:\\\\n     *\\\\n     *  - an externally-owned account\\\\n     *  - a contract in construction\\\\n     *  - an address where a contract will be created\\\\n     *  - an address where a contract lived, but was destroyed\\\\n     * ====\\\\n     */\\\\n    function isContract(address account) internal view returns (bool) {\\\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\\\n        // for accounts without code, i.e. `keccak256(\'\')`\\\\n        bytes32 codehash;\\\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\\\n        // solhint-disable-next-line no-inline-assembly\\\\n        assembly { codehash := extcodehash(account) }\\\\n        return (codehash != accountHash && codehash != 0x0);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\\\\n     * `recipient`, forwarding all available gas and reverting on errors.\\\\n     *\\\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\\\n     * imposed by `transfer`, making them unable to receive funds via\\\\n     * `transfer`. {sendValue} removes this limitation.\\\\n     *\\\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\\\n     *\\\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\\\n     * taken to not create reentrancy vulnerabilities. Consider using\\\\n     * {ReentrancyGuard} or the\\\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\\\n     */\\\\n    function sendValue(address payable recipient, uint256 amount) internal {\\\\n        require(address(this).balance >= amount, \\\\\\"Address: insufficient balance\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\\\n        (bool success, ) = recipient.call{ value: amount }(\\\\\\"\\\\\\");\\\\n        require(success, \\\\\\"Address: unable to send value, recipient may have reverted\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Performs a Solidity function call using a low level `call`. A\\\\n     * plain`call` is an unsafe replacement for a function call: use this\\\\n     * function instead.\\\\n     *\\\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\\\n     * function (like regular Solidity function calls).\\\\n     *\\\\n     * Returns the raw returned data. To convert to the expected return value,\\\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `target` must be a contract.\\\\n     * - calling `target` with `data` must not revert.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n      return functionCall(target, data, \\\\\\"Address: low-level call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but also transferring `value` wei to `target`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the calling contract must have an ETH balance of at least `value`.\\\\n     * - the called Solidity function must be `payable`.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, value, \\\\\\"Address: low-level call with value failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\\\n        require(address(this).balance >= value, \\\\\\"Address: insufficient balance for call\\\\\\");\\\\n        return _functionCallWithValue(target, data, value, errorMessage);\\\\n    }\\\\n\\\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: call to non-contract\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls\\\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\\\n        if (success) {\\\\n            return returndata;\\\\n        } else {\\\\n            // Look for revert reason and bubble it up if present\\\\n            if (returndata.length > 0) {\\\\n                // The easiest way to bubble the revert reason is using memory via assembly\\\\n\\\\n                // solhint-disable-next-line no-inline-assembly\\\\n                assembly {\\\\n                    let returndata_size := mload(returndata)\\\\n                    revert(add(32, returndata), returndata_size)\\\\n                }\\\\n            } else {\\\\n                revert(errorMessage);\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x698f929f1097637d051976b322a2d532c27df022b09010e8d091e2888a5ebdf8\\",\\"license\\":\\"MIT\\"},\\"src.sol/testing/TestToken.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.1;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\\\\";\\\\n\\\\n/* This token is ONLY useful for testing\\\\n * Anybody can mint as many tokens as they like\\\\n * Anybody can burn anyone else\'s tokens\\\\n */\\\\ncontract TestToken is ERC20 {\\\\n    constructor() ERC20(\\\\\\"Test Token\\\\\\", \\\\\\"TEST\\\\\\") {\\\\n        _mint(msg.sender, 1000000 ether);\\\\n    }\\\\n\\\\n    function mint(address account, uint256 amount) external {\\\\n        _mint(account, amount);\\\\n    }\\\\n\\\\n    function burn(address account, uint256 amount) external {\\\\n        _burn(account, amount);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe879a63f0b107705dc9405af3efc7adc2f6425da2c5ec571c72f91db2a059876\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"0x60806040523480156200001157600080fd5b50604080518082018252600a8152692a32b9ba102a37b5b2b760b11b602080830191825283518085019094526004845263151154d560e21b908401528151919291620000609160039162000218565b5080516200007690600490602084019062000218565b50506005805460ff19166012179055506200009c3369d3c21bcecceda1000000620000a2565b620002b4565b6001600160a01b038216620000fe576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6200010c60008383620001b1565b6200012881600254620001b660201b6200060b1790919060201c565b6002556001600160a01b038216600090815260208181526040909120546200015b9183906200060b620001b6821b17901c565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b505050565b60008282018381101562000211576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200025b57805160ff19168380011785556200028b565b828001600101855582156200028b579182015b828111156200028b5782518255916020019190600101906200026e565b50620002999291506200029d565b5090565b5b808211156200029957600081556001016200029e565b610cfb80620002c46000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806340c10f191161008c5780639dc29fac116100665780639dc29fac14610287578063a457c2d7146102b3578063a9059cbb146102df578063dd62ed3e1461030b576100cf565b806340c10f191461022b57806370a082311461025957806395d89b411461027f576100cf565b806306fdde03146100d4578063095ea7b31461015157806318160ddd1461019157806323b872dd146101ab578063313ce567146101e157806339509351146101ff575b600080fd5b6100dc610339565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101165781810151838201526020016100fe565b50505050905090810190601f1680156101435780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561016757600080fd5b506001600160a01b0381351690602001356103cf565b604080519115158252519081900360200190f35b6101996103ec565b60408051918252519081900360200190f35b61017d600480360360608110156101c157600080fd5b506001600160a01b038135811691602081013590911690604001356103f2565b6101e9610479565b6040805160ff9092168252519081900360200190f35b61017d6004803603604081101561021557600080fd5b506001600160a01b038135169060200135610482565b6102576004803603604081101561024157600080fd5b506001600160a01b0381351690602001356104d0565b005b6101996004803603602081101561026f57600080fd5b50356001600160a01b03166104de565b6100dc6104f9565b6102576004803603604081101561029d57600080fd5b506001600160a01b03813516906020013561055a565b61017d600480360360408110156102c957600080fd5b506001600160a01b038135169060200135610564565b61017d600480360360408110156102f557600080fd5b506001600160a01b0381351690602001356105cc565b6101996004803603604081101561032157600080fd5b506001600160a01b03813581169160200135166105e0565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103c55780601f1061039a576101008083540402835291602001916103c5565b820191906000526020600020905b8154815290600101906020018083116103a857829003601f168201915b5050505050905090565b60006103e36103dc61066c565b8484610670565b50600192915050565b60025490565b60006103ff84848461075c565b61046f8461040b61066c565b61046a85604051806060016040528060288152602001610c0f602891396001600160a01b038a1660009081526001602052604081209061044961066c565b6001600160a01b0316815260208101919091526040016000205491906108b7565b610670565b5060019392505050565b60055460ff1690565b60006103e361048f61066c565b8461046a85600160006104a061066c565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549061060b565b6104da828261094e565b5050565b6001600160a01b031660009081526020819052604090205490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103c55780601f1061039a576101008083540402835291602001916103c5565b6104da8282610a3e565b60006103e361057161066c565b8461046a85604051806060016040528060258152602001610ca1602591396001600061059b61066c565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906108b7565b60006103e36105d961066c565b848461075c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600082820183811015610665576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b3390565b6001600160a01b0383166106b55760405162461bcd60e51b8152600401808060200182810382526024815260200180610c7d6024913960400191505060405180910390fd5b6001600160a01b0382166106fa5760405162461bcd60e51b8152600401808060200182810382526022815260200180610bc76022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166107a15760405162461bcd60e51b8152600401808060200182810382526025815260200180610c586025913960400191505060405180910390fd5b6001600160a01b0382166107e65760405162461bcd60e51b8152600401808060200182810382526023815260200180610b826023913960400191505060405180910390fd5b6107f1838383610b3a565b61082e81604051806060016040528060268152602001610be9602691396001600160a01b03861660009081526020819052604090205491906108b7565b6001600160a01b03808516600090815260208190526040808220939093559084168152205461085d908261060b565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600081848411156109465760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561090b5781810151838201526020016108f3565b50505050905090810190601f1680156109385780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b0382166109a9576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6109b560008383610b3a565b6002546109c2908261060b565b6002556001600160a01b0382166000908152602081905260409020546109e8908261060b565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b038216610a835760405162461bcd60e51b8152600401808060200182810382526021815260200180610c376021913960400191505060405180910390fd5b610a8f82600083610b3a565b610acc81604051806060016040528060228152602001610ba5602291396001600160a01b03851660009081526020819052604090205491906108b7565b6001600160a01b038316600090815260208190526040902055600254610af29082610b3f565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b505050565b600061066583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506108b756fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220ab9dcafdcf3d12155ca9697d505d71261c7afcb9c777a043bc5bb39f7a2d72ab64736f6c63430007010033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806340c10f191161008c5780639dc29fac116100665780639dc29fac14610287578063a457c2d7146102b3578063a9059cbb146102df578063dd62ed3e1461030b576100cf565b806340c10f191461022b57806370a082311461025957806395d89b411461027f576100cf565b806306fdde03146100d4578063095ea7b31461015157806318160ddd1461019157806323b872dd146101ab578063313ce567146101e157806339509351146101ff575b600080fd5b6100dc610339565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101165781810151838201526020016100fe565b50505050905090810190601f1680156101435780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561016757600080fd5b506001600160a01b0381351690602001356103cf565b604080519115158252519081900360200190f35b6101996103ec565b60408051918252519081900360200190f35b61017d600480360360608110156101c157600080fd5b506001600160a01b038135811691602081013590911690604001356103f2565b6101e9610479565b6040805160ff9092168252519081900360200190f35b61017d6004803603604081101561021557600080fd5b506001600160a01b038135169060200135610482565b6102576004803603604081101561024157600080fd5b506001600160a01b0381351690602001356104d0565b005b6101996004803603602081101561026f57600080fd5b50356001600160a01b03166104de565b6100dc6104f9565b6102576004803603604081101561029d57600080fd5b506001600160a01b03813516906020013561055a565b61017d600480360360408110156102c957600080fd5b506001600160a01b038135169060200135610564565b61017d600480360360408110156102f557600080fd5b506001600160a01b0381351690602001356105cc565b6101996004803603604081101561032157600080fd5b506001600160a01b03813581169160200135166105e0565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103c55780601f1061039a576101008083540402835291602001916103c5565b820191906000526020600020905b8154815290600101906020018083116103a857829003601f168201915b5050505050905090565b60006103e36103dc61066c565b8484610670565b50600192915050565b60025490565b60006103ff84848461075c565b61046f8461040b61066c565b61046a85604051806060016040528060288152602001610c0f602891396001600160a01b038a1660009081526001602052604081209061044961066c565b6001600160a01b0316815260208101919091526040016000205491906108b7565b610670565b5060019392505050565b60055460ff1690565b60006103e361048f61066c565b8461046a85600160006104a061066c565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549061060b565b6104da828261094e565b5050565b6001600160a01b031660009081526020819052604090205490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103c55780601f1061039a576101008083540402835291602001916103c5565b6104da8282610a3e565b60006103e361057161066c565b8461046a85604051806060016040528060258152602001610ca1602591396001600061059b61066c565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906108b7565b60006103e36105d961066c565b848461075c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600082820183811015610665576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b3390565b6001600160a01b0383166106b55760405162461bcd60e51b8152600401808060200182810382526024815260200180610c7d6024913960400191505060405180910390fd5b6001600160a01b0382166106fa5760405162461bcd60e51b8152600401808060200182810382526022815260200180610bc76022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166107a15760405162461bcd60e51b8152600401808060200182810382526025815260200180610c586025913960400191505060405180910390fd5b6001600160a01b0382166107e65760405162461bcd60e51b8152600401808060200182810382526023815260200180610b826023913960400191505060405180910390fd5b6107f1838383610b3a565b61082e81604051806060016040528060268152602001610be9602691396001600160a01b03861660009081526020819052604090205491906108b7565b6001600160a01b03808516600090815260208190526040808220939093559084168152205461085d908261060b565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600081848411156109465760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561090b5781810151838201526020016108f3565b50505050905090810190601f1680156109385780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b0382166109a9576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6109b560008383610b3a565b6002546109c2908261060b565b6002556001600160a01b0382166000908152602081905260409020546109e8908261060b565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b038216610a835760405162461bcd60e51b8152600401808060200182810382526021815260200180610c376021913960400191505060405180910390fd5b610a8f82600083610b3a565b610acc81604051806060016040528060228152602001610ba5602291396001600160a01b03851660009081526020819052604090205491906108b7565b6001600160a01b038316600090815260208190526040902055600254610af29082610b3f565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b505050565b600061066583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506108b756fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220ab9dcafdcf3d12155ca9697d505d71261c7afcb9c777a043bc5bb39f7a2d72ab64736f6c63430007010033","devdoc":{"kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``\'s tokens of at least `amount`."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1},"storageLayout":{"storage":[{"astId":590,"contract":"src.sol/testing/TestToken.sol:TestToken","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":596,"contract":"src.sol/testing/TestToken.sol:TestToken","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":598,"contract":"src.sol/testing/TestToken.sol:TestToken","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":600,"contract":"src.sol/testing/TestToken.sol:TestToken","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":602,"contract":"src.sol/testing/TestToken.sol:TestToken","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"},{"astId":604,"contract":"src.sol/testing/TestToken.sol:TestToken","label":"_decimals","offset":0,"slot":"5","type":"t_uint8"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}}}')},2840:function(e){e.exports=JSON.parse('{"address":"0x5FAe7F15Ae20A10053CCca1DcFce0E2Bb4D50A7d","abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"address","name":"definition","type":"address"},{"internalType":"string","name":"stateEncoding","type":"string"},{"internalType":"string","name":"resolverEncoding","type":"string"},{"internalType":"bytes","name":"encodedCancel","type":"bytes"}],"indexed":false,"internalType":"struct RegisteredTransfer","name":"transfer","type":"tuple"}],"name":"TransferAdded","type":"event"},{"anonymous":false,"inputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"address","name":"definition","type":"address"},{"internalType":"string","name":"stateEncoding","type":"string"},{"internalType":"string","name":"resolverEncoding","type":"string"},{"internalType":"bytes","name":"encodedCancel","type":"bytes"}],"indexed":false,"internalType":"struct RegisteredTransfer","name":"transfer","type":"tuple"}],"name":"TransferRemoved","type":"event"},{"inputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"address","name":"definition","type":"address"},{"internalType":"string","name":"stateEncoding","type":"string"},{"internalType":"string","name":"resolverEncoding","type":"string"},{"internalType":"bytes","name":"encodedCancel","type":"bytes"}],"internalType":"struct RegisteredTransfer","name":"definition","type":"tuple"}],"name":"addTransferDefinition","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getTransferDefinitions","outputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"address","name":"definition","type":"address"},{"internalType":"string","name":"stateEncoding","type":"string"},{"internalType":"string","name":"resolverEncoding","type":"string"},{"internalType":"bytes","name":"encodedCancel","type":"bytes"}],"internalType":"struct RegisteredTransfer[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"name","type":"string"}],"name":"removeTransferDefinition","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"transactionHash":"0xeea948341b07d797b4b8f2da47a6d0ab2b02632209a1399380bde71e0e89a698","receipt":{"to":null,"from":"0xd4b33434Cb36df9286Ef5132FCFb8062c96aC56E","contractAddress":"0x5FAe7F15Ae20A10053CCca1DcFce0E2Bb4D50A7d","transactionIndex":6,"gasUsed":"1239411","logsBloom":"0x000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010200000000000000000000000000000000000a0000200000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000020000000001000000000000000000000000000000000000000000008000000000000","blockHash":"0xde8e0c56b758b6f7f98cacc422ea6ab003796444518150e0fe1d715d3b6dd776","transactionHash":"0xeea948341b07d797b4b8f2da47a6d0ab2b02632209a1399380bde71e0e89a698","logs":[{"transactionIndex":6,"blockNumber":14465807,"transactionHash":"0xeea948341b07d797b4b8f2da47a6d0ab2b02632209a1399380bde71e0e89a698","address":"0x5FAe7F15Ae20A10053CCca1DcFce0E2Bb4D50A7d","topics":["0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","0x0000000000000000000000000000000000000000000000000000000000000000","0x000000000000000000000000d4b33434cb36df9286ef5132fcfb8062c96ac56e"],"data":"0x","logIndex":0,"blockHash":"0xde8e0c56b758b6f7f98cacc422ea6ab003796444518150e0fe1d715d3b6dd776"}],"blockNumber":14465807,"cumulativeGasUsed":"5168129","status":1,"byzantium":true},"args":[],"solcInputHash":"89c55d5a88f10637860a9ea31a1daad3","metadata":"{\\"compiler\\":{\\"version\\":\\"0.7.1+commit.f4a555be\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"previousOwner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"OwnershipTransferred\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"definition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"stateEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"resolverEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedCancel\\",\\"type\\":\\"bytes\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct RegisteredTransfer\\",\\"name\\":\\"transfer\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"TransferAdded\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"definition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"stateEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"resolverEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedCancel\\",\\"type\\":\\"bytes\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct RegisteredTransfer\\",\\"name\\":\\"transfer\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"TransferRemoved\\",\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"definition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"stateEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"resolverEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedCancel\\",\\"type\\":\\"bytes\\"}],\\"internalType\\":\\"struct RegisteredTransfer\\",\\"name\\":\\"definition\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"addTransferDefinition\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getTransferDefinitions\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"definition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"stateEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"resolverEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedCancel\\",\\"type\\":\\"bytes\\"}],\\"internalType\\":\\"struct RegisteredTransfer[]\\",\\"name\\":\\"\\",\\"type\\":\\"tuple[]\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"owner\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"}],\\"name\\":\\"removeTransferDefinition\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"renounceOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"transferOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"author\\":\\"Connext <support@connext.network>\\",\\"kind\\":\\"dev\\",\\"methods\\":{\\"addTransferDefinition((string,address,string,string,bytes))\\":{\\"details\\":\\"Should add a transfer definition to the registry\\"},\\"getTransferDefinitions()\\":{\\"details\\":\\"Should return all transfer defintions in registry\\"},\\"owner()\\":{\\"details\\":\\"Returns the address of the current owner.\\"},\\"removeTransferDefinition(string)\\":{\\"details\\":\\"Should remove a transfer definition from the registry\\"},\\"renounceOwnership()\\":{\\"details\\":\\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\\"},\\"transferOwnership(address)\\":{\\"details\\":\\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\\"}},\\"title\\":\\"TransferRegistry\\",\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"notice\\":\\"The TransferRegistry maintains an onchain record of all         supported transfers (specifically holds the registry information         defined within the contracts). The offchain protocol uses         this information to get the correct encodings when generating         signatures. The information stored here can only be updated         by the owner of the contract\\",\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"src.sol/TransferRegistry.sol\\":\\"TransferRegistry\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/GSN/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/*\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with GSN meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address payable) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes memory) {\\\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x910a2e625b71168563edf9eeef55a50d6d699acfe27ceba3921f291829a8f938\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/access/Ownable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\nimport \\\\\\"../GSN/Context.sol\\\\\\";\\\\n/**\\\\n * @dev Contract module which provides a basic access control mechanism, where\\\\n * there is an account (an owner) that can be granted exclusive access to\\\\n * specific functions.\\\\n *\\\\n * By default, the owner account will be the one that deploys the contract. This\\\\n * can later be changed with {transferOwnership}.\\\\n *\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\\\n * the owner.\\\\n */\\\\ncontract Ownable is Context {\\\\n    address private _owner;\\\\n\\\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\\\n\\\\n    /**\\\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\\\n     */\\\\n    constructor () {\\\\n        address msgSender = _msgSender();\\\\n        _owner = msgSender;\\\\n        emit OwnershipTransferred(address(0), msgSender);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the address of the current owner.\\\\n     */\\\\n    function owner() public view returns (address) {\\\\n        return _owner;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the owner.\\\\n     */\\\\n    modifier onlyOwner() {\\\\n        require(_owner == _msgSender(), \\\\\\"Ownable: caller is not the owner\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Leaves the contract without owner. It will not be possible to call\\\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\\\n     *\\\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\\\n     * thereby removing any functionality that is only available to the owner.\\\\n     */\\\\n    function renounceOwnership() public virtual onlyOwner {\\\\n        emit OwnershipTransferred(_owner, address(0));\\\\n        _owner = address(0);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\\\n     * Can only be called by the current owner.\\\\n     */\\\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\\\n        require(newOwner != address(0), \\\\\\"Ownable: new owner is the zero address\\\\\\");\\\\n        emit OwnershipTransferred(_owner, newOwner);\\\\n        _owner = newOwner;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x74b0525c81e47810f1bd795755962bdb84de3a4f71cfcb063f4c4d4999a3e96b\\",\\"license\\":\\"MIT\\"},\\"src.sol/TransferRegistry.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/ITransferRegistry.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibIterableMapping.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/access/Ownable.sol\\\\\\";\\\\n\\\\n/// @title TransferRegistry\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice The TransferRegistry maintains an onchain record of all\\\\n///         supported transfers (specifically holds the registry information\\\\n///         defined within the contracts). The offchain protocol uses\\\\n///         this information to get the correct encodings when generating\\\\n///         signatures. The information stored here can only be updated\\\\n///         by the owner of the contract\\\\n\\\\ncontract TransferRegistry is Ownable, ITransferRegistry {\\\\n    using LibIterableMapping for LibIterableMapping.IterableMapping;\\\\n\\\\n    LibIterableMapping.IterableMapping transfers;\\\\n\\\\n    /// @dev Should add a transfer definition to the registry\\\\n    function addTransferDefinition(RegisteredTransfer memory definition)\\\\n        external\\\\n        override\\\\n        onlyOwner\\\\n    {\\\\n        // Get index transfer will be added at\\\\n        uint256 idx = transfers.length();\\\\n        \\\\n        // Add registered transfer\\\\n        transfers.addTransferDefinition(definition);\\\\n\\\\n        // Emit event\\\\n        emit TransferAdded(transfers.getTransferDefinitionByIndex(idx));\\\\n    }\\\\n\\\\n    /// @dev Should remove a transfer definition from the registry\\\\n    function removeTransferDefinition(string memory name)\\\\n        external\\\\n        override\\\\n        onlyOwner\\\\n    {\\\\n        // Get transfer from library to remove for event\\\\n        RegisteredTransfer memory transfer = transfers.getTransferDefinitionByName(name);\\\\n\\\\n        // Remove transfer\\\\n        transfers.removeTransferDefinition(name);\\\\n\\\\n        // Emit event\\\\n        emit TransferRemoved(transfer);\\\\n    }\\\\n\\\\n    /// @dev Should return all transfer defintions in registry\\\\n    function getTransferDefinitions()\\\\n        external\\\\n        view\\\\n        override\\\\n        returns (RegisteredTransfer[] memory)\\\\n    {\\\\n        return transfers.getTransferDefinitions();\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe0bbdc74c5635a2b21ab1a0f2b4ebb377af048f05cc2bab70f645ac826984382\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ITransferRegistry.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental \\\\\\"ABIEncoderV2\\\\\\";\\\\n\\\\nstruct RegisteredTransfer {\\\\n    string name;\\\\n    address definition;\\\\n    string stateEncoding;\\\\n    string resolverEncoding;\\\\n    bytes encodedCancel;\\\\n}\\\\n\\\\ninterface ITransferRegistry {\\\\n    event TransferAdded(RegisteredTransfer transfer);\\\\n\\\\n    event TransferRemoved(RegisteredTransfer transfer);\\\\n\\\\n    // Should add a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function addTransferDefinition(RegisteredTransfer memory transfer) external;\\\\n\\\\n    // Should remove a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function removeTransferDefinition(string memory name) external;\\\\n\\\\n    // Should return all transfer defintions in registry\\\\n    function getTransferDefinitions()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer[] memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd13be6d976c64e381a0d9df10c621cd964454b6916f25df4ea6c1b4cd873a58a\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibIterableMapping.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"../interfaces/ITransferRegistry.sol\\\\\\";\\\\n\\\\n/// @title LibIterableMapping\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This library provides an efficient way to store and retrieve\\\\n///         RegisteredTransfers. This contract is used to manage the transfers\\\\n///         stored by `TransferRegistry.sol`\\\\nlibrary LibIterableMapping {\\\\n    struct TransferDefinitionWithIndex {\\\\n        RegisteredTransfer transfer;\\\\n        uint256 index;\\\\n    }\\\\n\\\\n    struct IterableMapping {\\\\n        mapping(string => TransferDefinitionWithIndex) transfers;\\\\n        string[] names;\\\\n    }\\\\n\\\\n    function stringEqual(string memory s, string memory t)\\\\n        internal\\\\n        pure\\\\n        returns (bool)\\\\n    {\\\\n        return keccak256(abi.encodePacked(s)) == keccak256(abi.encodePacked(t));\\\\n    }\\\\n\\\\n    function isEmptyString(string memory s) internal pure returns (bool) {\\\\n        return stringEqual(s, \\\\\\"\\\\\\");\\\\n    }\\\\n\\\\n    function nameExists(IterableMapping storage self, string memory name)\\\\n        internal\\\\n        view\\\\n        returns (bool)\\\\n    {\\\\n        return\\\\n            !isEmptyString(name) &&\\\\n            self.names.length != 0 &&\\\\n            stringEqual(self.names[self.transfers[name].index], name);\\\\n    }\\\\n\\\\n    function length(IterableMapping storage self)\\\\n        internal\\\\n        view\\\\n        returns (uint256)\\\\n    {\\\\n        return self.names.length;\\\\n    }\\\\n\\\\n    function getTransferDefinitionByName(\\\\n        IterableMapping storage self,\\\\n        string memory name\\\\n    ) internal view returns (RegisteredTransfer memory) {\\\\n        require(nameExists(self, name), \\\\\\"LibIterableMapping: NAME_NOT_FOUND\\\\\\");\\\\n        return self.transfers[name].transfer;\\\\n    }\\\\n\\\\n    function getTransferDefinitionByIndex(\\\\n        IterableMapping storage self,\\\\n        uint256 index\\\\n    ) internal view returns (RegisteredTransfer memory) {\\\\n        require(index < self.names.length, \\\\\\"LibIterableMapping: INVALID_INDEX\\\\\\");\\\\n        return self.transfers[self.names[index]].transfer;\\\\n    }\\\\n\\\\n    function getTransferDefinitions(IterableMapping storage self)\\\\n        internal\\\\n        view\\\\n        returns (RegisteredTransfer[] memory)\\\\n    {\\\\n        uint256 l = self.names.length;\\\\n        RegisteredTransfer[] memory transfers = new RegisteredTransfer[](l);\\\\n        for (uint256 i = 0; i < l; i++) {\\\\n            transfers[i] = self.transfers[self.names[i]].transfer;\\\\n        }\\\\n        return transfers;\\\\n    }\\\\n\\\\n    function addTransferDefinition(\\\\n        IterableMapping storage self,\\\\n        RegisteredTransfer memory transfer\\\\n    ) internal {\\\\n        string memory name = transfer.name;\\\\n        require(!isEmptyString(name), \\\\\\"LibIterableMapping: EMPTY_NAME\\\\\\");\\\\n        require(!nameExists(self, name), \\\\\\"LibIterableMapping: NAME_ALREADY_ADDED\\\\\\");\\\\n        self.transfers[name] = TransferDefinitionWithIndex({\\\\n            transfer: transfer,\\\\n            index: self.names.length\\\\n        });\\\\n        self.names.push(name);\\\\n    }\\\\n\\\\n    function removeTransferDefinition(\\\\n        IterableMapping storage self,\\\\n        string memory name\\\\n    ) internal {\\\\n        require(!isEmptyString(name), \\\\\\"LibIterableMapping: EMPTY_NAME\\\\\\");\\\\n        require(nameExists(self, name), \\\\\\"LibIterableMapping: NAME_NOT_FOUND\\\\\\");\\\\n        uint256 index = self.transfers[name].index;\\\\n        string memory lastName = self.names[self.names.length - 1];\\\\n        self.transfers[lastName].index = index;\\\\n        self.names[index] = lastName;\\\\n        delete self.transfers[name];\\\\n        self.names.pop();\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x52d4a240bb76e9892af1ecbf6cf72995890db0b115a36a54e1b0115f0f47ce8a\\",\\"license\\":\\"UNLICENSED\\"}},\\"version\\":1}","bytecode":"0x608060405234801561001057600080fd5b50600061001b61006a565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35061006e565b3390565b6115078061007d6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806355304c3f14610067578063715018a61461007c5780638da5cb5b14610084578063961bf9b1146100a2578063c9ff4d25146100b5578063f2fde38b146100ca575b600080fd5b61007a610075366004611061565b6100dd565b005b61007a610179565b61008c6101f8565b604051610099919061127c565b60405180910390f35b61007a6100b0366004611026565b610207565b6100bd61028b565b6040516100999190611290565b61007a6100d836600461100b565b61029c565b6100e5610352565b6000546001600160a01b0390811691161461011b5760405162461bcd60e51b81526004016101129061137c565b60405180910390fd5b60006101276001610356565b905061013460018361035d565b7fcdbba5dd6bffbe47d5f74dbed3cf4a2174815c7186eaa49b32f97af4c47543bf6101606001836104af565b60405161016d919061146b565b60405180910390a15050565b610181610352565b6000546001600160a01b039081169116146101ae5760405162461bcd60e51b81526004016101129061137c565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b61020f610352565b6000546001600160a01b0390811691161461023c5760405162461bcd60e51b81526004016101129061137c565b610244610e79565b61024f600183610783565b905061025c6001836107c1565b7fdc44d9d985df00268149ae57add485c612e57109279f8485035dbe2b2251222b8160405161016d919061146b565b606061029760016109df565b905090565b6102a4610352565b6000546001600160a01b039081169116146102d15760405162461bcd60e51b81526004016101129061137c565b6001600160a01b0381166102f75760405162461bcd60e51b8152600401610112906112f0565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6001015490565b805161036881610d0e565b156103855760405162461bcd60e51b8152600401610112906113b1565b61038f8382610d29565b156103ac5760405162461bcd60e51b815260040161011290611336565b60408051808201825283815260018501546020820152905184906103d19084906111f0565b908152604051602091819003820190208251805180519293919284926103fb928492910190610eb1565b506020828101516001830180546001600160a01b0319166001600160a01b039092169190911790556040830151805161043a9260028501920190610eb1565b5060608201518051610456916003840191602090910190610eb1565b5060808201518051610472916004840191602090910190610eb1565b505050602091820151600590910155600180850180549182018155600090815282902083516104a993919092019190840190610eb1565b50505050565b6104b7610e79565b600183015482106104da5760405162461bcd60e51b8152600401610112906113e8565b826000018360010183815481106104ed57fe5b90600052602060002001604051610504919061120c565b9081526040805160209281900383018120805460026001821615610100026000190190911604601f8101859004909402820160c090810190935260a0820184815291939092849291849184018282801561059f5780601f106105745761010080835404028352916020019161059f565b820191906000526020600020905b81548152906001019060200180831161058257829003601f168201915b50505091835250506001828101546001600160a01b0316602080840191909152600280850180546040805161010096831615969096026000190190911692909204601f810184900484028501840183528085529190940193918301828280156106495780601f1061061e57610100808354040283529160200191610649565b820191906000526020600020905b81548152906001019060200180831161062c57829003601f168201915b505050918352505060038201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156106dd5780601f106106b2576101008083540402835291602001916106dd565b820191906000526020600020905b8154815290600101906020018083116106c057829003601f168201915b505050918352505060048201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156107715780601f1061074657610100808354040283529160200191610771565b820191906000526020600020905b81548152906001019060200180831161075457829003601f168201915b50505050508152505090505b92915050565b61078b610e79565b6107958383610d29565b6107b15760405162461bcd60e51b815260040161011290611429565b60405183906105049084906111f0565b6107ca81610d0e565b156107e75760405162461bcd60e51b8152600401610112906113b1565b6107f18282610d29565b61080d5760405162461bcd60e51b815260040161011290611429565b6000826000018260405161082191906111f0565b90815260405190819003602001902060050154600184018054919250606091600019810190811061084e57fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156108dc5780601f106108b1576101008083540402835291602001916108dc565b820191906000526020600020905b8154815290600101906020018083116108bf57829003601f168201915b505050505090508184600001826040516108f691906111f0565b9081526020016040518091039020600501819055508084600101838154811061091b57fe5b906000526020600020019080519060200190610938929190610eb1565b5060405184906109499085906111f0565b908152604051908190036020019020600081816109668282610f2f565b6001820180546001600160a01b0319169055610986600283016000610f2f565b610994600383016000610f2f565b6109a2600483016000610f2f565b505060058201600090555050836001018054806109bb57fe5b6001900381819060005260206000200160006109d79190610f2f565b905550505050565b6001810154606090818167ffffffffffffffff811180156109ff57600080fd5b50604051908082528060200260200182016040528015610a3957816020015b610a26610e79565b815260200190600190039081610a1e5790505b50905060005b82811015610d065784600001856001018281548110610a5a57fe5b90600052602060002001604051610a71919061120c565b9081526040805160209281900383018120805460026001821615610100026000190190911604601f8101859004909402820160c090810190935260a08201848152919390928492918491840182828015610b0c5780601f10610ae157610100808354040283529160200191610b0c565b820191906000526020600020905b815481529060010190602001808311610aef57829003601f168201915b50505091835250506001828101546001600160a01b0316602080840191909152600280850180546040805161010096831615969096026000190190911692909204601f81018490048402850184018352808552919094019391830182828015610bb65780601f10610b8b57610100808354040283529160200191610bb6565b820191906000526020600020905b815481529060010190602001808311610b9957829003601f168201915b505050918352505060038201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015610c4a5780601f10610c1f57610100808354040283529160200191610c4a565b820191906000526020600020905b815481529060010190602001808311610c2d57829003601f168201915b505050918352505060048201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015610cde5780601f10610cb357610100808354040283529160200191610cde565b820191906000526020600020905b815481529060010190602001808311610cc157829003601f168201915b505050505081525050828281518110610cf357fe5b6020908102919091010152600101610a3f565b509392505050565b600061077d8260405180602001604052806000815250610e20565b6000610d3482610d0e565b158015610d445750600183015415155b8015610e195750610e19836001018460000184604051610d6491906111f0565b90815260200160405180910390206005015481548110610d8057fe5b600091825260209182902001805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015610e0e5780601f10610de357610100808354040283529160200191610e0e565b820191906000526020600020905b815481529060010190602001808311610df157829003601f168201915b505050505083610e20565b9392505050565b600081604051602001610e3391906111f0565b6040516020818303038152906040528051906020012083604051602001610e5a91906111f0565b6040516020818303038152906040528051906020012014905092915050565b6040518060a001604052806060815260200160006001600160a01b031681526020016060815260200160608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610ef257805160ff1916838001178555610f1f565b82800160010185558215610f1f579182015b82811115610f1f578251825591602001919060010190610f04565b50610f2b929150610f76565b5090565b50805460018160011615610100020316600290046000825580601f10610f555750610f73565b601f016020900490600052602060002090810190610f739190610f76565b50565b5b80821115610f2b5760008155600101610f77565b80356001600160a01b038116811461077d57600080fd5b600082601f830112610fb2578081fd5b813567ffffffffffffffff811115610fc8578182fd5b610fdb601f8201601f191660200161147e565b9150808252836020828501011115610ff257600080fd5b8060208401602084013760009082016020015292915050565b60006020828403121561101c578081fd5b610e198383610f8b565b600060208284031215611037578081fd5b813567ffffffffffffffff81111561104d578182fd5b61105984828501610fa2565b949350505050565b600060208284031215611072578081fd5b813567ffffffffffffffff80821115611089578283fd5b9083019060a0828603121561109c578283fd5b6110a660a061147e565b8235828111156110b4578485fd5b6110c087828601610fa2565b8252506110d08660208501610f8b565b60208201526040830135828111156110e6578485fd5b6110f287828601610fa2565b604083015250606083013582811115611109578485fd5b61111587828601610fa2565b60608301525060808301358281111561112c578485fd5b61113887828601610fa2565b60808301525095945050505050565b6000815180845261115f8160208601602086016114a5565b601f01601f19169290920160200192915050565b6000815160a0845261118860a0850182611147565b905060018060a01b036020840151166020850152604083015184820360408601526111b38282611147565b915050606083015184820360608601526111cd8282611147565b915050608083015184820360808601526111e78282611147565b95945050505050565b600082516112028184602087016114a5565b9190910192915050565b600080835460018082166000811461122b576001811461124257611271565b60ff198316865260028304607f1686019350611271565b600283048786526020808720875b838110156112695781548a820152908501908201611250565b505050860193505b509195945050505050565b6001600160a01b0391909116815260200190565b6000602080830181845280855180835260408601915060408482028701019250838701855b828110156112e357603f198886030184526112d1858351611173565b945092850192908501906001016112b5565b5092979650505050505050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526026908201527f4c69624974657261626c654d617070696e673a204e414d455f414c524541445960408201526517d05111115160d21b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601e908201527f4c69624974657261626c654d617070696e673a20454d5054595f4e414d450000604082015260600190565b60208082526021908201527f4c69624974657261626c654d617070696e673a20494e56414c49445f494e44456040820152600b60fb1b606082015260800190565b60208082526022908201527f4c69624974657261626c654d617070696e673a204e414d455f4e4f545f464f55604082015261139160f21b606082015260800190565b600060208252610e196020830184611173565b60405181810167ffffffffffffffff8111828210171561149d57600080fd5b604052919050565b60005b838110156114c05781810151838201526020016114a8565b838111156104a9575050600091015256fea26469706673582212207ffce686b133899c962d2392c37d7cc417bfb49017cb433d19d525b065f0f46d64736f6c63430007010033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106100625760003560e01c806355304c3f14610067578063715018a61461007c5780638da5cb5b14610084578063961bf9b1146100a2578063c9ff4d25146100b5578063f2fde38b146100ca575b600080fd5b61007a610075366004611061565b6100dd565b005b61007a610179565b61008c6101f8565b604051610099919061127c565b60405180910390f35b61007a6100b0366004611026565b610207565b6100bd61028b565b6040516100999190611290565b61007a6100d836600461100b565b61029c565b6100e5610352565b6000546001600160a01b0390811691161461011b5760405162461bcd60e51b81526004016101129061137c565b60405180910390fd5b60006101276001610356565b905061013460018361035d565b7fcdbba5dd6bffbe47d5f74dbed3cf4a2174815c7186eaa49b32f97af4c47543bf6101606001836104af565b60405161016d919061146b565b60405180910390a15050565b610181610352565b6000546001600160a01b039081169116146101ae5760405162461bcd60e51b81526004016101129061137c565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b61020f610352565b6000546001600160a01b0390811691161461023c5760405162461bcd60e51b81526004016101129061137c565b610244610e79565b61024f600183610783565b905061025c6001836107c1565b7fdc44d9d985df00268149ae57add485c612e57109279f8485035dbe2b2251222b8160405161016d919061146b565b606061029760016109df565b905090565b6102a4610352565b6000546001600160a01b039081169116146102d15760405162461bcd60e51b81526004016101129061137c565b6001600160a01b0381166102f75760405162461bcd60e51b8152600401610112906112f0565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6001015490565b805161036881610d0e565b156103855760405162461bcd60e51b8152600401610112906113b1565b61038f8382610d29565b156103ac5760405162461bcd60e51b815260040161011290611336565b60408051808201825283815260018501546020820152905184906103d19084906111f0565b908152604051602091819003820190208251805180519293919284926103fb928492910190610eb1565b506020828101516001830180546001600160a01b0319166001600160a01b039092169190911790556040830151805161043a9260028501920190610eb1565b5060608201518051610456916003840191602090910190610eb1565b5060808201518051610472916004840191602090910190610eb1565b505050602091820151600590910155600180850180549182018155600090815282902083516104a993919092019190840190610eb1565b50505050565b6104b7610e79565b600183015482106104da5760405162461bcd60e51b8152600401610112906113e8565b826000018360010183815481106104ed57fe5b90600052602060002001604051610504919061120c565b9081526040805160209281900383018120805460026001821615610100026000190190911604601f8101859004909402820160c090810190935260a0820184815291939092849291849184018282801561059f5780601f106105745761010080835404028352916020019161059f565b820191906000526020600020905b81548152906001019060200180831161058257829003601f168201915b50505091835250506001828101546001600160a01b0316602080840191909152600280850180546040805161010096831615969096026000190190911692909204601f810184900484028501840183528085529190940193918301828280156106495780601f1061061e57610100808354040283529160200191610649565b820191906000526020600020905b81548152906001019060200180831161062c57829003601f168201915b505050918352505060038201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156106dd5780601f106106b2576101008083540402835291602001916106dd565b820191906000526020600020905b8154815290600101906020018083116106c057829003601f168201915b505050918352505060048201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156107715780601f1061074657610100808354040283529160200191610771565b820191906000526020600020905b81548152906001019060200180831161075457829003601f168201915b50505050508152505090505b92915050565b61078b610e79565b6107958383610d29565b6107b15760405162461bcd60e51b815260040161011290611429565b60405183906105049084906111f0565b6107ca81610d0e565b156107e75760405162461bcd60e51b8152600401610112906113b1565b6107f18282610d29565b61080d5760405162461bcd60e51b815260040161011290611429565b6000826000018260405161082191906111f0565b90815260405190819003602001902060050154600184018054919250606091600019810190811061084e57fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156108dc5780601f106108b1576101008083540402835291602001916108dc565b820191906000526020600020905b8154815290600101906020018083116108bf57829003601f168201915b505050505090508184600001826040516108f691906111f0565b9081526020016040518091039020600501819055508084600101838154811061091b57fe5b906000526020600020019080519060200190610938929190610eb1565b5060405184906109499085906111f0565b908152604051908190036020019020600081816109668282610f2f565b6001820180546001600160a01b0319169055610986600283016000610f2f565b610994600383016000610f2f565b6109a2600483016000610f2f565b505060058201600090555050836001018054806109bb57fe5b6001900381819060005260206000200160006109d79190610f2f565b905550505050565b6001810154606090818167ffffffffffffffff811180156109ff57600080fd5b50604051908082528060200260200182016040528015610a3957816020015b610a26610e79565b815260200190600190039081610a1e5790505b50905060005b82811015610d065784600001856001018281548110610a5a57fe5b90600052602060002001604051610a71919061120c565b9081526040805160209281900383018120805460026001821615610100026000190190911604601f8101859004909402820160c090810190935260a08201848152919390928492918491840182828015610b0c5780601f10610ae157610100808354040283529160200191610b0c565b820191906000526020600020905b815481529060010190602001808311610aef57829003601f168201915b50505091835250506001828101546001600160a01b0316602080840191909152600280850180546040805161010096831615969096026000190190911692909204601f81018490048402850184018352808552919094019391830182828015610bb65780601f10610b8b57610100808354040283529160200191610bb6565b820191906000526020600020905b815481529060010190602001808311610b9957829003601f168201915b505050918352505060038201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015610c4a5780601f10610c1f57610100808354040283529160200191610c4a565b820191906000526020600020905b815481529060010190602001808311610c2d57829003601f168201915b505050918352505060048201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015610cde5780601f10610cb357610100808354040283529160200191610cde565b820191906000526020600020905b815481529060010190602001808311610cc157829003601f168201915b505050505081525050828281518110610cf357fe5b6020908102919091010152600101610a3f565b509392505050565b600061077d8260405180602001604052806000815250610e20565b6000610d3482610d0e565b158015610d445750600183015415155b8015610e195750610e19836001018460000184604051610d6491906111f0565b90815260200160405180910390206005015481548110610d8057fe5b600091825260209182902001805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015610e0e5780601f10610de357610100808354040283529160200191610e0e565b820191906000526020600020905b815481529060010190602001808311610df157829003601f168201915b505050505083610e20565b9392505050565b600081604051602001610e3391906111f0565b6040516020818303038152906040528051906020012083604051602001610e5a91906111f0565b6040516020818303038152906040528051906020012014905092915050565b6040518060a001604052806060815260200160006001600160a01b031681526020016060815260200160608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610ef257805160ff1916838001178555610f1f565b82800160010185558215610f1f579182015b82811115610f1f578251825591602001919060010190610f04565b50610f2b929150610f76565b5090565b50805460018160011615610100020316600290046000825580601f10610f555750610f73565b601f016020900490600052602060002090810190610f739190610f76565b50565b5b80821115610f2b5760008155600101610f77565b80356001600160a01b038116811461077d57600080fd5b600082601f830112610fb2578081fd5b813567ffffffffffffffff811115610fc8578182fd5b610fdb601f8201601f191660200161147e565b9150808252836020828501011115610ff257600080fd5b8060208401602084013760009082016020015292915050565b60006020828403121561101c578081fd5b610e198383610f8b565b600060208284031215611037578081fd5b813567ffffffffffffffff81111561104d578182fd5b61105984828501610fa2565b949350505050565b600060208284031215611072578081fd5b813567ffffffffffffffff80821115611089578283fd5b9083019060a0828603121561109c578283fd5b6110a660a061147e565b8235828111156110b4578485fd5b6110c087828601610fa2565b8252506110d08660208501610f8b565b60208201526040830135828111156110e6578485fd5b6110f287828601610fa2565b604083015250606083013582811115611109578485fd5b61111587828601610fa2565b60608301525060808301358281111561112c578485fd5b61113887828601610fa2565b60808301525095945050505050565b6000815180845261115f8160208601602086016114a5565b601f01601f19169290920160200192915050565b6000815160a0845261118860a0850182611147565b905060018060a01b036020840151166020850152604083015184820360408601526111b38282611147565b915050606083015184820360608601526111cd8282611147565b915050608083015184820360808601526111e78282611147565b95945050505050565b600082516112028184602087016114a5565b9190910192915050565b600080835460018082166000811461122b576001811461124257611271565b60ff198316865260028304607f1686019350611271565b600283048786526020808720875b838110156112695781548a820152908501908201611250565b505050860193505b509195945050505050565b6001600160a01b0391909116815260200190565b6000602080830181845280855180835260408601915060408482028701019250838701855b828110156112e357603f198886030184526112d1858351611173565b945092850192908501906001016112b5565b5092979650505050505050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526026908201527f4c69624974657261626c654d617070696e673a204e414d455f414c524541445960408201526517d05111115160d21b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601e908201527f4c69624974657261626c654d617070696e673a20454d5054595f4e414d450000604082015260600190565b60208082526021908201527f4c69624974657261626c654d617070696e673a20494e56414c49445f494e44456040820152600b60fb1b606082015260800190565b60208082526022908201527f4c69624974657261626c654d617070696e673a204e414d455f4e4f545f464f55604082015261139160f21b606082015260800190565b600060208252610e196020830184611173565b60405181810167ffffffffffffffff8111828210171561149d57600080fd5b604052919050565b60005b838110156114c05781810151838201526020016114a8565b838111156104a9575050600091015256fea26469706673582212207ffce686b133899c962d2392c37d7cc417bfb49017cb433d19d525b065f0f46d64736f6c63430007010033","devdoc":{"author":"Connext <support@connext.network>","kind":"dev","methods":{"addTransferDefinition((string,address,string,string,bytes))":{"details":"Should add a transfer definition to the registry"},"getTransferDefinitions()":{"details":"Should return all transfer defintions in registry"},"owner()":{"details":"Returns the address of the current owner."},"removeTransferDefinition(string)":{"details":"Should remove a transfer definition from the registry"},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"title":"TransferRegistry","version":1},"userdoc":{"kind":"user","methods":{},"notice":"The TransferRegistry maintains an onchain record of all         supported transfers (specifically holds the registry information         defined within the contracts). The offchain protocol uses         this information to get the correct encodings when generating         signatures. The information stored here can only be updated         by the owner of the contract","version":1},"storageLayout":{"storage":[{"astId":30,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":3458,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"transfers","offset":0,"slot":"1","type":"t_struct(IterableMapping)4424_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_string_storage)dyn_storage":{"base":"t_string_storage","encoding":"dynamic_array","label":"string[]","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_mapping(t_string_memory_ptr,t_struct(TransferDefinitionWithIndex)4416_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => struct LibIterableMapping.TransferDefinitionWithIndex)","numberOfBytes":"32","value":"t_struct(TransferDefinitionWithIndex)4416_storage"},"t_string_memory_ptr":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(IterableMapping)4424_storage":{"encoding":"inplace","label":"struct LibIterableMapping.IterableMapping","members":[{"astId":4420,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"transfers","offset":0,"slot":"0","type":"t_mapping(t_string_memory_ptr,t_struct(TransferDefinitionWithIndex)4416_storage)"},{"astId":4423,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"names","offset":0,"slot":"1","type":"t_array(t_string_storage)dyn_storage"}],"numberOfBytes":"64"},"t_struct(RegisteredTransfer)3967_storage":{"encoding":"inplace","label":"struct RegisteredTransfer","members":[{"astId":3958,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":3960,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"definition","offset":0,"slot":"1","type":"t_address"},{"astId":3962,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"stateEncoding","offset":0,"slot":"2","type":"t_string_storage"},{"astId":3964,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"resolverEncoding","offset":0,"slot":"3","type":"t_string_storage"},{"astId":3966,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"encodedCancel","offset":0,"slot":"4","type":"t_bytes_storage"}],"numberOfBytes":"160"},"t_struct(TransferDefinitionWithIndex)4416_storage":{"encoding":"inplace","label":"struct LibIterableMapping.TransferDefinitionWithIndex","members":[{"astId":4413,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"transfer","offset":0,"slot":"0","type":"t_struct(RegisteredTransfer)3967_storage"},{"astId":4415,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"index","offset":0,"slot":"5","type":"t_uint256"}],"numberOfBytes":"192"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}}}')},2841:function(e){e.exports=JSON.parse('{"address":"0xed911640fd86f92fD1337526010adda8F3Eb8344","abi":[{"inputs":[],"name":"EncodedCancel","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"Name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ResolverEncoding","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"StateEncoding","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"encodedBalance","type":"bytes"},{"internalType":"bytes","name":"encodedState","type":"bytes"}],"name":"create","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"getRegistryInformation","outputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"address","name":"definition","type":"address"},{"internalType":"string","name":"stateEncoding","type":"string"},{"internalType":"string","name":"resolverEncoding","type":"string"},{"internalType":"bytes","name":"encodedCancel","type":"bytes"}],"internalType":"struct RegisteredTransfer","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"encodedBalance","type":"bytes"},{"internalType":"bytes","name":"encodedState","type":"bytes"},{"internalType":"bytes","name":"encodedResolver","type":"bytes"}],"name":"resolve","outputs":[{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"}],"transactionHash":"0x104e0bcf6d944a2dc8d43e048b0cd933a0d5f3e15641cea8facb5493a5dd6608","receipt":{"to":null,"from":"0xd4b33434Cb36df9286Ef5132FCFb8062c96aC56E","contractAddress":"0xed911640fd86f92fD1337526010adda8F3Eb8344","transactionIndex":5,"gasUsed":"1069621","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","blockHash":"0x0d4aee56e26439e0a772f5b99b74e42709effb0814df7401ee3d1f40fa11ec40","transactionHash":"0x104e0bcf6d944a2dc8d43e048b0cd933a0d5f3e15641cea8facb5493a5dd6608","logs":[],"blockNumber":14465804,"cumulativeGasUsed":"4929794","status":1,"byzantium":true},"args":[],"solcInputHash":"89c55d5a88f10637860a9ea31a1daad3","metadata":"{\\"compiler\\":{\\"version\\":\\"0.7.1+commit.f4a555be\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[],\\"name\\":\\"EncodedCancel\\",\\"outputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"\\",\\"type\\":\\"bytes\\"}],\\"stateMutability\\":\\"pure\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"Name\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"ResolverEncoding\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"StateEncoding\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedBalance\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedState\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"create\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"pure\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getRegistryInformation\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"definition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"stateEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"resolverEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedCancel\\",\\"type\\":\\"bytes\\"}],\\"internalType\\":\\"struct RegisteredTransfer\\",\\"name\\":\\"\\",\\"type\\":\\"tuple\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedBalance\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedState\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedResolver\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"resolve\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"\\",\\"type\\":\\"tuple\\"}],\\"stateMutability\\":\\"pure\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"author\\":\\"Connext <support@connext.network>\\",\\"kind\\":\\"dev\\",\\"methods\\":{},\\"title\\":\\"Withdraw\\",\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"notice\\":\\"This contract burns the initiator\'s funds if a mutually signed         withdraw commitment can be generated\\",\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"src.sol/transferDefinitions/Withdraw.sol\\":\\"Withdraw\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\\\n *\\\\n * These functions can be used to verify that a message was signed by the holder\\\\n * of the private keys of a given address.\\\\n */\\\\nlibrary ECDSA {\\\\n    /**\\\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\\\n     * `signature`. This address can then be used for verification purposes.\\\\n     *\\\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\\\n     * this function rejects them by requiring the `s` value to be in the lower\\\\n     * half order, and the `v` value to be either 27 or 28.\\\\n     *\\\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\\\n     * verification to be secure: it is possible to craft signatures that\\\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\\\n     * this is by receiving a hash of the original message (which may otherwise\\\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\\\n     */\\\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\\\n        // Check the signature length\\\\n        if (signature.length != 65) {\\\\n            revert(\\\\\\"ECDSA: invalid signature length\\\\\\");\\\\n        }\\\\n\\\\n        // Divide the signature in r, s and v variables\\\\n        bytes32 r;\\\\n        bytes32 s;\\\\n        uint8 v;\\\\n\\\\n        // ecrecover takes the signature parameters, and the only way to get them\\\\n        // currently is to use assembly.\\\\n        // solhint-disable-next-line no-inline-assembly\\\\n        assembly {\\\\n            r := mload(add(signature, 0x20))\\\\n            s := mload(add(signature, 0x40))\\\\n            v := byte(0, mload(add(signature, 0x60)))\\\\n        }\\\\n\\\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\\\n        // the valid range for s in (281): 0 < s < secp256k1n \\\\u00f7 2 + 1, and for v in (282): v \\\\u2208 {27, 28}. Most\\\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\\\n        //\\\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\\\n        // these malleable signatures as well.\\\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\\\n            revert(\\\\\\"ECDSA: invalid signature \'s\' value\\\\\\");\\\\n        }\\\\n\\\\n        if (v != 27 && v != 28) {\\\\n            revert(\\\\\\"ECDSA: invalid signature \'v\' value\\\\\\");\\\\n        }\\\\n\\\\n        // If the signature is valid (and not malleable), return the signer address\\\\n        address signer = ecrecover(hash, v, r, s);\\\\n        require(signer != address(0), \\\\\\"ECDSA: invalid signature\\\\\\");\\\\n\\\\n        return signer;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\\\n     * replicates the behavior of the\\\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\\\n     * JSON-RPC method.\\\\n     *\\\\n     * See {recover}.\\\\n     */\\\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\\\n        // 32 is the length in bytes of hash,\\\\n        // enforced by the type signature above\\\\n        return keccak256(abi.encodePacked(\\\\\\"\\\\\\\\x19Ethereum Signed Message:\\\\\\\\n32\\\\\\", hash));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf25c49d2be2d28918ae6de7e9724238367dabe50631ec8fd23d1cdae2cb70262\\",\\"license\\":\\"MIT\\"},\\"src.sol/interfaces/ITransferDefinition.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./ITransferRegistry.sol\\\\\\";\\\\nimport \\\\\\"./Types.sol\\\\\\";\\\\n\\\\ninterface ITransferDefinition {\\\\n    // Validates the initial state of the transfer.\\\\n    // Called by validator.ts during `create` updates.\\\\n    function create(bytes calldata encodedBalance, bytes calldata)\\\\n        external\\\\n        view\\\\n        returns (bool);\\\\n\\\\n    // Performs a state transition to resolve a transfer and returns final balances.\\\\n    // Called by validator.ts during `resolve` updates.\\\\n    function resolve(\\\\n        bytes calldata encodedBalance,\\\\n        bytes calldata,\\\\n        bytes calldata\\\\n    ) external view returns (Balance memory);\\\\n\\\\n    // Should also have the following properties:\\\\n    // string public constant override Name = \\\\\\"...\\\\\\";\\\\n    // string public constant override StateEncoding = \\\\\\"...\\\\\\";\\\\n    // string public constant override ResolverEncoding = \\\\\\"...\\\\\\";\\\\n    // These properties are included on the transfer specifically\\\\n    // to make it easier for implementers to add new transfers by\\\\n    // only include a `.sol` file\\\\n    function Name() external view returns (string memory);\\\\n\\\\n    function StateEncoding() external view returns (string memory);\\\\n\\\\n    function ResolverEncoding() external view returns (string memory);\\\\n\\\\n    function EncodedCancel() external view returns (bytes memory);\\\\n\\\\n    function getRegistryInformation()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd8eef575aa791b187397c9096e6cf40431b590d3999f0a80e38f3e59f4cf4764\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ITransferRegistry.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental \\\\\\"ABIEncoderV2\\\\\\";\\\\n\\\\nstruct RegisteredTransfer {\\\\n    string name;\\\\n    address definition;\\\\n    string stateEncoding;\\\\n    string resolverEncoding;\\\\n    bytes encodedCancel;\\\\n}\\\\n\\\\ninterface ITransferRegistry {\\\\n    event TransferAdded(RegisteredTransfer transfer);\\\\n\\\\n    event TransferRemoved(RegisteredTransfer transfer);\\\\n\\\\n    // Should add a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function addTransferDefinition(RegisteredTransfer memory transfer) external;\\\\n\\\\n    // Should remove a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function removeTransferDefinition(string memory name) external;\\\\n\\\\n    // Should return all transfer defintions in registry\\\\n    function getTransferDefinitions()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer[] memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd13be6d976c64e381a0d9df10c621cd964454b6916f25df4ea6c1b4cd873a58a\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/Types.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nstruct Balance {\\\\n    uint256[2] amount; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n    address payable[2] to; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf8c71b155b630cde965f5d1db5f0d2751a9763f5a797f15d946613e9224f1046\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibChannelCrypto.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\\\\\";\\\\n\\\\t\\\\t\\\\n/// @author Connext <support@connext.network>\\\\t\\\\t\\\\n/// @notice This library contains helpers for recovering signatures from a\\\\t\\\\t\\\\n///         Vector commitments. Channels do not allow for arbitrary signing of\\\\t\\\\t\\\\n///         messages to prevent misuse of private keys by injected providers,\\\\t\\\\t\\\\n///         and instead only sign messages with a Vector channel prefix.\\\\nlibrary LibChannelCrypto {\\\\n    function checkSignature(\\\\n        bytes32 hash,\\\\n        bytes memory signature,\\\\n        address allegedSigner\\\\n    ) internal pure returns (bool) {\\\\n        return recoverChannelMessageSigner(hash, signature) == allegedSigner;\\\\n    }\\\\n\\\\n    function recoverChannelMessageSigner(bytes32 hash, bytes memory signature)\\\\n        internal\\\\n        pure\\\\n        returns (address)\\\\n    {\\\\n        bytes32 digest = toChannelSignedMessage(hash);\\\\n        return ECDSA.recover(digest, signature);\\\\n    }\\\\n\\\\n    function toChannelSignedMessage(bytes32 hash)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        // 32 is the length in bytes of hash,\\\\n        // enforced by the type signature above\\\\n        return\\\\n            keccak256(abi.encodePacked(\\\\\\"\\\\\\\\x16Vector Signed Message:\\\\\\\\n32\\\\\\", hash));\\\\n    }\\\\n\\\\n    function checkUtilitySignature(\\\\n        bytes32 hash,\\\\n        bytes memory signature,\\\\n        address allegedSigner\\\\n    ) internal pure returns (bool) {\\\\n        return recoverChannelMessageSigner(hash, signature) == allegedSigner;\\\\n    }\\\\n\\\\n    function recoverUtilityMessageSigner(bytes32 hash, bytes memory signature)\\\\n        internal\\\\n        pure\\\\n        returns (address)\\\\n    {\\\\n        bytes32 digest = toUtilitySignedMessage(hash);\\\\n        return ECDSA.recover(digest, signature);\\\\n    }\\\\n\\\\n    function toUtilitySignedMessage(bytes32 hash)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        // 32 is the length in bytes of hash,\\\\n        // enforced by the type signature above\\\\n        return\\\\n            keccak256(abi.encodePacked(\\\\\\"\\\\\\\\x17Utility Signed Message:\\\\\\\\n32\\\\\\", hash));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xb8aa3679b75f2a1a5785f614f5dff9a76a689c18caa56a8df1f4e3c3167d6ece\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/transferDefinitions/TransferDefinition.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"../interfaces/ITransferDefinition.sol\\\\\\";\\\\nimport \\\\\\"../interfaces/ITransferRegistry.sol\\\\\\";\\\\n\\\\n/// @title TransferDefinition\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This contract helps reduce boilerplate needed when creating\\\\n///         new transfer definitions by providing an implementation of\\\\n///         the required getter\\\\n\\\\nabstract contract TransferDefinition is ITransferDefinition {\\\\n    function getRegistryInformation()\\\\n        external\\\\n        view\\\\n        override\\\\n        returns (RegisteredTransfer memory)\\\\n    {\\\\n        return\\\\n            RegisteredTransfer({\\\\n                name: this.Name(),\\\\n                stateEncoding: this.StateEncoding(),\\\\n                resolverEncoding: this.ResolverEncoding(),\\\\n                definition: address(this),\\\\n                encodedCancel: this.EncodedCancel()\\\\n            });\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xdb8bcb3fadd5c514bc6585b0a48d66952570bbb1a62f18b9dc9a4f693dc11c5e\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/transferDefinitions/Withdraw.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./TransferDefinition.sol\\\\\\";\\\\nimport \\\\\\"../lib/LibChannelCrypto.sol\\\\\\";\\\\n\\\\n/// @title Withdraw\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This contract burns the initiator\'s funds if a mutually signed\\\\n///         withdraw commitment can be generated\\\\n\\\\ncontract Withdraw is TransferDefinition {\\\\n    using LibChannelCrypto for bytes32;\\\\n\\\\n    struct TransferState {\\\\n        bytes initiatorSignature;\\\\n        address initiator;\\\\n        address responder;\\\\n        bytes32 data;\\\\n        uint256 nonce; // included so that each withdraw commitment has a unique hash\\\\n        uint256 fee;\\\\n        address callTo;\\\\n        bytes callData;\\\\n    }\\\\n\\\\n    struct TransferResolver {\\\\n        bytes responderSignature;\\\\n    }\\\\n\\\\n    // Provide registry information\\\\n    string public constant override Name = \\\\\\"Withdraw\\\\\\";\\\\n    string public constant override StateEncoding =\\\\n        \\\\\\"tuple(bytes initiatorSignature, address initiator, address responder, bytes32 data, uint256 nonce, uint256 fee, address callTo, bytes callData)\\\\\\";\\\\n    string public constant override ResolverEncoding =\\\\n        \\\\\\"tuple(bytes responderSignature)\\\\\\";\\\\n\\\\n    function EncodedCancel() external pure override returns(bytes memory) {\\\\n      TransferResolver memory resolver;\\\\n      resolver.responderSignature = new bytes(65);\\\\n      return abi.encode(resolver);\\\\n    }\\\\n\\\\n    function create(bytes calldata encodedBalance, bytes calldata encodedState)\\\\n        external\\\\n        pure\\\\n        override\\\\n        returns (bool)\\\\n    {\\\\n        // Get unencoded information\\\\n        TransferState memory state = abi.decode(encodedState, (TransferState));\\\\n        Balance memory balance = abi.decode(encodedBalance, (Balance));\\\\n\\\\n        require(balance.amount[1] == 0, \\\\\\"Withdraw: NONZERO_RECIPIENT_BALANCE\\\\\\");\\\\n        require(\\\\n            state.initiator != address(0) && state.responder != address(0),\\\\n            \\\\\\"Withdraw: EMPTY_SIGNERS\\\\\\"\\\\n        );\\\\n        require(state.data != bytes32(0), \\\\\\"Withdraw: EMPTY_DATA\\\\\\");\\\\n        require(state.nonce != uint256(0), \\\\\\"Withdraw: EMPTY_NONCE\\\\\\");\\\\n        require(\\\\n            state.fee <= balance.amount[0],\\\\n            \\\\\\"Withdraw: INSUFFICIENT_BALANCE\\\\\\"\\\\n        );\\\\n        require(\\\\n            state.data.checkSignature(\\\\n                state.initiatorSignature,\\\\n                state.initiator\\\\n            ),\\\\n            \\\\\\"Withdraw: INVALID_INITIATOR_SIG\\\\\\"\\\\n        );\\\\n        \\\\n        // Valid initial transfer state\\\\n        return true;\\\\n    }\\\\n\\\\n    function resolve(\\\\n        bytes calldata encodedBalance,\\\\n        bytes calldata encodedState,\\\\n        bytes calldata encodedResolver\\\\n    ) external pure override returns (Balance memory) {\\\\n        TransferState memory state = abi.decode(encodedState, (TransferState));\\\\n        TransferResolver memory resolver =\\\\n            abi.decode(encodedResolver, (TransferResolver));\\\\n        Balance memory balance = abi.decode(encodedBalance, (Balance));\\\\n\\\\n        // Allow for a withdrawal to be canceled if an empty signature is \\\\n        // passed in. Should have *specific* cancellation action, not just\\\\n        // any invalid sig\\\\n        bytes memory b = new bytes(65);\\\\n        if (keccak256(resolver.responderSignature) == keccak256(b)) {\\\\n            // Withdraw should be cancelled, no state manipulation needed\\\\n        } else {\\\\n            require(\\\\n                state.data.checkSignature(\\\\n                    resolver.responderSignature,\\\\n                    state.responder\\\\n                ),\\\\n                \\\\\\"Withdraw: INVALID_RESPONDER_SIG\\\\\\"\\\\n            );\\\\n            // Reduce withdraw amount by optional fee\\\\n            // It\'s up to the offchain validators to ensure that the withdraw commitment takes this fee into account\\\\n            balance.amount[1] = state.fee;\\\\n            balance.amount[0] = 0;\\\\n        }\\\\n\\\\n        return balance;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x012e5deb93a2d67452884dff9179274801a30abf2455833eb4c59a42a87c50b0\\",\\"license\\":\\"UNLICENSED\\"}},\\"version\\":1}","bytecode":"0x608060405234801561001057600080fd5b50611263806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638052474d1161005b5780638052474d146100bd5780638de8b77e146100c55780638ef98a7e146100cd57806394184ba9146100ed5761007d565b80630528aa1c14610082578063206162be146100a05780633722aff9146100b5575b600080fd5b61008a61010d565b6040516100979190610d6e565b60405180910390f35b6100a861015c565b6040516100979190611060565b61008a610368565b61008a6103a1565b61008a6103c5565b6100e06100db3660046109fc565b6103e1565b6040516100979190610ff6565b6101006100fb366004610993565b6104ca565b6040516100979190610d45565b60606101176107b0565b604080516041808252608082019092529060208201818036833750505081526040516101479082906020016110f0565b60405160208183030381529060405291505090565b6101646107c3565b6040518060a00160405280306001600160a01b0316638052474d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156101a857600080fd5b505afa1580156101bc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101e49190810190610a92565b8152602001306001600160a01b03168152602001306001600160a01b0316638de8b77e6040518163ffffffff1660e01b815260040160006040518083038186803b15801561023157600080fd5b505afa158015610245573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261026d9190810190610a92565b8152602001306001600160a01b0316633722aff96040518163ffffffff1660e01b815260040160006040518083038186803b1580156102ab57600080fd5b505afa1580156102bf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102e79190810190610a92565b8152602001306001600160a01b0316630528aa1c6040518163ffffffff1660e01b815260040160006040518083038186803b15801561032557600080fd5b505afa158015610339573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103619190810190610a92565b9052905090565b6040518060400160405280601f81526020017f7475706c6528627974657320726573706f6e6465725369676e6174757265290081525081565b60405180604001604052806008815260200167576974686472617760c01b81525081565b6040518060c00160405280608f815260200161119f608f913981565b6103e96107fb565b6103f1610820565b6103fd85870187610c02565b90506104076107b0565b61041384860186610b97565b905061041d6107fb565b610429898b018b610ac5565b60408051604180825260808201909252919250606091906020820181803683370190505090508080519060200120836000015180519060200120141561046e576104bc565b825160408501516060860151610485929091610608565b6104aa5760405162461bcd60e51b81526004016104a190610fbf565b60405180910390fd5b60a08401518251602001528151600090525b509998505050505050505050565b60006104d4610820565b6104e083850185610c02565b90506104ea6107fb565b6104f686880188610ac5565b8051602001519091501561051c5760405162461bcd60e51b81526004016104a190610f1f565b60208201516001600160a01b031615801590610544575060408201516001600160a01b031615155b6105605760405162461bcd60e51b81526004016104a190610df6565b60608201516105815760405162461bcd60e51b81526004016104a190610f62565b60808201516105a25760405162461bcd60e51b81526004016104a190610f90565b80515160a083015111156105c85760405162461bcd60e51b81526004016104a190610ea6565b8151602083015160608401516105df929091610608565b6105fb5760405162461bcd60e51b81526004016104a190610e6f565b5060019695505050505050565b6000816001600160a01b031661061e8585610630565b6001600160a01b031614949350505050565b60008061063c84610652565b90506106488184610682565b9150505b92915050565b6000816040516020016106659190610d14565b604051602081830303815290604052805190602001209050919050565b600081516041146106a55760405162461bcd60e51b81526004016104a190610dbf565b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156106f75760405162461bcd60e51b81526004016104a190610e2d565b8060ff16601b1415801561070f57508060ff16601c14155b1561072c5760405162461bcd60e51b81526004016104a190610edd565b6000600187838686604051600081526020016040526040516107519493929190610d50565b6020604051602081039080840390855afa158015610773573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166107a65760405162461bcd60e51b81526004016104a190610d88565b9695505050505050565b6040518060200160405280606081525090565b6040518060a001604052806060815260200160006001600160a01b031681526020016060815260200160608152602001606081525090565b604051806040016040528061080e610883565b815260200161081b610883565b905290565b6040518061010001604052806060815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008019168152602001600081526020016000815260200160006001600160a01b03168152602001606081525090565b60405180604001604052806002906020820280368337509192915050565b803561064c81611186565b60008083601f8401126108bd578182fd5b50813567ffffffffffffffff8111156108d4578182fd5b6020830191508360208285010111156108ec57600080fd5b9250929050565b600082601f830112610903578081fd5b813561091661091182611132565b61110b565b915080825283602082850101111561092d57600080fd5b8060208401602084013760009082016020015292915050565b600082601f830112610956578081fd5b815161096461091182611132565b915080825283602082850101111561097b57600080fd5b61098c816020840160208601611156565b5092915050565b600080600080604085870312156109a8578384fd5b843567ffffffffffffffff808211156109bf578586fd5b6109cb888389016108ac565b909650945060208701359150808211156109e3578384fd5b506109f0878288016108ac565b95989497509550505050565b60008060008060008060608789031215610a14578182fd5b863567ffffffffffffffff80821115610a2b578384fd5b610a378a838b016108ac565b90985096506020890135915080821115610a4f578384fd5b610a5b8a838b016108ac565b90965094506040890135915080821115610a73578384fd5b50610a8089828a016108ac565b979a9699509497509295939492505050565b600060208284031215610aa3578081fd5b815167ffffffffffffffff811115610ab9578182fd5b61064884828501610946565b600060808284031215610ad6578081fd5b610ae0604061110b565b83601f840112610aee578182fd5b610af8604061110b565b80846040860187811115610b0a578586fd5b855b6002811015610b2b578235855260209485019490920191600101610b0c565b5082855287605f880112610b3d578586fd5b610b47604061110b565b9350839250905060808601871015610b5d578485fd5b845b6002811015610b88578135610b7381611186565b84526020938401939190910190600101610b5f565b50506020830152509392505050565b600060208284031215610ba8578081fd5b813567ffffffffffffffff80821115610bbf578283fd5b9083019060208286031215610bd2578283fd5b610bdc602061110b565b823582811115610bea578485fd5b610bf6878286016108f3565b82525095945050505050565b600060208284031215610c13578081fd5b813567ffffffffffffffff80821115610c2a578283fd5b8184019150610100808387031215610c40578384fd5b610c498161110b565b9050823582811115610c59578485fd5b610c65878286016108f3565b825250610c7586602085016108a1565b6020820152610c8786604085016108a1565b6040820152606083013560608201526080830135608082015260a083013560a0820152610cb78660c085016108a1565b60c082015260e083013582811115610ccd578485fd5b610cd9878286016108f3565b60e08301525095945050505050565b60008151808452610d00816020860160208601611156565b601f01601f19169290920160200192915050565b7f16566563746f72205369676e6564204d6573736167653a0a33320000000000008152601a810191909152603a0190565b901515815260200190565b93845260ff9290921660208401526040830152606082015260800190565b600060208252610d816020830184610ce8565b9392505050565b60208082526018908201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604082015260600190565b6020808252601f908201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604082015260600190565b60208082526017908201527f57697468647261773a20454d5054595f5349474e455253000000000000000000604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604082015261756560f01b606082015260800190565b6020808252601f908201527f57697468647261773a20494e56414c49445f494e49544941544f525f53494700604082015260600190565b6020808252601e908201527f57697468647261773a20494e53554646494349454e545f42414c414e43450000604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604082015261756560f01b606082015260800190565b60208082526023908201527f57697468647261773a204e4f4e5a45524f5f524543495049454e545f42414c416040820152624e434560e81b606082015260800190565b60208082526014908201527357697468647261773a20454d5054595f4441544160601b604082015260600190565b60208082526015908201527457697468647261773a20454d5054595f4e4f4e434560581b604082015260600190565b6020808252601f908201527f57697468647261773a20494e56414c49445f524553504f4e4445525f53494700604082015260600190565b815160808201908260005b6002811015611020578251825260209283019290910190600101611001565b5050506020808401516040840160005b60028110156110565782516001600160a01b031682529183019190830190600101611030565b5050505092915050565b600060208252825160a0602084015261107c60c0840182610ce8565b905060018060a01b0360208501511660408401526040840151601f19808584030160608601526110ac8383610ce8565b925060608601519150808584030160808601526110c98383610ce8565b925060808601519150808584030160a0860152506110e78282610ce8565b95945050505050565b60006020825282516020808401526106486040840182610ce8565b60405181810167ffffffffffffffff8111828210171561112a57600080fd5b604052919050565b600067ffffffffffffffff821115611148578081fd5b50601f01601f191660200190565b60005b83811015611171578181015183820152602001611159565b83811115611180576000848401525b50505050565b6001600160a01b038116811461119b57600080fd5b5056fe7475706c6528627974657320696e69746961746f725369676e61747572652c206164647265737320696e69746961746f722c206164647265737320726573706f6e6465722c206279746573333220646174612c2075696e74323536206e6f6e63652c2075696e74323536206665652c20616464726573732063616c6c546f2c2062797465732063616c6c4461746129a2646970667358221220e6c29ec66c4575ed5816330cc0372206a95865e0e0b591d5a21001f4a374293764736f6c63430007010033","deployedBytecode":"0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80638052474d1161005b5780638052474d146100bd5780638de8b77e146100c55780638ef98a7e146100cd57806394184ba9146100ed5761007d565b80630528aa1c14610082578063206162be146100a05780633722aff9146100b5575b600080fd5b61008a61010d565b6040516100979190610d6e565b60405180910390f35b6100a861015c565b6040516100979190611060565b61008a610368565b61008a6103a1565b61008a6103c5565b6100e06100db3660046109fc565b6103e1565b6040516100979190610ff6565b6101006100fb366004610993565b6104ca565b6040516100979190610d45565b60606101176107b0565b604080516041808252608082019092529060208201818036833750505081526040516101479082906020016110f0565b60405160208183030381529060405291505090565b6101646107c3565b6040518060a00160405280306001600160a01b0316638052474d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156101a857600080fd5b505afa1580156101bc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101e49190810190610a92565b8152602001306001600160a01b03168152602001306001600160a01b0316638de8b77e6040518163ffffffff1660e01b815260040160006040518083038186803b15801561023157600080fd5b505afa158015610245573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261026d9190810190610a92565b8152602001306001600160a01b0316633722aff96040518163ffffffff1660e01b815260040160006040518083038186803b1580156102ab57600080fd5b505afa1580156102bf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102e79190810190610a92565b8152602001306001600160a01b0316630528aa1c6040518163ffffffff1660e01b815260040160006040518083038186803b15801561032557600080fd5b505afa158015610339573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103619190810190610a92565b9052905090565b6040518060400160405280601f81526020017f7475706c6528627974657320726573706f6e6465725369676e6174757265290081525081565b60405180604001604052806008815260200167576974686472617760c01b81525081565b6040518060c00160405280608f815260200161119f608f913981565b6103e96107fb565b6103f1610820565b6103fd85870187610c02565b90506104076107b0565b61041384860186610b97565b905061041d6107fb565b610429898b018b610ac5565b60408051604180825260808201909252919250606091906020820181803683370190505090508080519060200120836000015180519060200120141561046e576104bc565b825160408501516060860151610485929091610608565b6104aa5760405162461bcd60e51b81526004016104a190610fbf565b60405180910390fd5b60a08401518251602001528151600090525b509998505050505050505050565b60006104d4610820565b6104e083850185610c02565b90506104ea6107fb565b6104f686880188610ac5565b8051602001519091501561051c5760405162461bcd60e51b81526004016104a190610f1f565b60208201516001600160a01b031615801590610544575060408201516001600160a01b031615155b6105605760405162461bcd60e51b81526004016104a190610df6565b60608201516105815760405162461bcd60e51b81526004016104a190610f62565b60808201516105a25760405162461bcd60e51b81526004016104a190610f90565b80515160a083015111156105c85760405162461bcd60e51b81526004016104a190610ea6565b8151602083015160608401516105df929091610608565b6105fb5760405162461bcd60e51b81526004016104a190610e6f565b5060019695505050505050565b6000816001600160a01b031661061e8585610630565b6001600160a01b031614949350505050565b60008061063c84610652565b90506106488184610682565b9150505b92915050565b6000816040516020016106659190610d14565b604051602081830303815290604052805190602001209050919050565b600081516041146106a55760405162461bcd60e51b81526004016104a190610dbf565b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156106f75760405162461bcd60e51b81526004016104a190610e2d565b8060ff16601b1415801561070f57508060ff16601c14155b1561072c5760405162461bcd60e51b81526004016104a190610edd565b6000600187838686604051600081526020016040526040516107519493929190610d50565b6020604051602081039080840390855afa158015610773573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166107a65760405162461bcd60e51b81526004016104a190610d88565b9695505050505050565b6040518060200160405280606081525090565b6040518060a001604052806060815260200160006001600160a01b031681526020016060815260200160608152602001606081525090565b604051806040016040528061080e610883565b815260200161081b610883565b905290565b6040518061010001604052806060815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008019168152602001600081526020016000815260200160006001600160a01b03168152602001606081525090565b60405180604001604052806002906020820280368337509192915050565b803561064c81611186565b60008083601f8401126108bd578182fd5b50813567ffffffffffffffff8111156108d4578182fd5b6020830191508360208285010111156108ec57600080fd5b9250929050565b600082601f830112610903578081fd5b813561091661091182611132565b61110b565b915080825283602082850101111561092d57600080fd5b8060208401602084013760009082016020015292915050565b600082601f830112610956578081fd5b815161096461091182611132565b915080825283602082850101111561097b57600080fd5b61098c816020840160208601611156565b5092915050565b600080600080604085870312156109a8578384fd5b843567ffffffffffffffff808211156109bf578586fd5b6109cb888389016108ac565b909650945060208701359150808211156109e3578384fd5b506109f0878288016108ac565b95989497509550505050565b60008060008060008060608789031215610a14578182fd5b863567ffffffffffffffff80821115610a2b578384fd5b610a378a838b016108ac565b90985096506020890135915080821115610a4f578384fd5b610a5b8a838b016108ac565b90965094506040890135915080821115610a73578384fd5b50610a8089828a016108ac565b979a9699509497509295939492505050565b600060208284031215610aa3578081fd5b815167ffffffffffffffff811115610ab9578182fd5b61064884828501610946565b600060808284031215610ad6578081fd5b610ae0604061110b565b83601f840112610aee578182fd5b610af8604061110b565b80846040860187811115610b0a578586fd5b855b6002811015610b2b578235855260209485019490920191600101610b0c565b5082855287605f880112610b3d578586fd5b610b47604061110b565b9350839250905060808601871015610b5d578485fd5b845b6002811015610b88578135610b7381611186565b84526020938401939190910190600101610b5f565b50506020830152509392505050565b600060208284031215610ba8578081fd5b813567ffffffffffffffff80821115610bbf578283fd5b9083019060208286031215610bd2578283fd5b610bdc602061110b565b823582811115610bea578485fd5b610bf6878286016108f3565b82525095945050505050565b600060208284031215610c13578081fd5b813567ffffffffffffffff80821115610c2a578283fd5b8184019150610100808387031215610c40578384fd5b610c498161110b565b9050823582811115610c59578485fd5b610c65878286016108f3565b825250610c7586602085016108a1565b6020820152610c8786604085016108a1565b6040820152606083013560608201526080830135608082015260a083013560a0820152610cb78660c085016108a1565b60c082015260e083013582811115610ccd578485fd5b610cd9878286016108f3565b60e08301525095945050505050565b60008151808452610d00816020860160208601611156565b601f01601f19169290920160200192915050565b7f16566563746f72205369676e6564204d6573736167653a0a33320000000000008152601a810191909152603a0190565b901515815260200190565b93845260ff9290921660208401526040830152606082015260800190565b600060208252610d816020830184610ce8565b9392505050565b60208082526018908201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604082015260600190565b6020808252601f908201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604082015260600190565b60208082526017908201527f57697468647261773a20454d5054595f5349474e455253000000000000000000604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604082015261756560f01b606082015260800190565b6020808252601f908201527f57697468647261773a20494e56414c49445f494e49544941544f525f53494700604082015260600190565b6020808252601e908201527f57697468647261773a20494e53554646494349454e545f42414c414e43450000604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604082015261756560f01b606082015260800190565b60208082526023908201527f57697468647261773a204e4f4e5a45524f5f524543495049454e545f42414c416040820152624e434560e81b606082015260800190565b60208082526014908201527357697468647261773a20454d5054595f4441544160601b604082015260600190565b60208082526015908201527457697468647261773a20454d5054595f4e4f4e434560581b604082015260600190565b6020808252601f908201527f57697468647261773a20494e56414c49445f524553504f4e4445525f53494700604082015260600190565b815160808201908260005b6002811015611020578251825260209283019290910190600101611001565b5050506020808401516040840160005b60028110156110565782516001600160a01b031682529183019190830190600101611030565b5050505092915050565b600060208252825160a0602084015261107c60c0840182610ce8565b905060018060a01b0360208501511660408401526040840151601f19808584030160608601526110ac8383610ce8565b925060608601519150808584030160808601526110c98383610ce8565b925060808601519150808584030160a0860152506110e78282610ce8565b95945050505050565b60006020825282516020808401526106486040840182610ce8565b60405181810167ffffffffffffffff8111828210171561112a57600080fd5b604052919050565b600067ffffffffffffffff821115611148578081fd5b50601f01601f191660200190565b60005b83811015611171578181015183820152602001611159565b83811115611180576000848401525b50505050565b6001600160a01b038116811461119b57600080fd5b5056fe7475706c6528627974657320696e69746961746f725369676e61747572652c206164647265737320696e69746961746f722c206164647265737320726573706f6e6465722c206279746573333220646174612c2075696e74323536206e6f6e63652c2075696e74323536206665652c20616464726573732063616c6c546f2c2062797465732063616c6c4461746129a2646970667358221220e6c29ec66c4575ed5816330cc0372206a95865e0e0b591d5a21001f4a374293764736f6c63430007010033","devdoc":{"author":"Connext <support@connext.network>","kind":"dev","methods":{},"title":"Withdraw","version":1},"userdoc":{"kind":"user","methods":{},"notice":"This contract burns the initiator\'s funds if a mutually signed         withdraw commitment can be generated","version":1},"storageLayout":{"storage":[],"types":null}}')},2884:function(e){e.exports=JSON.parse('{"address":"0xe561583d3A0dba55569Da8ff2e51a74d435eF372","abi":[{"inputs":[{"internalType":"address","name":"_mastercopy","type":"address"},{"internalType":"uint256","name":"_chainId","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"channel","type":"address"}],"name":"ChannelCreation","type":"event"},{"inputs":[{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"}],"name":"createChannel","outputs":[{"internalType":"address","name":"channel","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"createChannelAndDepositAlice","outputs":[{"internalType":"address","name":"channel","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"getChainId","outputs":[{"internalType":"uint256","name":"_chainId","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"}],"name":"getChannelAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMastercopy","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getProxyCreationCode","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStoredChainId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"transactionHash":"0xb24097c413c32f39d065ceb61643f215cb47e21c2ea0feeddc8d4c68d0e46062","receipt":{"to":null,"from":"0xd4b33434Cb36df9286Ef5132FCFb8062c96aC56E","contractAddress":"0xe561583d3A0dba55569Da8ff2e51a74d435eF372","transactionIndex":0,"gasUsed":"677184","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","blockHash":"0x76b523e1c2ff6d9fc3b5cdf0b9708edd0a1bd18dd989c5140c6d21956b536eeb","transactionHash":"0xb24097c413c32f39d065ceb61643f215cb47e21c2ea0feeddc8d4c68d0e46062","logs":[],"blockNumber":138370,"cumulativeGasUsed":"677184","status":1,"byzantium":true},"args":["0xd105b6B42206dfA6Db00E6a4823bC88eFAC00476","0"],"solcInputHash":"89c55d5a88f10637860a9ea31a1daad3","metadata":"{\\"compiler\\":{\\"version\\":\\"0.7.1+commit.f4a555be\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_mastercopy\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_chainId\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"channel\\",\\"type\\":\\"address\\"}],\\"name\\":\\"ChannelCreation\\",\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"}],\\"name\\":\\"createChannel\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channel\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"createChannelAndDepositAlice\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channel\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"payable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getChainId\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_chainId\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getChannelAddress\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getMastercopy\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getProxyCreationCode\\",\\"outputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"\\",\\"type\\":\\"bytes\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getStoredChainId\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"author\\":\\"Connext <support@connext.network>\\",\\"kind\\":\\"dev\\",\\"methods\\":{\\"constructor\\":{\\"details\\":\\"Creates a new `ChannelFactory`\\",\\"params\\":{\\"_chainId\\":\\"the chain identifier when generating the CREATE2 salt. If zero, the chain identifier used in the proxy salt will be the result of the opcode\\",\\"_mastercopy\\":\\"the address of the `ChannelMastercopy` (channel logic)\\"}},\\"createChannel(address,address)\\":{\\"details\\":\\"Allows us to create new channel contract and get it all set up in one transaction\\",\\"params\\":{\\"alice\\":\\"address of the high fidelity channel participant\\",\\"bob\\":\\"address of the other channel participant\\"}},\\"createChannelAndDepositAlice(address,address,address,uint256)\\":{\\"details\\":\\"Allows us to create a new channel contract and fund it in one transaction\\",\\"params\\":{\\"bob\\":\\"address of the other channel participant\\"}},\\"getChainId()\\":{\\"details\\":\\"Allows us to get the chainId that this factory will use in the create2 salt\\"},\\"getChannelAddress(address,address)\\":{\\"details\\":\\"Allows us to get the address for a new channel contract created via `createChannel`\\",\\"params\\":{\\"alice\\":\\"address of the igh fidelity channel participant\\",\\"bob\\":\\"address of the other channel participant\\"}},\\"getMastercopy()\\":{\\"details\\":\\"Allows us to get the mastercopy that this factory will deploy channels against\\"},\\"getProxyCreationCode()\\":{\\"details\\":\\"Returns the proxy code used to both calculate the CREATE2 address and deploy the channel proxy pointed to the `ChannelMastercopy`\\"},\\"getStoredChainId()\\":{\\"details\\":\\"Allows us to get the chainId that this factory has stored\\"}},\\"title\\":\\"ChannelFactory\\",\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"notice\\":\\"Creates and sets up a new channel proxy contract\\",\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"src.sol/ChannelFactory.sol\\":\\"ChannelFactory\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Returns the amount of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender\'s allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\\\n     * allowance mechanism. `amount` is then deducted from the caller\'s\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Address.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Collection of functions related to the address type\\\\n */\\\\nlibrary Address {\\\\n    /**\\\\n     * @dev Returns true if `account` is a contract.\\\\n     *\\\\n     * [IMPORTANT]\\\\n     * ====\\\\n     * It is unsafe to assume that an address for which this function returns\\\\n     * false is an externally-owned account (EOA) and not a contract.\\\\n     *\\\\n     * Among others, `isContract` will return false for the following\\\\n     * types of addresses:\\\\n     *\\\\n     *  - an externally-owned account\\\\n     *  - a contract in construction\\\\n     *  - an address where a contract will be created\\\\n     *  - an address where a contract lived, but was destroyed\\\\n     * ====\\\\n     */\\\\n    function isContract(address account) internal view returns (bool) {\\\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\\\n        // for accounts without code, i.e. `keccak256(\'\')`\\\\n        bytes32 codehash;\\\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\\\n        // solhint-disable-next-line no-inline-assembly\\\\n        assembly { codehash := extcodehash(account) }\\\\n        return (codehash != accountHash && codehash != 0x0);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\\\\n     * `recipient`, forwarding all available gas and reverting on errors.\\\\n     *\\\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\\\n     * imposed by `transfer`, making them unable to receive funds via\\\\n     * `transfer`. {sendValue} removes this limitation.\\\\n     *\\\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\\\n     *\\\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\\\n     * taken to not create reentrancy vulnerabilities. Consider using\\\\n     * {ReentrancyGuard} or the\\\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\\\n     */\\\\n    function sendValue(address payable recipient, uint256 amount) internal {\\\\n        require(address(this).balance >= amount, \\\\\\"Address: insufficient balance\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\\\n        (bool success, ) = recipient.call{ value: amount }(\\\\\\"\\\\\\");\\\\n        require(success, \\\\\\"Address: unable to send value, recipient may have reverted\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Performs a Solidity function call using a low level `call`. A\\\\n     * plain`call` is an unsafe replacement for a function call: use this\\\\n     * function instead.\\\\n     *\\\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\\\n     * function (like regular Solidity function calls).\\\\n     *\\\\n     * Returns the raw returned data. To convert to the expected return value,\\\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `target` must be a contract.\\\\n     * - calling `target` with `data` must not revert.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n      return functionCall(target, data, \\\\\\"Address: low-level call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but also transferring `value` wei to `target`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the calling contract must have an ETH balance of at least `value`.\\\\n     * - the called Solidity function must be `payable`.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, value, \\\\\\"Address: low-level call with value failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\\\n        require(address(this).balance >= value, \\\\\\"Address: insufficient balance for call\\\\\\");\\\\n        return _functionCallWithValue(target, data, value, errorMessage);\\\\n    }\\\\n\\\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: call to non-contract\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls\\\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\\\n        if (success) {\\\\n            return returndata;\\\\n        } else {\\\\n            // Look for revert reason and bubble it up if present\\\\n            if (returndata.length > 0) {\\\\n                // The easiest way to bubble the revert reason is using memory via assembly\\\\n\\\\n                // solhint-disable-next-line no-inline-assembly\\\\n                assembly {\\\\n                    let returndata_size := mload(returndata)\\\\n                    revert(add(32, returndata), returndata_size)\\\\n                }\\\\n            } else {\\\\n                revert(errorMessage);\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x698f929f1097637d051976b322a2d532c27df022b09010e8d091e2888a5ebdf8\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Create2.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\\\n * `CREATE2` can be used to compute in advance the address where a smart\\\\n * contract will be deployed, which allows for interesting new mechanisms known\\\\n * as \'counterfactual interactions\'.\\\\n *\\\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\\\n * information.\\\\n */\\\\nlibrary Create2 {\\\\n    /**\\\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\\\n     * will be deployed can be known in advance via {computeAddress}.\\\\n     *\\\\n     * The bytecode for a contract can be obtained from Solidity with\\\\n     * `type(contractName).creationCode`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `bytecode` must not be empty.\\\\n     * - `salt` must have not been used for `bytecode` already.\\\\n     * - the factory must have a balance of at least `amount`.\\\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\\\n     */\\\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\\\\n        address addr;\\\\n        require(address(this).balance >= amount, \\\\\\"Create2: insufficient balance\\\\\\");\\\\n        require(bytecode.length != 0, \\\\\\"Create2: bytecode length is zero\\\\\\");\\\\n        // solhint-disable-next-line no-inline-assembly\\\\n        assembly {\\\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\\\n        }\\\\n        require(addr != address(0), \\\\\\"Create2: Failed on deploy\\\\\\");\\\\n        return addr;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\\\n     */\\\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\\\n        return computeAddress(salt, bytecodeHash, address(this));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\\\n     * `deployer`. If `deployer` is this contract\'s address, returns the same value as {computeAddress}.\\\\n     */\\\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\\\\n        bytes32 _data = keccak256(\\\\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\\\\n        );\\\\n        return address(uint256(_data));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x539295edd21ad514c0b1a0d1c89ada0831942f379ea83b6eb85769211fc7937e\\",\\"license\\":\\"MIT\\"},\\"src.sol/ChannelFactory.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Create2.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./interfaces/IChannelFactory.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/IVectorChannel.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibAsset.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibERC20.sol\\\\\\";\\\\n\\\\n/// @title ChannelFactory\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Creates and sets up a new channel proxy contract\\\\ncontract ChannelFactory is IChannelFactory {\\\\n    // Creation code constants taken from EIP1167\\\\n    bytes private constant proxyCreationCodePrefix =\\\\n        hex\\\\\\"3d602d80600a3d3981f3_363d3d373d3d3d363d73\\\\\\";\\\\n    bytes private constant proxyCreationCodeSuffix =\\\\n        hex\\\\\\"5af43d82803e903d91602b57fd5bf3\\\\\\";\\\\n\\\\n    bytes32 private creationCodeHash;\\\\n    address private immutable mastercopy;\\\\n    uint256 private immutable chainId;\\\\n\\\\n    /// @dev Creates a new `ChannelFactory`\\\\n    /// @param _mastercopy the address of the `ChannelMastercopy` (channel logic)\\\\n    /// @param _chainId the chain identifier when generating the CREATE2 salt. If zero, the chain identifier used in the proxy salt will be the result of the opcode\\\\n    constructor(address _mastercopy, uint256 _chainId) {\\\\n        mastercopy = _mastercopy;\\\\n        chainId = _chainId;\\\\n        creationCodeHash = keccak256(_getProxyCreationCode(_mastercopy));\\\\n    }\\\\n\\\\n    ////////////////////////////////////////\\\\n    // Public Methods\\\\n\\\\n    /// @dev Allows us to get the mastercopy that this factory will deploy channels against\\\\n    function getMastercopy() external view override returns (address) {\\\\n        return mastercopy;\\\\n    }\\\\n\\\\n    /// @dev Allows us to get the chainId that this factory will use in the create2 salt\\\\n    function getChainId() public view override returns (uint256 _chainId) {\\\\n        // Hold in memory to reduce sload calls\\\\n        uint256 chain = chainId;\\\\n        if (chain == 0) {\\\\n            assembly {\\\\n                _chainId := chainid()\\\\n            }\\\\n        } else {\\\\n            _chainId = chain;\\\\n        }\\\\n    }\\\\n\\\\n    /// @dev Allows us to get the chainId that this factory has stored\\\\n    function getStoredChainId() external view override returns (uint256) {\\\\n        return chainId;\\\\n    }\\\\n\\\\n    /// @dev Returns the proxy code used to both calculate the CREATE2 address and deploy the channel proxy pointed to the `ChannelMastercopy`\\\\n    function getProxyCreationCode()\\\\n        public\\\\n        view\\\\n        override\\\\n        returns (bytes memory)\\\\n    {\\\\n        return _getProxyCreationCode(mastercopy);\\\\n    }\\\\n\\\\n    /// @dev Allows us to get the address for a new channel contract created via `createChannel`\\\\n    /// @param alice address of the igh fidelity channel participant\\\\n    /// @param bob address of the other channel participant\\\\n    function getChannelAddress(address alice, address bob)\\\\n        external\\\\n        view\\\\n        override\\\\n        returns (address)\\\\n    {\\\\n        return\\\\n            Create2.computeAddress(\\\\n                generateSalt(alice, bob),\\\\n                creationCodeHash\\\\n            );\\\\n    }\\\\n\\\\n    /// @dev Allows us to create new channel contract and get it all set up in one transaction\\\\n    /// @param alice address of the high fidelity channel participant\\\\n    /// @param bob address of the other channel participant\\\\n    function createChannel(address alice, address bob)\\\\n        public\\\\n        override\\\\n        returns (address channel)\\\\n    {\\\\n        channel = deployChannelProxy(alice, bob);\\\\n        IVectorChannel(channel).setup(alice, bob);\\\\n        emit ChannelCreation(channel);\\\\n    }\\\\n\\\\n    /// @dev Allows us to create a new channel contract and fund it in one transaction\\\\n    /// @param bob address of the other channel participant\\\\n    function createChannelAndDepositAlice(\\\\n        address alice,\\\\n        address bob,\\\\n        address assetId,\\\\n        uint256 amount\\\\n    ) external payable override returns (address channel) {\\\\n        channel = createChannel(alice, bob);\\\\n        // Deposit funds (if a token) must be approved for the\\\\n        // `ChannelFactory`, which then claims the funds and transfers\\\\n        // to the channel address. While this is inefficient, this is\\\\n        // the safest/clearest way to transfer funds\\\\n        if (!LibAsset.isEther(assetId)) {\\\\n            require(\\\\n                LibERC20.transferFrom(\\\\n                    assetId,\\\\n                    msg.sender,\\\\n                    address(this),\\\\n                    amount\\\\n                ),\\\\n                \\\\\\"ChannelFactory: ERC20_TRANSFER_FAILED\\\\\\"\\\\n            );\\\\n            require(\\\\n                LibERC20.approve(assetId, address(channel), amount),\\\\n                \\\\\\"ChannelFactory: ERC20_APPROVE_FAILED\\\\\\"\\\\n            );\\\\n        }\\\\n        IVectorChannel(channel).depositAlice{value: msg.value}(assetId, amount);\\\\n    }\\\\n\\\\n    ////////////////////////////////////////\\\\n    // Internal Methods\\\\n\\\\n    function _getProxyCreationCode(address _mastercopy) internal pure returns (bytes memory) {\\\\n      return abi.encodePacked(\\\\n                proxyCreationCodePrefix,\\\\n                _mastercopy,\\\\n                proxyCreationCodeSuffix\\\\n            );\\\\n    }\\\\n\\\\n    /// @dev Allows us to create new channel contact using CREATE2\\\\n    /// @param alice address of the high fidelity participant in the channel\\\\n    /// @param bob address of the other channel participant\\\\n    function deployChannelProxy(address alice, address bob)\\\\n        internal\\\\n        returns (address)\\\\n    {\\\\n        bytes32 salt = generateSalt(alice, bob);\\\\n        return Create2.deploy(0, salt, getProxyCreationCode());\\\\n    }\\\\n\\\\n    /// @dev Generates the unique salt for calculating the CREATE2 address of the channel proxy\\\\n    function generateSalt(address alice, address bob)\\\\n        internal\\\\n        view\\\\n        returns (bytes32)\\\\n    {\\\\n        return keccak256(abi.encodePacked(alice, bob, getChainId()));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x9b30b13dd79eea72eadd2bec3eba0f515929259a21d2ece6b982703c280e532a\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCAdjudicator.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./Types.sol\\\\\\";\\\\n\\\\ninterface ICMCAdjudicator {\\\\n    struct CoreChannelState {\\\\n        address channelAddress;\\\\n        address alice;\\\\n        address bob;\\\\n        address[] assetIds;\\\\n        Balance[] balances;\\\\n        uint256[] processedDepositsA;\\\\n        uint256[] processedDepositsB;\\\\n        uint256[] defundNonces;\\\\n        uint256 timeout;\\\\n        uint256 nonce;\\\\n        bytes32 merkleRoot;\\\\n    }\\\\n\\\\n    struct CoreTransferState {\\\\n        address channelAddress;\\\\n        bytes32 transferId;\\\\n        address transferDefinition;\\\\n        address initiator;\\\\n        address responder;\\\\n        address assetId;\\\\n        Balance balance;\\\\n        uint256 transferTimeout;\\\\n        bytes32 initialStateHash;\\\\n    }\\\\n\\\\n    struct ChannelDispute {\\\\n        bytes32 channelStateHash;\\\\n        uint256 nonce;\\\\n        bytes32 merkleRoot;\\\\n        uint256 consensusExpiry;\\\\n        uint256 defundExpiry;\\\\n    }\\\\n\\\\n    struct TransferDispute {\\\\n        bytes32 transferStateHash;\\\\n        uint256 transferDisputeExpiry;\\\\n        bool isDefunded;\\\\n    }\\\\n\\\\n    event ChannelDisputed(\\\\n        address disputer,\\\\n        CoreChannelState state,\\\\n        ChannelDispute dispute\\\\n    );\\\\n\\\\n    event ChannelDefunded(\\\\n        address defunder,\\\\n        CoreChannelState state,\\\\n        ChannelDispute dispute,\\\\n        address[] assetIds\\\\n    );\\\\n\\\\n    event TransferDisputed(\\\\n        address disputer,\\\\n        CoreTransferState state,\\\\n        TransferDispute dispute\\\\n    );\\\\n\\\\n    event TransferDefunded(\\\\n        address defunder,\\\\n        CoreTransferState state,\\\\n        TransferDispute dispute,\\\\n        bytes encodedInitialState,\\\\n        bytes encodedResolver,\\\\n        Balance balance\\\\n    );\\\\n\\\\n    function getChannelDispute() external view returns (ChannelDispute memory);\\\\n\\\\n    function getDefundNonce(address assetId) external view returns (uint256);\\\\n\\\\n    function getTransferDispute(bytes32 transferId)\\\\n        external\\\\n        view\\\\n        returns (TransferDispute memory);\\\\n\\\\n    function disputeChannel(\\\\n        CoreChannelState calldata ccs,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) external;\\\\n\\\\n    function defundChannel(\\\\n        CoreChannelState calldata ccs,\\\\n        address[] calldata assetIds,\\\\n        uint256[] calldata indices\\\\n    ) external;\\\\n\\\\n    function disputeTransfer(\\\\n        CoreTransferState calldata cts,\\\\n        bytes32[] calldata merkleProofData\\\\n    ) external;\\\\n\\\\n    function defundTransfer(\\\\n        CoreTransferState calldata cts,\\\\n        bytes calldata encodedInitialTransferState,\\\\n        bytes calldata encodedTransferResolver,\\\\n        bytes calldata responderSignature\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x88522bb51c2b9991b24ef33a3c776ac76d96060ebbc33cd5b2b14513fb21d237\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCAsset.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface ICMCAsset {\\\\n    function getTotalTransferred(address assetId)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function getExitableAmount(address assetId, address owner)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function exit(\\\\n        address assetId,\\\\n        address owner,\\\\n        address payable recipient\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x895d89536e8ca469afe642b7001f0dfff497ce29d5d73f862b07a1cdc483f3f7\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCCore.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface ICMCCore {\\\\n    function setup(address _alice, address _bob) external;\\\\n\\\\n    function getAlice() external view returns (address);\\\\n\\\\n    function getBob() external view returns (address);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x8e8da2d8fb5198441ba6cdff018dff9e4145b07d575647c990659adad637ec8c\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCDeposit.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface ICMCDeposit {\\\\n    event AliceDeposited(address assetId, uint256 amount);\\\\n    \\\\n    function getTotalDepositsAlice(address assetId)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function getTotalDepositsBob(address assetId)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function depositAlice(address assetId, uint256 amount) external payable;\\\\n}\\\\n\\",\\"keccak256\\":\\"0xdf6f284e44d88013cf9d51220315fb37e63086e470442685891c90aadd138295\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCWithdraw.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nstruct WithdrawData {\\\\n    address channelAddress;\\\\n    address assetId;\\\\n    address payable recipient;\\\\n    uint256 amount;\\\\n    uint256 nonce;\\\\n    address callTo;\\\\n    bytes callData;\\\\n}\\\\n\\\\ninterface ICMCWithdraw {\\\\n    function getWithdrawalTransactionRecord(WithdrawData calldata wd)\\\\n        external\\\\n        view\\\\n        returns (bool);\\\\n\\\\n    function withdraw(\\\\n        WithdrawData calldata wd,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x097dfe95ad19096f9a3dd0138b4a51680c26e665d1639278a7c0a5c9f7fc5c78\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/IChannelFactory.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface IChannelFactory {\\\\n    event ChannelCreation(address channel);\\\\n\\\\n    function getMastercopy() external view returns (address);\\\\n\\\\n    function getChainId() external view returns (uint256);\\\\n\\\\n    function getStoredChainId() external view returns (uint256);\\\\n\\\\n    function getProxyCreationCode() external view returns (bytes memory);\\\\n\\\\n    function getChannelAddress(address alice, address bob)\\\\n        external\\\\n        view\\\\n        returns (address);\\\\n\\\\n    function createChannel(address alice, address bob)\\\\n        external\\\\n        returns (address);\\\\n\\\\n    function createChannelAndDepositAlice(\\\\n        address alice,\\\\n        address bob,\\\\n        address assetId,\\\\n        uint256 amount\\\\n    ) external payable returns (address);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x2330bd554f878feb2494fb9dd830a1707865b63cfd6471a8dad1e5912ebf72ea\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/IVectorChannel.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./ICMCCore.sol\\\\\\";\\\\nimport \\\\\\"./ICMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./ICMCDeposit.sol\\\\\\";\\\\nimport \\\\\\"./ICMCWithdraw.sol\\\\\\";\\\\nimport \\\\\\"./ICMCAdjudicator.sol\\\\\\";\\\\n\\\\ninterface IVectorChannel is\\\\n    ICMCCore,\\\\n    ICMCAsset,\\\\n    ICMCDeposit,\\\\n    ICMCWithdraw,\\\\n    ICMCAdjudicator\\\\n{}\\\\n\\",\\"keccak256\\":\\"0x9e21e3b6510bb5aecab999bfcbefe6184bd2be5a80179ef8ecadb63ddd2c8d53\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/Types.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nstruct Balance {\\\\n    uint256[2] amount; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n    address payable[2] to; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf8c71b155b630cde965f5d1db5f0d2751a9763f5a797f15d946613e9224f1046\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibAsset.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./LibERC20.sol\\\\\\";\\\\nimport \\\\\\"./LibUtils.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\\\\";\\\\n\\\\n\\\\n/// @title LibAsset\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This library contains helpers for dealing with onchain transfers\\\\n///         of in-channel assets. It is designed to safely handle all asset\\\\n///         transfers out of channel in the event of an onchain dispute. Also\\\\n///         safely handles ERC20 transfers that may be non-compliant\\\\nlibrary LibAsset {\\\\n    address constant ETHER_ASSETID = address(0);\\\\n\\\\n    function isEther(address assetId) internal pure returns (bool) {\\\\n        return assetId == ETHER_ASSETID;\\\\n    }\\\\n\\\\n    function getOwnBalance(address assetId) internal view returns (uint256) {\\\\n        return\\\\n            isEther(assetId)\\\\n                ? address(this).balance\\\\n                : IERC20(assetId).balanceOf(address(this));\\\\n    }\\\\n\\\\n    function transferEther(address payable recipient, uint256 amount)\\\\n        internal\\\\n        returns (bool)\\\\n    {\\\\n        (bool success, bytes memory returnData) =\\\\n            recipient.call{value: amount}(\\\\\\"\\\\\\");\\\\n        LibUtils.revertIfCallFailed(success, returnData);\\\\n        return true;\\\\n    }\\\\n\\\\n    function transferERC20(\\\\n        address assetId,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return LibERC20.transfer(assetId, recipient, amount);\\\\n    }\\\\n\\\\n    // This function is a wrapper for transfers of Ether or ERC20 tokens,\\\\n    // both standard-compliant ones as well as tokens that exhibit the\\\\n    // missing-return-value bug.\\\\n    // Although it behaves very much like Solidity\'s `transfer` function\\\\n    // or the ERC20 `transfer` and is, in fact, designed to replace direct\\\\n    // usage of those, it is deliberately named `unregisteredTransfer`,\\\\n    // because we need to register every transfer out of the channel.\\\\n    // Therefore, it should normally not be used directly, with the single\\\\n    // exception of the `transferAsset` function in `CMCAsset.sol`,\\\\n    // which combines the \\\\\\"naked\\\\\\" unregistered transfer given below\\\\n    // with a registration.\\\\n    // USING THIS FUNCTION SOMEWHERE ELSE IS PROBABLY WRONG!\\\\n    function unregisteredTransfer(\\\\n        address assetId,\\\\n        address payable recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            isEther(assetId)\\\\n                ? transferEther(recipient, amount)\\\\n                : transferERC20(assetId, recipient, amount);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x02e7b660846ad2f56f8005f786e0e2eb1d625c83f4cfcf9fc07a9566ca86195c\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./LibUtils.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Address.sol\\\\\\";\\\\n\\\\n/// @title LibERC20\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This library provides several functions to safely handle\\\\n///         noncompliant tokens (i.e. does not return a boolean from\\\\n///         the transfer function)\\\\n\\\\nlibrary LibERC20 {\\\\n    function wrapCall(address assetId, bytes memory callData)\\\\n        internal\\\\n        returns (bool)\\\\n    {\\\\n        require(Address.isContract(assetId), \\\\\\"LibERC20: NO_CODE\\\\\\");\\\\n        (bool success, bytes memory returnData) = assetId.call(callData);\\\\n        LibUtils.revertIfCallFailed(success, returnData);\\\\n        return returnData.length == 0 || abi.decode(returnData, (bool));\\\\n    }\\\\n\\\\n    function approve(\\\\n        address assetId,\\\\n        address spender,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            wrapCall(\\\\n                assetId,\\\\n                abi.encodeWithSignature(\\\\n                    \\\\\\"approve(address,uint256)\\\\\\",\\\\n                    spender,\\\\n                    amount\\\\n                )\\\\n            );\\\\n    }\\\\n\\\\n    function transferFrom(\\\\n        address assetId,\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            wrapCall(\\\\n                assetId,\\\\n                abi.encodeWithSignature(\\\\n                    \\\\\\"transferFrom(address,address,uint256)\\\\\\",\\\\n                    sender,\\\\n                    recipient,\\\\n                    amount\\\\n                )\\\\n            );\\\\n    }\\\\n\\\\n    function transfer(\\\\n        address assetId,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            wrapCall(\\\\n                assetId,\\\\n                abi.encodeWithSignature(\\\\n                    \\\\\\"transfer(address,uint256)\\\\\\",\\\\n                    recipient,\\\\n                    amount\\\\n                )\\\\n            );\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x5bad1474c93a295939c23f976786f0d086abc063f19ff9c8c1d069759c4a7ff5\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibUtils.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\n/// @title LibUtils\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains a helper to revert if a call was not successfully\\\\n///         made\\\\nlibrary LibUtils {\\\\n    // If success is false, reverts and passes on the revert string.\\\\n    function revertIfCallFailed(bool success, bytes memory returnData)\\\\n        internal\\\\n        pure\\\\n    {\\\\n        if (!success) {\\\\n            assembly {\\\\n                revert(add(returnData, 0x20), mload(returnData))\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf31897ed92b88739ca9c6e74d089e01c5dbf432183d2ab0b959b539842374ccd\\",\\"license\\":\\"UNLICENSED\\"}},\\"version\\":1}","bytecode":"0x60c060405234801561001057600080fd5b50604051610c8f380380610c8f83398101604081905261002f916100eb565b6001600160601b0319606083901b1660805260a081905261004f82610062565b8051602090910120600055506101909050565b60606040518060400160405280601481526020017f3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000815250826040518060400160405280600f81526020016e5af43d82803e903d91602b57fd5bf360881b8152506040516020016100d59392919061015c565b6040516020818303038152906040529050919050565b600080604083850312156100fd578182fd5b82516001600160a01b0381168114610113578283fd5b6020939093015192949293505050565b60008151815b818110156101435760208185018101518683015201610129565b818111156101515782828601525b509290920192915050565b60006101688286610123565b606085901b6001600160601b03191681526101866014820185610123565b9695505050505050565b60805160601c60a051610acf6101c06000398061017e52806101a452508061015352806102a65250610acf6000f3fe6080604052600436106100705760003560e01c806335a1ba6f1161004e57806335a1ba6f146100d7578063e617aaac14610104578063efe4369314610124578063fe4545011461013957610070565b806315727e911461007557806332a130c9146100a05780633408e470146100c2575b600080fd5b34801561008157600080fd5b5061008a61014c565b60405161009791906108d6565b60405180910390f35b3480156100ac57600080fd5b506100b561017c565b6040516100979190610a60565b3480156100ce57600080fd5b506100b56101a0565b3480156100e357600080fd5b506100f76100f2366004610703565b6101d8565b604051610097919061086b565b34801561011057600080fd5b506100f761011f366004610703565b610284565b34801561013057600080fd5b506100f76102a4565b6100f7610147366004610737565b6102c8565b60606101777f00000000000000000000000000000000000000000000000000000000000000006103a5565b905090565b7f000000000000000000000000000000000000000000000000000000000000000090565b60007f0000000000000000000000000000000000000000000000000000000000000000806101d0574691506101d4565b8091505b5090565b60006101e48383610425565b604051632d34ba7960e01b81529091506001600160a01b03821690632d34ba7990610215908690869060040161087f565b600060405180830381600087803b15801561022f57600080fd5b505af1158015610243573d6000803e3d6000fd5b505050507fa79ba8cc5fdc29196c8d65701a02433c92328f38f0ffbea3908335b80d81409d81604051610276919061086b565b60405180910390a192915050565b600061029b610293848461044f565b60005461048b565b90505b92915050565b7f000000000000000000000000000000000000000000000000000000000000000090565b60006102d485856101d8565b90506102df83610498565b61033b576102ef833330856104a5565b6103145760405162461bcd60e51b815260040161030b906109e4565b60405180910390fd5b61031f8382846104f8565b61033b5760405162461bcd60e51b815260040161030b906109a0565b60405163635ae90160e01b81526001600160a01b0382169063635ae90190349061036b90879087906004016108bd565b6000604051808303818588803b15801561038457600080fd5b505af1158015610398573d6000803e3d6000fd5b5050505050949350505050565b6060604051806040016040528060148152602001733d602d80600a3d3981f3363d3d373d3d3d363d7360601b815250826040518060400160405280600f81526020016e5af43d82803e903d91602b57fd5bf360881b81525060405160200161040f93929190610824565b6040516020818303038152906040529050919050565b600080610432848461044f565b905061044760008261044261014c565b610540565b949350505050565b6000828261045b6101a0565b60405160200161046d939291906107ab565b60405160208183030381529060405280519060200120905092915050565b600061029b8383306105b2565b6001600160a01b03161590565b60006104ef858585856040516024016104c093929190610899565b60408051601f198184030181529190526020810180516001600160e01b03166323b872dd60e01b1790526105f1565b95945050505050565b60006104478484846040516024016105119291906108bd565b60408051601f198184030181529190526020810180516001600160e01b031663095ea7b360e01b1790526105f1565b600080844710156105635760405162461bcd60e51b815260040161030b90610a29565b82516105815760405162461bcd60e51b815260040161030b90610909565b8383516020850187f590506001600160a01b0381166104475760405162461bcd60e51b815260040161030b9061093e565b60008060ff60f81b8386866040516020016105d094939291906107d4565b60408051808303601f19018152919052805160209091012095945050505050565b60006105fc836106a2565b6106185760405162461bcd60e51b815260040161030b90610975565b60006060846001600160a01b0316846040516106349190610808565b6000604051808303816000865af19150503d8060008114610671576040519150601f19603f3d011682016040523d82523d6000602084013e610676565b606091505b509150915061068582826106db565b805115806104ef5750808060200190518101906104ef9190610784565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610447575050151592915050565b816106e857805160208201fd5b5050565b80356001600160a01b038116811461029e57600080fd5b60008060408385031215610715578182fd5b61071f84846106ec565b915061072e84602085016106ec565b90509250929050565b6000806000806080858703121561074c578182fd5b61075686866106ec565b935061076586602087016106ec565b925061077486604087016106ec565b9396929550929360600135925050565b600060208284031215610795578081fd5b815180151581146107a4578182fd5b9392505050565b6001600160601b0319606094851b811682529290931b9091166014830152602882015260480190565b6001600160f81b031994909416845260609290921b6001600160601b03191660018401526015830152603582015260550190565b6000825161081a818460208701610a69565b9190910192915050565b60008451610836818460208901610a69565b606085901b6001600160601b031916908301908152835161085e816014840160208801610a69565b0160140195945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b60006020825282518060208401526108f5816040850160208701610a69565b601f01601f19169190910160400192915050565b6020808252818101527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604082015260600190565b60208082526019908201527f437265617465323a204661696c6564206f6e206465706c6f7900000000000000604082015260600190565b6020808252601190820152704c696245524332303a204e4f5f434f444560781b604082015260600190565b60208082526024908201527f4368616e6e656c466163746f72793a2045524332305f415050524f56455f46416040820152631253115160e21b606082015260800190565b60208082526025908201527f4368616e6e656c466163746f72793a2045524332305f5452414e534645525f46604082015264105253115160da1b606082015260800190565b6020808252601d908201527f437265617465323a20696e73756666696369656e742062616c616e6365000000604082015260600190565b90815260200190565b60005b83811015610a84578181015183820152602001610a6c565b83811115610a93576000848401525b5050505056fea26469706673582212206b46714e4e157ca4fcef5f14f882cae62cdcfb5e301602c8361ab37a1daaf2ab64736f6c63430007010033","deployedBytecode":"0x6080604052600436106100705760003560e01c806335a1ba6f1161004e57806335a1ba6f146100d7578063e617aaac14610104578063efe4369314610124578063fe4545011461013957610070565b806315727e911461007557806332a130c9146100a05780633408e470146100c2575b600080fd5b34801561008157600080fd5b5061008a61014c565b60405161009791906108d6565b60405180910390f35b3480156100ac57600080fd5b506100b561017c565b6040516100979190610a60565b3480156100ce57600080fd5b506100b56101a0565b3480156100e357600080fd5b506100f76100f2366004610703565b6101d8565b604051610097919061086b565b34801561011057600080fd5b506100f761011f366004610703565b610284565b34801561013057600080fd5b506100f76102a4565b6100f7610147366004610737565b6102c8565b60606101777f00000000000000000000000000000000000000000000000000000000000000006103a5565b905090565b7f000000000000000000000000000000000000000000000000000000000000000090565b60007f0000000000000000000000000000000000000000000000000000000000000000806101d0574691506101d4565b8091505b5090565b60006101e48383610425565b604051632d34ba7960e01b81529091506001600160a01b03821690632d34ba7990610215908690869060040161087f565b600060405180830381600087803b15801561022f57600080fd5b505af1158015610243573d6000803e3d6000fd5b505050507fa79ba8cc5fdc29196c8d65701a02433c92328f38f0ffbea3908335b80d81409d81604051610276919061086b565b60405180910390a192915050565b600061029b610293848461044f565b60005461048b565b90505b92915050565b7f000000000000000000000000000000000000000000000000000000000000000090565b60006102d485856101d8565b90506102df83610498565b61033b576102ef833330856104a5565b6103145760405162461bcd60e51b815260040161030b906109e4565b60405180910390fd5b61031f8382846104f8565b61033b5760405162461bcd60e51b815260040161030b906109a0565b60405163635ae90160e01b81526001600160a01b0382169063635ae90190349061036b90879087906004016108bd565b6000604051808303818588803b15801561038457600080fd5b505af1158015610398573d6000803e3d6000fd5b5050505050949350505050565b6060604051806040016040528060148152602001733d602d80600a3d3981f3363d3d373d3d3d363d7360601b815250826040518060400160405280600f81526020016e5af43d82803e903d91602b57fd5bf360881b81525060405160200161040f93929190610824565b6040516020818303038152906040529050919050565b600080610432848461044f565b905061044760008261044261014c565b610540565b949350505050565b6000828261045b6101a0565b60405160200161046d939291906107ab565b60405160208183030381529060405280519060200120905092915050565b600061029b8383306105b2565b6001600160a01b03161590565b60006104ef858585856040516024016104c093929190610899565b60408051601f198184030181529190526020810180516001600160e01b03166323b872dd60e01b1790526105f1565b95945050505050565b60006104478484846040516024016105119291906108bd565b60408051601f198184030181529190526020810180516001600160e01b031663095ea7b360e01b1790526105f1565b600080844710156105635760405162461bcd60e51b815260040161030b90610a29565b82516105815760405162461bcd60e51b815260040161030b90610909565b8383516020850187f590506001600160a01b0381166104475760405162461bcd60e51b815260040161030b9061093e565b60008060ff60f81b8386866040516020016105d094939291906107d4565b60408051808303601f19018152919052805160209091012095945050505050565b60006105fc836106a2565b6106185760405162461bcd60e51b815260040161030b90610975565b60006060846001600160a01b0316846040516106349190610808565b6000604051808303816000865af19150503d8060008114610671576040519150601f19603f3d011682016040523d82523d6000602084013e610676565b606091505b509150915061068582826106db565b805115806104ef5750808060200190518101906104ef9190610784565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610447575050151592915050565b816106e857805160208201fd5b5050565b80356001600160a01b038116811461029e57600080fd5b60008060408385031215610715578182fd5b61071f84846106ec565b915061072e84602085016106ec565b90509250929050565b6000806000806080858703121561074c578182fd5b61075686866106ec565b935061076586602087016106ec565b925061077486604087016106ec565b9396929550929360600135925050565b600060208284031215610795578081fd5b815180151581146107a4578182fd5b9392505050565b6001600160601b0319606094851b811682529290931b9091166014830152602882015260480190565b6001600160f81b031994909416845260609290921b6001600160601b03191660018401526015830152603582015260550190565b6000825161081a818460208701610a69565b9190910192915050565b60008451610836818460208901610a69565b606085901b6001600160601b031916908301908152835161085e816014840160208801610a69565b0160140195945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b60006020825282518060208401526108f5816040850160208701610a69565b601f01601f19169190910160400192915050565b6020808252818101527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604082015260600190565b60208082526019908201527f437265617465323a204661696c6564206f6e206465706c6f7900000000000000604082015260600190565b6020808252601190820152704c696245524332303a204e4f5f434f444560781b604082015260600190565b60208082526024908201527f4368616e6e656c466163746f72793a2045524332305f415050524f56455f46416040820152631253115160e21b606082015260800190565b60208082526025908201527f4368616e6e656c466163746f72793a2045524332305f5452414e534645525f46604082015264105253115160da1b606082015260800190565b6020808252601d908201527f437265617465323a20696e73756666696369656e742062616c616e6365000000604082015260600190565b90815260200190565b60005b83811015610a84578181015183820152602001610a6c565b83811115610a93576000848401525b5050505056fea26469706673582212206b46714e4e157ca4fcef5f14f882cae62cdcfb5e301602c8361ab37a1daaf2ab64736f6c63430007010033","devdoc":{"author":"Connext <support@connext.network>","kind":"dev","methods":{"constructor":{"details":"Creates a new `ChannelFactory`","params":{"_chainId":"the chain identifier when generating the CREATE2 salt. If zero, the chain identifier used in the proxy salt will be the result of the opcode","_mastercopy":"the address of the `ChannelMastercopy` (channel logic)"}},"createChannel(address,address)":{"details":"Allows us to create new channel contract and get it all set up in one transaction","params":{"alice":"address of the high fidelity channel participant","bob":"address of the other channel participant"}},"createChannelAndDepositAlice(address,address,address,uint256)":{"details":"Allows us to create a new channel contract and fund it in one transaction","params":{"bob":"address of the other channel participant"}},"getChainId()":{"details":"Allows us to get the chainId that this factory will use in the create2 salt"},"getChannelAddress(address,address)":{"details":"Allows us to get the address for a new channel contract created via `createChannel`","params":{"alice":"address of the igh fidelity channel participant","bob":"address of the other channel participant"}},"getMastercopy()":{"details":"Allows us to get the mastercopy that this factory will deploy channels against"},"getProxyCreationCode()":{"details":"Returns the proxy code used to both calculate the CREATE2 address and deploy the channel proxy pointed to the `ChannelMastercopy`"},"getStoredChainId()":{"details":"Allows us to get the chainId that this factory has stored"}},"title":"ChannelFactory","version":1},"userdoc":{"kind":"user","methods":{},"notice":"Creates and sets up a new channel proxy contract","version":1},"storageLayout":{"storage":[{"astId":3100,"contract":"src.sol/ChannelFactory.sol:ChannelFactory","label":"creationCodeHash","offset":0,"slot":"0","type":"t_bytes32"}],"types":{"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"}}}}')},2885:function(e){e.exports=JSON.parse('{"address":"0xd105b6B42206dfA6Db00E6a4823bC88eFAC00476","abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"assetId","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"AliceDeposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"defunder","type":"address"},{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"},{"internalType":"address[]","name":"assetIds","type":"address[]"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance[]","name":"balances","type":"tuple[]"},{"internalType":"uint256[]","name":"processedDepositsA","type":"uint256[]"},{"internalType":"uint256[]","name":"processedDepositsB","type":"uint256[]"},{"internalType":"uint256[]","name":"defundNonces","type":"uint256[]"},{"internalType":"uint256","name":"timeout","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"indexed":false,"internalType":"struct ICMCAdjudicator.CoreChannelState","name":"state","type":"tuple"},{"components":[{"internalType":"bytes32","name":"channelStateHash","type":"bytes32"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"consensusExpiry","type":"uint256"},{"internalType":"uint256","name":"defundExpiry","type":"uint256"}],"indexed":false,"internalType":"struct ICMCAdjudicator.ChannelDispute","name":"dispute","type":"tuple"},{"indexed":false,"internalType":"address[]","name":"assetIds","type":"address[]"}],"name":"ChannelDefunded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"disputer","type":"address"},{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"},{"internalType":"address[]","name":"assetIds","type":"address[]"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance[]","name":"balances","type":"tuple[]"},{"internalType":"uint256[]","name":"processedDepositsA","type":"uint256[]"},{"internalType":"uint256[]","name":"processedDepositsB","type":"uint256[]"},{"internalType":"uint256[]","name":"defundNonces","type":"uint256[]"},{"internalType":"uint256","name":"timeout","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"indexed":false,"internalType":"struct ICMCAdjudicator.CoreChannelState","name":"state","type":"tuple"},{"components":[{"internalType":"bytes32","name":"channelStateHash","type":"bytes32"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"consensusExpiry","type":"uint256"},{"internalType":"uint256","name":"defundExpiry","type":"uint256"}],"indexed":false,"internalType":"struct ICMCAdjudicator.ChannelDispute","name":"dispute","type":"tuple"}],"name":"ChannelDisputed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"defunder","type":"address"},{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"bytes32","name":"transferId","type":"bytes32"},{"internalType":"address","name":"transferDefinition","type":"address"},{"internalType":"address","name":"initiator","type":"address"},{"internalType":"address","name":"responder","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance","name":"balance","type":"tuple"},{"internalType":"uint256","name":"transferTimeout","type":"uint256"},{"internalType":"bytes32","name":"initialStateHash","type":"bytes32"}],"indexed":false,"internalType":"struct ICMCAdjudicator.CoreTransferState","name":"state","type":"tuple"},{"components":[{"internalType":"bytes32","name":"transferStateHash","type":"bytes32"},{"internalType":"uint256","name":"transferDisputeExpiry","type":"uint256"},{"internalType":"bool","name":"isDefunded","type":"bool"}],"indexed":false,"internalType":"struct ICMCAdjudicator.TransferDispute","name":"dispute","type":"tuple"},{"indexed":false,"internalType":"bytes","name":"encodedInitialState","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"encodedResolver","type":"bytes"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"indexed":false,"internalType":"struct Balance","name":"balance","type":"tuple"}],"name":"TransferDefunded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"disputer","type":"address"},{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"bytes32","name":"transferId","type":"bytes32"},{"internalType":"address","name":"transferDefinition","type":"address"},{"internalType":"address","name":"initiator","type":"address"},{"internalType":"address","name":"responder","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance","name":"balance","type":"tuple"},{"internalType":"uint256","name":"transferTimeout","type":"uint256"},{"internalType":"bytes32","name":"initialStateHash","type":"bytes32"}],"indexed":false,"internalType":"struct ICMCAdjudicator.CoreTransferState","name":"state","type":"tuple"},{"components":[{"internalType":"bytes32","name":"transferStateHash","type":"bytes32"},{"internalType":"uint256","name":"transferDisputeExpiry","type":"uint256"},{"internalType":"bool","name":"isDefunded","type":"bool"}],"indexed":false,"internalType":"struct ICMCAdjudicator.TransferDispute","name":"dispute","type":"tuple"}],"name":"TransferDisputed","type":"event"},{"inputs":[{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"},{"internalType":"address[]","name":"assetIds","type":"address[]"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance[]","name":"balances","type":"tuple[]"},{"internalType":"uint256[]","name":"processedDepositsA","type":"uint256[]"},{"internalType":"uint256[]","name":"processedDepositsB","type":"uint256[]"},{"internalType":"uint256[]","name":"defundNonces","type":"uint256[]"},{"internalType":"uint256","name":"timeout","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"internalType":"struct ICMCAdjudicator.CoreChannelState","name":"ccs","type":"tuple"},{"internalType":"address[]","name":"assetIds","type":"address[]"},{"internalType":"uint256[]","name":"indices","type":"uint256[]"}],"name":"defundChannel","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"bytes32","name":"transferId","type":"bytes32"},{"internalType":"address","name":"transferDefinition","type":"address"},{"internalType":"address","name":"initiator","type":"address"},{"internalType":"address","name":"responder","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance","name":"balance","type":"tuple"},{"internalType":"uint256","name":"transferTimeout","type":"uint256"},{"internalType":"bytes32","name":"initialStateHash","type":"bytes32"}],"internalType":"struct ICMCAdjudicator.CoreTransferState","name":"cts","type":"tuple"},{"internalType":"bytes","name":"encodedInitialTransferState","type":"bytes"},{"internalType":"bytes","name":"encodedTransferResolver","type":"bytes"},{"internalType":"bytes","name":"responderSignature","type":"bytes"}],"name":"defundTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"depositAlice","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"address","name":"alice","type":"address"},{"internalType":"address","name":"bob","type":"address"},{"internalType":"address[]","name":"assetIds","type":"address[]"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance[]","name":"balances","type":"tuple[]"},{"internalType":"uint256[]","name":"processedDepositsA","type":"uint256[]"},{"internalType":"uint256[]","name":"processedDepositsB","type":"uint256[]"},{"internalType":"uint256[]","name":"defundNonces","type":"uint256[]"},{"internalType":"uint256","name":"timeout","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"internalType":"struct ICMCAdjudicator.CoreChannelState","name":"ccs","type":"tuple"},{"internalType":"bytes","name":"aliceSignature","type":"bytes"},{"internalType":"bytes","name":"bobSignature","type":"bytes"}],"name":"disputeChannel","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"bytes32","name":"transferId","type":"bytes32"},{"internalType":"address","name":"transferDefinition","type":"address"},{"internalType":"address","name":"initiator","type":"address"},{"internalType":"address","name":"responder","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance","name":"balance","type":"tuple"},{"internalType":"uint256","name":"transferTimeout","type":"uint256"},{"internalType":"bytes32","name":"initialStateHash","type":"bytes32"}],"internalType":"struct ICMCAdjudicator.CoreTransferState","name":"cts","type":"tuple"},{"internalType":"bytes32[]","name":"merkleProofData","type":"bytes32[]"}],"name":"disputeTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address payable","name":"recipient","type":"address"}],"name":"exit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getAlice","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBob","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getChannelDispute","outputs":[{"components":[{"internalType":"bytes32","name":"channelStateHash","type":"bytes32"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"consensusExpiry","type":"uint256"},{"internalType":"uint256","name":"defundExpiry","type":"uint256"}],"internalType":"struct ICMCAdjudicator.ChannelDispute","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"}],"name":"getDefundNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"getExitableAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"}],"name":"getTotalDepositsAlice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"}],"name":"getTotalDepositsBob","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"assetId","type":"address"}],"name":"getTotalTransferred","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"transferId","type":"bytes32"}],"name":"getTransferDispute","outputs":[{"components":[{"internalType":"bytes32","name":"transferStateHash","type":"bytes32"},{"internalType":"uint256","name":"transferDisputeExpiry","type":"uint256"},{"internalType":"bool","name":"isDefunded","type":"bool"}],"internalType":"struct ICMCAdjudicator.TransferDispute","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"internalType":"address payable","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"address","name":"callTo","type":"address"},{"internalType":"bytes","name":"callData","type":"bytes"}],"internalType":"struct WithdrawData","name":"wd","type":"tuple"}],"name":"getWithdrawalTransactionRecord","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_alice","type":"address"},{"internalType":"address","name":"_bob","type":"address"}],"name":"setup","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"channelAddress","type":"address"},{"internalType":"address","name":"assetId","type":"address"},{"internalType":"address payable","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"address","name":"callTo","type":"address"},{"internalType":"bytes","name":"callData","type":"bytes"}],"internalType":"struct WithdrawData","name":"wd","type":"tuple"},{"internalType":"bytes","name":"aliceSignature","type":"bytes"},{"internalType":"bytes","name":"bobSignature","type":"bytes"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"transactionHash":"0xaf0e5205c7b3bc0b90d0094ee95805c356fd73163505c77ae770ad369c643521","receipt":{"to":null,"from":"0xd4b33434Cb36df9286Ef5132FCFb8062c96aC56E","contractAddress":"0xd105b6B42206dfA6Db00E6a4823bC88eFAC00476","transactionIndex":0,"gasUsed":"3585396","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","blockHash":"0x4c06e4353852cd3337506656fb81ad9a70b43ccffcff19ce3a14c8d4a1a156c4","transactionHash":"0xaf0e5205c7b3bc0b90d0094ee95805c356fd73163505c77ae770ad369c643521","logs":[],"blockNumber":138368,"cumulativeGasUsed":"3585396","status":1,"byzantium":true},"args":[],"solcInputHash":"89c55d5a88f10637860a9ea31a1daad3","metadata":"{\\"compiler\\":{\\"version\\":\\"0.7.1+commit.f4a555be\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"AliceDeposited\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"defunder\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address[]\\",\\"name\\":\\"assetIds\\",\\"type\\":\\"address[]\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance[]\\",\\"name\\":\\"balances\\",\\"type\\":\\"tuple[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsA\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsB\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"defundNonces\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"timeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.CoreChannelState\\",\\"name\\":\\"state\\",\\"type\\":\\"tuple\\"},{\\"components\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"channelStateHash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"consensusExpiry\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"defundExpiry\\",\\"type\\":\\"uint256\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.ChannelDispute\\",\\"name\\":\\"dispute\\",\\"type\\":\\"tuple\\"},{\\"indexed\\":false,\\"internalType\\":\\"address[]\\",\\"name\\":\\"assetIds\\",\\"type\\":\\"address[]\\"}],\\"name\\":\\"ChannelDefunded\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"disputer\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address[]\\",\\"name\\":\\"assetIds\\",\\"type\\":\\"address[]\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance[]\\",\\"name\\":\\"balances\\",\\"type\\":\\"tuple[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsA\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsB\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"defundNonces\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"timeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.CoreChannelState\\",\\"name\\":\\"state\\",\\"type\\":\\"tuple\\"},{\\"components\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"channelStateHash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"consensusExpiry\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"defundExpiry\\",\\"type\\":\\"uint256\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.ChannelDispute\\",\\"name\\":\\"dispute\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"ChannelDisputed\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"defunder\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferId\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"transferDefinition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"initiator\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"responder\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"balance\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferTimeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"initialStateHash\\",\\"type\\":\\"bytes32\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.CoreTransferState\\",\\"name\\":\\"state\\",\\"type\\":\\"tuple\\"},{\\"components\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferStateHash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferDisputeExpiry\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"isDefunded\\",\\"type\\":\\"bool\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.TransferDispute\\",\\"name\\":\\"dispute\\",\\"type\\":\\"tuple\\"},{\\"indexed\\":false,\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedInitialState\\",\\"type\\":\\"bytes\\"},{\\"indexed\\":false,\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedResolver\\",\\"type\\":\\"bytes\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"balance\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"TransferDefunded\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"disputer\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferId\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"transferDefinition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"initiator\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"responder\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"balance\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferTimeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"initialStateHash\\",\\"type\\":\\"bytes32\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.CoreTransferState\\",\\"name\\":\\"state\\",\\"type\\":\\"tuple\\"},{\\"components\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferStateHash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferDisputeExpiry\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"isDefunded\\",\\"type\\":\\"bool\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct ICMCAdjudicator.TransferDispute\\",\\"name\\":\\"dispute\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"TransferDisputed\\",\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address[]\\",\\"name\\":\\"assetIds\\",\\"type\\":\\"address[]\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance[]\\",\\"name\\":\\"balances\\",\\"type\\":\\"tuple[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsA\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsB\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"defundNonces\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"timeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"}],\\"internalType\\":\\"struct ICMCAdjudicator.CoreChannelState\\",\\"name\\":\\"ccs\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"address[]\\",\\"name\\":\\"assetIds\\",\\"type\\":\\"address[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"indices\\",\\"type\\":\\"uint256[]\\"}],\\"name\\":\\"defundChannel\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferId\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"transferDefinition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"initiator\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"responder\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"balance\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferTimeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"initialStateHash\\",\\"type\\":\\"bytes32\\"}],\\"internalType\\":\\"struct ICMCAdjudicator.CoreTransferState\\",\\"name\\":\\"cts\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedInitialTransferState\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedTransferResolver\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"responderSignature\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"defundTransfer\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"depositAlice\\",\\"outputs\\":[],\\"stateMutability\\":\\"payable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"bob\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address[]\\",\\"name\\":\\"assetIds\\",\\"type\\":\\"address[]\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance[]\\",\\"name\\":\\"balances\\",\\"type\\":\\"tuple[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsA\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"processedDepositsB\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"defundNonces\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"timeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"}],\\"internalType\\":\\"struct ICMCAdjudicator.CoreChannelState\\",\\"name\\":\\"ccs\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"aliceSignature\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"bobSignature\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"disputeChannel\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferId\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"transferDefinition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"initiator\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"responder\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"balance\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferTimeout\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"initialStateHash\\",\\"type\\":\\"bytes32\\"}],\\"internalType\\":\\"struct ICMCAdjudicator.CoreTransferState\\",\\"name\\":\\"cts\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"bytes32[]\\",\\"name\\":\\"merkleProofData\\",\\"type\\":\\"bytes32[]\\"}],\\"name\\":\\"disputeTransfer\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address payable\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"}],\\"name\\":\\"exit\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getAlice\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getBob\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getChannelDispute\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"channelStateHash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"merkleRoot\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"consensusExpiry\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"defundExpiry\\",\\"type\\":\\"uint256\\"}],\\"internalType\\":\\"struct ICMCAdjudicator.ChannelDispute\\",\\"name\\":\\"\\",\\"type\\":\\"tuple\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getDefundNonce\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getExitableAmount\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getTotalDepositsAlice\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getTotalDepositsBob\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getTotalTransferred\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferId\\",\\"type\\":\\"bytes32\\"}],\\"name\\":\\"getTransferDispute\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"transferStateHash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"transferDisputeExpiry\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"isDefunded\\",\\"type\\":\\"bool\\"}],\\"internalType\\":\\"struct ICMCAdjudicator.TransferDispute\\",\\"name\\":\\"\\",\\"type\\":\\"tuple\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address payable\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"callTo\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"callData\\",\\"type\\":\\"bytes\\"}],\\"internalType\\":\\"struct WithdrawData\\",\\"name\\":\\"wd\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"getWithdrawalTransactionRecord\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"lock\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_alice\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"_bob\\",\\"type\\":\\"address\\"}],\\"name\\":\\"setup\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"channelAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"assetId\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address payable\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"callTo\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"callData\\",\\"type\\":\\"bytes\\"}],\\"internalType\\":\\"struct WithdrawData\\",\\"name\\":\\"wd\\",\\"type\\":\\"tuple\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"aliceSignature\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"bobSignature\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"withdraw\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"stateMutability\\":\\"payable\\",\\"type\\":\\"receive\\"}],\\"devdoc\\":{\\"author\\":\\"Connext <support@connext.network>\\",\\"kind\\":\\"dev\\",\\"methods\\":{\\"getAlice()\\":{\\"returns\\":{\\"_0\\":\\"Bob\'s signer address\\"}},\\"getBob()\\":{\\"returns\\":{\\"_0\\":\\"Alice\'s signer address\\"}},\\"setup(address,address)\\":{\\"params\\":{\\"_alice\\":\\": Address representing user with function deposit\\",\\"_bob\\":\\": Address representing user with multisig deposit\\"}},\\"withdraw((address,address,address,uint256,uint256,address,bytes),bytes,bytes)\\":{\\"params\\":{\\"aliceSignature\\":\\"Signature of owner a\\",\\"bobSignature\\":\\"Signature of owner b\\",\\"wd\\":\\"The withdraw data consisting of semantic withdraw information, i.e. assetId, recipient, and amount; information to make an optional call in addition to the actual transfer, i.e. target address for the call and call payload; additional information, i.e. channel address and nonce.\\"}}},\\"title\\":\\"ChannelMastercopy\\",\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{\\"getAlice()\\":{\\"notice\\":\\"A getter function for the bob of the multisig\\"},\\"getBob()\\":{\\"notice\\":\\"A getter function for the bob of the multisig\\"},\\"setup(address,address)\\":{\\"notice\\":\\"Contract constructor for Proxied copies\\"}},\\"notice\\":\\"Contains the logic used by all Vector multisigs. A proxy to this         contract is deployed per-channel using the ChannelFactory.sol.         Supports channel adjudication logic, deposit logic, and arbitrary         calls when a commitment is double-signed.\\",\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"src.sol/ChannelMastercopy.sol\\":\\"ChannelMastercopy\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\\\n *\\\\n * These functions can be used to verify that a message was signed by the holder\\\\n * of the private keys of a given address.\\\\n */\\\\nlibrary ECDSA {\\\\n    /**\\\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\\\n     * `signature`. This address can then be used for verification purposes.\\\\n     *\\\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\\\n     * this function rejects them by requiring the `s` value to be in the lower\\\\n     * half order, and the `v` value to be either 27 or 28.\\\\n     *\\\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\\\n     * verification to be secure: it is possible to craft signatures that\\\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\\\n     * this is by receiving a hash of the original message (which may otherwise\\\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\\\n     */\\\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\\\n        // Check the signature length\\\\n        if (signature.length != 65) {\\\\n            revert(\\\\\\"ECDSA: invalid signature length\\\\\\");\\\\n        }\\\\n\\\\n        // Divide the signature in r, s and v variables\\\\n        bytes32 r;\\\\n        bytes32 s;\\\\n        uint8 v;\\\\n\\\\n        // ecrecover takes the signature parameters, and the only way to get them\\\\n        // currently is to use assembly.\\\\n        // solhint-disable-next-line no-inline-assembly\\\\n        assembly {\\\\n            r := mload(add(signature, 0x20))\\\\n            s := mload(add(signature, 0x40))\\\\n            v := byte(0, mload(add(signature, 0x60)))\\\\n        }\\\\n\\\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\\\n        // the valid range for s in (281): 0 < s < secp256k1n \\\\u00f7 2 + 1, and for v in (282): v \\\\u2208 {27, 28}. Most\\\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\\\n        //\\\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\\\n        // these malleable signatures as well.\\\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\\\n            revert(\\\\\\"ECDSA: invalid signature \'s\' value\\\\\\");\\\\n        }\\\\n\\\\n        if (v != 27 && v != 28) {\\\\n            revert(\\\\\\"ECDSA: invalid signature \'v\' value\\\\\\");\\\\n        }\\\\n\\\\n        // If the signature is valid (and not malleable), return the signer address\\\\n        address signer = ecrecover(hash, v, r, s);\\\\n        require(signer != address(0), \\\\\\"ECDSA: invalid signature\\\\\\");\\\\n\\\\n        return signer;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\\\n     * replicates the behavior of the\\\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\\\n     * JSON-RPC method.\\\\n     *\\\\n     * See {recover}.\\\\n     */\\\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\\\n        // 32 is the length in bytes of hash,\\\\n        // enforced by the type signature above\\\\n        return keccak256(abi.encodePacked(\\\\\\"\\\\\\\\x19Ethereum Signed Message:\\\\\\\\n32\\\\\\", hash));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf25c49d2be2d28918ae6de7e9724238367dabe50631ec8fd23d1cdae2cb70262\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/cryptography/MerkleProof.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev These functions deal with verification of Merkle trees (hash trees),\\\\n */\\\\nlibrary MerkleProof {\\\\n    /**\\\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\\\n     * defined by `root`. For this, a `proof` must be provided, containing\\\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\\\n     */\\\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\\\n        bytes32 computedHash = leaf;\\\\n\\\\n        for (uint256 i = 0; i < proof.length; i++) {\\\\n            bytes32 proofElement = proof[i];\\\\n\\\\n            if (computedHash <= proofElement) {\\\\n                // Hash(current computed hash + current element of the proof)\\\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\\\n            } else {\\\\n                // Hash(current element of the proof + current computed hash)\\\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\\\n            }\\\\n        }\\\\n\\\\n        // Check if the computed hash (root) is equal to the provided root\\\\n        return computedHash == root;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x4959be2683e7af3439cb94f06aa6c40cb42ca9336747d0c7dce54f07196489bc\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/math/Math.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Standard math utilities missing in the Solidity language.\\\\n */\\\\nlibrary Math {\\\\n    /**\\\\n     * @dev Returns the largest of two numbers.\\\\n     */\\\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a >= b ? a : b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the smallest of two numbers.\\\\n     */\\\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a < b ? a : b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the average of two numbers. The result is rounded towards\\\\n     * zero.\\\\n     */\\\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        // (a + b) / 2 can overflow, so we distribute\\\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xa4fdec0ea7d943692cac780111ff2ff9d89848cad0494a59cfaed63a705054b4\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/math/SafeMath.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Wrappers over Solidity\'s arithmetic operations with added overflow\\\\n * checks.\\\\n *\\\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\\\n * in bugs, because programmers usually assume that an overflow raises an\\\\n * error, which is the standard behavior in high level programming languages.\\\\n * `SafeMath` restores this intuition by reverting the transaction when an\\\\n * operation overflows.\\\\n *\\\\n * Using this library instead of the unchecked operations eliminates an entire\\\\n * class of bugs, so it\'s recommended to use it always.\\\\n */\\\\nlibrary SafeMath {\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `+` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Addition cannot overflow.\\\\n     */\\\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        uint256 c = a + b;\\\\n        require(c >= a, \\\\\\"SafeMath: addition overflow\\\\\\");\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return sub(a, b, \\\\\\"SafeMath: subtraction overflow\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        require(b <= a, errorMessage);\\\\n        uint256 c = a - b;\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `*` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Multiplication cannot overflow.\\\\n     */\\\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\\\\n        // benefit is lost if \'b\' is also tested.\\\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\\\n        if (a == 0) {\\\\n            return 0;\\\\n        }\\\\n\\\\n        uint256 c = a * b;\\\\n        require(c / a == b, \\\\\\"SafeMath: multiplication overflow\\\\\\");\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return div(a, b, \\\\\\"SafeMath: division by zero\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        require(b > 0, errorMessage);\\\\n        uint256 c = a / b;\\\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * Reverts when dividing by zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return mod(a, b, \\\\\\"SafeMath: modulo by zero\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * Reverts with custom message when dividing by zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        require(b != 0, errorMessage);\\\\n        return a % b;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Returns the amount of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender\'s allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\\\n     * allowance mechanism. `amount` is then deducted from the caller\'s\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Address.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Collection of functions related to the address type\\\\n */\\\\nlibrary Address {\\\\n    /**\\\\n     * @dev Returns true if `account` is a contract.\\\\n     *\\\\n     * [IMPORTANT]\\\\n     * ====\\\\n     * It is unsafe to assume that an address for which this function returns\\\\n     * false is an externally-owned account (EOA) and not a contract.\\\\n     *\\\\n     * Among others, `isContract` will return false for the following\\\\n     * types of addresses:\\\\n     *\\\\n     *  - an externally-owned account\\\\n     *  - a contract in construction\\\\n     *  - an address where a contract will be created\\\\n     *  - an address where a contract lived, but was destroyed\\\\n     * ====\\\\n     */\\\\n    function isContract(address account) internal view returns (bool) {\\\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\\\n        // for accounts without code, i.e. `keccak256(\'\')`\\\\n        bytes32 codehash;\\\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\\\n        // solhint-disable-next-line no-inline-assembly\\\\n        assembly { codehash := extcodehash(account) }\\\\n        return (codehash != accountHash && codehash != 0x0);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\\\\n     * `recipient`, forwarding all available gas and reverting on errors.\\\\n     *\\\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\\\n     * imposed by `transfer`, making them unable to receive funds via\\\\n     * `transfer`. {sendValue} removes this limitation.\\\\n     *\\\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\\\n     *\\\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\\\n     * taken to not create reentrancy vulnerabilities. Consider using\\\\n     * {ReentrancyGuard} or the\\\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\\\n     */\\\\n    function sendValue(address payable recipient, uint256 amount) internal {\\\\n        require(address(this).balance >= amount, \\\\\\"Address: insufficient balance\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\\\n        (bool success, ) = recipient.call{ value: amount }(\\\\\\"\\\\\\");\\\\n        require(success, \\\\\\"Address: unable to send value, recipient may have reverted\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Performs a Solidity function call using a low level `call`. A\\\\n     * plain`call` is an unsafe replacement for a function call: use this\\\\n     * function instead.\\\\n     *\\\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\\\n     * function (like regular Solidity function calls).\\\\n     *\\\\n     * Returns the raw returned data. To convert to the expected return value,\\\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `target` must be a contract.\\\\n     * - calling `target` with `data` must not revert.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n      return functionCall(target, data, \\\\\\"Address: low-level call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but also transferring `value` wei to `target`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the calling contract must have an ETH balance of at least `value`.\\\\n     * - the called Solidity function must be `payable`.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, value, \\\\\\"Address: low-level call with value failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\\\n        require(address(this).balance >= value, \\\\\\"Address: insufficient balance for call\\\\\\");\\\\n        return _functionCallWithValue(target, data, value, errorMessage);\\\\n    }\\\\n\\\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: call to non-contract\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls\\\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\\\n        if (success) {\\\\n            return returndata;\\\\n        } else {\\\\n            // Look for revert reason and bubble it up if present\\\\n            if (returndata.length > 0) {\\\\n                // The easiest way to bubble the revert reason is using memory via assembly\\\\n\\\\n                // solhint-disable-next-line no-inline-assembly\\\\n                assembly {\\\\n                    let returndata_size := mload(returndata)\\\\n                    revert(add(32, returndata), returndata_size)\\\\n                }\\\\n            } else {\\\\n                revert(errorMessage);\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x698f929f1097637d051976b322a2d532c27df022b09010e8d091e2888a5ebdf8\\",\\"license\\":\\"MIT\\"},\\"src.sol/CMCAdjudicator.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/Commitment.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/ICMCAdjudicator.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/ITransferDefinition.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/Types.sol\\\\\\";\\\\nimport \\\\\\"./CMCCore.sol\\\\\\";\\\\nimport \\\\\\"./CMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./CMCDeposit.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibChannelCrypto.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibMath.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/cryptography/MerkleProof.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/math/SafeMath.sol\\\\\\";\\\\n\\\\n/// @title CMCAdjudicator\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains logic for disputing a single channel and all active\\\\n///         transfers associated with the channel. Contains two major phases:\\\\n///         (1) consensus: settle on latest channel state\\\\n///         (2) defund: remove assets and dispute active transfers\\\\ncontract CMCAdjudicator is CMCCore, CMCAsset, CMCDeposit, ICMCAdjudicator {\\\\n    using LibChannelCrypto for bytes32;\\\\n    using LibMath for uint256;\\\\n    using SafeMath for uint256;\\\\n\\\\n    uint256 private constant INITIAL_DEFUND_NONCE = 1;\\\\n\\\\n    ChannelDispute private channelDispute;\\\\n    mapping(address => uint256) private defundNonces;\\\\n    mapping(bytes32 => TransferDispute) private transferDisputes;\\\\n\\\\n    modifier validateChannel(CoreChannelState calldata ccs) {\\\\n        require(\\\\n            ccs.channelAddress == address(this) &&\\\\n                ccs.alice == alice &&\\\\n                ccs.bob == bob,\\\\n            \\\\\\"CMCAdjudicator: INVALID_CHANNEL\\\\\\"\\\\n        );\\\\n        _;\\\\n    }\\\\n\\\\n    modifier validateTransfer(CoreTransferState calldata cts) {\\\\n        require(\\\\n            cts.channelAddress == address(this),\\\\n            \\\\\\"CMCAdjudicator: INVALID_TRANSFER\\\\\\"\\\\n        );\\\\n        _;\\\\n    }\\\\n\\\\n    function getChannelDispute()\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (ChannelDispute memory)\\\\n    {\\\\n        return channelDispute;\\\\n    }\\\\n\\\\n    function getDefundNonce(address assetId)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (uint256)\\\\n    {\\\\n        return defundNonces[assetId];\\\\n    }\\\\n\\\\n    function getTransferDispute(bytes32 transferId)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (TransferDispute memory)\\\\n    {\\\\n        return transferDisputes[transferId];\\\\n    }\\\\n\\\\n    function disputeChannel(\\\\n        CoreChannelState calldata ccs,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) external override onlyViaProxy nonReentrant validateChannel(ccs) {\\\\n        // Generate hash\\\\n        bytes32 ccsHash = hashChannelState(ccs);\\\\n\\\\n        // Verify Alice\'s and Bob\'s signature on the channel state\\\\n        verifySignaturesOnChannelStateHash(ccs, ccsHash, aliceSignature, bobSignature);\\\\n\\\\n        // We cannot dispute a channel in its defund phase\\\\n        require(!inDefundPhase(), \\\\\\"CMCAdjudicator: INVALID_PHASE\\\\\\");\\\\n\\\\n        // New nonce must be strictly greater than the stored one\\\\n        require(\\\\n            channelDispute.nonce < ccs.nonce,\\\\n            \\\\\\"CMCAdjudicator: INVALID_NONCE\\\\\\"\\\\n        );\\\\n\\\\n        if (!inConsensusPhase()) {\\\\n            // We are not already in a dispute\\\\n            // Set expiries\\\\n            // TODO: offchain-ensure that there can\'t be an overflow\\\\n            channelDispute.consensusExpiry = block.timestamp.add(ccs.timeout);\\\\n            channelDispute.defundExpiry = block.timestamp.add(\\\\n                ccs.timeout.mul(2)\\\\n            );\\\\n        }\\\\n\\\\n        // Store newer state\\\\n        channelDispute.channelStateHash = ccsHash;\\\\n        channelDispute.nonce = ccs.nonce;\\\\n        channelDispute.merkleRoot = ccs.merkleRoot;\\\\n\\\\n        // Emit event\\\\n        emit ChannelDisputed(msg.sender, ccs, channelDispute);\\\\n    }\\\\n\\\\n    function defundChannel(\\\\n        CoreChannelState calldata ccs,\\\\n        address[] calldata assetIds,\\\\n        uint256[] calldata indices\\\\n    ) external override onlyViaProxy nonReentrant validateChannel(ccs) {\\\\n        // These checks are not strictly necessary, but it\'s a bit cleaner this way\\\\n        require(assetIds.length > 0, \\\\\\"CMCAdjudicator: NO_ASSETS_GIVEN\\\\\\");\\\\n        require(\\\\n            indices.length <= assetIds.length,\\\\n            \\\\\\"CMCAdjudicator: WRONG_ARRAY_LENGTHS\\\\\\"\\\\n        );\\\\n\\\\n        // Verify that the given channel state matches the stored one\\\\n        require(\\\\n            hashChannelState(ccs) == channelDispute.channelStateHash,\\\\n            \\\\\\"CMCAdjudicator: INVALID_CHANNEL_HASH\\\\\\"\\\\n        );\\\\n\\\\n        // We need to be in defund phase for that\\\\n        require(inDefundPhase(), \\\\\\"CMCAdjudicator: INVALID_PHASE\\\\\\");\\\\n\\\\n        // TODO SECURITY: Beware of reentrancy\\\\n        // TODO: offchain-ensure that all arrays have the same length:\\\\n        // assetIds, balances, processedDepositsA, processedDepositsB, defundNonces\\\\n        // Make sure there are no duplicates in the assetIds -- duplicates are often a source of double-spends\\\\n\\\\n        // Defund all assets given\\\\n        for (uint256 i = 0; i < assetIds.length; i++) {\\\\n            address assetId = assetIds[i];\\\\n\\\\n            // Verify or find the index of the assetId in the ccs.assetIds\\\\n            uint256 index;\\\\n            if (i < indices.length) {\\\\n                // The index was supposedly given -- we verify\\\\n                index = indices[i];\\\\n                require(\\\\n                    assetId == ccs.assetIds[index],\\\\n                    \\\\\\"CMCAdjudicator: INDEX_MISMATCH\\\\\\"\\\\n                );\\\\n            } else {\\\\n                // we search through the assets in ccs\\\\n                for (index = 0; index < ccs.assetIds.length; index++) {\\\\n                    if (assetId == ccs.assetIds[index]) {\\\\n                        break;\\\\n                    }\\\\n                }\\\\n            }\\\\n\\\\n            // Now, if `index`  is equal to the number of assets in ccs,\\\\n            // then the current asset is not in ccs;\\\\n            // otherwise, `index` is the index in ccs for the current asset\\\\n\\\\n            // Check the assets haven\'t already been defunded + update the\\\\n            // defundNonce for that asset\\\\n            {\\\\n                // Open a new block to avoid \\\\\\"stack too deep\\\\\\" error\\\\n                uint256 defundNonce =\\\\n                    (index == ccs.assetIds.length)\\\\n                        ? INITIAL_DEFUND_NONCE\\\\n                        : ccs.defundNonces[index];\\\\n                require(\\\\n                    defundNonces[assetId] < defundNonce,\\\\n                    \\\\\\"CMCAdjudicator: CHANNEL_ALREADY_DEFUNDED\\\\\\"\\\\n                );\\\\n                defundNonces[assetId] = defundNonce;\\\\n            }\\\\n\\\\n            // Get total deposits\\\\n            uint256 tdAlice = _getTotalDepositsAlice(assetId);\\\\n            uint256 tdBob = _getTotalDepositsBob(assetId);\\\\n\\\\n            Balance memory balance;\\\\n\\\\n            if (index == ccs.assetIds.length) {\\\\n                // The current asset is not a part of ccs; refund what has been deposited\\\\n                balance = Balance({\\\\n                    amount: [tdAlice, tdBob],\\\\n                    to: [payable(ccs.alice), payable(ccs.bob)]\\\\n                });\\\\n            } else {\\\\n                // Start with the final balances in ccs\\\\n                balance = ccs.balances[index];\\\\n                // Add unprocessed deposits\\\\n                balance.amount[0] = balance.amount[0].satAdd(\\\\n                    tdAlice - ccs.processedDepositsA[index]\\\\n                );\\\\n                balance.amount[1] = balance.amount[1].satAdd(\\\\n                    tdBob - ccs.processedDepositsB[index]\\\\n                );\\\\n            }\\\\n\\\\n            // Add result to exitable amounts\\\\n            makeBalanceExitable(assetId, balance);\\\\n        }\\\\n\\\\n        emit ChannelDefunded(\\\\n            msg.sender,\\\\n            ccs,\\\\n            channelDispute,\\\\n            assetIds\\\\n        );\\\\n    }\\\\n\\\\n    function disputeTransfer(\\\\n        CoreTransferState calldata cts,\\\\n        bytes32[] calldata merkleProofData\\\\n    ) external override onlyViaProxy nonReentrant validateTransfer(cts) {\\\\n        // Verify that the given transfer state is included in the \\\\\\"finalized\\\\\\" channel state\\\\n        bytes32 transferStateHash = hashTransferState(cts);\\\\n        verifyMerkleProof(\\\\n            merkleProofData,\\\\n            channelDispute.merkleRoot,\\\\n            transferStateHash\\\\n        );\\\\n\\\\n        // The channel needs to be in defund phase for that, i.e. channel state is \\\\\\"finalized\\\\\\"\\\\n        require(inDefundPhase(), \\\\\\"CMCAdjudicator: INVALID_PHASE\\\\\\");\\\\n\\\\n        // Get stored dispute for this transfer\\\\n        TransferDispute storage transferDispute =\\\\n            transferDisputes[cts.transferId];\\\\n\\\\n        // Verify that this transfer has not been disputed before\\\\n        require(\\\\n            transferDispute.transferDisputeExpiry == 0,\\\\n            \\\\\\"CMCAdjudicator: TRANSFER_ALREADY_DISPUTED\\\\\\"\\\\n        );\\\\n\\\\n        // Store transfer state and set expiry\\\\n        transferDispute.transferStateHash = transferStateHash;\\\\n        // TODO: offchain-ensure that there can\'t be an overflow\\\\n        transferDispute.transferDisputeExpiry = block.timestamp.add(\\\\n            cts.transferTimeout\\\\n        );\\\\n\\\\n        emit TransferDisputed(\\\\n            msg.sender,\\\\n            cts,\\\\n            transferDispute\\\\n        );\\\\n    }\\\\n\\\\n    function defundTransfer(\\\\n        CoreTransferState calldata cts,\\\\n        bytes calldata encodedInitialTransferState,\\\\n        bytes calldata encodedTransferResolver,\\\\n        bytes calldata responderSignature\\\\n    ) external override onlyViaProxy nonReentrant validateTransfer(cts) {\\\\n        // Get stored dispute for this transfer\\\\n        TransferDispute storage transferDispute =\\\\n            transferDisputes[cts.transferId];\\\\n\\\\n        // Verify that a dispute for this transfer has already been started\\\\n        require(\\\\n            transferDispute.transferDisputeExpiry != 0,\\\\n            \\\\\\"CMCAdjudicator: TRANSFER_NOT_DISPUTED\\\\\\"\\\\n        );\\\\n\\\\n        // Verify that the given transfer state matches the stored one\\\\n        require(\\\\n            hashTransferState(cts) == transferDispute.transferStateHash,\\\\n            \\\\\\"CMCAdjudicator: INVALID_TRANSFER_HASH\\\\\\"\\\\n        );\\\\n\\\\n        // We can\'t defund twice\\\\n        require(\\\\n            !transferDispute.isDefunded,\\\\n            \\\\\\"CMCAdjudicator: TRANSFER_ALREADY_DEFUNDED\\\\\\"\\\\n        );\\\\n        transferDispute.isDefunded = true;\\\\n\\\\n        Balance memory balance;\\\\n\\\\n        if (block.timestamp < transferDispute.transferDisputeExpiry) {\\\\n            // Ensure the correct hash is provided\\\\n            require(\\\\n                keccak256(encodedInitialTransferState) == cts.initialStateHash,\\\\n                \\\\\\"CMCAdjudicator: INVALID_TRANSFER_HASH\\\\\\"\\\\n            );\\\\n            \\\\n            // Before dispute expiry, responder or responder-authorized\\\\n            // agent (i.e. watchtower) can resolve\\\\n            require(\\\\n                msg.sender == cts.responder || cts.initialStateHash.checkSignature(responderSignature, cts.responder),\\\\n                \\\\\\"CMCAdjudicator: INVALID_RESOLVER\\\\\\"\\\\n            );\\\\n            \\\\n            ITransferDefinition transferDefinition =\\\\n                ITransferDefinition(cts.transferDefinition);\\\\n            balance = transferDefinition.resolve(\\\\n                abi.encode(cts.balance),\\\\n                encodedInitialTransferState,\\\\n                encodedTransferResolver\\\\n            );\\\\n            // Verify that returned balances don\'t exceed initial balances\\\\n            require(\\\\n                balance.amount[0].add(balance.amount[1]) <=\\\\n                    cts.balance.amount[0].add(cts.balance.amount[1]),\\\\n                \\\\\\"CMCAdjudicator: INVALID_BALANCES\\\\\\"\\\\n            );\\\\n        } else {\\\\n            // After dispute expiry, if the responder hasn\'t resolved, we defund the initial balance\\\\n            balance = cts.balance;\\\\n        }\\\\n\\\\n        // Depending on previous code path, defund either resolved or initial balance\\\\n        makeBalanceExitable(cts.assetId, balance);\\\\n\\\\n        // Emit event\\\\n        emit TransferDefunded(\\\\n            msg.sender,\\\\n            cts,\\\\n            transferDispute,\\\\n            encodedInitialTransferState,\\\\n            encodedTransferResolver,\\\\n            balance\\\\n        );\\\\n    }\\\\n\\\\n    function verifySignaturesOnChannelStateHash(\\\\n        CoreChannelState calldata ccs,\\\\n        bytes32 ccsHash,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) internal pure {\\\\n        bytes32 commitment =\\\\n            keccak256(abi.encode(CommitmentType.ChannelState, ccsHash));\\\\n        require(\\\\n            commitment.checkSignature(aliceSignature, ccs.alice),\\\\n            \\\\\\"CMCAdjudicator: INVALID_ALICE_SIG\\\\\\"\\\\n        );\\\\n        require(\\\\n            commitment.checkSignature(bobSignature, ccs.bob),\\\\n            \\\\\\"CMCAdjudicator: INVALID_BOB_SIG\\\\\\"\\\\n        );\\\\n    }\\\\n\\\\n    function verifyMerkleProof(\\\\n        bytes32[] calldata proof,\\\\n        bytes32 root,\\\\n        bytes32 leaf\\\\n    ) internal pure {\\\\n        require(\\\\n            MerkleProof.verify(proof, root, leaf),\\\\n            \\\\\\"CMCAdjudicator: INVALID_MERKLE_PROOF\\\\\\"\\\\n        );\\\\n    }\\\\n\\\\n    function inConsensusPhase() internal view returns (bool) {\\\\n        return block.timestamp < channelDispute.consensusExpiry;\\\\n    }\\\\n\\\\n    function inDefundPhase() internal view returns (bool) {\\\\n        return\\\\n            channelDispute.consensusExpiry <= block.timestamp &&\\\\n            block.timestamp < channelDispute.defundExpiry;\\\\n    }\\\\n\\\\n    function hashChannelState(CoreChannelState calldata ccs)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        return keccak256(abi.encode(ccs));\\\\n    }\\\\n\\\\n    function hashTransferState(CoreTransferState calldata cts)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        return keccak256(abi.encode(cts));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x351fb7770cbb6fbb6f3470e63d5a9e93c817722f9c8e2e5c62e38ebf8c6e389b\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/CMCAsset.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/ICMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/Types.sol\\\\\\";\\\\nimport \\\\\\"./CMCCore.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibAsset.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibMath.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/math/Math.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/math/SafeMath.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\\\\";\\\\n\\\\n/// @title CMCAsset\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains logic to safely transfer channel assets (even if they are\\\\n///         noncompliant). During adjudication, balances from defunding the\\\\n///         channel or defunding transfers are registered as withdrawable. Once\\\\n///         they are registered, the owner (or a watchtower on behalf of the\\\\n///         owner), may call `exit` to reclaim funds from the multisig.\\\\n\\\\ncontract CMCAsset is CMCCore, ICMCAsset {\\\\n    using SafeMath for uint256;\\\\n    using LibMath for uint256;\\\\n\\\\n    mapping(address => uint256) internal totalTransferred;\\\\n    mapping(address => mapping(address => uint256))\\\\n        private exitableAmount;\\\\n\\\\n    function registerTransfer(address assetId, uint256 amount) internal {\\\\n        totalTransferred[assetId] += amount;\\\\n    }\\\\n\\\\n    function getTotalTransferred(address assetId)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (uint256)\\\\n    {\\\\n        return totalTransferred[assetId];\\\\n    }\\\\n\\\\n    function makeExitable(\\\\n        address assetId,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal {\\\\n        exitableAmount[assetId][\\\\n            recipient\\\\n        ] = exitableAmount[assetId][recipient].satAdd(amount);\\\\n    }\\\\n\\\\n    function makeBalanceExitable(\\\\n        address assetId,\\\\n        Balance memory balance\\\\n    ) internal {\\\\n        for (uint256 i = 0; i < 2; i++) {\\\\n            uint256 amount = balance.amount[i];\\\\n            if (amount > 0) {\\\\n                makeExitable(assetId, balance.to[i], amount);\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n    function getExitableAmount(address assetId, address owner)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (uint256)\\\\n    {\\\\n        return exitableAmount[assetId][owner];\\\\n    }\\\\n\\\\n    function getAvailableAmount(address assetId, uint256 maxAmount)\\\\n        internal\\\\n        view\\\\n        returns (uint256)\\\\n    {\\\\n        // Taking the min protects against the case where the multisig\\\\n        // holds less than the amount that is trying to be withdrawn\\\\n        // while still allowing the total of the funds to be removed\\\\n        // without the transaction reverting.\\\\n        return Math.min(maxAmount, LibAsset.getOwnBalance(assetId));\\\\n    }\\\\n\\\\n    function transferAsset(\\\\n        address assetId,\\\\n        address payable recipient,\\\\n        uint256 amount\\\\n    ) internal {\\\\n        registerTransfer(assetId, amount);\\\\n        require(\\\\n            LibAsset.unregisteredTransfer(assetId, recipient, amount),\\\\n            \\\\\\"CMCAsset: TRANSFER_FAILED\\\\\\"\\\\n        );\\\\n    }\\\\n\\\\n    function exit(\\\\n        address assetId,\\\\n        address owner,\\\\n        address payable recipient\\\\n    ) external override onlyViaProxy nonReentrant {\\\\n        // Either the owner must be the recipient, or in control\\\\n        // of setting the recipient of the funds to whomever they\\\\n        // choose\\\\n        require(\\\\n            msg.sender == owner || owner == recipient,\\\\n            \\\\\\"CMCAsset: OWNER_MISMATCH\\\\\\"\\\\n        );\\\\n\\\\n        uint256 amount =\\\\n            getAvailableAmount(\\\\n                assetId,\\\\n                exitableAmount[assetId][owner]\\\\n            );\\\\n\\\\n        // Revert if amount is 0\\\\n        require(amount > 0, \\\\\\"CMCAsset: NO_OP\\\\\\");\\\\n\\\\n        // Reduce the amount claimable from the multisig by the owner\\\\n        exitableAmount[assetId][\\\\n            owner\\\\n        ] = exitableAmount[assetId][owner].sub(amount);\\\\n\\\\n        // Perform transfer\\\\n        transferAsset(assetId, recipient, amount);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x39c1bd81d8ec2a0fa7c23aad683017f5e2ec28a2db43643020649f935b5b74bf\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/CMCCore.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/ICMCCore.sol\\\\\\";\\\\nimport \\\\\\"./ReentrancyGuard.sol\\\\\\";\\\\n\\\\n/// @title CMCCore\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains logic pertaining to the participants of a channel,\\\\n///         including setting and retrieving the participants and the\\\\n///         mastercopy.\\\\n\\\\ncontract CMCCore is ReentrancyGuard, ICMCCore {\\\\n    address private immutable mastercopyAddress;\\\\n\\\\n    address internal alice;\\\\n    address internal bob;\\\\n\\\\n    /// @notice Set invalid participants to block the mastercopy from being used directly\\\\n    ///         Nonzero address also prevents the mastercopy from being setup\\\\n    ///         Only setting alice is sufficient, setting bob too wouldn\'t change anything\\\\n    constructor() {\\\\n        mastercopyAddress = address(this);\\\\n    }\\\\n\\\\n    // Prevents us from calling methods directly from the mastercopy contract\\\\n    modifier onlyViaProxy {\\\\n        require(\\\\n            address(this) != mastercopyAddress,\\\\n            \\\\\\"Mastercopy: ONLY_VIA_PROXY\\\\\\"\\\\n        );\\\\n        _;\\\\n    }\\\\n\\\\n    /// @notice Contract constructor for Proxied copies\\\\n    /// @param _alice: Address representing user with function deposit\\\\n    /// @param _bob: Address representing user with multisig deposit\\\\n    function setup(address _alice, address _bob)\\\\n        external\\\\n        override\\\\n        onlyViaProxy\\\\n    {\\\\n        require(alice == address(0), \\\\\\"CMCCore: ALREADY_SETUP\\\\\\");\\\\n        require(\\\\n            _alice != address(0) && _bob != address(0),\\\\n            \\\\\\"CMCCore: INVALID_PARTICIPANT\\\\\\"\\\\n        );\\\\n        require(_alice != _bob, \\\\\\"CMCCore: IDENTICAL_PARTICIPANTS\\\\\\");\\\\n        ReentrancyGuard.setup();\\\\n        alice = _alice;\\\\n        bob = _bob;\\\\n    }\\\\n\\\\n    /// @notice A getter function for the bob of the multisig\\\\n    /// @return Bob\'s signer address\\\\n    function getAlice()\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (address)\\\\n    {\\\\n        return alice;\\\\n    }\\\\n\\\\n    /// @notice A getter function for the bob of the multisig\\\\n    /// @return Alice\'s signer address\\\\n    function getBob()\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (address)\\\\n    {\\\\n        return bob;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x37324d80a19f1feb6e413fe6a41d82b5dba38bca62e0e05ae6f420000dd93c53\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/CMCDeposit.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/ICMCDeposit.sol\\\\\\";\\\\nimport \\\\\\"./CMCCore.sol\\\\\\";\\\\nimport \\\\\\"./CMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibAsset.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibERC20.sol\\\\\\";\\\\n\\\\n/// @title CMCDeposit\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains logic supporting channel multisig deposits. Channel\\\\n///         funding is asymmetric, with `alice` having to call a deposit\\\\n///         function which tracks the total amount she has deposited so far,\\\\n///         and any other funds in the multisig being attributed to `bob`.\\\\n\\\\ncontract CMCDeposit is CMCCore, CMCAsset, ICMCDeposit {\\\\n    mapping(address => uint256) private depositsAlice;\\\\n\\\\n    receive() external payable onlyViaProxy nonReentrant {}\\\\n\\\\n    function getTotalDepositsAlice(address assetId)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (uint256)\\\\n    {\\\\n        return _getTotalDepositsAlice(assetId);\\\\n    }\\\\n\\\\n    function _getTotalDepositsAlice(address assetId)\\\\n        internal\\\\n        view\\\\n        returns (uint256)\\\\n    {\\\\n        return depositsAlice[assetId];\\\\n    }\\\\n\\\\n    function getTotalDepositsBob(address assetId)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (uint256)\\\\n    {\\\\n        return _getTotalDepositsBob(assetId);\\\\n    }\\\\n\\\\n    // Calculated using invariant onchain properties. Note we DONT use safemath here\\\\n    function _getTotalDepositsBob(address assetId)\\\\n        internal\\\\n        view\\\\n        returns (uint256)\\\\n    {\\\\n        return\\\\n            LibAsset.getOwnBalance(assetId) +\\\\n            totalTransferred[assetId] -\\\\n            depositsAlice[assetId];\\\\n    }\\\\n\\\\n    function depositAlice(address assetId, uint256 amount)\\\\n        external\\\\n        payable\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrant\\\\n    {\\\\n        if (LibAsset.isEther(assetId)) {\\\\n            require(msg.value == amount, \\\\\\"CMCDeposit: VALUE_MISMATCH\\\\\\");\\\\n        } else {\\\\n            // If ETH is sent along, it will be attributed to bob\\\\n            require(msg.value == 0, \\\\\\"CMCDeposit: ETH_WITH_ERC_TRANSFER\\\\\\");\\\\n            require(\\\\n                LibERC20.transferFrom(\\\\n                    assetId,\\\\n                    msg.sender,\\\\n                    address(this),\\\\n                    amount\\\\n                ),\\\\n                \\\\\\"CMCDeposit: ERC20_TRANSFER_FAILED\\\\\\"\\\\n            );\\\\n        }\\\\n        // NOTE: explicitly do NOT use safemath here\\\\n        depositsAlice[assetId] += amount;\\\\n        emit AliceDeposited(assetId, amount);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x4d3dd828158289df93d6b5a6419bc5e8d95888aba81e62cd913af1e4c540bece\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/CMCWithdraw.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/Commitment.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/ICMCWithdraw.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/WithdrawHelper.sol\\\\\\";\\\\nimport \\\\\\"./CMCCore.sol\\\\\\";\\\\nimport \\\\\\"./CMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibAsset.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibChannelCrypto.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibUtils.sol\\\\\\";\\\\n\\\\n/// @title CMCWithdraw\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains logic for all cooperative channel multisig withdrawals.\\\\n///         Cooperative withdrawal commitments must be signed by both channel\\\\n///         participants. As part of the channel withdrawals, an arbitrary\\\\n///         call can be made, which is extracted from the withdraw data.\\\\n\\\\ncontract CMCWithdraw is CMCCore, CMCAsset, ICMCWithdraw {\\\\n    using LibChannelCrypto for bytes32;\\\\n\\\\n    mapping(bytes32 => bool) private isExecuted;\\\\n\\\\n    modifier validateWithdrawData(WithdrawData calldata wd) {\\\\n        require(\\\\n            wd.channelAddress == address(this),\\\\n            \\\\\\"CMCWithdraw: CHANNEL_MISMATCH\\\\\\"\\\\n        );\\\\n        _;\\\\n    }\\\\n\\\\n    function getWithdrawalTransactionRecord(WithdrawData calldata wd)\\\\n        external\\\\n        view\\\\n        override\\\\n        onlyViaProxy\\\\n        nonReentrantView\\\\n        returns (bool)\\\\n    {\\\\n        return isExecuted[hashWithdrawData(wd)];\\\\n    }\\\\n\\\\n    /// @param wd The withdraw data consisting of\\\\n    /// semantic withdraw information, i.e. assetId, recipient, and amount;\\\\n    /// information to make an optional call in addition to the actual transfer,\\\\n    /// i.e. target address for the call and call payload;\\\\n    /// additional information, i.e. channel address and nonce.\\\\n    /// @param aliceSignature Signature of owner a\\\\n    /// @param bobSignature Signature of owner b\\\\n    function withdraw(\\\\n        WithdrawData calldata wd,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) external override onlyViaProxy nonReentrant validateWithdrawData(wd) {\\\\n        // Generate hash\\\\n        bytes32 wdHash = hashWithdrawData(wd);\\\\n\\\\n        // Verify Alice\'s and Bob\'s signature on the withdraw data\\\\n        verifySignaturesOnWithdrawDataHash(wdHash, aliceSignature, bobSignature);\\\\n\\\\n        // Replay protection\\\\n        require(!isExecuted[wdHash], \\\\\\"CMCWithdraw: ALREADY_EXECUTED\\\\\\");\\\\n        isExecuted[wdHash] = true;\\\\n\\\\n        // Determine actually transferable amount\\\\n        uint256 actualAmount = getAvailableAmount(wd.assetId, wd.amount);\\\\n\\\\n        // Revert if actualAmount is zero && callTo is 0\\\\n        require(\\\\n            actualAmount > 0 || wd.callTo != address(0),\\\\n            \\\\\\"CMCWithdraw: NO_OP\\\\\\"\\\\n        );\\\\n\\\\n        // Register and execute the transfer\\\\n        transferAsset(wd.assetId, wd.recipient, actualAmount);\\\\n\\\\n        // Do we have to make a call in addition to the actual transfer?\\\\n        if (wd.callTo != address(0)) {\\\\n            WithdrawHelper(wd.callTo).execute(wd, actualAmount);\\\\n        }\\\\n    }\\\\n\\\\n    function verifySignaturesOnWithdrawDataHash(\\\\n        bytes32 wdHash,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) internal view {\\\\n        bytes32 commitment =\\\\n            keccak256(abi.encode(CommitmentType.WithdrawData, wdHash));\\\\n        require(\\\\n            commitment.checkSignature(aliceSignature, alice),\\\\n            \\\\\\"CMCWithdraw: INVALID_ALICE_SIG\\\\\\"\\\\n        );\\\\n        require(\\\\n            commitment.checkSignature(bobSignature, bob),\\\\n            \\\\\\"CMCWithdraw: INVALID_BOB_SIG\\\\\\"\\\\n        );\\\\n    }\\\\n\\\\n    function hashWithdrawData(WithdrawData calldata wd)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        return keccak256(abi.encode(wd));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x7fde93a55cab8b4a9497471af1f8321a6d9463a93c3c6b11cf6d5ada26326beb\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/ChannelMastercopy.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/IVectorChannel.sol\\\\\\";\\\\nimport \\\\\\"./CMCCore.sol\\\\\\";\\\\nimport \\\\\\"./CMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./CMCDeposit.sol\\\\\\";\\\\nimport \\\\\\"./CMCWithdraw.sol\\\\\\";\\\\nimport \\\\\\"./CMCAdjudicator.sol\\\\\\";\\\\n\\\\n/// @title ChannelMastercopy\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains the logic used by all Vector multisigs. A proxy to this\\\\n///         contract is deployed per-channel using the ChannelFactory.sol.\\\\n///         Supports channel adjudication logic, deposit logic, and arbitrary\\\\n///         calls when a commitment is double-signed.\\\\ncontract ChannelMastercopy is\\\\n    CMCCore,\\\\n    CMCAsset,\\\\n    CMCDeposit,\\\\n    CMCWithdraw,\\\\n    CMCAdjudicator,\\\\n    IVectorChannel\\\\n{\\\\n\\\\n}\\\\n\\",\\"keccak256\\":\\"0x96d68c908eb39a0002b574c423306ef1b9991da56087cb8f5e2d8b908676b3c7\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/ReentrancyGuard.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\n/// @title CMCWithdraw\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice A \\\\\\"mutex\\\\\\" reentrancy guard, heavily influenced by OpenZeppelin.\\\\n\\\\ncontract ReentrancyGuard {\\\\n    uint256 private constant OPEN = 1;\\\\n    uint256 private constant LOCKED = 2;\\\\n\\\\n    uint256 public lock;\\\\n\\\\n    function setup() internal {\\\\n        lock = OPEN;\\\\n    }\\\\n\\\\n    modifier nonReentrant() {\\\\n        require(lock == OPEN, \\\\\\"ReentrancyGuard: REENTRANT_CALL\\\\\\");\\\\n        lock = LOCKED;\\\\n        _;\\\\n        lock = OPEN;\\\\n    }\\\\n\\\\n    modifier nonReentrantView() {\\\\n        require(lock == OPEN, \\\\\\"ReentrancyGuard: REENTRANT_CALL\\\\\\");\\\\n        _;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf7adf3f05703e0176d892051633e6ca3291e5a3d7ab769f880c03a0d0849dfa7\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/Commitment.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nenum CommitmentType {ChannelState, WithdrawData}\\\\n\\",\\"keccak256\\":\\"0xabfb62d2dbe45e307fc08742f87d2ff5d6faa9ab065f0c2395dc4adcbe0a9c20\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCAdjudicator.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./Types.sol\\\\\\";\\\\n\\\\ninterface ICMCAdjudicator {\\\\n    struct CoreChannelState {\\\\n        address channelAddress;\\\\n        address alice;\\\\n        address bob;\\\\n        address[] assetIds;\\\\n        Balance[] balances;\\\\n        uint256[] processedDepositsA;\\\\n        uint256[] processedDepositsB;\\\\n        uint256[] defundNonces;\\\\n        uint256 timeout;\\\\n        uint256 nonce;\\\\n        bytes32 merkleRoot;\\\\n    }\\\\n\\\\n    struct CoreTransferState {\\\\n        address channelAddress;\\\\n        bytes32 transferId;\\\\n        address transferDefinition;\\\\n        address initiator;\\\\n        address responder;\\\\n        address assetId;\\\\n        Balance balance;\\\\n        uint256 transferTimeout;\\\\n        bytes32 initialStateHash;\\\\n    }\\\\n\\\\n    struct ChannelDispute {\\\\n        bytes32 channelStateHash;\\\\n        uint256 nonce;\\\\n        bytes32 merkleRoot;\\\\n        uint256 consensusExpiry;\\\\n        uint256 defundExpiry;\\\\n    }\\\\n\\\\n    struct TransferDispute {\\\\n        bytes32 transferStateHash;\\\\n        uint256 transferDisputeExpiry;\\\\n        bool isDefunded;\\\\n    }\\\\n\\\\n    event ChannelDisputed(\\\\n        address disputer,\\\\n        CoreChannelState state,\\\\n        ChannelDispute dispute\\\\n    );\\\\n\\\\n    event ChannelDefunded(\\\\n        address defunder,\\\\n        CoreChannelState state,\\\\n        ChannelDispute dispute,\\\\n        address[] assetIds\\\\n    );\\\\n\\\\n    event TransferDisputed(\\\\n        address disputer,\\\\n        CoreTransferState state,\\\\n        TransferDispute dispute\\\\n    );\\\\n\\\\n    event TransferDefunded(\\\\n        address defunder,\\\\n        CoreTransferState state,\\\\n        TransferDispute dispute,\\\\n        bytes encodedInitialState,\\\\n        bytes encodedResolver,\\\\n        Balance balance\\\\n    );\\\\n\\\\n    function getChannelDispute() external view returns (ChannelDispute memory);\\\\n\\\\n    function getDefundNonce(address assetId) external view returns (uint256);\\\\n\\\\n    function getTransferDispute(bytes32 transferId)\\\\n        external\\\\n        view\\\\n        returns (TransferDispute memory);\\\\n\\\\n    function disputeChannel(\\\\n        CoreChannelState calldata ccs,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) external;\\\\n\\\\n    function defundChannel(\\\\n        CoreChannelState calldata ccs,\\\\n        address[] calldata assetIds,\\\\n        uint256[] calldata indices\\\\n    ) external;\\\\n\\\\n    function disputeTransfer(\\\\n        CoreTransferState calldata cts,\\\\n        bytes32[] calldata merkleProofData\\\\n    ) external;\\\\n\\\\n    function defundTransfer(\\\\n        CoreTransferState calldata cts,\\\\n        bytes calldata encodedInitialTransferState,\\\\n        bytes calldata encodedTransferResolver,\\\\n        bytes calldata responderSignature\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x88522bb51c2b9991b24ef33a3c776ac76d96060ebbc33cd5b2b14513fb21d237\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCAsset.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface ICMCAsset {\\\\n    function getTotalTransferred(address assetId)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function getExitableAmount(address assetId, address owner)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function exit(\\\\n        address assetId,\\\\n        address owner,\\\\n        address payable recipient\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x895d89536e8ca469afe642b7001f0dfff497ce29d5d73f862b07a1cdc483f3f7\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCCore.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface ICMCCore {\\\\n    function setup(address _alice, address _bob) external;\\\\n\\\\n    function getAlice() external view returns (address);\\\\n\\\\n    function getBob() external view returns (address);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x8e8da2d8fb5198441ba6cdff018dff9e4145b07d575647c990659adad637ec8c\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCDeposit.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\ninterface ICMCDeposit {\\\\n    event AliceDeposited(address assetId, uint256 amount);\\\\n    \\\\n    function getTotalDepositsAlice(address assetId)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function getTotalDepositsBob(address assetId)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    function depositAlice(address assetId, uint256 amount) external payable;\\\\n}\\\\n\\",\\"keccak256\\":\\"0xdf6f284e44d88013cf9d51220315fb37e63086e470442685891c90aadd138295\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ICMCWithdraw.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nstruct WithdrawData {\\\\n    address channelAddress;\\\\n    address assetId;\\\\n    address payable recipient;\\\\n    uint256 amount;\\\\n    uint256 nonce;\\\\n    address callTo;\\\\n    bytes callData;\\\\n}\\\\n\\\\ninterface ICMCWithdraw {\\\\n    function getWithdrawalTransactionRecord(WithdrawData calldata wd)\\\\n        external\\\\n        view\\\\n        returns (bool);\\\\n\\\\n    function withdraw(\\\\n        WithdrawData calldata wd,\\\\n        bytes calldata aliceSignature,\\\\n        bytes calldata bobSignature\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x097dfe95ad19096f9a3dd0138b4a51680c26e665d1639278a7c0a5c9f7fc5c78\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ITransferDefinition.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./ITransferRegistry.sol\\\\\\";\\\\nimport \\\\\\"./Types.sol\\\\\\";\\\\n\\\\ninterface ITransferDefinition {\\\\n    // Validates the initial state of the transfer.\\\\n    // Called by validator.ts during `create` updates.\\\\n    function create(bytes calldata encodedBalance, bytes calldata)\\\\n        external\\\\n        view\\\\n        returns (bool);\\\\n\\\\n    // Performs a state transition to resolve a transfer and returns final balances.\\\\n    // Called by validator.ts during `resolve` updates.\\\\n    function resolve(\\\\n        bytes calldata encodedBalance,\\\\n        bytes calldata,\\\\n        bytes calldata\\\\n    ) external view returns (Balance memory);\\\\n\\\\n    // Should also have the following properties:\\\\n    // string public constant override Name = \\\\\\"...\\\\\\";\\\\n    // string public constant override StateEncoding = \\\\\\"...\\\\\\";\\\\n    // string public constant override ResolverEncoding = \\\\\\"...\\\\\\";\\\\n    // These properties are included on the transfer specifically\\\\n    // to make it easier for implementers to add new transfers by\\\\n    // only include a `.sol` file\\\\n    function Name() external view returns (string memory);\\\\n\\\\n    function StateEncoding() external view returns (string memory);\\\\n\\\\n    function ResolverEncoding() external view returns (string memory);\\\\n\\\\n    function EncodedCancel() external view returns (bytes memory);\\\\n\\\\n    function getRegistryInformation()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd8eef575aa791b187397c9096e6cf40431b590d3999f0a80e38f3e59f4cf4764\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ITransferRegistry.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental \\\\\\"ABIEncoderV2\\\\\\";\\\\n\\\\nstruct RegisteredTransfer {\\\\n    string name;\\\\n    address definition;\\\\n    string stateEncoding;\\\\n    string resolverEncoding;\\\\n    bytes encodedCancel;\\\\n}\\\\n\\\\ninterface ITransferRegistry {\\\\n    event TransferAdded(RegisteredTransfer transfer);\\\\n\\\\n    event TransferRemoved(RegisteredTransfer transfer);\\\\n\\\\n    // Should add a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function addTransferDefinition(RegisteredTransfer memory transfer) external;\\\\n\\\\n    // Should remove a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function removeTransferDefinition(string memory name) external;\\\\n\\\\n    // Should return all transfer defintions in registry\\\\n    function getTransferDefinitions()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer[] memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd13be6d976c64e381a0d9df10c621cd964454b6916f25df4ea6c1b4cd873a58a\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/IVectorChannel.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./ICMCCore.sol\\\\\\";\\\\nimport \\\\\\"./ICMCAsset.sol\\\\\\";\\\\nimport \\\\\\"./ICMCDeposit.sol\\\\\\";\\\\nimport \\\\\\"./ICMCWithdraw.sol\\\\\\";\\\\nimport \\\\\\"./ICMCAdjudicator.sol\\\\\\";\\\\n\\\\ninterface IVectorChannel is\\\\n    ICMCCore,\\\\n    ICMCAsset,\\\\n    ICMCDeposit,\\\\n    ICMCWithdraw,\\\\n    ICMCAdjudicator\\\\n{}\\\\n\\",\\"keccak256\\":\\"0x9e21e3b6510bb5aecab999bfcbefe6184bd2be5a80179ef8ecadb63ddd2c8d53\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/Types.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nstruct Balance {\\\\n    uint256[2] amount; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n    address payable[2] to; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf8c71b155b630cde965f5d1db5f0d2751a9763f5a797f15d946613e9224f1046\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/WithdrawHelper.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./ICMCWithdraw.sol\\\\\\";\\\\n\\\\ninterface WithdrawHelper {\\\\n    function execute(WithdrawData calldata wd, uint256 actualAmount) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x45bd70363bc7a45001589d55d8d068a3baa321c50382c0c73f1ffae45adfc4bb\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibAsset.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./LibERC20.sol\\\\\\";\\\\nimport \\\\\\"./LibUtils.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\\\\";\\\\n\\\\n\\\\n/// @title LibAsset\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This library contains helpers for dealing with onchain transfers\\\\n///         of in-channel assets. It is designed to safely handle all asset\\\\n///         transfers out of channel in the event of an onchain dispute. Also\\\\n///         safely handles ERC20 transfers that may be non-compliant\\\\nlibrary LibAsset {\\\\n    address constant ETHER_ASSETID = address(0);\\\\n\\\\n    function isEther(address assetId) internal pure returns (bool) {\\\\n        return assetId == ETHER_ASSETID;\\\\n    }\\\\n\\\\n    function getOwnBalance(address assetId) internal view returns (uint256) {\\\\n        return\\\\n            isEther(assetId)\\\\n                ? address(this).balance\\\\n                : IERC20(assetId).balanceOf(address(this));\\\\n    }\\\\n\\\\n    function transferEther(address payable recipient, uint256 amount)\\\\n        internal\\\\n        returns (bool)\\\\n    {\\\\n        (bool success, bytes memory returnData) =\\\\n            recipient.call{value: amount}(\\\\\\"\\\\\\");\\\\n        LibUtils.revertIfCallFailed(success, returnData);\\\\n        return true;\\\\n    }\\\\n\\\\n    function transferERC20(\\\\n        address assetId,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return LibERC20.transfer(assetId, recipient, amount);\\\\n    }\\\\n\\\\n    // This function is a wrapper for transfers of Ether or ERC20 tokens,\\\\n    // both standard-compliant ones as well as tokens that exhibit the\\\\n    // missing-return-value bug.\\\\n    // Although it behaves very much like Solidity\'s `transfer` function\\\\n    // or the ERC20 `transfer` and is, in fact, designed to replace direct\\\\n    // usage of those, it is deliberately named `unregisteredTransfer`,\\\\n    // because we need to register every transfer out of the channel.\\\\n    // Therefore, it should normally not be used directly, with the single\\\\n    // exception of the `transferAsset` function in `CMCAsset.sol`,\\\\n    // which combines the \\\\\\"naked\\\\\\" unregistered transfer given below\\\\n    // with a registration.\\\\n    // USING THIS FUNCTION SOMEWHERE ELSE IS PROBABLY WRONG!\\\\n    function unregisteredTransfer(\\\\n        address assetId,\\\\n        address payable recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            isEther(assetId)\\\\n                ? transferEther(recipient, amount)\\\\n                : transferERC20(assetId, recipient, amount);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x02e7b660846ad2f56f8005f786e0e2eb1d625c83f4cfcf9fc07a9566ca86195c\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibChannelCrypto.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\\\\\";\\\\n\\\\t\\\\t\\\\n/// @author Connext <support@connext.network>\\\\t\\\\t\\\\n/// @notice This library contains helpers for recovering signatures from a\\\\t\\\\t\\\\n///         Vector commitments. Channels do not allow for arbitrary signing of\\\\t\\\\t\\\\n///         messages to prevent misuse of private keys by injected providers,\\\\t\\\\t\\\\n///         and instead only sign messages with a Vector channel prefix.\\\\nlibrary LibChannelCrypto {\\\\n    function checkSignature(\\\\n        bytes32 hash,\\\\n        bytes memory signature,\\\\n        address allegedSigner\\\\n    ) internal pure returns (bool) {\\\\n        return recoverChannelMessageSigner(hash, signature) == allegedSigner;\\\\n    }\\\\n\\\\n    function recoverChannelMessageSigner(bytes32 hash, bytes memory signature)\\\\n        internal\\\\n        pure\\\\n        returns (address)\\\\n    {\\\\n        bytes32 digest = toChannelSignedMessage(hash);\\\\n        return ECDSA.recover(digest, signature);\\\\n    }\\\\n\\\\n    function toChannelSignedMessage(bytes32 hash)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        // 32 is the length in bytes of hash,\\\\n        // enforced by the type signature above\\\\n        return\\\\n            keccak256(abi.encodePacked(\\\\\\"\\\\\\\\x16Vector Signed Message:\\\\\\\\n32\\\\\\", hash));\\\\n    }\\\\n\\\\n    function checkUtilitySignature(\\\\n        bytes32 hash,\\\\n        bytes memory signature,\\\\n        address allegedSigner\\\\n    ) internal pure returns (bool) {\\\\n        return recoverChannelMessageSigner(hash, signature) == allegedSigner;\\\\n    }\\\\n\\\\n    function recoverUtilityMessageSigner(bytes32 hash, bytes memory signature)\\\\n        internal\\\\n        pure\\\\n        returns (address)\\\\n    {\\\\n        bytes32 digest = toUtilitySignedMessage(hash);\\\\n        return ECDSA.recover(digest, signature);\\\\n    }\\\\n\\\\n    function toUtilitySignedMessage(bytes32 hash)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        // 32 is the length in bytes of hash,\\\\n        // enforced by the type signature above\\\\n        return\\\\n            keccak256(abi.encodePacked(\\\\\\"\\\\\\\\x17Utility Signed Message:\\\\\\\\n32\\\\\\", hash));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xb8aa3679b75f2a1a5785f614f5dff9a76a689c18caa56a8df1f4e3c3167d6ece\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./LibUtils.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Address.sol\\\\\\";\\\\n\\\\n/// @title LibERC20\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This library provides several functions to safely handle\\\\n///         noncompliant tokens (i.e. does not return a boolean from\\\\n///         the transfer function)\\\\n\\\\nlibrary LibERC20 {\\\\n    function wrapCall(address assetId, bytes memory callData)\\\\n        internal\\\\n        returns (bool)\\\\n    {\\\\n        require(Address.isContract(assetId), \\\\\\"LibERC20: NO_CODE\\\\\\");\\\\n        (bool success, bytes memory returnData) = assetId.call(callData);\\\\n        LibUtils.revertIfCallFailed(success, returnData);\\\\n        return returnData.length == 0 || abi.decode(returnData, (bool));\\\\n    }\\\\n\\\\n    function approve(\\\\n        address assetId,\\\\n        address spender,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            wrapCall(\\\\n                assetId,\\\\n                abi.encodeWithSignature(\\\\n                    \\\\\\"approve(address,uint256)\\\\\\",\\\\n                    spender,\\\\n                    amount\\\\n                )\\\\n            );\\\\n    }\\\\n\\\\n    function transferFrom(\\\\n        address assetId,\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            wrapCall(\\\\n                assetId,\\\\n                abi.encodeWithSignature(\\\\n                    \\\\\\"transferFrom(address,address,uint256)\\\\\\",\\\\n                    sender,\\\\n                    recipient,\\\\n                    amount\\\\n                )\\\\n            );\\\\n    }\\\\n\\\\n    function transfer(\\\\n        address assetId,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) internal returns (bool) {\\\\n        return\\\\n            wrapCall(\\\\n                assetId,\\\\n                abi.encodeWithSignature(\\\\n                    \\\\\\"transfer(address,uint256)\\\\\\",\\\\n                    recipient,\\\\n                    amount\\\\n                )\\\\n            );\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x5bad1474c93a295939c23f976786f0d086abc063f19ff9c8c1d069759c4a7ff5\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibMath.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\n/// @title LibMath\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This library allows functions that would otherwise overflow and\\\\n///         revert if SafeMath was used to instead return the UINT_MAX. In the\\\\n///         adjudicator, this is used to ensure you can get the majority of\\\\n///         funds out in the event your balance > UINT_MAX and there is an\\\\n///         onchain dispute.\\\\nlibrary LibMath {\\\\n    /// @dev Returns the maximum uint256 for an addition that would overflow\\\\n    ///      (saturation arithmetic)\\\\n    function satAdd(uint256 x, uint256 y) internal pure returns (uint256) {\\\\n        uint256 sum = x + y;\\\\n        return sum >= x ? sum : type(uint256).max;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x1e6307538bfdb12a0f5234db5b9b22365b6abe2b96baa37f2e4b5d2d3f6683b8\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibUtils.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\n/// @title LibUtils\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice Contains a helper to revert if a call was not successfully\\\\n///         made\\\\nlibrary LibUtils {\\\\n    // If success is false, reverts and passes on the revert string.\\\\n    function revertIfCallFailed(bool success, bytes memory returnData)\\\\n        internal\\\\n        pure\\\\n    {\\\\n        if (!success) {\\\\n            assembly {\\\\n                revert(add(returnData, 0x20), mload(returnData))\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf31897ed92b88739ca9c6e74d089e01c5dbf432183d2ab0b959b539842374ccd\\",\\"license\\":\\"UNLICENSED\\"}},\\"version\\":1}","bytecode":"","deployedBytecode":"","devdoc":{"author":"Connext <support@connext.network>","kind":"dev","methods":{"getAlice()":{"returns":{"_0":"Bob\'s signer address"}},"getBob()":{"returns":{"_0":"Alice\'s signer address"}},"setup(address,address)":{"params":{"_alice":": Address representing user with function deposit","_bob":": Address representing user with multisig deposit"}},"withdraw((address,address,address,uint256,uint256,address,bytes),bytes,bytes)":{"params":{"aliceSignature":"Signature of owner a","bobSignature":"Signature of owner b","wd":"The withdraw data consisting of semantic withdraw information, i.e. assetId, recipient, and amount; information to make an optional call in addition to the actual transfer, i.e. target address for the call and call payload; additional information, i.e. channel address and nonce."}}},"title":"ChannelMastercopy","version":1},"userdoc":{"kind":"user","methods":{"getAlice()":{"notice":"A getter function for the bob of the multisig"},"getBob()":{"notice":"A getter function for the bob of the multisig"},"setup(address,address)":{"notice":"Contract constructor for Proxied copies"}},"notice":"Contains the logic used by all Vector multisigs. A proxy to this         contract is deployed per-channel using the ChannelFactory.sol.         Supports channel adjudication logic, deposit logic, and arbitrary         calls when a commitment is double-signed.","version":1},"storageLayout":{"storage":[{"astId":3403,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"lock","offset":0,"slot":"0","type":"t_uint256"},{"astId":2597,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"alice","offset":0,"slot":"1","type":"t_address"},{"astId":2599,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"bob","offset":0,"slot":"2","type":"t_address"},{"astId":2348,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"totalTransferred","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":2354,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"exitableAmount","offset":0,"slot":"4","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":2732,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"depositsAlice","offset":0,"slot":"5","type":"t_mapping(t_address,t_uint256)"},{"astId":2895,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"isExecuted","offset":0,"slot":"6","type":"t_mapping(t_bytes32,t_bool)"},{"astId":1503,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"channelDispute","offset":0,"slot":"7","type":"t_struct(ChannelDispute)3596_storage"},{"astId":1507,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"defundNonces","offset":0,"slot":"12","type":"t_mapping(t_address,t_uint256)"},{"astId":1511,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"transferDisputes","offset":0,"slot":"13","type":"t_mapping(t_bytes32,t_struct(TransferDispute)3603_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_bool)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(TransferDispute)3603_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct ICMCAdjudicator.TransferDispute)","numberOfBytes":"32","value":"t_struct(TransferDispute)3603_storage"},"t_struct(ChannelDispute)3596_storage":{"encoding":"inplace","label":"struct ICMCAdjudicator.ChannelDispute","members":[{"astId":3587,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"channelStateHash","offset":0,"slot":"0","type":"t_bytes32"},{"astId":3589,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"nonce","offset":0,"slot":"1","type":"t_uint256"},{"astId":3591,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"merkleRoot","offset":0,"slot":"2","type":"t_bytes32"},{"astId":3593,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"consensusExpiry","offset":0,"slot":"3","type":"t_uint256"},{"astId":3595,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"defundExpiry","offset":0,"slot":"4","type":"t_uint256"}],"numberOfBytes":"160"},"t_struct(TransferDispute)3603_storage":{"encoding":"inplace","label":"struct ICMCAdjudicator.TransferDispute","members":[{"astId":3598,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"transferStateHash","offset":0,"slot":"0","type":"t_bytes32"},{"astId":3600,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"transferDisputeExpiry","offset":0,"slot":"1","type":"t_uint256"},{"astId":3602,"contract":"src.sol/ChannelMastercopy.sol:ChannelMastercopy","label":"isDefunded","offset":0,"slot":"2","type":"t_bool"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}}}')},2886:function(e){e.exports=JSON.parse('{"address":"0x4CA2F568B46f9d94Bb68940F187a1573a4AF23d5","abi":[{"inputs":[],"name":"EncodedCancel","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"Name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ResolverEncoding","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"StateEncoding","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"encodedBalance","type":"bytes"},{"internalType":"bytes","name":"encodedState","type":"bytes"}],"name":"create","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRegistryInformation","outputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"address","name":"definition","type":"address"},{"internalType":"string","name":"stateEncoding","type":"string"},{"internalType":"string","name":"resolverEncoding","type":"string"},{"internalType":"bytes","name":"encodedCancel","type":"bytes"}],"internalType":"struct RegisteredTransfer","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"encodedBalance","type":"bytes"},{"internalType":"bytes","name":"encodedState","type":"bytes"},{"internalType":"bytes","name":"encodedResolver","type":"bytes"}],"name":"resolve","outputs":[{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance","name":"","type":"tuple"}],"stateMutability":"view","type":"function"}],"transactionHash":"0xb9077db1e56767cac4433b3f077247e565c87ad23ab2d58980692e66928dd6a8","receipt":{"to":null,"from":"0xd4b33434Cb36df9286Ef5132FCFb8062c96aC56E","contractAddress":"0x4CA2F568B46f9d94Bb68940F187a1573a4AF23d5","transactionIndex":0,"gasUsed":"795245","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","blockHash":"0x9fa88cda418b64ca6327e1141537ba53214fce9964a361763c3e3132e60d80ff","transactionHash":"0xb9077db1e56767cac4433b3f077247e565c87ad23ab2d58980692e66928dd6a8","logs":[],"blockNumber":138372,"cumulativeGasUsed":"795245","status":1,"byzantium":true},"args":[],"solcInputHash":"89c55d5a88f10637860a9ea31a1daad3","metadata":"{\\"compiler\\":{\\"version\\":\\"0.7.1+commit.f4a555be\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[],\\"name\\":\\"EncodedCancel\\",\\"outputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"\\",\\"type\\":\\"bytes\\"}],\\"stateMutability\\":\\"pure\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"Name\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"ResolverEncoding\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"StateEncoding\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedBalance\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedState\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"create\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getRegistryInformation\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"definition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"stateEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"resolverEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedCancel\\",\\"type\\":\\"bytes\\"}],\\"internalType\\":\\"struct RegisteredTransfer\\",\\"name\\":\\"\\",\\"type\\":\\"tuple\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedBalance\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedState\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedResolver\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"resolve\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"\\",\\"type\\":\\"tuple\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"author\\":\\"Connext <support@connext.network>\\",\\"kind\\":\\"dev\\",\\"methods\\":{},\\"title\\":\\"HashlockTransfer\\",\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"notice\\":\\"This contract allows users to claim a payment locked in         the application if they provide the correct preImage. The payment is         reverted if not unlocked by the timelock if one is provided.\\",\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"src.sol/transferDefinitions/HashlockTransfer.sol\\":\\"HashlockTransfer\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"src.sol/interfaces/ITransferDefinition.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./ITransferRegistry.sol\\\\\\";\\\\nimport \\\\\\"./Types.sol\\\\\\";\\\\n\\\\ninterface ITransferDefinition {\\\\n    // Validates the initial state of the transfer.\\\\n    // Called by validator.ts during `create` updates.\\\\n    function create(bytes calldata encodedBalance, bytes calldata)\\\\n        external\\\\n        view\\\\n        returns (bool);\\\\n\\\\n    // Performs a state transition to resolve a transfer and returns final balances.\\\\n    // Called by validator.ts during `resolve` updates.\\\\n    function resolve(\\\\n        bytes calldata encodedBalance,\\\\n        bytes calldata,\\\\n        bytes calldata\\\\n    ) external view returns (Balance memory);\\\\n\\\\n    // Should also have the following properties:\\\\n    // string public constant override Name = \\\\\\"...\\\\\\";\\\\n    // string public constant override StateEncoding = \\\\\\"...\\\\\\";\\\\n    // string public constant override ResolverEncoding = \\\\\\"...\\\\\\";\\\\n    // These properties are included on the transfer specifically\\\\n    // to make it easier for implementers to add new transfers by\\\\n    // only include a `.sol` file\\\\n    function Name() external view returns (string memory);\\\\n\\\\n    function StateEncoding() external view returns (string memory);\\\\n\\\\n    function ResolverEncoding() external view returns (string memory);\\\\n\\\\n    function EncodedCancel() external view returns (bytes memory);\\\\n\\\\n    function getRegistryInformation()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd8eef575aa791b187397c9096e6cf40431b590d3999f0a80e38f3e59f4cf4764\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ITransferRegistry.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental \\\\\\"ABIEncoderV2\\\\\\";\\\\n\\\\nstruct RegisteredTransfer {\\\\n    string name;\\\\n    address definition;\\\\n    string stateEncoding;\\\\n    string resolverEncoding;\\\\n    bytes encodedCancel;\\\\n}\\\\n\\\\ninterface ITransferRegistry {\\\\n    event TransferAdded(RegisteredTransfer transfer);\\\\n\\\\n    event TransferRemoved(RegisteredTransfer transfer);\\\\n\\\\n    // Should add a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function addTransferDefinition(RegisteredTransfer memory transfer) external;\\\\n\\\\n    // Should remove a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function removeTransferDefinition(string memory name) external;\\\\n\\\\n    // Should return all transfer defintions in registry\\\\n    function getTransferDefinitions()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer[] memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd13be6d976c64e381a0d9df10c621cd964454b6916f25df4ea6c1b4cd873a58a\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/Types.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nstruct Balance {\\\\n    uint256[2] amount; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n    address payable[2] to; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf8c71b155b630cde965f5d1db5f0d2751a9763f5a797f15d946613e9224f1046\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/transferDefinitions/HashlockTransfer.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./TransferDefinition.sol\\\\\\";\\\\n\\\\n/// @title HashlockTransfer\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This contract allows users to claim a payment locked in\\\\n///         the application if they provide the correct preImage. The payment is\\\\n///         reverted if not unlocked by the timelock if one is provided.\\\\n\\\\ncontract HashlockTransfer is TransferDefinition {\\\\n    struct TransferState {\\\\n        bytes32 lockHash;\\\\n        uint256 expiry; // If 0, then no timelock is enforced\\\\n    }\\\\n\\\\n    struct TransferResolver {\\\\n        bytes32 preImage;\\\\n    }\\\\n\\\\n    // Provide registry information\\\\n    string public constant override Name = \\\\\\"HashlockTransfer\\\\\\";\\\\n    string public constant override StateEncoding =\\\\n        \\\\\\"tuple(bytes32 lockHash, uint256 expiry)\\\\\\";\\\\n    string public constant override ResolverEncoding =\\\\n        \\\\\\"tuple(bytes32 preImage)\\\\\\";\\\\n\\\\n    function EncodedCancel() external pure override returns(bytes memory) {\\\\n      TransferResolver memory resolver;\\\\n      resolver.preImage = bytes32(0);\\\\n      return abi.encode(resolver);\\\\n    } \\\\n\\\\n    function create(bytes calldata encodedBalance, bytes calldata encodedState)\\\\n        external\\\\n        view\\\\n        override\\\\n        returns (bool)\\\\n    {\\\\n        // Decode parameters\\\\n        TransferState memory state = abi.decode(encodedState, (TransferState));\\\\n        Balance memory balance = abi.decode(encodedBalance, (Balance));\\\\n\\\\n        require(\\\\n            balance.amount[0] > 0,\\\\n            \\\\\\"HashlockTransfer: ZER0_SENDER_BALANCE\\\\\\"\\\\n        );\\\\n\\\\n        require(\\\\n            balance.amount[1] == 0,\\\\n            \\\\\\"HashlockTransfer: NONZERO_RECIPIENT_BALANCE\\\\\\"\\\\n        );\\\\n        require(\\\\n            state.lockHash != bytes32(0),\\\\n            \\\\\\"HashlockTransfer: EMPTY_LOCKHASH\\\\\\"\\\\n        );\\\\n        require(\\\\n            state.expiry == 0 || state.expiry > block.timestamp,\\\\n            \\\\\\"HashlockTransfer: EXPIRED_TIMELOCK\\\\\\"\\\\n        );\\\\n\\\\n        // Valid transfer state\\\\n        return true;\\\\n    }\\\\n\\\\n    function resolve(\\\\n        bytes calldata encodedBalance,\\\\n        bytes calldata encodedState,\\\\n        bytes calldata encodedResolver\\\\n    ) external view override returns (Balance memory) {\\\\n        TransferState memory state = abi.decode(encodedState, (TransferState));\\\\n        TransferResolver memory resolver =\\\\n            abi.decode(encodedResolver, (TransferResolver));\\\\n        Balance memory balance = abi.decode(encodedBalance, (Balance));\\\\n\\\\n        // If you pass in bytes32(0), payment is canceled\\\\n        // If timelock is nonzero and has expired, payment must be canceled\\\\n        // otherwise resolve will revert\\\\n        if (resolver.preImage != bytes32(0)) {\\\\n            // Payment must not be expired\\\\n            require(state.expiry == 0 || state.expiry > block.timestamp, \\\\\\"HashlockTransfer: PAYMENT_EXPIRED\\\\\\");\\\\n\\\\n            // Check hash for normal payment unlock\\\\n            bytes32 generatedHash = sha256(abi.encode(resolver.preImage));\\\\n            require(\\\\n                state.lockHash == generatedHash,\\\\n                \\\\\\"HashlockTransfer: INVALID_PREIMAGE\\\\\\"\\\\n            );\\\\n\\\\n            // Update state\\\\n            balance.amount[1] = balance.amount[0];\\\\n            balance.amount[0] = 0;\\\\n        }\\\\n        // To cancel, the preImage must be empty (not simply incorrect)\\\\n        // There are no additional state mutations, and the preImage is\\\\n        // asserted by the `if` statement\\\\n\\\\n        return balance;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x0c403a415e87408f8f7be80d9ec3e4415189d5e85fb58e9ddef5730e4a2ae98e\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/transferDefinitions/TransferDefinition.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"../interfaces/ITransferDefinition.sol\\\\\\";\\\\nimport \\\\\\"../interfaces/ITransferRegistry.sol\\\\\\";\\\\n\\\\n/// @title TransferDefinition\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This contract helps reduce boilerplate needed when creating\\\\n///         new transfer definitions by providing an implementation of\\\\n///         the required getter\\\\n\\\\nabstract contract TransferDefinition is ITransferDefinition {\\\\n    function getRegistryInformation()\\\\n        external\\\\n        view\\\\n        override\\\\n        returns (RegisteredTransfer memory)\\\\n    {\\\\n        return\\\\n            RegisteredTransfer({\\\\n                name: this.Name(),\\\\n                stateEncoding: this.StateEncoding(),\\\\n                resolverEncoding: this.ResolverEncoding(),\\\\n                definition: address(this),\\\\n                encodedCancel: this.EncodedCancel()\\\\n            });\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xdb8bcb3fadd5c514bc6585b0a48d66952570bbb1a62f18b9dc9a4f693dc11c5e\\",\\"license\\":\\"UNLICENSED\\"}},\\"version\\":1}","bytecode":"0x608060405234801561001057600080fd5b50610d6c806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638052474d1161005b5780638052474d146100bd5780638de8b77e146100c55780638ef98a7e146100cd57806394184ba9146100ed5761007d565b80630528aa1c14610082578063206162be146100a05780633722aff9146100b5575b600080fd5b61008a61010d565b6040516100979190610a10565b60405180910390f35b6100a8610141565b6040516100979190610c1e565b61008a61034d565b61008a610386565b61008a6103b2565b6100e06100db3660046107ae565b6103ce565b6040516100979190610bb4565b6101006100fb366004610745565b61050e565b60405161009791906109fc565b60606101176105da565b6000815260405161012c908290602001610cae565b60405160208183030381529060405291505090565b6101496105ec565b6040518060a00160405280306001600160a01b0316638052474d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561018d57600080fd5b505afa1580156101a1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101c99190810190610844565b8152602001306001600160a01b03168152602001306001600160a01b0316638de8b77e6040518163ffffffff1660e01b815260040160006040518083038186803b15801561021657600080fd5b505afa15801561022a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102529190810190610844565b8152602001306001600160a01b0316633722aff96040518163ffffffff1660e01b815260040160006040518083038186803b15801561029057600080fd5b505afa1580156102a4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102cc9190810190610844565b8152602001306001600160a01b0316630528aa1c6040518163ffffffff1660e01b815260040160006040518083038186803b15801561030a57600080fd5b505afa15801561031e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103469190810190610844565b9052905090565b6040518060400160405280601781526020017f7475706c65286279746573333220707265496d6167652900000000000000000081525081565b6040518060400160405280601081526020016f2430b9b43637b1b5aa3930b739b332b960811b81525081565b604051806060016040528060278152602001610d106027913981565b6103d6610624565b6103de610649565b6103ea85870187610981565b90506103f46105da565b6104008486018661095c565b905061040a610624565b610416898b018b61087f565b82519091501561050157602083015115806104345750428360200151115b6104595760405162461bcd60e51b815260040161045090610b3e565b60405180910390fd5b6000600283600001516040516020016104729190610a07565b60408051601f198184030181529082905261048c916109e0565b602060405180830381855afa1580156104a9573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906104cc919061072d565b845190915081146104ef5760405162461bcd60e51b815260040161045090610a75565b50805180516020909101528051600090525b9998505050505050505050565b6000610518610649565b61052483850185610981565b905061052e610624565b61053a8688018861087f565b80515190915061055c5760405162461bcd60e51b815260040161045090610ab7565b8051602001511561057f5760405162461bcd60e51b815260040161045090610a2a565b815161059d5760405162461bcd60e51b815260040161045090610b7f565b602082015115806105b15750428260200151115b6105cd5760405162461bcd60e51b815260040161045090610afc565b5060019695505050505050565b60408051602081019091526000815290565b6040518060a001604052806060815260200160006001600160a01b031681526020016060815260200160608152602001606081525090565b6040518060400160405280610637610660565b8152602001610644610660565b905290565b604080518082019091526000808252602082015290565b60405180604001604052806002906020820280368337509192915050565b60008083601f84011261068f578182fd5b50813567ffffffffffffffff8111156106a6578182fd5b6020830191508360208285010111156106be57600080fd5b9250929050565b600082601f8301126106d5578081fd5b815167ffffffffffffffff8111156106eb578182fd5b6106fe601f8201601f1916602001610cb8565b915080825283602082850101111561071557600080fd5b610726816020840160208601610cdf565b5092915050565b60006020828403121561073e578081fd5b5051919050565b6000806000806040858703121561075a578283fd5b843567ffffffffffffffff80821115610771578485fd5b61077d8883890161067e565b90965094506020870135915080821115610795578384fd5b506107a28782880161067e565b95989497509550505050565b600080600080600080606087890312156107c6578182fd5b863567ffffffffffffffff808211156107dd578384fd5b6107e98a838b0161067e565b90985096506020890135915080821115610801578384fd5b61080d8a838b0161067e565b90965094506040890135915080821115610825578384fd5b5061083289828a0161067e565b979a9699509497509295939492505050565b600060208284031215610855578081fd5b815167ffffffffffffffff81111561086b578182fd5b610877848285016106c5565b949350505050565b600060808284031215610890578081fd5b61089a6040610cb8565b83601f8401126108a8578182fd5b6108b26040610cb8565b808460408601878111156108c4578586fd5b855b60028110156108e55782358552602094850194909201916001016108c6565b5082855287605f8801126108f7578586fd5b6109016040610cb8565b9350839250905060808601871015610917578485fd5b845b600281101561094d5781356001600160a01b0381168114610938578687fd5b84526020938401939190910190600101610919565b50506020830152509392505050565b60006020828403121561096d578081fd5b6109776020610cb8565b9135825250919050565b600060408284031215610992578081fd5b61099c6040610cb8565b82358152602083013560208201528091505092915050565b600081518084526109cc816020860160208601610cdf565b601f01601f19169290920160200192915050565b600082516109f2818460208701610cdf565b9190910192915050565b901515815260200190565b90815260200190565b600060208252610a2360208301846109b4565b9392505050565b6020808252602b908201527f486173686c6f636b5472616e736665723a204e4f4e5a45524f5f52454349504960408201526a454e545f42414c414e434560a81b606082015260800190565b60208082526022908201527f486173686c6f636b5472616e736665723a20494e56414c49445f505245494d41604082015261474560f01b606082015260800190565b60208082526025908201527f486173686c6f636b5472616e736665723a205a4552305f53454e4445525f42416040820152644c414e434560d81b606082015260800190565b60208082526022908201527f486173686c6f636b5472616e736665723a20455850495245445f54494d454c4f604082015261434b60f01b606082015260800190565b60208082526021908201527f486173686c6f636b5472616e736665723a205041594d454e545f4558504952456040820152601160fa1b606082015260800190565b6020808252818101527f486173686c6f636b5472616e736665723a20454d5054595f4c4f434b48415348604082015260600190565b815160808201908260005b6002811015610bde578251825260209283019290910190600101610bbf565b5050506020808401516040840160005b6002811015610c145782516001600160a01b031682529183019190830190600101610bee565b5050505092915050565b600060208252825160a06020840152610c3a60c08401826109b4565b905060018060a01b0360208501511660408401526040840151601f1980858403016060860152610c6a83836109b4565b92506060860151915080858403016080860152610c8783836109b4565b925060808601519150808584030160a086015250610ca582826109b4565b95945050505050565b9051815260200190565b60405181810167ffffffffffffffff81118282101715610cd757600080fd5b604052919050565b60005b83811015610cfa578181015183820152602001610ce2565b83811115610d09576000848401525b5050505056fe7475706c652862797465733332206c6f636b486173682c2075696e743235362065787069727929a2646970667358221220f7a1aad5efbe0de5a92ccb20170dbe8d594d5a4ccb943cb48fbcd3fcbc98e24c64736f6c63430007010033","deployedBytecode":"0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80638052474d1161005b5780638052474d146100bd5780638de8b77e146100c55780638ef98a7e146100cd57806394184ba9146100ed5761007d565b80630528aa1c14610082578063206162be146100a05780633722aff9146100b5575b600080fd5b61008a61010d565b6040516100979190610a10565b60405180910390f35b6100a8610141565b6040516100979190610c1e565b61008a61034d565b61008a610386565b61008a6103b2565b6100e06100db3660046107ae565b6103ce565b6040516100979190610bb4565b6101006100fb366004610745565b61050e565b60405161009791906109fc565b60606101176105da565b6000815260405161012c908290602001610cae565b60405160208183030381529060405291505090565b6101496105ec565b6040518060a00160405280306001600160a01b0316638052474d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561018d57600080fd5b505afa1580156101a1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101c99190810190610844565b8152602001306001600160a01b03168152602001306001600160a01b0316638de8b77e6040518163ffffffff1660e01b815260040160006040518083038186803b15801561021657600080fd5b505afa15801561022a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102529190810190610844565b8152602001306001600160a01b0316633722aff96040518163ffffffff1660e01b815260040160006040518083038186803b15801561029057600080fd5b505afa1580156102a4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102cc9190810190610844565b8152602001306001600160a01b0316630528aa1c6040518163ffffffff1660e01b815260040160006040518083038186803b15801561030a57600080fd5b505afa15801561031e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103469190810190610844565b9052905090565b6040518060400160405280601781526020017f7475706c65286279746573333220707265496d6167652900000000000000000081525081565b6040518060400160405280601081526020016f2430b9b43637b1b5aa3930b739b332b960811b81525081565b604051806060016040528060278152602001610d106027913981565b6103d6610624565b6103de610649565b6103ea85870187610981565b90506103f46105da565b6104008486018661095c565b905061040a610624565b610416898b018b61087f565b82519091501561050157602083015115806104345750428360200151115b6104595760405162461bcd60e51b815260040161045090610b3e565b60405180910390fd5b6000600283600001516040516020016104729190610a07565b60408051601f198184030181529082905261048c916109e0565b602060405180830381855afa1580156104a9573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906104cc919061072d565b845190915081146104ef5760405162461bcd60e51b815260040161045090610a75565b50805180516020909101528051600090525b9998505050505050505050565b6000610518610649565b61052483850185610981565b905061052e610624565b61053a8688018861087f565b80515190915061055c5760405162461bcd60e51b815260040161045090610ab7565b8051602001511561057f5760405162461bcd60e51b815260040161045090610a2a565b815161059d5760405162461bcd60e51b815260040161045090610b7f565b602082015115806105b15750428260200151115b6105cd5760405162461bcd60e51b815260040161045090610afc565b5060019695505050505050565b60408051602081019091526000815290565b6040518060a001604052806060815260200160006001600160a01b031681526020016060815260200160608152602001606081525090565b6040518060400160405280610637610660565b8152602001610644610660565b905290565b604080518082019091526000808252602082015290565b60405180604001604052806002906020820280368337509192915050565b60008083601f84011261068f578182fd5b50813567ffffffffffffffff8111156106a6578182fd5b6020830191508360208285010111156106be57600080fd5b9250929050565b600082601f8301126106d5578081fd5b815167ffffffffffffffff8111156106eb578182fd5b6106fe601f8201601f1916602001610cb8565b915080825283602082850101111561071557600080fd5b610726816020840160208601610cdf565b5092915050565b60006020828403121561073e578081fd5b5051919050565b6000806000806040858703121561075a578283fd5b843567ffffffffffffffff80821115610771578485fd5b61077d8883890161067e565b90965094506020870135915080821115610795578384fd5b506107a28782880161067e565b95989497509550505050565b600080600080600080606087890312156107c6578182fd5b863567ffffffffffffffff808211156107dd578384fd5b6107e98a838b0161067e565b90985096506020890135915080821115610801578384fd5b61080d8a838b0161067e565b90965094506040890135915080821115610825578384fd5b5061083289828a0161067e565b979a9699509497509295939492505050565b600060208284031215610855578081fd5b815167ffffffffffffffff81111561086b578182fd5b610877848285016106c5565b949350505050565b600060808284031215610890578081fd5b61089a6040610cb8565b83601f8401126108a8578182fd5b6108b26040610cb8565b808460408601878111156108c4578586fd5b855b60028110156108e55782358552602094850194909201916001016108c6565b5082855287605f8801126108f7578586fd5b6109016040610cb8565b9350839250905060808601871015610917578485fd5b845b600281101561094d5781356001600160a01b0381168114610938578687fd5b84526020938401939190910190600101610919565b50506020830152509392505050565b60006020828403121561096d578081fd5b6109776020610cb8565b9135825250919050565b600060408284031215610992578081fd5b61099c6040610cb8565b82358152602083013560208201528091505092915050565b600081518084526109cc816020860160208601610cdf565b601f01601f19169290920160200192915050565b600082516109f2818460208701610cdf565b9190910192915050565b901515815260200190565b90815260200190565b600060208252610a2360208301846109b4565b9392505050565b6020808252602b908201527f486173686c6f636b5472616e736665723a204e4f4e5a45524f5f52454349504960408201526a454e545f42414c414e434560a81b606082015260800190565b60208082526022908201527f486173686c6f636b5472616e736665723a20494e56414c49445f505245494d41604082015261474560f01b606082015260800190565b60208082526025908201527f486173686c6f636b5472616e736665723a205a4552305f53454e4445525f42416040820152644c414e434560d81b606082015260800190565b60208082526022908201527f486173686c6f636b5472616e736665723a20455850495245445f54494d454c4f604082015261434b60f01b606082015260800190565b60208082526021908201527f486173686c6f636b5472616e736665723a205041594d454e545f4558504952456040820152601160fa1b606082015260800190565b6020808252818101527f486173686c6f636b5472616e736665723a20454d5054595f4c4f434b48415348604082015260600190565b815160808201908260005b6002811015610bde578251825260209283019290910190600101610bbf565b5050506020808401516040840160005b6002811015610c145782516001600160a01b031682529183019190830190600101610bee565b5050505092915050565b600060208252825160a06020840152610c3a60c08401826109b4565b905060018060a01b0360208501511660408401526040840151601f1980858403016060860152610c6a83836109b4565b92506060860151915080858403016080860152610c8783836109b4565b925060808601519150808584030160a086015250610ca582826109b4565b95945050505050565b9051815260200190565b60405181810167ffffffffffffffff81118282101715610cd757600080fd5b604052919050565b60005b83811015610cfa578181015183820152602001610ce2565b83811115610d09576000848401525b5050505056fe7475706c652862797465733332206c6f636b486173682c2075696e743235362065787069727929a2646970667358221220f7a1aad5efbe0de5a92ccb20170dbe8d594d5a4ccb943cb48fbcd3fcbc98e24c64736f6c63430007010033","devdoc":{"author":"Connext <support@connext.network>","kind":"dev","methods":{},"title":"HashlockTransfer","version":1},"userdoc":{"kind":"user","methods":{},"notice":"This contract allows users to claim a payment locked in         the application if they provide the correct preImage. The payment is         reverted if not unlocked by the timelock if one is provided.","version":1},"storageLayout":{"storage":[],"types":null}}')},2887:function(e){e.exports=JSON.parse('{"address":"0x9E86dd60e0B1e7e142F033d1BdEf734c6b3224Bb","abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"transactionHash":"0x4e09bf79a2429f63d4250ad8e3d79dc19d0ec78b0c1ae19cf99017096ec74385","receipt":{"to":null,"from":"0xd4b33434Cb36df9286Ef5132FCFb8062c96aC56E","contractAddress":"0x9E86dd60e0B1e7e142F033d1BdEf734c6b3224Bb","transactionIndex":0,"gasUsed":"888397","logsBloom":"0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000100000000000000000000000000000000000000000080000000000000200000000000000000000000000000000000a0000000000000000000800000000000000000000000010000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000008000000000000","blockHash":"0x8365edeab8376129a7e3d86c0e57a439f7124e8289231fa0505ebdd1815998e8","transactionHash":"0x4e09bf79a2429f63d4250ad8e3d79dc19d0ec78b0c1ae19cf99017096ec74385","logs":[{"transactionIndex":0,"blockNumber":138379,"transactionHash":"0x8365edeab8376129a7e3d86c0e57a439f7124e8289231fa0505ebdd1815998e8","address":"0x9E86dd60e0B1e7e142F033d1BdEf734c6b3224Bb","topics":["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","0x0000000000000000000000000000000000000000000000000000000000000000","0x000000000000000000000000d4b33434cb36df9286ef5132fcfb8062c96ac56e"],"data":"0x00000000000000000000000000000000000000000000d3c21bcecceda1000000","logIndex":0,"blockHash":"0x8365edeab8376129a7e3d86c0e57a439f7124e8289231fa0505ebdd1815998e8"}],"blockNumber":138379,"cumulativeGasUsed":"888397","status":1,"byzantium":true},"args":[],"solcInputHash":"89c55d5a88f10637860a9ea31a1daad3","metadata":"{\\"compiler\\":{\\"version\\":\\"0.7.1+commit.f4a555be\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"value\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Approval\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"from\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"value\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Transfer\\",\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"}],\\"name\\":\\"allowance\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"approve\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"balanceOf\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"burn\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"decimals\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"subtractedValue\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"decreaseAllowance\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"addedValue\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"increaseAllowance\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"mint\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"name\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"symbol\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"totalSupply\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"transfer\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"sender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"transferFrom\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{\\"allowance(address,address)\\":{\\"details\\":\\"See {IERC20-allowance}.\\"},\\"approve(address,uint256)\\":{\\"details\\":\\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\\"},\\"balanceOf(address)\\":{\\"details\\":\\"See {IERC20-balanceOf}.\\"},\\"decimals()\\":{\\"details\\":\\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\\"},\\"decreaseAllowance(address,uint256)\\":{\\"details\\":\\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\\"},\\"increaseAllowance(address,uint256)\\":{\\"details\\":\\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\\"},\\"name()\\":{\\"details\\":\\"Returns the name of the token.\\"},\\"symbol()\\":{\\"details\\":\\"Returns the symbol of the token, usually a shorter version of the name.\\"},\\"totalSupply()\\":{\\"details\\":\\"See {IERC20-totalSupply}.\\"},\\"transfer(address,uint256)\\":{\\"details\\":\\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\\"},\\"transferFrom(address,address,uint256)\\":{\\"details\\":\\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``\'s tokens of at least `amount`.\\"}},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"src.sol/testing/TestToken.sol\\":\\"TestToken\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/GSN/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/*\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with GSN meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address payable) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes memory) {\\\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x910a2e625b71168563edf9eeef55a50d6d699acfe27ceba3921f291829a8f938\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/math/SafeMath.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Wrappers over Solidity\'s arithmetic operations with added overflow\\\\n * checks.\\\\n *\\\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\\\n * in bugs, because programmers usually assume that an overflow raises an\\\\n * error, which is the standard behavior in high level programming languages.\\\\n * `SafeMath` restores this intuition by reverting the transaction when an\\\\n * operation overflows.\\\\n *\\\\n * Using this library instead of the unchecked operations eliminates an entire\\\\n * class of bugs, so it\'s recommended to use it always.\\\\n */\\\\nlibrary SafeMath {\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `+` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Addition cannot overflow.\\\\n     */\\\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        uint256 c = a + b;\\\\n        require(c >= a, \\\\\\"SafeMath: addition overflow\\\\\\");\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return sub(a, b, \\\\\\"SafeMath: subtraction overflow\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        require(b <= a, errorMessage);\\\\n        uint256 c = a - b;\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `*` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Multiplication cannot overflow.\\\\n     */\\\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\\\\n        // benefit is lost if \'b\' is also tested.\\\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\\\n        if (a == 0) {\\\\n            return 0;\\\\n        }\\\\n\\\\n        uint256 c = a * b;\\\\n        require(c / a == b, \\\\\\"SafeMath: multiplication overflow\\\\\\");\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return div(a, b, \\\\\\"SafeMath: division by zero\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        require(b > 0, errorMessage);\\\\n        uint256 c = a / b;\\\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * Reverts when dividing by zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return mod(a, b, \\\\\\"SafeMath: modulo by zero\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * Reverts with custom message when dividing by zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        require(b != 0, errorMessage);\\\\n        return a % b;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\nimport \\\\\\"../../GSN/Context.sol\\\\\\";\\\\nimport \\\\\\"./IERC20.sol\\\\\\";\\\\nimport \\\\\\"../../math/SafeMath.sol\\\\\\";\\\\nimport \\\\\\"../../utils/Address.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Implementation of the {IERC20} interface.\\\\n *\\\\n * This implementation is agnostic to the way tokens are created. This means\\\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\\\n *\\\\n * TIP: For a detailed writeup see our guide\\\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\\\n * to implement supply mechanisms].\\\\n *\\\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\\\n * of returning `false` on failure. This behavior is nonetheless conventional\\\\n * and does not conflict with the expectations of ERC20 applications.\\\\n *\\\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\\\n * This allows applications to reconstruct the allowance for all accounts just\\\\n * by listening to said events. Other implementations of the EIP may not emit\\\\n * these events, as it isn\'t required by the specification.\\\\n *\\\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\\\n * functions have been added to mitigate the well-known issues around setting\\\\n * allowances. See {IERC20-approve}.\\\\n */\\\\ncontract ERC20 is Context, IERC20 {\\\\n    using SafeMath for uint256;\\\\n    using Address for address;\\\\n\\\\n    mapping (address => uint256) private _balances;\\\\n\\\\n    mapping (address => mapping (address => uint256)) private _allowances;\\\\n\\\\n    uint256 private _totalSupply;\\\\n\\\\n    string private _name;\\\\n    string private _symbol;\\\\n    uint8 private _decimals;\\\\n\\\\n    /**\\\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\\\n     * a default value of 18.\\\\n     *\\\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\\\n     *\\\\n     * All three of these values are immutable: they can only be set once during\\\\n     * construction.\\\\n     */\\\\n    constructor (string memory name, string memory symbol) {\\\\n        _name = name;\\\\n        _symbol = symbol;\\\\n        _decimals = 18;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the name of the token.\\\\n     */\\\\n    function name() public view returns (string memory) {\\\\n        return _name;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\\\n     * name.\\\\n     */\\\\n    function symbol() public view returns (string memory) {\\\\n        return _symbol;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the number of decimals used to get its user representation.\\\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\\\n     *\\\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\\\n     * called.\\\\n     *\\\\n     * NOTE: This information is only used for _display_ purposes: it in\\\\n     * no way affects any of the arithmetic of the contract, including\\\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\\\n     */\\\\n    function decimals() public view returns (uint8) {\\\\n        return _decimals;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-totalSupply}.\\\\n     */\\\\n    function totalSupply() public view override returns (uint256) {\\\\n        return _totalSupply;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-balanceOf}.\\\\n     */\\\\n    function balanceOf(address account) public view override returns (uint256) {\\\\n        return _balances[account];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-transfer}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `recipient` cannot be the zero address.\\\\n     * - the caller must have a balance of at least `amount`.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\\\n        _transfer(_msgSender(), recipient, amount);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-allowance}.\\\\n     */\\\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\\\n        return _allowances[owner][spender];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-approve}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\\\n        _approve(_msgSender(), spender, amount);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-transferFrom}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\\\n     * required by the EIP. See the note at the beginning of {ERC20};\\\\n     *\\\\n     * Requirements:\\\\n     * - `sender` and `recipient` cannot be the zero address.\\\\n     * - `sender` must have a balance of at least `amount`.\\\\n     * - the caller must have allowance for ``sender``\'s tokens of at least\\\\n     * `amount`.\\\\n     */\\\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\\\n        _transfer(sender, recipient, amount);\\\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\\\\"ERC20: transfer amount exceeds allowance\\\\\\"));\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\\\n     *\\\\n     * This is an alternative to {approve} that can be used as a mitigation for\\\\n     * problems described in {IERC20-approve}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\\\n     *\\\\n     * This is an alternative to {approve} that can be used as a mitigation for\\\\n     * problems described in {IERC20-approve}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     * - `spender` must have allowance for the caller of at least\\\\n     * `subtractedValue`.\\\\n     */\\\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\\\\"ERC20: decreased allowance below zero\\\\\\"));\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\\\n     *\\\\n     * This is internal function is equivalent to {transfer}, and can be used to\\\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `sender` cannot be the zero address.\\\\n     * - `recipient` cannot be the zero address.\\\\n     * - `sender` must have a balance of at least `amount`.\\\\n     */\\\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\\\n        require(sender != address(0), \\\\\\"ERC20: transfer from the zero address\\\\\\");\\\\n        require(recipient != address(0), \\\\\\"ERC20: transfer to the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(sender, recipient, amount);\\\\n\\\\n        _balances[sender] = _balances[sender].sub(amount, \\\\\\"ERC20: transfer amount exceeds balance\\\\\\");\\\\n        _balances[recipient] = _balances[recipient].add(amount);\\\\n        emit Transfer(sender, recipient, amount);\\\\n    }\\\\n\\\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\\\n     * the total supply.\\\\n     *\\\\n     * Emits a {Transfer} event with `from` set to the zero address.\\\\n     *\\\\n     * Requirements\\\\n     *\\\\n     * - `to` cannot be the zero address.\\\\n     */\\\\n    function _mint(address account, uint256 amount) internal virtual {\\\\n        require(account != address(0), \\\\\\"ERC20: mint to the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(address(0), account, amount);\\\\n\\\\n        _totalSupply = _totalSupply.add(amount);\\\\n        _balances[account] = _balances[account].add(amount);\\\\n        emit Transfer(address(0), account, amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\\\n     * total supply.\\\\n     *\\\\n     * Emits a {Transfer} event with `to` set to the zero address.\\\\n     *\\\\n     * Requirements\\\\n     *\\\\n     * - `account` cannot be the zero address.\\\\n     * - `account` must have at least `amount` tokens.\\\\n     */\\\\n    function _burn(address account, uint256 amount) internal virtual {\\\\n        require(account != address(0), \\\\\\"ERC20: burn from the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(account, address(0), amount);\\\\n\\\\n        _balances[account] = _balances[account].sub(amount, \\\\\\"ERC20: burn amount exceeds balance\\\\\\");\\\\n        _totalSupply = _totalSupply.sub(amount);\\\\n        emit Transfer(account, address(0), amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\\\n     *\\\\n     * This internal function is equivalent to `approve`, and can be used to\\\\n     * e.g. set automatic allowances for certain subsystems, etc.\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `owner` cannot be the zero address.\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\\\n        require(owner != address(0), \\\\\\"ERC20: approve from the zero address\\\\\\");\\\\n        require(spender != address(0), \\\\\\"ERC20: approve to the zero address\\\\\\");\\\\n\\\\n        _allowances[owner][spender] = amount;\\\\n        emit Approval(owner, spender, amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\\\n     *\\\\n     * WARNING: This function should only be called from the constructor. Most\\\\n     * applications that interact with token contracts will not expect\\\\n     * {decimals} to ever change, and may work incorrectly if it does.\\\\n     */\\\\n    function _setupDecimals(uint8 decimals_) internal {\\\\n        _decimals = decimals_;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Hook that is called before any transfer of tokens. This includes\\\\n     * minting and burning.\\\\n     *\\\\n     * Calling conditions:\\\\n     *\\\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\'s tokens\\\\n     * will be to transferred to `to`.\\\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\\\n     * - when `to` is zero, `amount` of ``from``\'s tokens will be burned.\\\\n     * - `from` and `to` are never both zero.\\\\n     *\\\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\\\n     */\\\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf1ac0ee2ca2b36f90574d3b2b37422ced4fa829741d80794c62f5958a2d8f474\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Returns the amount of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender\'s allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\\\n     * allowance mechanism. `amount` is then deducted from the caller\'s\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Address.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Collection of functions related to the address type\\\\n */\\\\nlibrary Address {\\\\n    /**\\\\n     * @dev Returns true if `account` is a contract.\\\\n     *\\\\n     * [IMPORTANT]\\\\n     * ====\\\\n     * It is unsafe to assume that an address for which this function returns\\\\n     * false is an externally-owned account (EOA) and not a contract.\\\\n     *\\\\n     * Among others, `isContract` will return false for the following\\\\n     * types of addresses:\\\\n     *\\\\n     *  - an externally-owned account\\\\n     *  - a contract in construction\\\\n     *  - an address where a contract will be created\\\\n     *  - an address where a contract lived, but was destroyed\\\\n     * ====\\\\n     */\\\\n    function isContract(address account) internal view returns (bool) {\\\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\\\n        // for accounts without code, i.e. `keccak256(\'\')`\\\\n        bytes32 codehash;\\\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\\\n        // solhint-disable-next-line no-inline-assembly\\\\n        assembly { codehash := extcodehash(account) }\\\\n        return (codehash != accountHash && codehash != 0x0);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\\\\n     * `recipient`, forwarding all available gas and reverting on errors.\\\\n     *\\\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\\\n     * imposed by `transfer`, making them unable to receive funds via\\\\n     * `transfer`. {sendValue} removes this limitation.\\\\n     *\\\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\\\n     *\\\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\\\n     * taken to not create reentrancy vulnerabilities. Consider using\\\\n     * {ReentrancyGuard} or the\\\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\\\n     */\\\\n    function sendValue(address payable recipient, uint256 amount) internal {\\\\n        require(address(this).balance >= amount, \\\\\\"Address: insufficient balance\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\\\n        (bool success, ) = recipient.call{ value: amount }(\\\\\\"\\\\\\");\\\\n        require(success, \\\\\\"Address: unable to send value, recipient may have reverted\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Performs a Solidity function call using a low level `call`. A\\\\n     * plain`call` is an unsafe replacement for a function call: use this\\\\n     * function instead.\\\\n     *\\\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\\\n     * function (like regular Solidity function calls).\\\\n     *\\\\n     * Returns the raw returned data. To convert to the expected return value,\\\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `target` must be a contract.\\\\n     * - calling `target` with `data` must not revert.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n      return functionCall(target, data, \\\\\\"Address: low-level call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but also transferring `value` wei to `target`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the calling contract must have an ETH balance of at least `value`.\\\\n     * - the called Solidity function must be `payable`.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, value, \\\\\\"Address: low-level call with value failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\\\n        require(address(this).balance >= value, \\\\\\"Address: insufficient balance for call\\\\\\");\\\\n        return _functionCallWithValue(target, data, value, errorMessage);\\\\n    }\\\\n\\\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: call to non-contract\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls\\\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\\\n        if (success) {\\\\n            return returndata;\\\\n        } else {\\\\n            // Look for revert reason and bubble it up if present\\\\n            if (returndata.length > 0) {\\\\n                // The easiest way to bubble the revert reason is using memory via assembly\\\\n\\\\n                // solhint-disable-next-line no-inline-assembly\\\\n                assembly {\\\\n                    let returndata_size := mload(returndata)\\\\n                    revert(add(32, returndata), returndata_size)\\\\n                }\\\\n            } else {\\\\n                revert(errorMessage);\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x698f929f1097637d051976b322a2d532c27df022b09010e8d091e2888a5ebdf8\\",\\"license\\":\\"MIT\\"},\\"src.sol/testing/TestToken.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.1;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\\\\";\\\\n\\\\n/* This token is ONLY useful for testing\\\\n * Anybody can mint as many tokens as they like\\\\n * Anybody can burn anyone else\'s tokens\\\\n */\\\\ncontract TestToken is ERC20 {\\\\n    constructor() ERC20(\\\\\\"Test Token\\\\\\", \\\\\\"TEST\\\\\\") {\\\\n        _mint(msg.sender, 1000000 ether);\\\\n    }\\\\n\\\\n    function mint(address account, uint256 amount) external {\\\\n        _mint(account, amount);\\\\n    }\\\\n\\\\n    function burn(address account, uint256 amount) external {\\\\n        _burn(account, amount);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe879a63f0b107705dc9405af3efc7adc2f6425da2c5ec571c72f91db2a059876\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"0x60806040523480156200001157600080fd5b50604080518082018252600a8152692a32b9ba102a37b5b2b760b11b602080830191825283518085019094526004845263151154d560e21b908401528151919291620000609160039162000218565b5080516200007690600490602084019062000218565b50506005805460ff19166012179055506200009c3369d3c21bcecceda1000000620000a2565b620002b4565b6001600160a01b038216620000fe576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6200010c60008383620001b1565b6200012881600254620001b660201b6200060b1790919060201c565b6002556001600160a01b038216600090815260208181526040909120546200015b9183906200060b620001b6821b17901c565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b505050565b60008282018381101562000211576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200025b57805160ff19168380011785556200028b565b828001600101855582156200028b579182015b828111156200028b5782518255916020019190600101906200026e565b50620002999291506200029d565b5090565b5b808211156200029957600081556001016200029e565b610cfb80620002c46000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806340c10f191161008c5780639dc29fac116100665780639dc29fac14610287578063a457c2d7146102b3578063a9059cbb146102df578063dd62ed3e1461030b576100cf565b806340c10f191461022b57806370a082311461025957806395d89b411461027f576100cf565b806306fdde03146100d4578063095ea7b31461015157806318160ddd1461019157806323b872dd146101ab578063313ce567146101e157806339509351146101ff575b600080fd5b6100dc610339565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101165781810151838201526020016100fe565b50505050905090810190601f1680156101435780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561016757600080fd5b506001600160a01b0381351690602001356103cf565b604080519115158252519081900360200190f35b6101996103ec565b60408051918252519081900360200190f35b61017d600480360360608110156101c157600080fd5b506001600160a01b038135811691602081013590911690604001356103f2565b6101e9610479565b6040805160ff9092168252519081900360200190f35b61017d6004803603604081101561021557600080fd5b506001600160a01b038135169060200135610482565b6102576004803603604081101561024157600080fd5b506001600160a01b0381351690602001356104d0565b005b6101996004803603602081101561026f57600080fd5b50356001600160a01b03166104de565b6100dc6104f9565b6102576004803603604081101561029d57600080fd5b506001600160a01b03813516906020013561055a565b61017d600480360360408110156102c957600080fd5b506001600160a01b038135169060200135610564565b61017d600480360360408110156102f557600080fd5b506001600160a01b0381351690602001356105cc565b6101996004803603604081101561032157600080fd5b506001600160a01b03813581169160200135166105e0565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103c55780601f1061039a576101008083540402835291602001916103c5565b820191906000526020600020905b8154815290600101906020018083116103a857829003601f168201915b5050505050905090565b60006103e36103dc61066c565b8484610670565b50600192915050565b60025490565b60006103ff84848461075c565b61046f8461040b61066c565b61046a85604051806060016040528060288152602001610c0f602891396001600160a01b038a1660009081526001602052604081209061044961066c565b6001600160a01b0316815260208101919091526040016000205491906108b7565b610670565b5060019392505050565b60055460ff1690565b60006103e361048f61066c565b8461046a85600160006104a061066c565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549061060b565b6104da828261094e565b5050565b6001600160a01b031660009081526020819052604090205490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103c55780601f1061039a576101008083540402835291602001916103c5565b6104da8282610a3e565b60006103e361057161066c565b8461046a85604051806060016040528060258152602001610ca1602591396001600061059b61066c565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906108b7565b60006103e36105d961066c565b848461075c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600082820183811015610665576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b3390565b6001600160a01b0383166106b55760405162461bcd60e51b8152600401808060200182810382526024815260200180610c7d6024913960400191505060405180910390fd5b6001600160a01b0382166106fa5760405162461bcd60e51b8152600401808060200182810382526022815260200180610bc76022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166107a15760405162461bcd60e51b8152600401808060200182810382526025815260200180610c586025913960400191505060405180910390fd5b6001600160a01b0382166107e65760405162461bcd60e51b8152600401808060200182810382526023815260200180610b826023913960400191505060405180910390fd5b6107f1838383610b3a565b61082e81604051806060016040528060268152602001610be9602691396001600160a01b03861660009081526020819052604090205491906108b7565b6001600160a01b03808516600090815260208190526040808220939093559084168152205461085d908261060b565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600081848411156109465760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561090b5781810151838201526020016108f3565b50505050905090810190601f1680156109385780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b0382166109a9576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6109b560008383610b3a565b6002546109c2908261060b565b6002556001600160a01b0382166000908152602081905260409020546109e8908261060b565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b038216610a835760405162461bcd60e51b8152600401808060200182810382526021815260200180610c376021913960400191505060405180910390fd5b610a8f82600083610b3a565b610acc81604051806060016040528060228152602001610ba5602291396001600160a01b03851660009081526020819052604090205491906108b7565b6001600160a01b038316600090815260208190526040902055600254610af29082610b3f565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b505050565b600061066583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506108b756fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220ab9dcafdcf3d12155ca9697d505d71261c7afcb9c777a043bc5bb39f7a2d72ab64736f6c63430007010033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806340c10f191161008c5780639dc29fac116100665780639dc29fac14610287578063a457c2d7146102b3578063a9059cbb146102df578063dd62ed3e1461030b576100cf565b806340c10f191461022b57806370a082311461025957806395d89b411461027f576100cf565b806306fdde03146100d4578063095ea7b31461015157806318160ddd1461019157806323b872dd146101ab578063313ce567146101e157806339509351146101ff575b600080fd5b6100dc610339565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101165781810151838201526020016100fe565b50505050905090810190601f1680156101435780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561016757600080fd5b506001600160a01b0381351690602001356103cf565b604080519115158252519081900360200190f35b6101996103ec565b60408051918252519081900360200190f35b61017d600480360360608110156101c157600080fd5b506001600160a01b038135811691602081013590911690604001356103f2565b6101e9610479565b6040805160ff9092168252519081900360200190f35b61017d6004803603604081101561021557600080fd5b506001600160a01b038135169060200135610482565b6102576004803603604081101561024157600080fd5b506001600160a01b0381351690602001356104d0565b005b6101996004803603602081101561026f57600080fd5b50356001600160a01b03166104de565b6100dc6104f9565b6102576004803603604081101561029d57600080fd5b506001600160a01b03813516906020013561055a565b61017d600480360360408110156102c957600080fd5b506001600160a01b038135169060200135610564565b61017d600480360360408110156102f557600080fd5b506001600160a01b0381351690602001356105cc565b6101996004803603604081101561032157600080fd5b506001600160a01b03813581169160200135166105e0565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103c55780601f1061039a576101008083540402835291602001916103c5565b820191906000526020600020905b8154815290600101906020018083116103a857829003601f168201915b5050505050905090565b60006103e36103dc61066c565b8484610670565b50600192915050565b60025490565b60006103ff84848461075c565b61046f8461040b61066c565b61046a85604051806060016040528060288152602001610c0f602891396001600160a01b038a1660009081526001602052604081209061044961066c565b6001600160a01b0316815260208101919091526040016000205491906108b7565b610670565b5060019392505050565b60055460ff1690565b60006103e361048f61066c565b8461046a85600160006104a061066c565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549061060b565b6104da828261094e565b5050565b6001600160a01b031660009081526020819052604090205490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103c55780601f1061039a576101008083540402835291602001916103c5565b6104da8282610a3e565b60006103e361057161066c565b8461046a85604051806060016040528060258152602001610ca1602591396001600061059b61066c565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906108b7565b60006103e36105d961066c565b848461075c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600082820183811015610665576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b3390565b6001600160a01b0383166106b55760405162461bcd60e51b8152600401808060200182810382526024815260200180610c7d6024913960400191505060405180910390fd5b6001600160a01b0382166106fa5760405162461bcd60e51b8152600401808060200182810382526022815260200180610bc76022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166107a15760405162461bcd60e51b8152600401808060200182810382526025815260200180610c586025913960400191505060405180910390fd5b6001600160a01b0382166107e65760405162461bcd60e51b8152600401808060200182810382526023815260200180610b826023913960400191505060405180910390fd5b6107f1838383610b3a565b61082e81604051806060016040528060268152602001610be9602691396001600160a01b03861660009081526020819052604090205491906108b7565b6001600160a01b03808516600090815260208190526040808220939093559084168152205461085d908261060b565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600081848411156109465760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561090b5781810151838201526020016108f3565b50505050905090810190601f1680156109385780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b0382166109a9576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6109b560008383610b3a565b6002546109c2908261060b565b6002556001600160a01b0382166000908152602081905260409020546109e8908261060b565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b038216610a835760405162461bcd60e51b8152600401808060200182810382526021815260200180610c376021913960400191505060405180910390fd5b610a8f82600083610b3a565b610acc81604051806060016040528060228152602001610ba5602291396001600160a01b03851660009081526020819052604090205491906108b7565b6001600160a01b038316600090815260208190526040902055600254610af29082610b3f565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b505050565b600061066583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506108b756fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220ab9dcafdcf3d12155ca9697d505d71261c7afcb9c777a043bc5bb39f7a2d72ab64736f6c63430007010033","devdoc":{"kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``\'s tokens of at least `amount`."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1},"storageLayout":{"storage":[{"astId":590,"contract":"src.sol/testing/TestToken.sol:TestToken","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":596,"contract":"src.sol/testing/TestToken.sol:TestToken","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":598,"contract":"src.sol/testing/TestToken.sol:TestToken","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":600,"contract":"src.sol/testing/TestToken.sol:TestToken","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":602,"contract":"src.sol/testing/TestToken.sol:TestToken","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"},{"astId":604,"contract":"src.sol/testing/TestToken.sol:TestToken","label":"_decimals","offset":0,"slot":"5","type":"t_uint8"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}}}')},2888:function(e){e.exports=JSON.parse('{"address":"0x5FAe7F15Ae20A10053CCca1DcFce0E2Bb4D50A7d","abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"address","name":"definition","type":"address"},{"internalType":"string","name":"stateEncoding","type":"string"},{"internalType":"string","name":"resolverEncoding","type":"string"},{"internalType":"bytes","name":"encodedCancel","type":"bytes"}],"indexed":false,"internalType":"struct RegisteredTransfer","name":"transfer","type":"tuple"}],"name":"TransferAdded","type":"event"},{"anonymous":false,"inputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"address","name":"definition","type":"address"},{"internalType":"string","name":"stateEncoding","type":"string"},{"internalType":"string","name":"resolverEncoding","type":"string"},{"internalType":"bytes","name":"encodedCancel","type":"bytes"}],"indexed":false,"internalType":"struct RegisteredTransfer","name":"transfer","type":"tuple"}],"name":"TransferRemoved","type":"event"},{"inputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"address","name":"definition","type":"address"},{"internalType":"string","name":"stateEncoding","type":"string"},{"internalType":"string","name":"resolverEncoding","type":"string"},{"internalType":"bytes","name":"encodedCancel","type":"bytes"}],"internalType":"struct RegisteredTransfer","name":"definition","type":"tuple"}],"name":"addTransferDefinition","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getTransferDefinitions","outputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"address","name":"definition","type":"address"},{"internalType":"string","name":"stateEncoding","type":"string"},{"internalType":"string","name":"resolverEncoding","type":"string"},{"internalType":"bytes","name":"encodedCancel","type":"bytes"}],"internalType":"struct RegisteredTransfer[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"name","type":"string"}],"name":"removeTransferDefinition","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"transactionHash":"0x3c09da2b510e75360f4dfa93e33d23e3c952540192ddd67ea422c3cb163a75ad","receipt":{"to":null,"from":"0xd4b33434Cb36df9286Ef5132FCFb8062c96aC56E","contractAddress":"0x5FAe7F15Ae20A10053CCca1DcFce0E2Bb4D50A7d","transactionIndex":0,"gasUsed":"1239411","logsBloom":"0x000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010200000000000000000000000000000000000a0000200000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000020000000001000000000000000000000000000000000000000000008000000000000","blockHash":"0x5d1c2e1707f535d78084358a651032791eb5d709fabe4ed239ad46e4e57391e2","transactionHash":"0x3c09da2b510e75360f4dfa93e33d23e3c952540192ddd67ea422c3cb163a75ad","logs":[{"transactionIndex":0,"blockNumber":138377,"transactionHash":"0x5d1c2e1707f535d78084358a651032791eb5d709fabe4ed239ad46e4e57391e2","address":"0x5FAe7F15Ae20A10053CCca1DcFce0E2Bb4D50A7d","topics":["0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","0x0000000000000000000000000000000000000000000000000000000000000000","0x000000000000000000000000d4b33434cb36df9286ef5132fcfb8062c96ac56e"],"data":"0x","logIndex":0,"blockHash":"0x5d1c2e1707f535d78084358a651032791eb5d709fabe4ed239ad46e4e57391e2"}],"blockNumber":138377,"cumulativeGasUsed":"1239411","status":1,"byzantium":true},"args":[],"solcInputHash":"89c55d5a88f10637860a9ea31a1daad3","metadata":"{\\"compiler\\":{\\"version\\":\\"0.7.1+commit.f4a555be\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"previousOwner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"OwnershipTransferred\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"definition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"stateEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"resolverEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedCancel\\",\\"type\\":\\"bytes\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct RegisteredTransfer\\",\\"name\\":\\"transfer\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"TransferAdded\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"definition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"stateEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"resolverEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedCancel\\",\\"type\\":\\"bytes\\"}],\\"indexed\\":false,\\"internalType\\":\\"struct RegisteredTransfer\\",\\"name\\":\\"transfer\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"TransferRemoved\\",\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"definition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"stateEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"resolverEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedCancel\\",\\"type\\":\\"bytes\\"}],\\"internalType\\":\\"struct RegisteredTransfer\\",\\"name\\":\\"definition\\",\\"type\\":\\"tuple\\"}],\\"name\\":\\"addTransferDefinition\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getTransferDefinitions\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"definition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"stateEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"resolverEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedCancel\\",\\"type\\":\\"bytes\\"}],\\"internalType\\":\\"struct RegisteredTransfer[]\\",\\"name\\":\\"\\",\\"type\\":\\"tuple[]\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"owner\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"}],\\"name\\":\\"removeTransferDefinition\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"renounceOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"transferOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"author\\":\\"Connext <support@connext.network>\\",\\"kind\\":\\"dev\\",\\"methods\\":{\\"addTransferDefinition((string,address,string,string,bytes))\\":{\\"details\\":\\"Should add a transfer definition to the registry\\"},\\"getTransferDefinitions()\\":{\\"details\\":\\"Should return all transfer defintions in registry\\"},\\"owner()\\":{\\"details\\":\\"Returns the address of the current owner.\\"},\\"removeTransferDefinition(string)\\":{\\"details\\":\\"Should remove a transfer definition from the registry\\"},\\"renounceOwnership()\\":{\\"details\\":\\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\\"},\\"transferOwnership(address)\\":{\\"details\\":\\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\\"}},\\"title\\":\\"TransferRegistry\\",\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"notice\\":\\"The TransferRegistry maintains an onchain record of all         supported transfers (specifically holds the registry information         defined within the contracts). The offchain protocol uses         this information to get the correct encodings when generating         signatures. The information stored here can only be updated         by the owner of the contract\\",\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"src.sol/TransferRegistry.sol\\":\\"TransferRegistry\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/GSN/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/*\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with GSN meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address payable) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes memory) {\\\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x910a2e625b71168563edf9eeef55a50d6d699acfe27ceba3921f291829a8f938\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/access/Ownable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\nimport \\\\\\"../GSN/Context.sol\\\\\\";\\\\n/**\\\\n * @dev Contract module which provides a basic access control mechanism, where\\\\n * there is an account (an owner) that can be granted exclusive access to\\\\n * specific functions.\\\\n *\\\\n * By default, the owner account will be the one that deploys the contract. This\\\\n * can later be changed with {transferOwnership}.\\\\n *\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\\\n * the owner.\\\\n */\\\\ncontract Ownable is Context {\\\\n    address private _owner;\\\\n\\\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\\\n\\\\n    /**\\\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\\\n     */\\\\n    constructor () {\\\\n        address msgSender = _msgSender();\\\\n        _owner = msgSender;\\\\n        emit OwnershipTransferred(address(0), msgSender);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the address of the current owner.\\\\n     */\\\\n    function owner() public view returns (address) {\\\\n        return _owner;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the owner.\\\\n     */\\\\n    modifier onlyOwner() {\\\\n        require(_owner == _msgSender(), \\\\\\"Ownable: caller is not the owner\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Leaves the contract without owner. It will not be possible to call\\\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\\\n     *\\\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\\\n     * thereby removing any functionality that is only available to the owner.\\\\n     */\\\\n    function renounceOwnership() public virtual onlyOwner {\\\\n        emit OwnershipTransferred(_owner, address(0));\\\\n        _owner = address(0);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\\\n     * Can only be called by the current owner.\\\\n     */\\\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\\\n        require(newOwner != address(0), \\\\\\"Ownable: new owner is the zero address\\\\\\");\\\\n        emit OwnershipTransferred(_owner, newOwner);\\\\n        _owner = newOwner;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x74b0525c81e47810f1bd795755962bdb84de3a4f71cfcb063f4c4d4999a3e96b\\",\\"license\\":\\"MIT\\"},\\"src.sol/TransferRegistry.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./interfaces/ITransferRegistry.sol\\\\\\";\\\\nimport \\\\\\"./lib/LibIterableMapping.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/access/Ownable.sol\\\\\\";\\\\n\\\\n/// @title TransferRegistry\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice The TransferRegistry maintains an onchain record of all\\\\n///         supported transfers (specifically holds the registry information\\\\n///         defined within the contracts). The offchain protocol uses\\\\n///         this information to get the correct encodings when generating\\\\n///         signatures. The information stored here can only be updated\\\\n///         by the owner of the contract\\\\n\\\\ncontract TransferRegistry is Ownable, ITransferRegistry {\\\\n    using LibIterableMapping for LibIterableMapping.IterableMapping;\\\\n\\\\n    LibIterableMapping.IterableMapping transfers;\\\\n\\\\n    /// @dev Should add a transfer definition to the registry\\\\n    function addTransferDefinition(RegisteredTransfer memory definition)\\\\n        external\\\\n        override\\\\n        onlyOwner\\\\n    {\\\\n        // Get index transfer will be added at\\\\n        uint256 idx = transfers.length();\\\\n        \\\\n        // Add registered transfer\\\\n        transfers.addTransferDefinition(definition);\\\\n\\\\n        // Emit event\\\\n        emit TransferAdded(transfers.getTransferDefinitionByIndex(idx));\\\\n    }\\\\n\\\\n    /// @dev Should remove a transfer definition from the registry\\\\n    function removeTransferDefinition(string memory name)\\\\n        external\\\\n        override\\\\n        onlyOwner\\\\n    {\\\\n        // Get transfer from library to remove for event\\\\n        RegisteredTransfer memory transfer = transfers.getTransferDefinitionByName(name);\\\\n\\\\n        // Remove transfer\\\\n        transfers.removeTransferDefinition(name);\\\\n\\\\n        // Emit event\\\\n        emit TransferRemoved(transfer);\\\\n    }\\\\n\\\\n    /// @dev Should return all transfer defintions in registry\\\\n    function getTransferDefinitions()\\\\n        external\\\\n        view\\\\n        override\\\\n        returns (RegisteredTransfer[] memory)\\\\n    {\\\\n        return transfers.getTransferDefinitions();\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe0bbdc74c5635a2b21ab1a0f2b4ebb377af048f05cc2bab70f645ac826984382\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ITransferRegistry.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental \\\\\\"ABIEncoderV2\\\\\\";\\\\n\\\\nstruct RegisteredTransfer {\\\\n    string name;\\\\n    address definition;\\\\n    string stateEncoding;\\\\n    string resolverEncoding;\\\\n    bytes encodedCancel;\\\\n}\\\\n\\\\ninterface ITransferRegistry {\\\\n    event TransferAdded(RegisteredTransfer transfer);\\\\n\\\\n    event TransferRemoved(RegisteredTransfer transfer);\\\\n\\\\n    // Should add a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function addTransferDefinition(RegisteredTransfer memory transfer) external;\\\\n\\\\n    // Should remove a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function removeTransferDefinition(string memory name) external;\\\\n\\\\n    // Should return all transfer defintions in registry\\\\n    function getTransferDefinitions()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer[] memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd13be6d976c64e381a0d9df10c621cd964454b6916f25df4ea6c1b4cd873a58a\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibIterableMapping.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"../interfaces/ITransferRegistry.sol\\\\\\";\\\\n\\\\n/// @title LibIterableMapping\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This library provides an efficient way to store and retrieve\\\\n///         RegisteredTransfers. This contract is used to manage the transfers\\\\n///         stored by `TransferRegistry.sol`\\\\nlibrary LibIterableMapping {\\\\n    struct TransferDefinitionWithIndex {\\\\n        RegisteredTransfer transfer;\\\\n        uint256 index;\\\\n    }\\\\n\\\\n    struct IterableMapping {\\\\n        mapping(string => TransferDefinitionWithIndex) transfers;\\\\n        string[] names;\\\\n    }\\\\n\\\\n    function stringEqual(string memory s, string memory t)\\\\n        internal\\\\n        pure\\\\n        returns (bool)\\\\n    {\\\\n        return keccak256(abi.encodePacked(s)) == keccak256(abi.encodePacked(t));\\\\n    }\\\\n\\\\n    function isEmptyString(string memory s) internal pure returns (bool) {\\\\n        return stringEqual(s, \\\\\\"\\\\\\");\\\\n    }\\\\n\\\\n    function nameExists(IterableMapping storage self, string memory name)\\\\n        internal\\\\n        view\\\\n        returns (bool)\\\\n    {\\\\n        return\\\\n            !isEmptyString(name) &&\\\\n            self.names.length != 0 &&\\\\n            stringEqual(self.names[self.transfers[name].index], name);\\\\n    }\\\\n\\\\n    function length(IterableMapping storage self)\\\\n        internal\\\\n        view\\\\n        returns (uint256)\\\\n    {\\\\n        return self.names.length;\\\\n    }\\\\n\\\\n    function getTransferDefinitionByName(\\\\n        IterableMapping storage self,\\\\n        string memory name\\\\n    ) internal view returns (RegisteredTransfer memory) {\\\\n        require(nameExists(self, name), \\\\\\"LibIterableMapping: NAME_NOT_FOUND\\\\\\");\\\\n        return self.transfers[name].transfer;\\\\n    }\\\\n\\\\n    function getTransferDefinitionByIndex(\\\\n        IterableMapping storage self,\\\\n        uint256 index\\\\n    ) internal view returns (RegisteredTransfer memory) {\\\\n        require(index < self.names.length, \\\\\\"LibIterableMapping: INVALID_INDEX\\\\\\");\\\\n        return self.transfers[self.names[index]].transfer;\\\\n    }\\\\n\\\\n    function getTransferDefinitions(IterableMapping storage self)\\\\n        internal\\\\n        view\\\\n        returns (RegisteredTransfer[] memory)\\\\n    {\\\\n        uint256 l = self.names.length;\\\\n        RegisteredTransfer[] memory transfers = new RegisteredTransfer[](l);\\\\n        for (uint256 i = 0; i < l; i++) {\\\\n            transfers[i] = self.transfers[self.names[i]].transfer;\\\\n        }\\\\n        return transfers;\\\\n    }\\\\n\\\\n    function addTransferDefinition(\\\\n        IterableMapping storage self,\\\\n        RegisteredTransfer memory transfer\\\\n    ) internal {\\\\n        string memory name = transfer.name;\\\\n        require(!isEmptyString(name), \\\\\\"LibIterableMapping: EMPTY_NAME\\\\\\");\\\\n        require(!nameExists(self, name), \\\\\\"LibIterableMapping: NAME_ALREADY_ADDED\\\\\\");\\\\n        self.transfers[name] = TransferDefinitionWithIndex({\\\\n            transfer: transfer,\\\\n            index: self.names.length\\\\n        });\\\\n        self.names.push(name);\\\\n    }\\\\n\\\\n    function removeTransferDefinition(\\\\n        IterableMapping storage self,\\\\n        string memory name\\\\n    ) internal {\\\\n        require(!isEmptyString(name), \\\\\\"LibIterableMapping: EMPTY_NAME\\\\\\");\\\\n        require(nameExists(self, name), \\\\\\"LibIterableMapping: NAME_NOT_FOUND\\\\\\");\\\\n        uint256 index = self.transfers[name].index;\\\\n        string memory lastName = self.names[self.names.length - 1];\\\\n        self.transfers[lastName].index = index;\\\\n        self.names[index] = lastName;\\\\n        delete self.transfers[name];\\\\n        self.names.pop();\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x52d4a240bb76e9892af1ecbf6cf72995890db0b115a36a54e1b0115f0f47ce8a\\",\\"license\\":\\"UNLICENSED\\"}},\\"version\\":1}","bytecode":"0x608060405234801561001057600080fd5b50600061001b61006a565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35061006e565b3390565b6115078061007d6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806355304c3f14610067578063715018a61461007c5780638da5cb5b14610084578063961bf9b1146100a2578063c9ff4d25146100b5578063f2fde38b146100ca575b600080fd5b61007a610075366004611061565b6100dd565b005b61007a610179565b61008c6101f8565b604051610099919061127c565b60405180910390f35b61007a6100b0366004611026565b610207565b6100bd61028b565b6040516100999190611290565b61007a6100d836600461100b565b61029c565b6100e5610352565b6000546001600160a01b0390811691161461011b5760405162461bcd60e51b81526004016101129061137c565b60405180910390fd5b60006101276001610356565b905061013460018361035d565b7fcdbba5dd6bffbe47d5f74dbed3cf4a2174815c7186eaa49b32f97af4c47543bf6101606001836104af565b60405161016d919061146b565b60405180910390a15050565b610181610352565b6000546001600160a01b039081169116146101ae5760405162461bcd60e51b81526004016101129061137c565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b61020f610352565b6000546001600160a01b0390811691161461023c5760405162461bcd60e51b81526004016101129061137c565b610244610e79565b61024f600183610783565b905061025c6001836107c1565b7fdc44d9d985df00268149ae57add485c612e57109279f8485035dbe2b2251222b8160405161016d919061146b565b606061029760016109df565b905090565b6102a4610352565b6000546001600160a01b039081169116146102d15760405162461bcd60e51b81526004016101129061137c565b6001600160a01b0381166102f75760405162461bcd60e51b8152600401610112906112f0565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6001015490565b805161036881610d0e565b156103855760405162461bcd60e51b8152600401610112906113b1565b61038f8382610d29565b156103ac5760405162461bcd60e51b815260040161011290611336565b60408051808201825283815260018501546020820152905184906103d19084906111f0565b908152604051602091819003820190208251805180519293919284926103fb928492910190610eb1565b506020828101516001830180546001600160a01b0319166001600160a01b039092169190911790556040830151805161043a9260028501920190610eb1565b5060608201518051610456916003840191602090910190610eb1565b5060808201518051610472916004840191602090910190610eb1565b505050602091820151600590910155600180850180549182018155600090815282902083516104a993919092019190840190610eb1565b50505050565b6104b7610e79565b600183015482106104da5760405162461bcd60e51b8152600401610112906113e8565b826000018360010183815481106104ed57fe5b90600052602060002001604051610504919061120c565b9081526040805160209281900383018120805460026001821615610100026000190190911604601f8101859004909402820160c090810190935260a0820184815291939092849291849184018282801561059f5780601f106105745761010080835404028352916020019161059f565b820191906000526020600020905b81548152906001019060200180831161058257829003601f168201915b50505091835250506001828101546001600160a01b0316602080840191909152600280850180546040805161010096831615969096026000190190911692909204601f810184900484028501840183528085529190940193918301828280156106495780601f1061061e57610100808354040283529160200191610649565b820191906000526020600020905b81548152906001019060200180831161062c57829003601f168201915b505050918352505060038201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156106dd5780601f106106b2576101008083540402835291602001916106dd565b820191906000526020600020905b8154815290600101906020018083116106c057829003601f168201915b505050918352505060048201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156107715780601f1061074657610100808354040283529160200191610771565b820191906000526020600020905b81548152906001019060200180831161075457829003601f168201915b50505050508152505090505b92915050565b61078b610e79565b6107958383610d29565b6107b15760405162461bcd60e51b815260040161011290611429565b60405183906105049084906111f0565b6107ca81610d0e565b156107e75760405162461bcd60e51b8152600401610112906113b1565b6107f18282610d29565b61080d5760405162461bcd60e51b815260040161011290611429565b6000826000018260405161082191906111f0565b90815260405190819003602001902060050154600184018054919250606091600019810190811061084e57fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156108dc5780601f106108b1576101008083540402835291602001916108dc565b820191906000526020600020905b8154815290600101906020018083116108bf57829003601f168201915b505050505090508184600001826040516108f691906111f0565b9081526020016040518091039020600501819055508084600101838154811061091b57fe5b906000526020600020019080519060200190610938929190610eb1565b5060405184906109499085906111f0565b908152604051908190036020019020600081816109668282610f2f565b6001820180546001600160a01b0319169055610986600283016000610f2f565b610994600383016000610f2f565b6109a2600483016000610f2f565b505060058201600090555050836001018054806109bb57fe5b6001900381819060005260206000200160006109d79190610f2f565b905550505050565b6001810154606090818167ffffffffffffffff811180156109ff57600080fd5b50604051908082528060200260200182016040528015610a3957816020015b610a26610e79565b815260200190600190039081610a1e5790505b50905060005b82811015610d065784600001856001018281548110610a5a57fe5b90600052602060002001604051610a71919061120c565b9081526040805160209281900383018120805460026001821615610100026000190190911604601f8101859004909402820160c090810190935260a08201848152919390928492918491840182828015610b0c5780601f10610ae157610100808354040283529160200191610b0c565b820191906000526020600020905b815481529060010190602001808311610aef57829003601f168201915b50505091835250506001828101546001600160a01b0316602080840191909152600280850180546040805161010096831615969096026000190190911692909204601f81018490048402850184018352808552919094019391830182828015610bb65780601f10610b8b57610100808354040283529160200191610bb6565b820191906000526020600020905b815481529060010190602001808311610b9957829003601f168201915b505050918352505060038201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015610c4a5780601f10610c1f57610100808354040283529160200191610c4a565b820191906000526020600020905b815481529060010190602001808311610c2d57829003601f168201915b505050918352505060048201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015610cde5780601f10610cb357610100808354040283529160200191610cde565b820191906000526020600020905b815481529060010190602001808311610cc157829003601f168201915b505050505081525050828281518110610cf357fe5b6020908102919091010152600101610a3f565b509392505050565b600061077d8260405180602001604052806000815250610e20565b6000610d3482610d0e565b158015610d445750600183015415155b8015610e195750610e19836001018460000184604051610d6491906111f0565b90815260200160405180910390206005015481548110610d8057fe5b600091825260209182902001805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015610e0e5780601f10610de357610100808354040283529160200191610e0e565b820191906000526020600020905b815481529060010190602001808311610df157829003601f168201915b505050505083610e20565b9392505050565b600081604051602001610e3391906111f0565b6040516020818303038152906040528051906020012083604051602001610e5a91906111f0565b6040516020818303038152906040528051906020012014905092915050565b6040518060a001604052806060815260200160006001600160a01b031681526020016060815260200160608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610ef257805160ff1916838001178555610f1f565b82800160010185558215610f1f579182015b82811115610f1f578251825591602001919060010190610f04565b50610f2b929150610f76565b5090565b50805460018160011615610100020316600290046000825580601f10610f555750610f73565b601f016020900490600052602060002090810190610f739190610f76565b50565b5b80821115610f2b5760008155600101610f77565b80356001600160a01b038116811461077d57600080fd5b600082601f830112610fb2578081fd5b813567ffffffffffffffff811115610fc8578182fd5b610fdb601f8201601f191660200161147e565b9150808252836020828501011115610ff257600080fd5b8060208401602084013760009082016020015292915050565b60006020828403121561101c578081fd5b610e198383610f8b565b600060208284031215611037578081fd5b813567ffffffffffffffff81111561104d578182fd5b61105984828501610fa2565b949350505050565b600060208284031215611072578081fd5b813567ffffffffffffffff80821115611089578283fd5b9083019060a0828603121561109c578283fd5b6110a660a061147e565b8235828111156110b4578485fd5b6110c087828601610fa2565b8252506110d08660208501610f8b565b60208201526040830135828111156110e6578485fd5b6110f287828601610fa2565b604083015250606083013582811115611109578485fd5b61111587828601610fa2565b60608301525060808301358281111561112c578485fd5b61113887828601610fa2565b60808301525095945050505050565b6000815180845261115f8160208601602086016114a5565b601f01601f19169290920160200192915050565b6000815160a0845261118860a0850182611147565b905060018060a01b036020840151166020850152604083015184820360408601526111b38282611147565b915050606083015184820360608601526111cd8282611147565b915050608083015184820360808601526111e78282611147565b95945050505050565b600082516112028184602087016114a5565b9190910192915050565b600080835460018082166000811461122b576001811461124257611271565b60ff198316865260028304607f1686019350611271565b600283048786526020808720875b838110156112695781548a820152908501908201611250565b505050860193505b509195945050505050565b6001600160a01b0391909116815260200190565b6000602080830181845280855180835260408601915060408482028701019250838701855b828110156112e357603f198886030184526112d1858351611173565b945092850192908501906001016112b5565b5092979650505050505050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526026908201527f4c69624974657261626c654d617070696e673a204e414d455f414c524541445960408201526517d05111115160d21b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601e908201527f4c69624974657261626c654d617070696e673a20454d5054595f4e414d450000604082015260600190565b60208082526021908201527f4c69624974657261626c654d617070696e673a20494e56414c49445f494e44456040820152600b60fb1b606082015260800190565b60208082526022908201527f4c69624974657261626c654d617070696e673a204e414d455f4e4f545f464f55604082015261139160f21b606082015260800190565b600060208252610e196020830184611173565b60405181810167ffffffffffffffff8111828210171561149d57600080fd5b604052919050565b60005b838110156114c05781810151838201526020016114a8565b838111156104a9575050600091015256fea26469706673582212207ffce686b133899c962d2392c37d7cc417bfb49017cb433d19d525b065f0f46d64736f6c63430007010033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106100625760003560e01c806355304c3f14610067578063715018a61461007c5780638da5cb5b14610084578063961bf9b1146100a2578063c9ff4d25146100b5578063f2fde38b146100ca575b600080fd5b61007a610075366004611061565b6100dd565b005b61007a610179565b61008c6101f8565b604051610099919061127c565b60405180910390f35b61007a6100b0366004611026565b610207565b6100bd61028b565b6040516100999190611290565b61007a6100d836600461100b565b61029c565b6100e5610352565b6000546001600160a01b0390811691161461011b5760405162461bcd60e51b81526004016101129061137c565b60405180910390fd5b60006101276001610356565b905061013460018361035d565b7fcdbba5dd6bffbe47d5f74dbed3cf4a2174815c7186eaa49b32f97af4c47543bf6101606001836104af565b60405161016d919061146b565b60405180910390a15050565b610181610352565b6000546001600160a01b039081169116146101ae5760405162461bcd60e51b81526004016101129061137c565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b61020f610352565b6000546001600160a01b0390811691161461023c5760405162461bcd60e51b81526004016101129061137c565b610244610e79565b61024f600183610783565b905061025c6001836107c1565b7fdc44d9d985df00268149ae57add485c612e57109279f8485035dbe2b2251222b8160405161016d919061146b565b606061029760016109df565b905090565b6102a4610352565b6000546001600160a01b039081169116146102d15760405162461bcd60e51b81526004016101129061137c565b6001600160a01b0381166102f75760405162461bcd60e51b8152600401610112906112f0565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6001015490565b805161036881610d0e565b156103855760405162461bcd60e51b8152600401610112906113b1565b61038f8382610d29565b156103ac5760405162461bcd60e51b815260040161011290611336565b60408051808201825283815260018501546020820152905184906103d19084906111f0565b908152604051602091819003820190208251805180519293919284926103fb928492910190610eb1565b506020828101516001830180546001600160a01b0319166001600160a01b039092169190911790556040830151805161043a9260028501920190610eb1565b5060608201518051610456916003840191602090910190610eb1565b5060808201518051610472916004840191602090910190610eb1565b505050602091820151600590910155600180850180549182018155600090815282902083516104a993919092019190840190610eb1565b50505050565b6104b7610e79565b600183015482106104da5760405162461bcd60e51b8152600401610112906113e8565b826000018360010183815481106104ed57fe5b90600052602060002001604051610504919061120c565b9081526040805160209281900383018120805460026001821615610100026000190190911604601f8101859004909402820160c090810190935260a0820184815291939092849291849184018282801561059f5780601f106105745761010080835404028352916020019161059f565b820191906000526020600020905b81548152906001019060200180831161058257829003601f168201915b50505091835250506001828101546001600160a01b0316602080840191909152600280850180546040805161010096831615969096026000190190911692909204601f810184900484028501840183528085529190940193918301828280156106495780601f1061061e57610100808354040283529160200191610649565b820191906000526020600020905b81548152906001019060200180831161062c57829003601f168201915b505050918352505060038201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156106dd5780601f106106b2576101008083540402835291602001916106dd565b820191906000526020600020905b8154815290600101906020018083116106c057829003601f168201915b505050918352505060048201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156107715780601f1061074657610100808354040283529160200191610771565b820191906000526020600020905b81548152906001019060200180831161075457829003601f168201915b50505050508152505090505b92915050565b61078b610e79565b6107958383610d29565b6107b15760405162461bcd60e51b815260040161011290611429565b60405183906105049084906111f0565b6107ca81610d0e565b156107e75760405162461bcd60e51b8152600401610112906113b1565b6107f18282610d29565b61080d5760405162461bcd60e51b815260040161011290611429565b6000826000018260405161082191906111f0565b90815260405190819003602001902060050154600184018054919250606091600019810190811061084e57fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156108dc5780601f106108b1576101008083540402835291602001916108dc565b820191906000526020600020905b8154815290600101906020018083116108bf57829003601f168201915b505050505090508184600001826040516108f691906111f0565b9081526020016040518091039020600501819055508084600101838154811061091b57fe5b906000526020600020019080519060200190610938929190610eb1565b5060405184906109499085906111f0565b908152604051908190036020019020600081816109668282610f2f565b6001820180546001600160a01b0319169055610986600283016000610f2f565b610994600383016000610f2f565b6109a2600483016000610f2f565b505060058201600090555050836001018054806109bb57fe5b6001900381819060005260206000200160006109d79190610f2f565b905550505050565b6001810154606090818167ffffffffffffffff811180156109ff57600080fd5b50604051908082528060200260200182016040528015610a3957816020015b610a26610e79565b815260200190600190039081610a1e5790505b50905060005b82811015610d065784600001856001018281548110610a5a57fe5b90600052602060002001604051610a71919061120c565b9081526040805160209281900383018120805460026001821615610100026000190190911604601f8101859004909402820160c090810190935260a08201848152919390928492918491840182828015610b0c5780601f10610ae157610100808354040283529160200191610b0c565b820191906000526020600020905b815481529060010190602001808311610aef57829003601f168201915b50505091835250506001828101546001600160a01b0316602080840191909152600280850180546040805161010096831615969096026000190190911692909204601f81018490048402850184018352808552919094019391830182828015610bb65780601f10610b8b57610100808354040283529160200191610bb6565b820191906000526020600020905b815481529060010190602001808311610b9957829003601f168201915b505050918352505060038201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015610c4a5780601f10610c1f57610100808354040283529160200191610c4a565b820191906000526020600020905b815481529060010190602001808311610c2d57829003601f168201915b505050918352505060048201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015610cde5780601f10610cb357610100808354040283529160200191610cde565b820191906000526020600020905b815481529060010190602001808311610cc157829003601f168201915b505050505081525050828281518110610cf357fe5b6020908102919091010152600101610a3f565b509392505050565b600061077d8260405180602001604052806000815250610e20565b6000610d3482610d0e565b158015610d445750600183015415155b8015610e195750610e19836001018460000184604051610d6491906111f0565b90815260200160405180910390206005015481548110610d8057fe5b600091825260209182902001805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015610e0e5780601f10610de357610100808354040283529160200191610e0e565b820191906000526020600020905b815481529060010190602001808311610df157829003601f168201915b505050505083610e20565b9392505050565b600081604051602001610e3391906111f0565b6040516020818303038152906040528051906020012083604051602001610e5a91906111f0565b6040516020818303038152906040528051906020012014905092915050565b6040518060a001604052806060815260200160006001600160a01b031681526020016060815260200160608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610ef257805160ff1916838001178555610f1f565b82800160010185558215610f1f579182015b82811115610f1f578251825591602001919060010190610f04565b50610f2b929150610f76565b5090565b50805460018160011615610100020316600290046000825580601f10610f555750610f73565b601f016020900490600052602060002090810190610f739190610f76565b50565b5b80821115610f2b5760008155600101610f77565b80356001600160a01b038116811461077d57600080fd5b600082601f830112610fb2578081fd5b813567ffffffffffffffff811115610fc8578182fd5b610fdb601f8201601f191660200161147e565b9150808252836020828501011115610ff257600080fd5b8060208401602084013760009082016020015292915050565b60006020828403121561101c578081fd5b610e198383610f8b565b600060208284031215611037578081fd5b813567ffffffffffffffff81111561104d578182fd5b61105984828501610fa2565b949350505050565b600060208284031215611072578081fd5b813567ffffffffffffffff80821115611089578283fd5b9083019060a0828603121561109c578283fd5b6110a660a061147e565b8235828111156110b4578485fd5b6110c087828601610fa2565b8252506110d08660208501610f8b565b60208201526040830135828111156110e6578485fd5b6110f287828601610fa2565b604083015250606083013582811115611109578485fd5b61111587828601610fa2565b60608301525060808301358281111561112c578485fd5b61113887828601610fa2565b60808301525095945050505050565b6000815180845261115f8160208601602086016114a5565b601f01601f19169290920160200192915050565b6000815160a0845261118860a0850182611147565b905060018060a01b036020840151166020850152604083015184820360408601526111b38282611147565b915050606083015184820360608601526111cd8282611147565b915050608083015184820360808601526111e78282611147565b95945050505050565b600082516112028184602087016114a5565b9190910192915050565b600080835460018082166000811461122b576001811461124257611271565b60ff198316865260028304607f1686019350611271565b600283048786526020808720875b838110156112695781548a820152908501908201611250565b505050860193505b509195945050505050565b6001600160a01b0391909116815260200190565b6000602080830181845280855180835260408601915060408482028701019250838701855b828110156112e357603f198886030184526112d1858351611173565b945092850192908501906001016112b5565b5092979650505050505050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526026908201527f4c69624974657261626c654d617070696e673a204e414d455f414c524541445960408201526517d05111115160d21b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601e908201527f4c69624974657261626c654d617070696e673a20454d5054595f4e414d450000604082015260600190565b60208082526021908201527f4c69624974657261626c654d617070696e673a20494e56414c49445f494e44456040820152600b60fb1b606082015260800190565b60208082526022908201527f4c69624974657261626c654d617070696e673a204e414d455f4e4f545f464f55604082015261139160f21b606082015260800190565b600060208252610e196020830184611173565b60405181810167ffffffffffffffff8111828210171561149d57600080fd5b604052919050565b60005b838110156114c05781810151838201526020016114a8565b838111156104a9575050600091015256fea26469706673582212207ffce686b133899c962d2392c37d7cc417bfb49017cb433d19d525b065f0f46d64736f6c63430007010033","devdoc":{"author":"Connext <support@connext.network>","kind":"dev","methods":{"addTransferDefinition((string,address,string,string,bytes))":{"details":"Should add a transfer definition to the registry"},"getTransferDefinitions()":{"details":"Should return all transfer defintions in registry"},"owner()":{"details":"Returns the address of the current owner."},"removeTransferDefinition(string)":{"details":"Should remove a transfer definition from the registry"},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"title":"TransferRegistry","version":1},"userdoc":{"kind":"user","methods":{},"notice":"The TransferRegistry maintains an onchain record of all         supported transfers (specifically holds the registry information         defined within the contracts). The offchain protocol uses         this information to get the correct encodings when generating         signatures. The information stored here can only be updated         by the owner of the contract","version":1},"storageLayout":{"storage":[{"astId":30,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":3458,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"transfers","offset":0,"slot":"1","type":"t_struct(IterableMapping)4424_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_string_storage)dyn_storage":{"base":"t_string_storage","encoding":"dynamic_array","label":"string[]","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_mapping(t_string_memory_ptr,t_struct(TransferDefinitionWithIndex)4416_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => struct LibIterableMapping.TransferDefinitionWithIndex)","numberOfBytes":"32","value":"t_struct(TransferDefinitionWithIndex)4416_storage"},"t_string_memory_ptr":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(IterableMapping)4424_storage":{"encoding":"inplace","label":"struct LibIterableMapping.IterableMapping","members":[{"astId":4420,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"transfers","offset":0,"slot":"0","type":"t_mapping(t_string_memory_ptr,t_struct(TransferDefinitionWithIndex)4416_storage)"},{"astId":4423,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"names","offset":0,"slot":"1","type":"t_array(t_string_storage)dyn_storage"}],"numberOfBytes":"64"},"t_struct(RegisteredTransfer)3967_storage":{"encoding":"inplace","label":"struct RegisteredTransfer","members":[{"astId":3958,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":3960,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"definition","offset":0,"slot":"1","type":"t_address"},{"astId":3962,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"stateEncoding","offset":0,"slot":"2","type":"t_string_storage"},{"astId":3964,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"resolverEncoding","offset":0,"slot":"3","type":"t_string_storage"},{"astId":3966,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"encodedCancel","offset":0,"slot":"4","type":"t_bytes_storage"}],"numberOfBytes":"160"},"t_struct(TransferDefinitionWithIndex)4416_storage":{"encoding":"inplace","label":"struct LibIterableMapping.TransferDefinitionWithIndex","members":[{"astId":4413,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"transfer","offset":0,"slot":"0","type":"t_struct(RegisteredTransfer)3967_storage"},{"astId":4415,"contract":"src.sol/TransferRegistry.sol:TransferRegistry","label":"index","offset":0,"slot":"5","type":"t_uint256"}],"numberOfBytes":"192"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}}}')},2889:function(e){e.exports=JSON.parse('{"address":"0xed911640fd86f92fD1337526010adda8F3Eb8344","abi":[{"inputs":[],"name":"EncodedCancel","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"Name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ResolverEncoding","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"StateEncoding","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"encodedBalance","type":"bytes"},{"internalType":"bytes","name":"encodedState","type":"bytes"}],"name":"create","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"getRegistryInformation","outputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"address","name":"definition","type":"address"},{"internalType":"string","name":"stateEncoding","type":"string"},{"internalType":"string","name":"resolverEncoding","type":"string"},{"internalType":"bytes","name":"encodedCancel","type":"bytes"}],"internalType":"struct RegisteredTransfer","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"encodedBalance","type":"bytes"},{"internalType":"bytes","name":"encodedState","type":"bytes"},{"internalType":"bytes","name":"encodedResolver","type":"bytes"}],"name":"resolve","outputs":[{"components":[{"internalType":"uint256[2]","name":"amount","type":"uint256[2]"},{"internalType":"address payable[2]","name":"to","type":"address[2]"}],"internalType":"struct Balance","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"}],"transactionHash":"0x8b33438d6a63a1f39921ae4d66aa9aaebb69b521c6f6b15d3434c7cb4aae858f","receipt":{"to":null,"from":"0xd4b33434Cb36df9286Ef5132FCFb8062c96aC56E","contractAddress":"0xed911640fd86f92fD1337526010adda8F3Eb8344","transactionIndex":1,"gasUsed":"1069621","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","blockHash":"0x6ade09a675d7d5e3ef3a2b4f65d56014e420df79a82e8c76fdddebe6601d1a1e","transactionHash":"0x8b33438d6a63a1f39921ae4d66aa9aaebb69b521c6f6b15d3434c7cb4aae858f","logs":[],"blockNumber":138374,"cumulativeGasUsed":"1223035","status":1,"byzantium":true},"args":[],"solcInputHash":"89c55d5a88f10637860a9ea31a1daad3","metadata":"{\\"compiler\\":{\\"version\\":\\"0.7.1+commit.f4a555be\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[],\\"name\\":\\"EncodedCancel\\",\\"outputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"\\",\\"type\\":\\"bytes\\"}],\\"stateMutability\\":\\"pure\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"Name\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"ResolverEncoding\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"StateEncoding\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedBalance\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedState\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"create\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"pure\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getRegistryInformation\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"definition\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"stateEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"resolverEncoding\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedCancel\\",\\"type\\":\\"bytes\\"}],\\"internalType\\":\\"struct RegisteredTransfer\\",\\"name\\":\\"\\",\\"type\\":\\"tuple\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedBalance\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedState\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"encodedResolver\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"resolve\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"uint256[2]\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256[2]\\"},{\\"internalType\\":\\"address payable[2]\\",\\"name\\":\\"to\\",\\"type\\":\\"address[2]\\"}],\\"internalType\\":\\"struct Balance\\",\\"name\\":\\"\\",\\"type\\":\\"tuple\\"}],\\"stateMutability\\":\\"pure\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"author\\":\\"Connext <support@connext.network>\\",\\"kind\\":\\"dev\\",\\"methods\\":{},\\"title\\":\\"Withdraw\\",\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"notice\\":\\"This contract burns the initiator\'s funds if a mutually signed         withdraw commitment can be generated\\",\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"src.sol/transferDefinitions/Withdraw.sol\\":\\"Withdraw\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.7.0;\\\\n\\\\n/**\\\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\\\n *\\\\n * These functions can be used to verify that a message was signed by the holder\\\\n * of the private keys of a given address.\\\\n */\\\\nlibrary ECDSA {\\\\n    /**\\\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\\\n     * `signature`. This address can then be used for verification purposes.\\\\n     *\\\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\\\n     * this function rejects them by requiring the `s` value to be in the lower\\\\n     * half order, and the `v` value to be either 27 or 28.\\\\n     *\\\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\\\n     * verification to be secure: it is possible to craft signatures that\\\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\\\n     * this is by receiving a hash of the original message (which may otherwise\\\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\\\n     */\\\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\\\n        // Check the signature length\\\\n        if (signature.length != 65) {\\\\n            revert(\\\\\\"ECDSA: invalid signature length\\\\\\");\\\\n        }\\\\n\\\\n        // Divide the signature in r, s and v variables\\\\n        bytes32 r;\\\\n        bytes32 s;\\\\n        uint8 v;\\\\n\\\\n        // ecrecover takes the signature parameters, and the only way to get them\\\\n        // currently is to use assembly.\\\\n        // solhint-disable-next-line no-inline-assembly\\\\n        assembly {\\\\n            r := mload(add(signature, 0x20))\\\\n            s := mload(add(signature, 0x40))\\\\n            v := byte(0, mload(add(signature, 0x60)))\\\\n        }\\\\n\\\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\\\n        // the valid range for s in (281): 0 < s < secp256k1n \\\\u00f7 2 + 1, and for v in (282): v \\\\u2208 {27, 28}. Most\\\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\\\n        //\\\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\\\n        // these malleable signatures as well.\\\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\\\n            revert(\\\\\\"ECDSA: invalid signature \'s\' value\\\\\\");\\\\n        }\\\\n\\\\n        if (v != 27 && v != 28) {\\\\n            revert(\\\\\\"ECDSA: invalid signature \'v\' value\\\\\\");\\\\n        }\\\\n\\\\n        // If the signature is valid (and not malleable), return the signer address\\\\n        address signer = ecrecover(hash, v, r, s);\\\\n        require(signer != address(0), \\\\\\"ECDSA: invalid signature\\\\\\");\\\\n\\\\n        return signer;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\\\n     * replicates the behavior of the\\\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\\\n     * JSON-RPC method.\\\\n     *\\\\n     * See {recover}.\\\\n     */\\\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\\\n        // 32 is the length in bytes of hash,\\\\n        // enforced by the type signature above\\\\n        return keccak256(abi.encodePacked(\\\\\\"\\\\\\\\x19Ethereum Signed Message:\\\\\\\\n32\\\\\\", hash));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf25c49d2be2d28918ae6de7e9724238367dabe50631ec8fd23d1cdae2cb70262\\",\\"license\\":\\"MIT\\"},\\"src.sol/interfaces/ITransferDefinition.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./ITransferRegistry.sol\\\\\\";\\\\nimport \\\\\\"./Types.sol\\\\\\";\\\\n\\\\ninterface ITransferDefinition {\\\\n    // Validates the initial state of the transfer.\\\\n    // Called by validator.ts during `create` updates.\\\\n    function create(bytes calldata encodedBalance, bytes calldata)\\\\n        external\\\\n        view\\\\n        returns (bool);\\\\n\\\\n    // Performs a state transition to resolve a transfer and returns final balances.\\\\n    // Called by validator.ts during `resolve` updates.\\\\n    function resolve(\\\\n        bytes calldata encodedBalance,\\\\n        bytes calldata,\\\\n        bytes calldata\\\\n    ) external view returns (Balance memory);\\\\n\\\\n    // Should also have the following properties:\\\\n    // string public constant override Name = \\\\\\"...\\\\\\";\\\\n    // string public constant override StateEncoding = \\\\\\"...\\\\\\";\\\\n    // string public constant override ResolverEncoding = \\\\\\"...\\\\\\";\\\\n    // These properties are included on the transfer specifically\\\\n    // to make it easier for implementers to add new transfers by\\\\n    // only include a `.sol` file\\\\n    function Name() external view returns (string memory);\\\\n\\\\n    function StateEncoding() external view returns (string memory);\\\\n\\\\n    function ResolverEncoding() external view returns (string memory);\\\\n\\\\n    function EncodedCancel() external view returns (bytes memory);\\\\n\\\\n    function getRegistryInformation()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd8eef575aa791b187397c9096e6cf40431b590d3999f0a80e38f3e59f4cf4764\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/ITransferRegistry.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental \\\\\\"ABIEncoderV2\\\\\\";\\\\n\\\\nstruct RegisteredTransfer {\\\\n    string name;\\\\n    address definition;\\\\n    string stateEncoding;\\\\n    string resolverEncoding;\\\\n    bytes encodedCancel;\\\\n}\\\\n\\\\ninterface ITransferRegistry {\\\\n    event TransferAdded(RegisteredTransfer transfer);\\\\n\\\\n    event TransferRemoved(RegisteredTransfer transfer);\\\\n\\\\n    // Should add a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function addTransferDefinition(RegisteredTransfer memory transfer) external;\\\\n\\\\n    // Should remove a transfer definition to the registry\\\\n    // onlyOwner\\\\n    function removeTransferDefinition(string memory name) external;\\\\n\\\\n    // Should return all transfer defintions in registry\\\\n    function getTransferDefinitions()\\\\n        external\\\\n        view\\\\n        returns (RegisteredTransfer[] memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd13be6d976c64e381a0d9df10c621cd964454b6916f25df4ea6c1b4cd873a58a\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/interfaces/Types.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nstruct Balance {\\\\n    uint256[2] amount; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n    address payable[2] to; // [alice, bob] in channel, [initiator, responder] in transfer\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf8c71b155b630cde965f5d1db5f0d2751a9763f5a797f15d946613e9224f1046\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/lib/LibChannelCrypto.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\\\\\";\\\\n\\\\t\\\\t\\\\n/// @author Connext <support@connext.network>\\\\t\\\\t\\\\n/// @notice This library contains helpers for recovering signatures from a\\\\t\\\\t\\\\n///         Vector commitments. Channels do not allow for arbitrary signing of\\\\t\\\\t\\\\n///         messages to prevent misuse of private keys by injected providers,\\\\t\\\\t\\\\n///         and instead only sign messages with a Vector channel prefix.\\\\nlibrary LibChannelCrypto {\\\\n    function checkSignature(\\\\n        bytes32 hash,\\\\n        bytes memory signature,\\\\n        address allegedSigner\\\\n    ) internal pure returns (bool) {\\\\n        return recoverChannelMessageSigner(hash, signature) == allegedSigner;\\\\n    }\\\\n\\\\n    function recoverChannelMessageSigner(bytes32 hash, bytes memory signature)\\\\n        internal\\\\n        pure\\\\n        returns (address)\\\\n    {\\\\n        bytes32 digest = toChannelSignedMessage(hash);\\\\n        return ECDSA.recover(digest, signature);\\\\n    }\\\\n\\\\n    function toChannelSignedMessage(bytes32 hash)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        // 32 is the length in bytes of hash,\\\\n        // enforced by the type signature above\\\\n        return\\\\n            keccak256(abi.encodePacked(\\\\\\"\\\\\\\\x16Vector Signed Message:\\\\\\\\n32\\\\\\", hash));\\\\n    }\\\\n\\\\n    function checkUtilitySignature(\\\\n        bytes32 hash,\\\\n        bytes memory signature,\\\\n        address allegedSigner\\\\n    ) internal pure returns (bool) {\\\\n        return recoverChannelMessageSigner(hash, signature) == allegedSigner;\\\\n    }\\\\n\\\\n    function recoverUtilityMessageSigner(bytes32 hash, bytes memory signature)\\\\n        internal\\\\n        pure\\\\n        returns (address)\\\\n    {\\\\n        bytes32 digest = toUtilitySignedMessage(hash);\\\\n        return ECDSA.recover(digest, signature);\\\\n    }\\\\n\\\\n    function toUtilitySignedMessage(bytes32 hash)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        // 32 is the length in bytes of hash,\\\\n        // enforced by the type signature above\\\\n        return\\\\n            keccak256(abi.encodePacked(\\\\\\"\\\\\\\\x17Utility Signed Message:\\\\\\\\n32\\\\\\", hash));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xb8aa3679b75f2a1a5785f614f5dff9a76a689c18caa56a8df1f4e3c3167d6ece\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/transferDefinitions/TransferDefinition.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"../interfaces/ITransferDefinition.sol\\\\\\";\\\\nimport \\\\\\"../interfaces/ITransferRegistry.sol\\\\\\";\\\\n\\\\n/// @title TransferDefinition\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This contract helps reduce boilerplate needed when creating\\\\n///         new transfer definitions by providing an implementation of\\\\n///         the required getter\\\\n\\\\nabstract contract TransferDefinition is ITransferDefinition {\\\\n    function getRegistryInformation()\\\\n        external\\\\n        view\\\\n        override\\\\n        returns (RegisteredTransfer memory)\\\\n    {\\\\n        return\\\\n            RegisteredTransfer({\\\\n                name: this.Name(),\\\\n                stateEncoding: this.StateEncoding(),\\\\n                resolverEncoding: this.ResolverEncoding(),\\\\n                definition: address(this),\\\\n                encodedCancel: this.EncodedCancel()\\\\n            });\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xdb8bcb3fadd5c514bc6585b0a48d66952570bbb1a62f18b9dc9a4f693dc11c5e\\",\\"license\\":\\"UNLICENSED\\"},\\"src.sol/transferDefinitions/Withdraw.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: UNLICENSED\\\\npragma solidity ^0.7.1;\\\\npragma experimental ABIEncoderV2;\\\\n\\\\nimport \\\\\\"./TransferDefinition.sol\\\\\\";\\\\nimport \\\\\\"../lib/LibChannelCrypto.sol\\\\\\";\\\\n\\\\n/// @title Withdraw\\\\n/// @author Connext <support@connext.network>\\\\n/// @notice This contract burns the initiator\'s funds if a mutually signed\\\\n///         withdraw commitment can be generated\\\\n\\\\ncontract Withdraw is TransferDefinition {\\\\n    using LibChannelCrypto for bytes32;\\\\n\\\\n    struct TransferState {\\\\n        bytes initiatorSignature;\\\\n        address initiator;\\\\n        address responder;\\\\n        bytes32 data;\\\\n        uint256 nonce; // included so that each withdraw commitment has a unique hash\\\\n        uint256 fee;\\\\n        address callTo;\\\\n        bytes callData;\\\\n    }\\\\n\\\\n    struct TransferResolver {\\\\n        bytes responderSignature;\\\\n    }\\\\n\\\\n    // Provide registry information\\\\n    string public constant override Name = \\\\\\"Withdraw\\\\\\";\\\\n    string public constant override StateEncoding =\\\\n        \\\\\\"tuple(bytes initiatorSignature, address initiator, address responder, bytes32 data, uint256 nonce, uint256 fee, address callTo, bytes callData)\\\\\\";\\\\n    string public constant override ResolverEncoding =\\\\n        \\\\\\"tuple(bytes responderSignature)\\\\\\";\\\\n\\\\n    function EncodedCancel() external pure override returns(bytes memory) {\\\\n      TransferResolver memory resolver;\\\\n      resolver.responderSignature = new bytes(65);\\\\n      return abi.encode(resolver);\\\\n    }\\\\n\\\\n    function create(bytes calldata encodedBalance, bytes calldata encodedState)\\\\n        external\\\\n        pure\\\\n        override\\\\n        returns (bool)\\\\n    {\\\\n        // Get unencoded information\\\\n        TransferState memory state = abi.decode(encodedState, (TransferState));\\\\n        Balance memory balance = abi.decode(encodedBalance, (Balance));\\\\n\\\\n        require(balance.amount[1] == 0, \\\\\\"Withdraw: NONZERO_RECIPIENT_BALANCE\\\\\\");\\\\n        require(\\\\n            state.initiator != address(0) && state.responder != address(0),\\\\n            \\\\\\"Withdraw: EMPTY_SIGNERS\\\\\\"\\\\n        );\\\\n        require(state.data != bytes32(0), \\\\\\"Withdraw: EMPTY_DATA\\\\\\");\\\\n        require(state.nonce != uint256(0), \\\\\\"Withdraw: EMPTY_NONCE\\\\\\");\\\\n        require(\\\\n            state.fee <= balance.amount[0],\\\\n            \\\\\\"Withdraw: INSUFFICIENT_BALANCE\\\\\\"\\\\n        );\\\\n        require(\\\\n            state.data.checkSignature(\\\\n                state.initiatorSignature,\\\\n                state.initiator\\\\n            ),\\\\n            \\\\\\"Withdraw: INVALID_INITIATOR_SIG\\\\\\"\\\\n        );\\\\n        \\\\n        // Valid initial transfer state\\\\n        return true;\\\\n    }\\\\n\\\\n    function resolve(\\\\n        bytes calldata encodedBalance,\\\\n        bytes calldata encodedState,\\\\n        bytes calldata encodedResolver\\\\n    ) external pure override returns (Balance memory) {\\\\n        TransferState memory state = abi.decode(encodedState, (TransferState));\\\\n        TransferResolver memory resolver =\\\\n            abi.decode(encodedResolver, (TransferResolver));\\\\n        Balance memory balance = abi.decode(encodedBalance, (Balance));\\\\n\\\\n        // Allow for a withdrawal to be canceled if an empty signature is \\\\n        // passed in. Should have *specific* cancellation action, not just\\\\n        // any invalid sig\\\\n        bytes memory b = new bytes(65);\\\\n        if (keccak256(resolver.responderSignature) == keccak256(b)) {\\\\n            // Withdraw should be cancelled, no state manipulation needed\\\\n        } else {\\\\n            require(\\\\n                state.data.checkSignature(\\\\n                    resolver.responderSignature,\\\\n                    state.responder\\\\n                ),\\\\n                \\\\\\"Withdraw: INVALID_RESPONDER_SIG\\\\\\"\\\\n            );\\\\n            // Reduce withdraw amount by optional fee\\\\n            // It\'s up to the offchain validators to ensure that the withdraw commitment takes this fee into account\\\\n            balance.amount[1] = state.fee;\\\\n            balance.amount[0] = 0;\\\\n        }\\\\n\\\\n        return balance;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x012e5deb93a2d67452884dff9179274801a30abf2455833eb4c59a42a87c50b0\\",\\"license\\":\\"UNLICENSED\\"}},\\"version\\":1}","bytecode":"0x608060405234801561001057600080fd5b50611263806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638052474d1161005b5780638052474d146100bd5780638de8b77e146100c55780638ef98a7e146100cd57806394184ba9146100ed5761007d565b80630528aa1c14610082578063206162be146100a05780633722aff9146100b5575b600080fd5b61008a61010d565b6040516100979190610d6e565b60405180910390f35b6100a861015c565b6040516100979190611060565b61008a610368565b61008a6103a1565b61008a6103c5565b6100e06100db3660046109fc565b6103e1565b6040516100979190610ff6565b6101006100fb366004610993565b6104ca565b6040516100979190610d45565b60606101176107b0565b604080516041808252608082019092529060208201818036833750505081526040516101479082906020016110f0565b60405160208183030381529060405291505090565b6101646107c3565b6040518060a00160405280306001600160a01b0316638052474d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156101a857600080fd5b505afa1580156101bc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101e49190810190610a92565b8152602001306001600160a01b03168152602001306001600160a01b0316638de8b77e6040518163ffffffff1660e01b815260040160006040518083038186803b15801561023157600080fd5b505afa158015610245573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261026d9190810190610a92565b8152602001306001600160a01b0316633722aff96040518163ffffffff1660e01b815260040160006040518083038186803b1580156102ab57600080fd5b505afa1580156102bf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102e79190810190610a92565b8152602001306001600160a01b0316630528aa1c6040518163ffffffff1660e01b815260040160006040518083038186803b15801561032557600080fd5b505afa158015610339573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103619190810190610a92565b9052905090565b6040518060400160405280601f81526020017f7475706c6528627974657320726573706f6e6465725369676e6174757265290081525081565b60405180604001604052806008815260200167576974686472617760c01b81525081565b6040518060c00160405280608f815260200161119f608f913981565b6103e96107fb565b6103f1610820565b6103fd85870187610c02565b90506104076107b0565b61041384860186610b97565b905061041d6107fb565b610429898b018b610ac5565b60408051604180825260808201909252919250606091906020820181803683370190505090508080519060200120836000015180519060200120141561046e576104bc565b825160408501516060860151610485929091610608565b6104aa5760405162461bcd60e51b81526004016104a190610fbf565b60405180910390fd5b60a08401518251602001528151600090525b509998505050505050505050565b60006104d4610820565b6104e083850185610c02565b90506104ea6107fb565b6104f686880188610ac5565b8051602001519091501561051c5760405162461bcd60e51b81526004016104a190610f1f565b60208201516001600160a01b031615801590610544575060408201516001600160a01b031615155b6105605760405162461bcd60e51b81526004016104a190610df6565b60608201516105815760405162461bcd60e51b81526004016104a190610f62565b60808201516105a25760405162461bcd60e51b81526004016104a190610f90565b80515160a083015111156105c85760405162461bcd60e51b81526004016104a190610ea6565b8151602083015160608401516105df929091610608565b6105fb5760405162461bcd60e51b81526004016104a190610e6f565b5060019695505050505050565b6000816001600160a01b031661061e8585610630565b6001600160a01b031614949350505050565b60008061063c84610652565b90506106488184610682565b9150505b92915050565b6000816040516020016106659190610d14565b604051602081830303815290604052805190602001209050919050565b600081516041146106a55760405162461bcd60e51b81526004016104a190610dbf565b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156106f75760405162461bcd60e51b81526004016104a190610e2d565b8060ff16601b1415801561070f57508060ff16601c14155b1561072c5760405162461bcd60e51b81526004016104a190610edd565b6000600187838686604051600081526020016040526040516107519493929190610d50565b6020604051602081039080840390855afa158015610773573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166107a65760405162461bcd60e51b81526004016104a190610d88565b9695505050505050565b6040518060200160405280606081525090565b6040518060a001604052806060815260200160006001600160a01b031681526020016060815260200160608152602001606081525090565b604051806040016040528061080e610883565b815260200161081b610883565b905290565b6040518061010001604052806060815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008019168152602001600081526020016000815260200160006001600160a01b03168152602001606081525090565b60405180604001604052806002906020820280368337509192915050565b803561064c81611186565b60008083601f8401126108bd578182fd5b50813567ffffffffffffffff8111156108d4578182fd5b6020830191508360208285010111156108ec57600080fd5b9250929050565b600082601f830112610903578081fd5b813561091661091182611132565b61110b565b915080825283602082850101111561092d57600080fd5b8060208401602084013760009082016020015292915050565b600082601f830112610956578081fd5b815161096461091182611132565b915080825283602082850101111561097b57600080fd5b61098c816020840160208601611156565b5092915050565b600080600080604085870312156109a8578384fd5b843567ffffffffffffffff808211156109bf578586fd5b6109cb888389016108ac565b909650945060208701359150808211156109e3578384fd5b506109f0878288016108ac565b95989497509550505050565b60008060008060008060608789031215610a14578182fd5b863567ffffffffffffffff80821115610a2b578384fd5b610a378a838b016108ac565b90985096506020890135915080821115610a4f578384fd5b610a5b8a838b016108ac565b90965094506040890135915080821115610a73578384fd5b50610a8089828a016108ac565b979a9699509497509295939492505050565b600060208284031215610aa3578081fd5b815167ffffffffffffffff811115610ab9578182fd5b61064884828501610946565b600060808284031215610ad6578081fd5b610ae0604061110b565b83601f840112610aee578182fd5b610af8604061110b565b80846040860187811115610b0a578586fd5b855b6002811015610b2b578235855260209485019490920191600101610b0c565b5082855287605f880112610b3d578586fd5b610b47604061110b565b9350839250905060808601871015610b5d578485fd5b845b6002811015610b88578135610b7381611186565b84526020938401939190910190600101610b5f565b50506020830152509392505050565b600060208284031215610ba8578081fd5b813567ffffffffffffffff80821115610bbf578283fd5b9083019060208286031215610bd2578283fd5b610bdc602061110b565b823582811115610bea578485fd5b610bf6878286016108f3565b82525095945050505050565b600060208284031215610c13578081fd5b813567ffffffffffffffff80821115610c2a578283fd5b8184019150610100808387031215610c40578384fd5b610c498161110b565b9050823582811115610c59578485fd5b610c65878286016108f3565b825250610c7586602085016108a1565b6020820152610c8786604085016108a1565b6040820152606083013560608201526080830135608082015260a083013560a0820152610cb78660c085016108a1565b60c082015260e083013582811115610ccd578485fd5b610cd9878286016108f3565b60e08301525095945050505050565b60008151808452610d00816020860160208601611156565b601f01601f19169290920160200192915050565b7f16566563746f72205369676e6564204d6573736167653a0a33320000000000008152601a810191909152603a0190565b901515815260200190565b93845260ff9290921660208401526040830152606082015260800190565b600060208252610d816020830184610ce8565b9392505050565b60208082526018908201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604082015260600190565b6020808252601f908201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604082015260600190565b60208082526017908201527f57697468647261773a20454d5054595f5349474e455253000000000000000000604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604082015261756560f01b606082015260800190565b6020808252601f908201527f57697468647261773a20494e56414c49445f494e49544941544f525f53494700604082015260600190565b6020808252601e908201527f57697468647261773a20494e53554646494349454e545f42414c414e43450000604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604082015261756560f01b606082015260800190565b60208082526023908201527f57697468647261773a204e4f4e5a45524f5f524543495049454e545f42414c416040820152624e434560e81b606082015260800190565b60208082526014908201527357697468647261773a20454d5054595f4441544160601b604082015260600190565b60208082526015908201527457697468647261773a20454d5054595f4e4f4e434560581b604082015260600190565b6020808252601f908201527f57697468647261773a20494e56414c49445f524553504f4e4445525f53494700604082015260600190565b815160808201908260005b6002811015611020578251825260209283019290910190600101611001565b5050506020808401516040840160005b60028110156110565782516001600160a01b031682529183019190830190600101611030565b5050505092915050565b600060208252825160a0602084015261107c60c0840182610ce8565b905060018060a01b0360208501511660408401526040840151601f19808584030160608601526110ac8383610ce8565b925060608601519150808584030160808601526110c98383610ce8565b925060808601519150808584030160a0860152506110e78282610ce8565b95945050505050565b60006020825282516020808401526106486040840182610ce8565b60405181810167ffffffffffffffff8111828210171561112a57600080fd5b604052919050565b600067ffffffffffffffff821115611148578081fd5b50601f01601f191660200190565b60005b83811015611171578181015183820152602001611159565b83811115611180576000848401525b50505050565b6001600160a01b038116811461119b57600080fd5b5056fe7475706c6528627974657320696e69746961746f725369676e61747572652c206164647265737320696e69746961746f722c206164647265737320726573706f6e6465722c206279746573333220646174612c2075696e74323536206e6f6e63652c2075696e74323536206665652c20616464726573732063616c6c546f2c2062797465732063616c6c4461746129a2646970667358221220e6c29ec66c4575ed5816330cc0372206a95865e0e0b591d5a21001f4a374293764736f6c63430007010033","deployedBytecode":"0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80638052474d1161005b5780638052474d146100bd5780638de8b77e146100c55780638ef98a7e146100cd57806394184ba9146100ed5761007d565b80630528aa1c14610082578063206162be146100a05780633722aff9146100b5575b600080fd5b61008a61010d565b6040516100979190610d6e565b60405180910390f35b6100a861015c565b6040516100979190611060565b61008a610368565b61008a6103a1565b61008a6103c5565b6100e06100db3660046109fc565b6103e1565b6040516100979190610ff6565b6101006100fb366004610993565b6104ca565b6040516100979190610d45565b60606101176107b0565b604080516041808252608082019092529060208201818036833750505081526040516101479082906020016110f0565b60405160208183030381529060405291505090565b6101646107c3565b6040518060a00160405280306001600160a01b0316638052474d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156101a857600080fd5b505afa1580156101bc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101e49190810190610a92565b8152602001306001600160a01b03168152602001306001600160a01b0316638de8b77e6040518163ffffffff1660e01b815260040160006040518083038186803b15801561023157600080fd5b505afa158015610245573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261026d9190810190610a92565b8152602001306001600160a01b0316633722aff96040518163ffffffff1660e01b815260040160006040518083038186803b1580156102ab57600080fd5b505afa1580156102bf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102e79190810190610a92565b8152602001306001600160a01b0316630528aa1c6040518163ffffffff1660e01b815260040160006040518083038186803b15801561032557600080fd5b505afa158015610339573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103619190810190610a92565b9052905090565b6040518060400160405280601f81526020017f7475706c6528627974657320726573706f6e6465725369676e6174757265290081525081565b60405180604001604052806008815260200167576974686472617760c01b81525081565b6040518060c00160405280608f815260200161119f608f913981565b6103e96107fb565b6103f1610820565b6103fd85870187610c02565b90506104076107b0565b61041384860186610b97565b905061041d6107fb565b610429898b018b610ac5565b60408051604180825260808201909252919250606091906020820181803683370190505090508080519060200120836000015180519060200120141561046e576104bc565b825160408501516060860151610485929091610608565b6104aa5760405162461bcd60e51b81526004016104a190610fbf565b60405180910390fd5b60a08401518251602001528151600090525b509998505050505050505050565b60006104d4610820565b6104e083850185610c02565b90506104ea6107fb565b6104f686880188610ac5565b8051602001519091501561051c5760405162461bcd60e51b81526004016104a190610f1f565b60208201516001600160a01b031615801590610544575060408201516001600160a01b031615155b6105605760405162461bcd60e51b81526004016104a190610df6565b60608201516105815760405162461bcd60e51b81526004016104a190610f62565b60808201516105a25760405162461bcd60e51b81526004016104a190610f90565b80515160a083015111156105c85760405162461bcd60e51b81526004016104a190610ea6565b8151602083015160608401516105df929091610608565b6105fb5760405162461bcd60e51b81526004016104a190610e6f565b5060019695505050505050565b6000816001600160a01b031661061e8585610630565b6001600160a01b031614949350505050565b60008061063c84610652565b90506106488184610682565b9150505b92915050565b6000816040516020016106659190610d14565b604051602081830303815290604052805190602001209050919050565b600081516041146106a55760405162461bcd60e51b81526004016104a190610dbf565b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156106f75760405162461bcd60e51b81526004016104a190610e2d565b8060ff16601b1415801561070f57508060ff16601c14155b1561072c5760405162461bcd60e51b81526004016104a190610edd565b6000600187838686604051600081526020016040526040516107519493929190610d50565b6020604051602081039080840390855afa158015610773573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166107a65760405162461bcd60e51b81526004016104a190610d88565b9695505050505050565b6040518060200160405280606081525090565b6040518060a001604052806060815260200160006001600160a01b031681526020016060815260200160608152602001606081525090565b604051806040016040528061080e610883565b815260200161081b610883565b905290565b6040518061010001604052806060815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008019168152602001600081526020016000815260200160006001600160a01b03168152602001606081525090565b60405180604001604052806002906020820280368337509192915050565b803561064c81611186565b60008083601f8401126108bd578182fd5b50813567ffffffffffffffff8111156108d4578182fd5b6020830191508360208285010111156108ec57600080fd5b9250929050565b600082601f830112610903578081fd5b813561091661091182611132565b61110b565b915080825283602082850101111561092d57600080fd5b8060208401602084013760009082016020015292915050565b600082601f830112610956578081fd5b815161096461091182611132565b915080825283602082850101111561097b57600080fd5b61098c816020840160208601611156565b5092915050565b600080600080604085870312156109a8578384fd5b843567ffffffffffffffff808211156109bf578586fd5b6109cb888389016108ac565b909650945060208701359150808211156109e3578384fd5b506109f0878288016108ac565b95989497509550505050565b60008060008060008060608789031215610a14578182fd5b863567ffffffffffffffff80821115610a2b578384fd5b610a378a838b016108ac565b90985096506020890135915080821115610a4f578384fd5b610a5b8a838b016108ac565b90965094506040890135915080821115610a73578384fd5b50610a8089828a016108ac565b979a9699509497509295939492505050565b600060208284031215610aa3578081fd5b815167ffffffffffffffff811115610ab9578182fd5b61064884828501610946565b600060808284031215610ad6578081fd5b610ae0604061110b565b83601f840112610aee578182fd5b610af8604061110b565b80846040860187811115610b0a578586fd5b855b6002811015610b2b578235855260209485019490920191600101610b0c565b5082855287605f880112610b3d578586fd5b610b47604061110b565b9350839250905060808601871015610b5d578485fd5b845b6002811015610b88578135610b7381611186565b84526020938401939190910190600101610b5f565b50506020830152509392505050565b600060208284031215610ba8578081fd5b813567ffffffffffffffff80821115610bbf578283fd5b9083019060208286031215610bd2578283fd5b610bdc602061110b565b823582811115610bea578485fd5b610bf6878286016108f3565b82525095945050505050565b600060208284031215610c13578081fd5b813567ffffffffffffffff80821115610c2a578283fd5b8184019150610100808387031215610c40578384fd5b610c498161110b565b9050823582811115610c59578485fd5b610c65878286016108f3565b825250610c7586602085016108a1565b6020820152610c8786604085016108a1565b6040820152606083013560608201526080830135608082015260a083013560a0820152610cb78660c085016108a1565b60c082015260e083013582811115610ccd578485fd5b610cd9878286016108f3565b60e08301525095945050505050565b60008151808452610d00816020860160208601611156565b601f01601f19169290920160200192915050565b7f16566563746f72205369676e6564204d6573736167653a0a33320000000000008152601a810191909152603a0190565b901515815260200190565b93845260ff9290921660208401526040830152606082015260800190565b600060208252610d816020830184610ce8565b9392505050565b60208082526018908201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604082015260600190565b6020808252601f908201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604082015260600190565b60208082526017908201527f57697468647261773a20454d5054595f5349474e455253000000000000000000604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604082015261756560f01b606082015260800190565b6020808252601f908201527f57697468647261773a20494e56414c49445f494e49544941544f525f53494700604082015260600190565b6020808252601e908201527f57697468647261773a20494e53554646494349454e545f42414c414e43450000604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604082015261756560f01b606082015260800190565b60208082526023908201527f57697468647261773a204e4f4e5a45524f5f524543495049454e545f42414c416040820152624e434560e81b606082015260800190565b60208082526014908201527357697468647261773a20454d5054595f4441544160601b604082015260600190565b60208082526015908201527457697468647261773a20454d5054595f4e4f4e434560581b604082015260600190565b6020808252601f908201527f57697468647261773a20494e56414c49445f524553504f4e4445525f53494700604082015260600190565b815160808201908260005b6002811015611020578251825260209283019290910190600101611001565b5050506020808401516040840160005b60028110156110565782516001600160a01b031682529183019190830190600101611030565b5050505092915050565b600060208252825160a0602084015261107c60c0840182610ce8565b905060018060a01b0360208501511660408401526040840151601f19808584030160608601526110ac8383610ce8565b925060608601519150808584030160808601526110c98383610ce8565b925060808601519150808584030160a0860152506110e78282610ce8565b95945050505050565b60006020825282516020808401526106486040840182610ce8565b60405181810167ffffffffffffffff8111828210171561112a57600080fd5b604052919050565b600067ffffffffffffffff821115611148578081fd5b50601f01601f191660200190565b60005b83811015611171578181015183820152602001611159565b83811115611180576000848401525b50505050565b6001600160a01b038116811461119b57600080fd5b5056fe7475706c6528627974657320696e69746961746f725369676e61747572652c206164647265737320696e69746961746f722c206164647265737320726573706f6e6465722c206279746573333220646174612c2075696e74323536206e6f6e63652c2075696e74323536206665652c20616464726573732063616c6c546f2c2062797465732063616c6c4461746129a2646970667358221220e6c29ec66c4575ed5816330cc0372206a95865e0e0b591d5a21001f4a374293764736f6c63430007010033","devdoc":{"author":"Connext <support@connext.network>","kind":"dev","methods":{},"title":"Withdraw","version":1},"userdoc":{"kind":"user","methods":{},"notice":"This contract burns the initiator\'s funds if a mutually signed         withdraw commitment can be generated","version":1},"storageLayout":{"storage":[],"types":null}}')},2890:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.waitForTransaction=n.VectorChainService=n.VectorChainReader=void 0;var r=t(1004);Object.defineProperty(n,"VectorChainReader",{enumerable:!0,get:function(){return r.EthereumChainReader}});var d=t(2892);Object.defineProperty(n,"VectorChainService",{enumerable:!0,get:function(){return d.EthereumChainService}}),Object.defineProperty(n,"waitForTransaction",{enumerable:!0,get:function(){return d.waitForTransaction}})},2892:function(e,n,t){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.EthereumChainService=n.waitForTransaction=n.BIG_GAS_LIMIT=n.EXTRA_GAS=void 0;const d=t(27),o=t(50),c=t(640),f=t(199),l=t(1071),y=t(173),m=t(3159),h=r(t(2893)),v=t(486),T=t(953),C=t(213),w=t(471),I=t(1004);n.EXTRA_GAS=5e4,n.BIG_GAS_LIMIT=f.BigNumber.from(1e6);n.waitForTransaction=async(e,n,t,r)=>{try{const o=await e.waitForTransaction(n,t,r);return 0===o.status?d.Result.fail(new d.ChainError(d.ChainError.reasons.TxReverted,{receipt:o})):d.Result.ok(o)}catch(e){return d.Result.fail(e)}};class E extends I.EthereumChainReader{constructor(e,n,t,r,o=1){super(n,r.child({module:"EthereumChainService"})),this.store=e,this.defaultRetries=o,this.signers=new Map,this.queue=new h.default({concurrency:1}),this.evts={[d.EngineEvents.TRANSACTION_SUBMITTED]:new C.Evt,[d.EngineEvents.TRANSACTION_MINED]:new C.Evt,[d.EngineEvents.TRANSACTION_FAILED]:new C.Evt},Object.entries(n).forEach((([e,n])=>{this.signers.set(parseInt(e),"string"==typeof t?new m.Wallet(t,n):t.connect(n))}))}async sendDisputeChannelTx(e){const n=this.signers.get(e.networkContext.chainId);return(null==n?void 0:n._isSigner)?e.latestUpdate.aliceSignature&&e.latestUpdate.bobSignature?this.sendTxWithRetries(e.channelAddress,e.networkContext.chainId,d.TransactionReason.disputeChannel,(()=>new l.Contract(e.channelAddress,w.VectorChannel.abi,n).disputeChannel(e,e.latestUpdate.aliceSignature,e.latestUpdate.bobSignature))):d.Result.fail(new d.ChainError(d.ChainError.reasons.MissingSigs)):d.Result.fail(new d.ChainError(d.ChainError.reasons.SignerNotFound))}async sendDefundChannelTx(e,n=e.assetIds,t=[]){const r=this.signers.get(e.networkContext.chainId);return(null==r?void 0:r._isSigner)?e.latestUpdate.aliceSignature&&e.latestUpdate.bobSignature?this.sendTxWithRetries(e.channelAddress,e.networkContext.chainId,d.TransactionReason.defundChannel,(()=>new l.Contract(e.channelAddress,w.VectorChannel.abi,r).defundChannel(e,n,t))):d.Result.fail(new d.ChainError(d.ChainError.reasons.MissingSigs)):d.Result.fail(new d.ChainError(d.ChainError.reasons.SignerNotFound))}async sendDisputeTransferTx(e,n){const t=n.find((n=>n.transferId===e));if(!t)return d.Result.fail(new d.ChainError(d.ChainError.reasons.TransferNotFound,{transfer:e,active:n.map((e=>e.transferId))}));const r=this.signers.get(t.chainId);if(!(null==r?void 0:r._isSigner))return d.Result.fail(new d.ChainError(d.ChainError.reasons.SignerNotFound));const c=n.map((e=>o.bufferify(o.hashCoreTransferState(e)))),f=o.bufferify(o.hashCoreTransferState(t)),m=new T.MerkleTree(c,y.keccak256);return this.sendTxWithRetries(t.channelAddress,t.chainId,d.TransactionReason.disputeTransfer,(()=>new l.Contract(t.channelAddress,w.VectorChannel.abi,r).disputeTransfer(t,m.getHexProof(f))))}async sendDefundTransferTx(e,n=v.HashZero){const t=this.signers.get(e.chainId);if(!(null==t?void 0:t._isSigner))return d.Result.fail(new d.ChainError(d.ChainError.reasons.SignerNotFound));if(!e.transferResolver)return d.Result.fail(new d.ChainError(d.ChainError.reasons.ResolverNeeded));const r=o.encodeTransferState(e.transferState,e.transferEncodings[0]),c=o.encodeTransferResolver(e.transferResolver,e.transferEncodings[1]);return this.sendTxWithRetries(e.channelAddress,e.chainId,d.TransactionReason.defundTransfer,(()=>new l.Contract(e.channelAddress,w.VectorChannel.abi,t).defundTransfer(e,r,c,n)))}async sendDeployChannelTx(e,t,r){const f="sendDeployChannelTx",y=o.getRandomBytes32(),m=this.signers.get(e.networkContext.chainId);if(!(null==m?void 0:m._isSigner))return d.Result.fail(new d.ChainError(d.ChainError.reasons.SignerNotFound));const h=await m.getAddress(),T=await this.getCode(e.channelAddress,e.networkContext.chainId);if(T.isError)return d.Result.fail(T.getError());if("0x"!==T.getValue())return d.Result.fail(new d.ChainError(d.ChainError.reasons.MultisigDeployed));const C=new l.Contract(e.networkContext.channelFactoryAddress,w.ChannelFactory.abi,m);if(!r){this.log.info({channelAddress:e.channelAddress,sender:h,method:f,methodId:y},"Deploying channel without deposit");const r=await this.sendTxWithRetries(e.channelAddress,e.networkContext.chainId,d.TransactionReason.deploy,(async()=>{const r=await this.getCode(e.channelAddress,e.networkContext.chainId);return r.isError?d.Result.fail(r.getError()):"0x"===r.getValue()?C.createChannel(e.alice,e.bob,{gasPrice:t,gasLimit:n.BIG_GAS_LIMIT}):void 0}));return r.isError||r.getValue()?r:d.Result.fail(new d.ChainError(d.ChainError.reasons.MultisigDeployed))}if(h!==e.alice)return d.Result.fail(new d.ChainError(d.ChainError.reasons.FailedToDeploy,{message:"Sender is not alice",sender:h,alice:e.alice,channel:e.channelAddress}));const{assetId:I,amount:E}=r,x=await this.getOnchainBalance(I,e.alice,e.networkContext.chainId);if(x.isError)return d.Result.fail(x.getError());const S=x.getValue();if(S.lt(E))return d.Result.fail(new d.ChainError(d.ChainError.reasons.NotEnoughFunds,{balance:S.toString(),amount:E,assetId:I,chainId:e.networkContext.chainId}));if(this.log.info({balance:S.toString(),method:f,methodId:y,assetId:I,chainId:e.networkContext.chainId},"Onchain balance sufficient"),I===v.AddressZero)return this.sendTxWithRetries(e.channelAddress,e.networkContext.chainId,d.TransactionReason.deployWithDepositAlice,(async()=>{const r=await this.getCode(e.channelAddress,e.networkContext.chainId);if(r.isError)return d.Result.fail(r.getError());if("0x"!==r.getValue())return this.sendDepositATx(e,E,v.AddressZero,t);new c.Interface(w.ChannelFactory.abi).encodeFunctionData("createChannelAndDepositAlice",[e.alice,e.bob,I,E]);return C.createChannelAndDepositAlice(e.alice,e.bob,I,E,{value:E,gasPrice:t,gasLimit:n.BIG_GAS_LIMIT})}));this.log.info({assetId:I,amount:E,channel:e.channelAddress,sender:h},"Approving tokens");const A=await this.approveTokens(e.channelAddress,e.networkContext.channelFactoryAddress,h,E,I,e.networkContext.chainId,t);if(A.isError)return d.Result.fail(A.getError());if(A.getValue()){const n=await A.getValue().wait(d.getConfirmationsForChain(e.networkContext.chainId));if(0===n.status)return d.Result.fail(new d.ChainError(d.ChainError.reasons.TxReverted,{receipt:n}));this.log.info({txHash:n.transactionHash,method:f,assetId:I},"Token approval confirmed")}return this.sendTxWithRetries(e.channelAddress,e.networkContext.chainId,d.TransactionReason.deployWithDepositAlice,(async()=>{const r=await this.getCode(e.channelAddress,e.networkContext.chainId);return r.isError?d.Result.fail(r.getError()):"0x"!==r.getValue()?this.sendDepositATx(e,E,I,t):C.createChannelAndDepositAlice(e.alice,e.bob,I,E,{gasPrice:t,gasLimit:n.BIG_GAS_LIMIT})}))}async sendWithdrawTx(e,t){var r;const c="sendWithdrawTx",f=o.getRandomBytes32(),l=this.signers.get(e.networkContext.chainId);if(!(null==l?void 0:l._isSigner))return d.Result.fail(new d.ChainError(d.ChainError.reasons.SignerNotFound));const y=await l.getAddress();if(e.alice!==y&&e.bob!==y)return d.Result.fail(new d.ChainError(d.ChainError.reasons.SenderNotInChannel));const m=await this.getCode(e.channelAddress,e.networkContext.chainId);if(m.isError)return d.Result.fail(m.getError());const h=await this.getGasPrice(e.networkContext.chainId);h.isError&&d.Result.fail(h.getError());const v=h.getValue();if(this.log.info({channelAddress:e.channelAddress,sender:y,method:c,methodId:f,gasPrice:v.toString(),chainId:e.networkContext.chainId},"Got gas price"),"0x"===m.getValue()){this.log.info({channelAddress:e.channelAddress,sender:y,method:c,methodId:f},"Deploying channel");const n=await this.sendDeployChannelTx(e,v);if(n.isError&&(null===(r=n.getError())||void 0===r?void 0:r.message)!==d.ChainError.reasons.MultisigDeployed)return d.Result.fail(new d.ChainError(d.ChainError.reasons.FailedToDeploy,{method:c,error:n.getError().message,channel:e.channelAddress}));const t=n.isError?void 0:n.getValue();if(t){this.log.info({method:c,methodId:f,deployTx:t.hash},"Deploy tx broadcast");try{this.log.debug({method:c,methodId:f},"Waiting for event to be emitted");const n=await t.wait(d.getConfirmationsForChain(e.networkContext.chainId));if(0===n.status)return d.Result.fail(new d.ChainError(d.ChainError.reasons.TxReverted,{receipt:n,deployTx:t.hash,channel:e.channelAddress,chainId:e.networkContext.chainId}))}catch(n){return this.log.error({method:c,methodId:f,error:d.jsonifyError(n)},"Caught error waiting for tx"),d.Result.fail(new d.ChainError(d.ChainError.reasons.FailedToDeploy,{error:n.message,deployTx:t.hash,channel:e.channelAddress,chainId:e.networkContext.chainId}))}this.log.debug({method:c,methodId:f},"Deploy tx mined")}else this.log.info({method:c,methodId:f},"Multisig already deployed")}return this.log.info({sender:y,method:c,methodId:f,channel:e.channelAddress},"Sending withdraw tx to chain"),this.sendTxWithRetries(e.channelAddress,e.networkContext.chainId,d.TransactionReason.withdraw,(async()=>l.sendTransaction(Object.assign(Object.assign({},t),{gasPrice:v,gasLimit:n.BIG_GAS_LIMIT,from:y}))))}async sendDepositTx(e,n,t,r){var c,l;const y="sendDepositTx",m=o.getRandomBytes32(),h=this.signers.get(e.networkContext.chainId);if(!(null==h?void 0:h._isSigner))return d.Result.fail(new d.ChainError(d.ChainError.reasons.SignerNotFound));if(e.alice!==n&&e.bob!==n)return d.Result.fail(new d.ChainError(d.ChainError.reasons.SenderNotInChannel));if(f.BigNumber.from(t).isNegative())return d.Result.fail(new d.ChainError(d.ChainError.reasons.NegativeDepositAmount));const v=await this.getCode(e.channelAddress,e.networkContext.chainId);if(v.isError)return d.Result.fail(v.getError());this.log.info({method:y,methodId:m,chainId:e.networkContext.chainId},"Getting gas price");const T=await this.getGasPrice(e.networkContext.chainId);T.isError&&d.Result.fail(T.getError());const C=T.getValue();this.log.info({channelAddress:e.channelAddress,sender:n,method:y,methodId:m,gasPrice:C.toString(),chainId:e.networkContext.chainId},"Got gas price");if("0x"===v.getValue()&&n===e.alice)return this.log.info({method:y,methodId:m,channelAddress:e.channelAddress,assetId:r,amount:t,senderAddress:await h.getAddress()},"Deploying channel with deposit"),this.sendDeployChannelTx(e,C,{amount:t,assetId:r});const w=await this.getOnchainBalance(r,n,e.networkContext.chainId);if(w.isError)return d.Result.fail(w.getError());const I=w.getValue();if(I.lt(t))return d.Result.fail(new d.ChainError(d.ChainError.reasons.NotEnoughFunds,{balance:I.toString(),amount:t,assetId:r,chainId:e.networkContext.chainId}));if(this.log.info({balance:I.toString(),method:y,methodId:m,assetId:r,chainId:e.networkContext.chainId},"Onchain balance sufficient"),this.log.info({method:y,methodId:m,assetId:r,amount:t},"Channel is deployed, sending deposit"),n===e.alice){this.log.info({method:y,sender:n,alice:e.alice,bob:e.bob},"Detected participant A, sending tx");const d=await this.sendDepositATx(e,t,r,C);return d.isError?this.log.error({method:y,error:null===(c=d.getError())||void 0===c?void 0:c.message},"Error sending tx"):this.log.info({method:y,txHash:d.getValue().hash},"Submitted tx"),d}{this.log.info({method:y,sender:n,alice:e.alice,bob:e.bob},"Detected participant B, sendng tx");const d=await this.sendDepositBTx(e,t,r,C);return d.isError?this.log.error({method:y,error:null===(l=d.getError())||void 0===l?void 0:l.message},"Error sending tx"):this.log.info({method:y,txHash:d.getValue().hash},"Submitted tx"),d}}on(e,n,filter=(()=>!0)){this.evts[e].pipe(filter).attach(n)}once(e,n,filter=(()=>!0)){this.evts[e].pipe(filter).attachOnce(n)}off(e){e?this.evts[e].detach():Object.values(this.evts).forEach((e=>e.detach()))}waitFor(e,n,filter=(()=>!0)){return this.evts[e].pipe(filter).waitFor(n)}async sendTxWithRetries(e,n,t,r){const c="sendTxWithRetries",f=o.getRandomBytes32(),l=[];for(let d=1;d++;d<this.defaultRetries){this.log.info({method:c,methodId:f,retries:this.defaultRetries,attempt:d,channelAddress:e,reason:t},"Attempting to send tx");const y=await this.sendTxAndParseResponse(e,n,t,r);if(!y.isError)return y;const m=y.getError();if(!m.canRetry)return this.log.error({error:m.message,channelAddress:e,reason:t,stack:m.stack,method:c,methodId:f},"Failed to send tx, will not retry"),y;l.push(m),this.log.warn({error:m.message,channelAddress:e,attempt:d,retries:this.defaultRetries,method:c,methodId:f},"Tx failed, waiting before retry"),await o.delay(1e3)}return d.Result.fail(new d.ChainError(d.ChainError.reasons.FailedToSendTx,{errors:l.map((e=>e.message)).toString(),retries:this.defaultRetries,channelAddress:e,reason:t}))}async sendTxAndParseResponse(e,n,t,r){try{const o=await this.queue.add((async()=>{const o=await r();return o?(await this.store.saveTransactionResponse(e,t,o),this.evts[d.EngineEvents.TRANSACTION_SUBMITTED].post({response:Object.fromEntries(Object.entries(o).map((([e,n])=>[e,f.BigNumber.isBigNumber(n)?n.toString():n]))),channelAddress:e,reason:t}),o.wait(d.getConfirmationsForChain(n)).then((async n=>{0===n.status?(this.log.error({method:"sendTxAndParseResponse",receipt:n},"Transaction reverted"),await this.store.saveTransactionFailure(e,o.hash,"Tx reverted"),this.evts[d.EngineEvents.TRANSACTION_FAILED].post({receipt:Object.fromEntries(Object.entries(n).map((([e,n])=>[e,f.BigNumber.isBigNumber(n)?n.toString():n]))),channelAddress:e,reason:t})):(await this.store.saveTransactionReceipt(e,n),this.evts[d.EngineEvents.TRANSACTION_MINED].post({receipt:Object.fromEntries(Object.entries(n).map((([e,n])=>[e,f.BigNumber.isBigNumber(n)?n.toString():n]))),channelAddress:e,reason:t}))})).catch((async n=>{this.log.error({method:"sendTxAndParseResponse",error:d.jsonifyError(n)},"Transaction reverted"),await this.store.saveTransactionFailure(e,o.hash,n.message),this.evts[d.EngineEvents.TRANSACTION_FAILED].post({error:n,channelAddress:e,reason:t})})),o):(this.log.warn({channelAddress:e,reason:t},"Did not attempt tx"),o)}));return o?d.Result.ok(Object.assign(Object.assign({},o),{completed:async n=>{try{const e=await o.wait(n);return 0===e.status?d.Result.fail(new d.ChainError(d.ChainError.reasons.TxReverted,{receipt:e})):d.Result.ok(e)}catch(n){return d.Result.fail(new d.ChainError(n.message,{stack:n.stack,channelAddress:e,reason:t}))}}})):d.Result.ok(o)}catch(e){let n=e;return e.message.includes("sender doesn't have enough funds")&&(n=new d.ChainError(d.ChainError.reasons.NotEnoughFunds)),d.Result.fail(n)}}async approveTokens(e,n,t,r,o,c,y,m=d.UINT_MAX){var h,v;const T="approveTokens";this.log.debug({method:T,channelAddress:e,spender:n,owner:t,approvalAmount:m,depositAmount:r,assetId:o,chainId:c,gasPrice:y.toString()},"Method started");const C=this.signers.get(c);if(!(null==C?void 0:C._isSigner))return d.Result.fail(new d.ChainError(d.ChainError.reasons.SignerNotFound));this.log.info({method:T,assetId:o,spender:n,owner:t,channelAddress:e},"Checking allowance");const w=new l.Contract(o,d.ERC20Abi,C),I=await this.getTokenAllowance(o,t,n,c);if(I.isError)return this.log.error({method:T,spender:n,owner:t,assetId:o,error:null===(h=I.getError())||void 0===h?void 0:h.message},"Error checking approved tokens for deposit A"),d.Result.fail(I.getError());const E=I.getValue();if(this.log.info({method:T,assetId:o,spender:n,owner:t,channelAddress:e,allowance:E.toString(),depositAmount:r},"Retrieved allowance"),f.BigNumber.from(I.getValue()).gte(r))return this.log.info({method:T,assetId:o,channelAddress:e},"Allowance is sufficient"),d.Result.ok(void 0);this.log.info({method:T,assetId:o,channelAddress:e,spender:n,owner:t,approvalAmount:m},"Approving tokens");const x=await this.sendTxWithRetries(e,c,d.TransactionReason.approveTokens,(()=>w.approve(n,m,{gasPrice:y})));if(x.isError)return this.log.error({method:T,spender:n,owner:t,assetId:o,approvalAmount:m,allowance:E.toString(),error:null===(v=x.getError())||void 0===v?void 0:v.message},"Error approving tokens for deposit A"),x;const S=x.getValue();return this.log.info({txHash:S.hash,method:T,assetId:o,approvalAmount:m},"Approve token tx submitted"),x}async sendDepositATx(e,n,t,r){var c;const f="sendDepositATx",y=o.getRandomBytes32(),m=this.signers.get(e.networkContext.chainId);if(!(null==m?void 0:m._isSigner))return d.Result.fail(new d.ChainError(d.ChainError.reasons.SignerNotFound));const h=new l.Contract(e.channelAddress,w.VectorChannel.abi,m);if(t!==v.AddressZero){this.log.info({method:f,methodId:y,assetId:t,channelAddress:e.channelAddress},"Approving token");const o=await this.approveTokens(e.channelAddress,e.channelAddress,e.alice,n,t,e.networkContext.chainId,r);if(o.isError)return this.log.error({method:f,methodId:y,channelAddress:e.channelAddress,error:null===(c=o.getError())||void 0===c?void 0:c.message},"Error approving tokens for deposit A"),d.Result.fail(o.getError());const l=o.getValue();if(l){const e=await l.wait();if(0===e.status)return d.Result.fail(new d.ChainError(d.ChainError.reasons.TxReverted,{receipt:e}))}return this.log.info({txHash:null==l?void 0:l.hash,method:f,methodId:y,assetId:t},"Token approval confirmed"),this.sendTxWithRetries(e.channelAddress,e.networkContext.chainId,d.TransactionReason.depositA,(()=>h.depositAlice(t,n,{gasPrice:r})))}return this.sendTxWithRetries(e.channelAddress,e.networkContext.chainId,d.TransactionReason.depositA,(()=>h.depositAlice(t,n,{value:n,gasPrice:r})))}async sendDepositBTx(e,n,t,r){const o=this.signers.get(e.networkContext.chainId);if(!(null==o?void 0:o._isSigner))return d.Result.fail(new d.ChainError(d.ChainError.reasons.SignerNotFound));const c=await o.getAddress();if(t===v.AddressZero)return this.sendTxWithRetries(e.channelAddress,e.networkContext.chainId,d.TransactionReason.depositB,(()=>o.sendTransaction({data:"0x",to:e.channelAddress,value:f.BigNumber.from(n),chainId:e.networkContext.chainId,gasPrice:r,from:c})));{const t=new l.Contract(e.networkContext.channelFactoryAddress,d.ERC20Abi,o);return this.sendTxWithRetries(e.channelAddress,e.networkContext.chainId,d.TransactionReason.depositB,(()=>t.transfer(e.channelAddress,n,{gasPrice:r})))}}}n.EthereumChainService=E},390:function(e,n,t){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,n,t,r){void 0===r&&(r=t),Object.defineProperty(e,r,{enumerable:!0,get:function(){return n[t]}})}:function(e,n,t,r){void 0===r&&(r=t),e[r]=n[t]}),d=this&&this.__exportStar||function(e,n){for(var p in e)"default"===p||Object.prototype.hasOwnProperty.call(n,p)||r(n,e,p)};Object.defineProperty(n,"__esModule",{value:!0}),d(t(471),n),d(t(2790),n),d(t(2793),n),d(t(2890),n)},471:function(e,n,t){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,n,t,r){void 0===r&&(r=t),Object.defineProperty(e,r,{enumerable:!0,get:function(){return n[t]}})}:function(e,n,t,r){void 0===r&&(r=t),e[r]=n[t]}),d=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)"default"!==t&&Object.prototype.hasOwnProperty.call(e,t)&&r(n,e,t);return d(n,e),n};Object.defineProperty(n,"__esModule",{value:!0}),n.Withdraw=n.VectorChannel=n.TransferRegistry=n.TransferDefinition=n.TestToken=n.TestLibIterableMapping=n.TestChannelFactory=n.TestChannel=n.ReentrantToken=n.NonconformingToken=n.HashlockTransfer=n.FailingToken=n.CMCAsset=n.ChannelMastercopy=n.ChannelFactory=n.artifacts=void 0;const c=o(t(2775));n.ChannelFactory=c;const f=o(t(2776));n.ChannelMastercopy=f;const l=o(t(2777));n.CMCAsset=l;const y=o(t(2778));n.FailingToken=y;const m=o(t(2779));n.HashlockTransfer=m;const h=o(t(2780));n.NonconformingToken=h;const v=o(t(2781));n.TestChannel=v;const T=o(t(2782));n.TestChannelFactory=T;const C=o(t(2783));n.TestToken=C;const w=o(t(2784));n.TransferDefinition=w;const I=o(t(2785));n.TransferRegistry=I;const E=o(t(2786));n.VectorChannel=E;const x=o(t(2787));n.Withdraw=x;const S=o(t(2788));n.TestLibIterableMapping=S;const A=o(t(2789));n.ReentrantToken=A,n.artifacts={ChannelFactory:c,ChannelMastercopy:f,CMCAsset:l,FailingToken:y,HashlockTransfer:m,NonconformingToken:h,ReentrantToken:A,TestChannel:v,TestChannelFactory:T,TestLibIterableMapping:S,TestToken:C,TransferDefinition:w,TransferRegistry:I,VectorChannel:E,Withdraw:x}}}]);
//# sourceMappingURL=5a7a710.js.map